/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-11-15 10:05:20.703234
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.0819)*x9);
x13=((0.08535)*x1);
x14=((0.0819)*x6);
x15=((0.08535)*x4);
x16=((1.0)*x11);
x17=((1.0)*x9);
x18=((0.0819)*x5);
x19=((0.24365)*x1);
x20=((1.0)*x5);
x21=((1.0)*x4);
x22=((1.0)*x1);
x23=((0.21325)*x4);
x24=(x0*x3);
x25=(x11*x2);
x26=(x3*x4);
x27=(x1*x3);
x28=(x0*x2);
x29=(x0*x10);
x30=(x1*x2);
x31=(x10*x16);
x32=(x22*x24);
x33=(x16*x27);
x34=(x30+x26);
x35=(((x22*x3))+(((-1.0)*x2*x21)));
x36=(x34*x5);
x37=(x35*x6);
x38=((((-1.0)*x32))+((x28*x4)));
x39=((((-1.0)*x33))+((x25*x4)));
x40=(((x22*x28))+((x21*x24)));
x41=(x16*((x30+x26)));
x42=(x39*x5);
x43=(x41*x6);
x44=(x40*x6);
x45=(((x6*(((((-1.0)*x21*x3))+(((-1.0)*x2*x22))))))+((x35*x5)));
x46=(x44+((x38*x5)));
x47=(x42+x43);
x48=(((x40*x5))+((x6*(((((-1.0)*x21*x28))+x32)))));
x49=(((x6*(((((-1.0)*x16*x2*x4))+x33))))+((x41*x5)));
x50=(x47*x9);
eerot[0]=(((x48*x8))+((x7*(((((-1.0)*x31))+((x46*x9)))))));
eerot[1]=(((x8*(((((-1.0)*x17*x46))+x31))))+((x48*x7)));
eerot[2]=((((-1.0)*x16*x9))+((x10*(((((-1.0)*x44))+(((-1.0)*x20*x38)))))));
IkReal x51=((1.0)*x28);
IkReal x52=((1.0)*x24);
eetrans[0]=(((x0*x19))+(((0.21325)*x1*x24))+((x5*(((((-1.0)*x13*x51))+(((-1.0)*x15*x52))))))+(((-1.0)*x11*x12))+(((-1.0)*x23*x51))+((x10*(((((-1.0)*x18*x38))+(((-1.0)*x14*x40))))))+(((-0.11235)*x11))+((x6*(((((-1.0)*x13*x52))+((x15*x28)))))));
eerot[3]=(((x49*x8))+((x7*((x50+x29)))));
eerot[4]=(((x49*x7))+((x8*(((((-1.0)*x29))+(((-1.0)*x17*x47)))))));
eerot[5]=(((x0*x9))+((x10*(((((-1.0)*x43))+(((-1.0)*x20*x39)))))));
IkReal x53=((1.0)*x25);
IkReal x54=((1.0)*x11*x3);
eetrans[1]=(((x10*(((((-1.0)*x18*x39))+(((-1.0)*x14*x41))))))+((x0*x12))+(((0.21325)*x11*x27))+(((0.11235)*x0))+((x11*x19))+(((-1.0)*x23*x53))+((x6*(((((-1.0)*x13*x54))+((x15*x25))))))+((x5*(((((-1.0)*x13*x53))+(((-1.0)*x15*x54)))))));
eerot[6]=(((x7*x9*((x37+x36))))+((x45*x8)));
eerot[7]=(((x45*x7))+((x8*x9*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x10*(((((-1.0)*x37))+(((-1.0)*x20*x34)))));
IkReal x55=((1.0)*x3);
eetrans[2]=((0.1519)+((x10*(((((-1.0)*x18*x34))+(((-1.0)*x14*x35))))))+((x5*(((((-1.0)*x13*x55))+((x15*x2))))))+(((-0.24365)*x4))+(((-1.0)*x23*x55))+((x6*((((x13*x2))+((x15*x3))))))+(((-0.21325)*x30)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0819)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.0819)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1519)+pz+(((-0.0819)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x56=((1.0)*px);
IkReal x57=((1.0)*pz);
IkReal x58=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x58))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x57)));
rxp0_2=((((-1.0)*r10*x56))+((py*r00)));
rxp1_0=((((-1.0)*r21*x58))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x57)));
rxp1_2=((((-1.0)*r11*x56))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x58)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x57)));
rxp2_2=((((-1.0)*r12*x56))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x59=((0.1707)*npx);
IkReal x60=((0.1707)*npy);
IkReal x61=((0.08535)*r22);
IkReal x62=((0.08535)*r21);
IkReal x63=((-0.08535)*r20);
IkReal x64=((-1.0)*r20);
IkReal x65=((-1.0)*rxp0_2);
IkReal x66=((-0.08535)*r21);
IkReal x67=((-1.0)*r21);
IkReal x68=((-1.0)*rxp1_2);
IkReal x69=((-1.0)*npx);
IkReal x70=((-1.0)*r22);
IkReal x71=((-1.0)*npz);
matrixinvcoeffs[0]=x63;
matrixinvcoeffs[1]=x59;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x64;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x65;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x63;
matrixinvcoeffs[19]=x59;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x64;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x65;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x66;
matrixinvcoeffs[33]=x60;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x67;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x68;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x66;
matrixinvcoeffs[51]=x60;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x67;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x68;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x70;
matrixinvcoeffs[76]=x61;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x71;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x61;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x68;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x66;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x68;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x62;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x64;
matrixinvcoeffs[133]=x69;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x64;
matrixinvcoeffs[151]=x69;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x63;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x70;
matrixinvcoeffs[165]=x71;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x61;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x70;
matrixinvcoeffs[183]=x71;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x67;
matrixinvcoeffs[204]=x62;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x68;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x62;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x69;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x63;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x64;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x63;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x65;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x72=pz*pz;
IkReal x73=pp*pp;
IkReal x74=((0.1707)*pz);
IkReal x75=(pp*r21);
IkReal x76=((0.1707)*rxp1_2);
IkReal x77=(gclwh13_1*pp);
IkReal x78=(gclwh9_0*r20);
IkReal x79=(npy*pz);
IkReal x80=((4.561674317235e-5)*r21);
IkReal x81=(npz*pz);
IkReal x82=(gclwh13_15*r21);
IkReal x83=((0.0072846225)*pz);
IkReal x84=(gclwh11_13*r22);
IkReal x85=((0.014569245)*r21);
IkReal x86=(gclwh8_12*r20);
IkReal x87=(gclwh15_1*r20);
IkReal x88=((2.0)*pp);
IkReal x89=(pp*r20);
IkReal x90=(pp*r22);
IkReal x91=(gclwh14_2*pz);
IkReal x92=(gclwh6_11*r21);
IkReal x93=((0.3414)*rxp0_2);
IkReal x94=(npx*pz);
IkReal x95=((0.001068933642)*rxp2_2);
IkReal x96=(gclwh15_10*r20);
IkReal x97=((0.853)*pp);
IkReal x98=(gclwh9_13*rxp0_2);
IkReal x99=(gclwh2_0*r21);
IkReal x100=((0.019178145)*rxp0_2);
IkReal x101=((0.2247)*gclwh15_15);
IkReal x102=(gclwh5_9*r22);
IkReal x103=(gclwh8_2*rxp0_2);
IkReal x104=((0.6828)*rxp2_2);
IkReal x105=((0.014569245)*rxp1_2);
IkReal x106=((0.15598566)*rxp0_2);
IkReal x107=(gclwh14_3*rxp0_2);
IkReal x108=(gclwh13_0*pz);
IkReal x109=(gclwh11_10*r22);
IkReal x110=(gclwh10_11*r22);
IkReal x111=((1.0)*pz);
IkReal x112=(gclwh13_0*rxp1_2);
IkReal x113=(gclwh4_14*rxp2_2);
IkReal x114=((0.1707)*rxp2_2);
IkReal x115=((0.00518928)*rxp1_2);
IkReal x116=(gclwh5_0*pz);
IkReal x117=((0.00155960496929498)*r21);
IkReal x118=(gclwh4_3*r22);
IkReal x119=(gclwh14_8*rxp0_2);
IkReal x120=((0.00332834402025)*r22);
IkReal x121=(gclwh4_2*r22);
IkReal x122=(gclwh12_14*rxp1_2);
IkReal x123=(gclwh10_2*r22);
IkReal x124=((0.000818427337875)*r20);
IkReal x125=((0.001068933642)*rxp1_2);
IkReal x126=((0.01037856)*rxp0_2);
IkReal x127=(gclwh15_9*r20);
IkReal x128=(gclwh5_10*r22);
IkReal x129=(gclwh4_8*rxp2_2);
IkReal x130=(gclwh9_10*r20);
IkReal x131=((4.0)*gclwh11_10);
IkReal x132=(gclwh6_12*r21);
IkReal x133=((0.00310689149625)*r20);
IkReal x134=(gclwh13_9*r21);
IkReal x135=(gclwh12_8*r21);
IkReal x136=((0.3414)*rxp1_2);
IkReal x137=((2.0)*gclwh7_10);
IkReal x138=((0.07280355)*rxp1_2);
IkReal x139=(gclwh8_2*r20);
IkReal x140=(gclwh4_14*r22);
IkReal x141=((0.6828)*rxp1_2);
IkReal x142=(gclwh15_15*rxp0_2);
IkReal x143=((4.0)*gclwh8_11);
IkReal x144=(gclwh7_0*r21);
IkReal x145=(gclwh5_15*rxp2_2);
IkReal x146=(gclwh15_9*rxp0_2);
IkReal x147=(gclwh4_2*rxp2_2);
IkReal x148=(gclwh14_11*r20);
IkReal x149=((0.019178145)*rxp1_2);
IkReal x150=((4.561674317235e-5)*r22);
IkReal x151=((4.0)*gclwh9_10);
IkReal x152=((0.6828)*rxp0_2);
IkReal x153=(gclwh5_9*rxp2_2);
IkReal x154=(gclwh15_1*rxp0_2);
IkReal x155=(gclwh9_13*r20);
IkReal x156=(gclwh6_2*r21);
IkReal x157=((0.00310689149625)*r21);
IkReal x158=((0.019178145)*rxp2_2);
IkReal x159=((0.0304)*pp);
IkReal x160=((0.2247)*gclwh13_15);
IkReal x161=((0.000818427337875)*r22);
IkReal x162=((0.00163685467575)*r20);
IkReal x163=((0.000818427337875)*r21);
IkReal x164=(gclwh5_0*r22);
IkReal x165=((0.1707)*rxp0_2);
IkReal x166=((0.08318211)*rxp1_2);
IkReal x167=((2.0)*gclwh6_11);
IkReal x168=(gclwh1_3*r20);
IkReal x169=((0.036546103557)*rxp2_2);
IkReal x170=((4.0)*gclwh10_11);
IkReal x171=((0.036546103557)*rxp1_2);
IkReal x172=((0.1707)*pp);
IkReal x173=(gclwh11_13*rxp2_2);
IkReal x174=((0.3414)*rxp2_2);
IkReal x175=(gclwh10_12*rxp2_2);
IkReal x176=((0.0072846225)*r21);
IkReal x177=(gclwh4_8*r22);
IkReal x178=((0.07280355)*rxp0_2);
IkReal x179=((2.0)*gclwh12_11);
IkReal x180=(gclwh11_0*r22);
IkReal x181=(gclwh14_8*r20);
IkReal x182=(gclwh14_14*rxp0_2);
IkReal x183=(gclwh7_13*r21);
IkReal x184=(gclwh11_0*pz);
IkReal x185=(gclwh10_2*pz);
IkReal x186=(gclwh12_2*rxp1_2);
IkReal x187=(gclwh5_0*rxp2_2);
IkReal x188=((0.07280355)*rxp2_2);
IkReal x189=((0.4569)*pp);
IkReal x190=(gclwh4_11*r22);
IkReal x191=((4.0)*gclwh6_11);
IkReal x192=(gclwh8_11*r20);
IkReal x193=((0.2247)*gclwh5_15);
IkReal x194=((4.0)*gclwh7_10);
IkReal x195=((2.0)*gclwh13_10);
IkReal x196=((0.07799283)*rxp1_2);
IkReal x197=(gclwh5_1*r22);
IkReal x198=((0.2247)*gclwh4_14);
IkReal x199=(gclwh10_12*r22);
IkReal x200=((0.2247)*gclwh14_14);
IkReal x201=((0.2247)*gclwh12_14);
IkReal x202=(gclwh14_3*r20);
IkReal x203=(gclwh13_15*rxp1_2);
IkReal x204=(gclwh11_1*r22);
IkReal x205=(gclwh0_1*r20);
IkReal x206=(gclwh8_12*rxp0_2);
IkReal x207=(gclwh14_14*x100);
IkReal x208=(gclwh6_5*x163);
IkReal x209=((0.019178145)*x122);
IkReal x210=((0.019178145)*x113);
IkReal x211=(gclwh10_5*x161);
IkReal x212=(gclwh8_5*x124);
IkReal x213=((0.014569245)*x129);
IkReal x214=((0.0072846225)*x92);
IkReal x215=(gclwh12_8*x105);
IkReal x216=(gclwh4_11*x114);
IkReal x217=(gclwh12_11*x76);
IkReal x218=(gclwh14_11*x165);
IkReal x219=((0.0072846225)*x110);
IkReal x220=((0.014569245)*x119);
IkReal x221=((0.0072846225)*x192);
IkReal x222=(gclwh13_9*x105);
IkReal x223=((0.014569245)*x153);
IkReal x224=((0.0072846225)*x109);
IkReal x225=(gclwh15_10*x165);
IkReal x226=((0.0072846225)*x130);
IkReal x227=(gclwh13_10*x76);
IkReal x228=(gclwh7_10*x176);
IkReal x229=((0.014569245)*x146);
IkReal x230=(gclwh5_10*x114);
IkReal x231=(gclwh15_15*x100);
IkReal x232=(gclwh7_7*x163);
IkReal x233=(gclwh13_15*x149);
IkReal x234=((0.019178145)*x145);
IkReal x235=(gclwh11_7*x161);
IkReal x236=(gclwh9_7*x124);
IkReal x237=(gclwh8_5*x100);
IkReal x238=(gclwh10_5*x158);
IkReal x239=(gclwh14_14*x124);
IkReal x240=(gclwh6_5*x149);
IkReal x241=(gclwh12_14*x163);
IkReal x242=((0.000818427337875)*x140);
IkReal x243=(gclwh8_11*x165);
IkReal x244=(gclwh10_11*x114);
IkReal x245=(gclwh12_11*x176);
IkReal x246=((0.000621742530375)*x177);
IkReal x247=((0.0072846225)*x190);
IkReal x248=((0.000621742530375)*x135);
IkReal x249=((0.000621742530375)*x181);
IkReal x250=(gclwh6_11*x76);
IkReal x251=((0.0072846225)*x148);
IkReal x252=(gclwh9_10*x165);
IkReal x253=((0.000621742530375)*x127);
IkReal x254=((0.0072846225)*x128);
IkReal x255=(gclwh11_10*x114);
IkReal x256=(gclwh13_10*x176);
IkReal x257=((0.000621742530375)*x134);
IkReal x258=((0.0072846225)*x96);
IkReal x259=(gclwh7_10*x76);
IkReal x260=((0.000621742530375)*x102);
IkReal x261=((0.000818427337875)*x82);
IkReal x262=(gclwh5_15*x161);
IkReal x263=(gclwh7_7*x149);
IkReal x264=(gclwh15_15*x124);
IkReal x265=(gclwh11_7*x158);
IkReal x266=(gclwh9_7*x100);
IkReal x267=(gclwh14_11*x93);
IkReal x268=((0.014569245)*x110);
IkReal x269=((0.014569245)*x192);
IkReal x270=((0.03835629)*x182);
IkReal x271=((0.03835629)*x113);
IkReal x272=((0.03835629)*x122);
IkReal x273=(gclwh4_11*x174);
IkReal x274=(gclwh12_11*x136);
IkReal x275=(gclwh6_11*x85);
IkReal x276=((0.03835629)*x145);
IkReal x277=((0.03835629)*x203);
IkReal x278=((0.03835629)*x142);
IkReal x279=(gclwh15_10*x93);
IkReal x280=((0.014569245)*x130);
IkReal x281=((0.014569245)*x109);
IkReal x282=((0.0608)*x79);
IkReal x283=((2.0)*x72);
IkReal x284=(r21*x73);
IkReal x285=((1.0)*x73);
IkReal x286=((0.2247)*gclwh10_5*x81);
IkReal x287=((0.2247)*gclwh8_5*x94);
IkReal x288=((0.11235)*gclwh6_5*x75);
IkReal x289=((0.11235)*gclwh8_5*x89);
IkReal x290=((0.2247)*gclwh6_5*x79);
IkReal x291=((0.11235)*gclwh10_5*x90);
IkReal x292=(gclwh12_3*pp*x76);
IkReal x293=(gclwh14_2*rxp0_2*x74);
IkReal x294=(gclwh6_3*x284);
IkReal x295=(x123*x83);
IkReal x296=((2.0)*gclwh10_11*x81);
IkReal x297=((2.0)*gclwh8_11*x94);
IkReal x298=(x185*x90);
IkReal x299=(gclwh4_3*pp*x114);
IkReal x300=(x139*x83);
IkReal x301=(gclwh8_2*pz*x89);
IkReal x302=(x156*x83);
IkReal x303=(x167*x79);
IkReal x304=(x186*x74);
IkReal x305=(x147*x74);
IkReal x306=(x107*x172);
IkReal x307=(x76*x77);
IkReal x308=(gclwh7_1*x284);
IkReal x309=(x180*x83);
IkReal x310=(gclwh15_0*rxp0_2*x74);
IkReal x311=(x184*x90);
IkReal x312=(gclwh5_1*pp*x114);
IkReal x313=(x137*x79);
IkReal x314=(x78*x83);
IkReal x315=(pp*pz*x78);
IkReal x316=((2.0)*gclwh11_10*x81);
IkReal x317=((2.0)*gclwh9_10*x94);
IkReal x318=(x154*x172);
IkReal x319=(x112*x74);
IkReal x320=(x187*x74);
IkReal x321=(x144*x83);
IkReal x322=((0.2247)*gclwh9_7*x94);
IkReal x323=((0.11235)*gclwh7_7*x75);
IkReal x324=((0.2247)*gclwh11_7*x81);
IkReal x325=((0.11235)*gclwh11_7*x90);
IkReal x326=((0.2247)*gclwh7_7*x79);
IkReal x327=((0.11235)*gclwh9_7*x89);
IkReal x328=(x201*x79);
IkReal x329=((0.11235)*gclwh14_14*x89);
IkReal x330=(x198*x81);
IkReal x331=((0.11235)*gclwh12_14*x75);
IkReal x332=(x200*x94);
IkReal x333=((0.11235)*gclwh4_14*x90);
IkReal x334=(gclwh14_8*npx*x74);
IkReal x335=(x89*x91);
IkReal x336=(gclwh12_3*x284);
IkReal x337=(gclwh3_2*r21*x83);
IkReal x338=((0.08535)*gclwh12_8*x75);
IkReal x339=(gclwh6_2*rxp1_2*x74);
IkReal x340=(gclwh3_3*x284);
IkReal x341=(x168*x73);
IkReal x342=((0.08535)*gclwh4_8*x90);
IkReal x343=(gclwh14_2*r20*x83);
IkReal x344=((2.0)*gclwh14_11*x94);
IkReal x345=(x118*x73);
IkReal x346=(gclwh1_2*r20*x83);
IkReal x347=(gclwh12_8*npy*x74);
IkReal x348=(gclwh4_8*npz*x74);
IkReal x349=(x103*x74);
IkReal x350=((2.0)*gclwh4_11*x81);
IkReal x351=((0.08535)*gclwh14_8*x89);
IkReal x352=(gclwh6_3*pp*x76);
IkReal x353=(gclwh10_2*rxp2_2*x74);
IkReal x354=(x121*x83);
IkReal x355=(gclwh12_2*r21*x83);
IkReal x356=(x179*x79);
IkReal x357=(gclwh13_0*r21*x83);
IkReal x358=(x73*x87);
IkReal x359=((0.08535)*gclwh15_9*x89);
IkReal x360=(x116*x90);
IkReal x361=(x108*x75);
IkReal x362=(x83*x99);
IkReal x363=(gclwh0_0*r20*x83);
IkReal x364=(gclwh9_0*rxp0_2*x74);
IkReal x365=((2.0)*gclwh15_10*x94);
IkReal x366=(x164*x83);
IkReal x367=(gclwh2_1*x284);
IkReal x368=(gclwh5_9*npz*x74);
IkReal x369=(gclwh7_1*pp*x76);
IkReal x370=(gclwh11_0*rxp2_2*x74);
IkReal x371=(gclwh13_9*npy*x74);
IkReal x372=(x205*x73);
IkReal x373=((0.08535)*gclwh5_9*x90);
IkReal x374=(gclwh15_9*npx*x74);
IkReal x375=((0.08535)*gclwh13_9*x75);
IkReal x376=(gclwh11_1*pp*x114);
IkReal x377=((2.0)*gclwh5_10*x81);
IkReal x378=(x195*x79);
IkReal x379=(gclwh7_0*rxp1_2*x74);
IkReal x380=(gclwh15_0*r20*x83);
IkReal x381=(x101*x94);
IkReal x382=((0.11235)*gclwh5_15*x90);
IkReal x383=((0.11235)*gclwh13_15*x75);
IkReal x384=(x160*x79);
IkReal x385=(x193*x81);
IkReal x386=((0.11235)*gclwh15_15*x89);
IkReal x387=(x192*x88);
IkReal x388=(x110*x88);
IkReal x389=(x191*x79);
IkReal x390=(x143*x94);
IkReal x391=(x167*x75);
IkReal x392=(x170*x81);
IkReal x393=(x109*x88);
IkReal x394=(x194*x79);
IkReal x395=(x130*x88);
IkReal x396=(gclwh6_2*npy*x283);
IkReal x397=(gclwh6_3*x79*x88);
IkReal x398=(gclwh6_2*x111*x75);
IkReal x399=(gclwh10_2*npz*x283);
IkReal x400=(gclwh8_2*npx*x283);
IkReal x401=(gclwh11_1*x81*x88);
IkReal x402=(gclwh7_0*npy*x283);
IkReal x403=(gclwh9_0*npx*x283);
IkReal x404=(x204*x285);
IkReal x405=(gclwh7_1*x79*x88);
IkReal x406=(gclwh11_0*npz*x283);
IkReal x407=(gclwh7_0*x111*x75);
IkReal x408=(gclwh12_2*npy*x283);
IkReal x409=(gclwh3_2*npy*x283);
IkReal x410=(gclwh1_2*npx*x283);
IkReal x411=(gclwh14_3*x88*x94);
IkReal x412=(gclwh4_2*npz*x283);
IkReal x413=(gclwh4_3*x81*x88);
IkReal x414=(gclwh12_2*x111*x75);
IkReal x415=(gclwh1_2*x111*x89);
IkReal x416=(gclwh3_3*x79*x88);
IkReal x417=(gclwh4_2*x111*x90);
IkReal x418=(gclwh1_3*x88*x94);
IkReal x419=(gclwh3_2*x111*x75);
IkReal x420=(gclwh12_3*x79*x88);
IkReal x421=(gclwh14_2*npx*x283);
IkReal x422=(x202*x285);
IkReal x423=(gclwh0_0*npx*x283);
IkReal x424=(gclwh2_0*npy*x283);
IkReal x425=(gclwh5_1*x81*x88);
IkReal x426=((2.0)*x77*x79);
IkReal x427=(gclwh15_0*npx*x283);
IkReal x428=(gclwh2_1*x79*x88);
IkReal x429=(gclwh0_1*x88*x94);
IkReal x430=(gclwh5_0*npz*x283);
IkReal x431=(gclwh13_0*npy*x283);
IkReal x432=(gclwh0_0*x111*x89);
IkReal x433=(gclwh15_0*x111*x89);
IkReal x434=(gclwh2_0*x111*x75);
IkReal x435=((1.0)*gclwh13_1*x284);
IkReal x436=(x197*x285);
IkReal x437=(gclwh15_1*x88*x94);
IkReal x438=(x233+x234);
IkReal x439=(x238+x237);
IkReal x440=(x276+x277);
IkReal x441=(x210+x209);
IkReal x442=(x272+x271);
IkReal x443=(x265+x266);
IkReal x444=(x303+x218+x219+x221);
IkReal x445=(x313+x225+x224+x226);
IkReal x446=(x350+x356+x250+x251);
IkReal x447=(x378+x377+x258+x259);
IkReal x448=(x330+x328+x329+x239);
IkReal x449=(x208+x288+x287+x286);
IkReal x450=(x386+x384+x385+x264);
IkReal x451=(x324+x322+x323+x232);
IkReal x452=(x344+x243+x247+x245+x244);
IkReal x453=(x365+x254+x255+x256+x252);
IkReal x454=(x317+x316+x228+x227+x230);
IkReal x455=(x214+x216+x217+x296+x297);
IkReal x456=(x325+x326+x327+x236+x235);
IkReal x457=(x211+x212+x290+x291+x289);
IkReal x458=(x333+x332+x331+x242+x241);
IkReal x459=(x382+x383+x381+x261+x262);
IkReal x460=(x391+x390+x392+x274+x275+x273);
IkReal x461=(((gclwh7_10*x85))+((x131*x81))+((gclwh5_10*x174))+((gclwh13_10*x136))+((x137*x75))+((x151*x94)));
IkReal x462=(x387+x388+x389+x267+x269+x268);
IkReal x463=(x395+x394+x393+x279+x281+x280);
IkReal x464=(x306+x304+x305+x302+x397+x399+x398+x220+x400);
IkReal x465=(x300+x301+x396+x213+x215+x298+x299+x292+x293+x294+x295);
IkReal x466=(x320+x321+x319+x318+x229+x403+x405+x404+x407+x406);
IkReal x467=(x308+x309+x307+x315+x314+x311+x310+x312+x223+x222+x401+x402);
IkReal x468=(x380+x379+x376+x375+x374+x373+x257+x260+x429+x428+x430+x431+x432+x433+x434+x435+x436+x437);
IkReal x469=(x339+x338+x337+x336+x335+x334+x342+x343+x340+x341+x346+x345+x246+x248+x409+x408+x412+x410+x411+x74);
IkReal x470=(x351+x353+x352+x355+x354+x347+x348+x349+x249+x413+x416+x417+x414+x415+x418+x419+x422+x421+x420);
IkReal x471=(x357+x359+x358+x372+x371+x370+x368+x369+x360+x361+x362+x363+x364+x366+x367+x253+x427+x426+x425+x424+x423+x74);
op[0]=((((-1.0)*gclwh10_12*x120))+(((-0.4569)*gclwh10_12*x90))+(((0.9138)*gclwh8_12*x94))+(((-1.0)*x207))+(((0.4569)*gclwh6_12*x75))+(((-1.0)*gclwh12_8*x196))+(((-1.0)*x457))+x449+x441+(((-1.0)*x189*x86))+(((0.07799283)*x119))+(((0.9138)*gclwh10_12*x81))+(((0.00332834402025)*x132))+(((-0.00332834402025)*x86))+(((-0.9138)*gclwh6_12*x79))+(((-0.07799283)*x129)));
op[1]=((((-1.0)*gclwh12_3*x171))+(((0.036546103557)*x107))+(((-1.0)*x464))+(((-0.2068108875)*gclwh6_3*x75))+(((-1.0)*x455))+(((-1.0)*gclwh6_3*x117))+x444+x465+(((0.42819102)*gclwh6_3*x79))+(((-1.0)*gclwh4_3*x169))+(((-1.0)*gclwh6_11*x75))+((gclwh8_11*x89))+((gclwh10_11*x90)));
op[2]=((-0.09583455)+(((-1.0)*x460))+x462);
op[3]=((((-0.08318211)*x119))+(((-1.0)*x442))+(((-0.07280355)*x147))+((gclwh8_2*x133))+(((-1.0)*gclwh12_2*x138))+(((-0.00310689149625)*x156))+(((0.00310689149625)*x123))+(((-0.853)*gclwh8_2*x94))+(((0.08318211)*x129))+(((0.4265)*gclwh10_2*x90))+(((-0.853)*gclwh10_2*x81))+x270+((gclwh12_8*x166))+(((0.853)*gclwh6_2*x79))+((gclwh14_2*x178))+(((0.4265)*gclwh8_2*x89))+(((-0.4265)*gclwh6_2*x75)));
op[4]=((((-1.0)*x159*x86))+(((-1.0)*x441))+(((-1.0)*gclwh6_12*x282))+(((-0.0304)*gclwh10_12*x90))+((gclwh12_8*x115))+(((0.0304)*gclwh6_12*x75))+(((0.00518928)*x129))+(((-0.000221452524)*x86))+(((-0.000221452524)*x199))+(((0.0608)*gclwh8_12*x94))+(((-1.0)*x457))+x207+x449+(((-0.00518928)*x119))+(((0.000221452524)*x132))+(((0.0608)*gclwh10_12*x81)));
op[5]=((((-1.0)*gclwh4_3*x95))+(((-1.0)*x444))+(((-1.0)*gclwh8_11*x89))+((gclwh6_11*x75))+(((-1.0)*gclwh10_11*x90))+(((-1.0)*gclwh6_3*x80))+(((-1.0)*x464))+(((0.0010225625)*gclwh6_3*x75))+x455+x465+(((0.001068933642)*x107))+(((-1.0)*gclwh12_3*x125))+(((0.01252412)*gclwh6_3*x79)));
op[6]=((((-1.0)*x445))+(((0.42819102)*gclwh7_1*x79))+((gclwh7_10*x75))+(((-1.0)*gclwh5_1*x169))+(((-1.0)*gclwh7_1*x117))+(((0.00155960496929498)*x204))+(((-1.0)*gclwh13_1*x171))+(((-1.0)*x466))+(((0.2068108875)*gclwh11_1*x90))+x454+x467+(((-1.0)*gclwh9_10*x89))+(((-0.2068108875)*gclwh7_1*x75))+(((0.036546103557)*x154))+(((-0.42819102)*gclwh11_1*x81))+(((-1.0)*gclwh11_10*x90)));
op[7]=((((-1.0)*gclwh13_9*x196))+(((0.9138)*gclwh11_13*x81))+(((-0.4569)*gclwh9_13*x89))+(((0.07799283)*x146))+(((0.00332834402025)*x183))+(((-1.0)*x456))+(((-1.0)*x231))+(((-0.00332834402025)*x155))+x438+x451+(((-1.0)*x189*x84))+(((0.9138)*gclwh9_13*x94))+(((-0.07799283)*x153))+(((-0.00332834402025)*x84))+(((-0.9138)*gclwh7_13*x79))+(((0.4569)*gclwh7_13*x75)));
op[8]=((((-0.4265)*gclwh7_0*x75))+(((0.4265)*gclwh11_0*x90))+(((-0.07280355)*x187))+(((0.853)*gclwh7_0*x79))+(((0.00310689149625)*x78))+(((0.08318211)*x146))+(((-0.08318211)*x153))+(((-1.0)*gclwh13_9*x166))+(((-0.00310689149625)*x144))+(((-0.07280355)*x112))+(((0.00310689149625)*x180))+((gclwh15_0*x178))+x440+(((-0.853)*gclwh11_0*x81))+(((-0.853)*gclwh9_0*x94))+(((-1.0)*x278))+(((0.4265)*pp*x78)));
op[9]=((-0.09583455)+(((-1.0)*x461))+x463);
op[10]=((((-0.0010225625)*gclwh11_1*x90))+(((-1.0)*gclwh13_1*x125))+(((0.0010225625)*gclwh7_1*x75))+(((-0.01252412)*gclwh11_1*x81))+(((-1.0)*x466))+(((-1.0)*gclwh7_10*x75))+(((-1.0)*x454))+x445+x467+(((-1.0)*gclwh7_1*x80))+(((0.01252412)*gclwh7_1*x79))+((gclwh11_10*x90))+((gclwh11_1*x150))+(((-1.0)*gclwh5_1*x95))+((gclwh9_10*x89))+(((0.001068933642)*x154)));
op[11]=((((-0.00518928)*x146))+(((-1.0)*x159*x84))+(((-1.0)*x438))+(((-0.000221452524)*x155))+(((0.00518928)*x153))+(((0.0608)*gclwh11_13*x81))+(((-0.000221452524)*x84))+(((-1.0)*x456))+x231+x451+((gclwh13_9*x115))+(((-1.0)*gclwh7_13*x282))+(((0.0304)*gclwh7_13*x75))+(((0.0608)*gclwh9_13*x94))+(((-0.0304)*gclwh9_13*x89))+(((0.000221452524)*x183)));
op[12]=((((-1.0)*x448))+(((-0.4569)*gclwh4_8*x90))+(((-0.9138)*gclwh14_8*x94))+(((-1.0)*gclwh6_12*x196))+(((0.00332834402025)*x181))+(((-0.4569)*gclwh12_8*x75))+(((0.07799283)*x175))+(((-1.0)*gclwh4_8*x120))+x439+x458+(((0.4569)*gclwh14_8*x89))+(((0.9138)*gclwh4_8*x81))+(((-1.0)*x240))+(((0.07799283)*x206))+(((-0.00332834402025)*x135))+(((0.9138)*gclwh12_8*x79)));
op[13]=((-0.2213801325)+(((0.42819102)*gclwh12_3*x79))+(((-1.0)*gclwh4_11*x90))+((gclwh6_3*x171))+(((-1.0)*x470))+(((0.00155960496929498)*x202))+((gclwh3_3*x117))+(((-0.2213801325)*gclwh3_3*x75))+(((-1.0)*gclwh12_11*x75))+(((-0.2068108875)*gclwh12_3*x75))+(((-1.0)*x452))+((gclwh14_11*x89))+(((-0.2213801325)*gclwh1_3*x89))+(((0.42819102)*gclwh3_3*x79))+x446+x469+(((-0.00155960496929498)*x118))+(((-1.0)*gclwh12_3*x117))+(((-0.42819102)*gclwh14_3*x94))+(((0.2068108875)*gclwh14_3*x89))+(((-0.2068108875)*gclwh4_3*x90))+(((0.42819102)*gclwh1_3*x94))+(((0.00155960496929498)*x168))+(((0.42819102)*gclwh4_3*x81)));
op[14]=((-0.053024565)+(((4.0)*gclwh4_11*x81))+((gclwh6_11*x136))+(((-1.0)*x179*x75))+((x148*x88))+(((0.014569245)*x148))+(((-0.014569245)*x190))+(((-1.0)*gclwh8_11*x93))+(((-4.0)*gclwh14_11*x94))+(((-1.0)*gclwh12_11*x85))+(((4.0)*gclwh12_11*x79))+(((-1.0)*x190*x88))+(((-1.0)*gclwh10_11*x174)));
op[15]=((((-0.9746)*gclwh12_8*x79))+(((-0.4265)*gclwh3_2*x75))+(((-0.4265)*gclwh1_2*x89))+(((0.4265)*gclwh14_2*x89))+(((-0.4265)*gclwh4_2*x90))+(((-1.0)*gclwh12_2*x157))+(((0.853)*gclwh4_2*x81))+(((-0.00354979654425)*x181))+((gclwh6_2*x138))+(((0.4873)*gclwh4_8*x90))+((gclwh14_14*x162))+(((0.853)*gclwh3_2*x79))+(((-0.07280355)*x103))+(((-0.4265)*gclwh12_2*x75))+(((-1.0)*x201*x75))+(((-0.9746)*gclwh4_8*x81))+(((0.853)*gclwh1_2*x94))+(((-0.4873)*gclwh14_8*x89))+(((-0.853)*npx*x91))+((gclwh14_2*x133))+(((0.9746)*gclwh14_8*x94))+(((0.4873)*gclwh12_8*x75))+(((0.853)*gclwh12_2*x79))+(((-0.4494)*gclwh14_14*x94))+(((-1.0)*gclwh10_2*x188))+(((0.00354979654425)*x177))+((x200*x89))+(((-0.00163685467575)*gclwh12_14*r21))+(((-0.00163685467575)*x140))+((gclwh3_2*x157))+(((0.4494)*gclwh12_14*x79))+((gclwh1_2*x133))+(((0.4494)*gclwh4_14*x81))+(((0.00354979654425)*x135))+(((-1.0)*x198*x90))+(((-0.00310689149625)*x121)));
op[16]=((((0.00518928)*x175))+(((0.0304)*gclwh4_8*x90))+(((0.0608)*gclwh14_8*x94))+(((-1.0)*gclwh6_12*x115))+(((-0.000221452524)*x181))+(((-1.0)*x458))+x439+x448+(((0.000221452524)*x135))+(((-1.0)*x240))+(((-0.0304)*gclwh14_8*x89))+(((0.0304)*gclwh12_8*x75))+(((-1.0)*gclwh12_8*x282))+(((0.00518928)*x206))+(((-0.0608)*gclwh4_8*x81))+(((0.000221452524)*x177)));
op[17]=((0.0135466825)+(((-4.561674317235e-5)*x118))+(((-0.0135466825)*gclwh3_3*x75))+(((-1.0)*x446))+(((-0.0135466825)*gclwh1_3*x89))+(((0.01252412)*gclwh12_3*x79))+(((-1.0)*gclwh14_11*x89))+(((0.01252412)*gclwh4_3*x81))+(((-0.01252412)*gclwh14_3*x94))+(((-1.0)*x470))+((gclwh12_11*x75))+((gclwh3_3*x80))+(((0.01252412)*gclwh1_3*x94))+((gclwh6_3*x125))+((gclwh4_11*x90))+(((4.561674317235e-5)*x168))+x452+x469+(((-1.0)*gclwh12_3*x80))+(((0.0010225625)*gclwh12_3*x75))+(((0.0010225625)*gclwh4_3*x90))+(((0.01252412)*gclwh3_3*x79))+(((4.561674317235e-5)*x202))+(((-0.0010225625)*gclwh14_3*x89)));
op[18]=((0.2213801325)+((gclwh15_10*x89))+(((-1.0)*gclwh13_10*x75))+((gclwh2_1*x117))+(((0.42819102)*gclwh0_1*x94))+((gclwh13_1*x117))+(((-1.0)*gclwh5_10*x90))+(((0.42819102)*gclwh2_1*x79))+(((0.42819102)*gclwh15_1*x94))+((gclwh11_1*x169))+(((0.00155960496929498)*x205))+(((-1.0)*x468))+(((0.2068108875)*gclwh5_1*x90))+(((0.2068108875)*gclwh13_1*x75))+(((-1.0)*x453))+(((-1.0)*gclwh7_1*x171))+(((-0.42819102)*gclwh5_1*x81))+x447+x471+(((-0.2213801325)*gclwh2_1*x75))+(((-0.2213801325)*gclwh0_1*x89))+(((-0.00155960496929498)*x87))+(((-0.42819102)*gclwh13_1*x79))+(((-0.2068108875)*pp*x87))+(((0.00155960496929498)*x197)));
op[19]=((((-0.00332834402025)*x127))+(((-1.0)*x443))+(((-0.9138)*gclwh5_9*x81))+(((0.4569)*gclwh5_9*x90))+(((-0.07799283)*x98))+((gclwh7_13*x196))+(((-1.0)*x459))+x263+x450+(((0.00332834402025)*x102))+(((-0.9138)*gclwh13_9*x79))+(((-0.07799283)*x173))+(((0.9138)*gclwh15_9*x94))+(((-0.4569)*gclwh15_9*x89))+(((0.4569)*gclwh13_9*x75))+(((0.00332834402025)*x134)));
op[20]=((((-0.00354979654425)*x127))+(((-0.4873)*gclwh15_9*x89))+(((0.4873)*gclwh13_9*x75))+(((-1.0)*x160*x75))+(((0.00310689149625)*x99))+(((0.4873)*gclwh5_9*x90))+(((-1.0)*gclwh7_0*x138))+(((0.4494)*gclwh5_15*x81))+((gclwh0_0*x133))+((x101*x89))+(((-0.00163685467575)*x82))+(((-1.0)*gclwh15_0*x133))+(((-0.00163685467575)*gclwh5_15*r22))+(((0.4494)*gclwh13_15*x79))+(((-0.9746)*gclwh13_9*x79))+(((-1.0)*x193*x90))+(((-0.4265)*gclwh15_0*x89))+(((0.853)*gclwh0_0*x94))+(((-0.4265)*gclwh0_0*x89))+(((0.00310689149625)*x164))+(((-0.4494)*gclwh15_15*x94))+(((0.9746)*gclwh15_9*x94))+(((-0.853)*gclwh13_0*x79))+(((0.4265)*gclwh5_0*x90))+(((-0.4265)*gclwh2_0*x75))+(((-0.9746)*gclwh5_9*x81))+((gclwh15_15*x162))+(((-0.853)*gclwh5_0*x81))+((gclwh9_0*x178))+((gclwh13_0*x157))+(((0.00354979654425)*x134))+(((0.853)*gclwh2_0*x79))+(((0.4265)*gclwh13_0*x75))+((gclwh11_0*x188))+(((0.853)*gclwh15_0*x94))+(((0.00354979654425)*x102)));
op[21]=((-0.053024565)+(((-4.0)*gclwh5_10*x81))+(((4.0)*gclwh15_10*x94))+((gclwh11_10*x174))+(((0.014569245)*x128))+(((-1.0)*gclwh7_10*x136))+(((-4.0)*gclwh13_10*x79))+(((-0.014569245)*x96))+((x195*x75))+((x128*x88))+((gclwh9_10*x93))+(((-1.0)*x88*x96))+((gclwh13_10*x85)));
op[22]=((-0.0135466825)+((gclwh5_10*x90))+(((-1.0)*x447))+((gclwh11_1*x95))+(((-0.0010225625)*gclwh13_1*x75))+(((-0.0135466825)*gclwh2_1*x75))+(((0.01252412)*gclwh2_1*x79))+(((-1.0)*gclwh7_1*x125))+(((-0.01252412)*gclwh13_1*x79))+((gclwh5_1*x150))+((gclwh13_10*x75))+(((-1.0)*x468))+(((-4.561674317235e-5)*x87))+(((0.0010225625)*pp*x87))+x453+x471+(((0.01252412)*gclwh15_1*x94))+((gclwh2_1*x80))+(((-0.0010225625)*gclwh5_1*x90))+(((-1.0)*gclwh15_10*x89))+(((4.561674317235e-5)*x205))+(((-0.0135466825)*gclwh0_1*x89))+(((0.01252412)*gclwh0_1*x94))+(((-0.01252412)*gclwh5_1*x81))+((gclwh13_1*x80)));
op[23]=((((-1.0)*x443))+((gclwh7_13*x115))+(((-0.00518928)*x98))+(((0.0304)*gclwh15_9*x89))+(((-1.0)*x450))+x263+(((-0.0304)*gclwh5_9*x90))+x459+(((-0.0608)*gclwh15_9*x94))+(((0.0608)*gclwh5_9*x81))+(((-0.0304)*gclwh13_9*x75))+(((0.000221452524)*x127))+(((-0.00518928)*x173))+(((-0.000221452524)*x102))+((gclwh13_9*x282))+(((-0.000221452524)*x134)));
op[24]=((-0.20533086)+(((-1.0)*x460))+x462);
op[25]=((((0.0066566880405)*x139))+(((-1.0)*x442))+(((1.8276)*gclwh6_2*x79))+((gclwh14_2*x106))+(((-0.0066566880405)*x156))+(((0.9138)*gclwh8_2*x89))+(((-0.9138)*gclwh6_2*x75))+x270+(((-0.15598566)*x186))+(((-1.8276)*gclwh10_2*x81))+(((-1.8276)*gclwh8_2*x94))+(((0.9138)*gclwh10_2*x90))+(((-0.15598566)*x147))+(((0.0066566880405)*x123)));
op[26]=((((0.0062137829925)*x199))+(((-0.07671258)*x122))+(((-0.07671258)*x113))+(((-1.706)*gclwh8_12*x94))+((x86*x97))+(((0.07671258)*x182))+(((0.853)*gclwh10_12*x90))+(((-0.853)*gclwh6_12*x75))+(((0.0062137829925)*x86))+(((1.706)*gclwh6_12*x79))+(((-1.706)*gclwh10_12*x81))+(((-0.0062137829925)*x132)));
op[27]=((((-0.02913849)*x192))+(((0.02913849)*x92))+(((-1.0)*gclwh14_11*x152))+(((-1.0)*x143*x89))+(((-0.02913849)*x110))+((gclwh4_11*x104))+((x191*x75))+(((8.0)*gclwh8_11*x94))+(((8.0)*gclwh10_11*x81))+(((-8.0)*gclwh6_11*x79))+((gclwh12_11*x141))+(((-1.0)*x170*x90)));
op[28]=((-0.01366176)+(((-1.0)*x462))+x460);
op[29]=((((0.0608)*gclwh10_2*x90))+((gclwh14_2*x126))+(((-0.01037856)*x147))+(((-0.1216)*gclwh8_2*x94))+(((-0.01037856)*x186))+(((0.0608)*gclwh8_2*x89))+(((-0.0608)*gclwh6_2*x75))+x442+(((0.1216)*gclwh6_2*x79))+(((0.000442905048)*x139))+(((0.000442905048)*x123))+(((-1.0)*x270))+(((-0.000442905048)*x156))+(((-0.1216)*gclwh10_2*x81)));
op[30]=((((-0.9138)*gclwh7_0*x75))+(((-0.0066566880405)*x144))+(((0.0066566880405)*x180))+((gclwh15_0*x106))+(((-1.8276)*gclwh9_0*x94))+(((-0.15598566)*x112))+x440+(((-0.15598566)*x187))+(((-1.8276)*gclwh11_0*x81))+(((-1.0)*x278))+(((0.0066566880405)*x78))+(((0.9138)*pp*x78))+(((0.9138)*gclwh11_0*x90))+(((1.8276)*gclwh7_0*x79)));
op[31]=((-0.20533086)+(((-1.0)*x461))+x463);
op[32]=(((x151*x89))+(((-1.0)*gclwh13_10*x141))+(((0.02913849)*x109))+((gclwh15_10*x152))+(((-1.0)*x194*x75))+((x131*x90))+(((8.0)*gclwh7_10*x79))+(((-8.0)*gclwh11_10*x81))+(((-0.02913849)*gclwh7_10*r21))+(((-8.0)*gclwh9_10*x94))+(((0.02913849)*x130))+(((-1.0)*gclwh5_10*x104)));
op[33]=((((0.0062137829925)*x155))+(((0.853)*gclwh9_13*x89))+(((0.07671258)*x142))+(((-0.07671258)*x203))+(((-0.0062137829925)*x183))+(((-0.07671258)*x145))+(((0.0062137829925)*x84))+(((-1.706)*gclwh11_13*x81))+(((-0.853)*gclwh7_13*x75))+(((-1.706)*gclwh9_13*x94))+((x84*x97))+(((1.706)*gclwh7_13*x79)));
op[34]=((((-1.0)*x440))+(((0.000442905048)*x78))+((gclwh15_0*x126))+(((0.000442905048)*x180))+(((-0.01037856)*x187))+(((-0.1216)*gclwh11_0*x81))+x278+(((0.0608)*pp*x78))+(((-0.000442905048)*x144))+(((0.1216)*gclwh7_0*x79))+(((-0.01037856)*x112))+(((-0.1216)*gclwh9_0*x94))+(((-0.0608)*gclwh7_0*x75))+(((0.0608)*gclwh11_0*x90)));
IkReal x472=pz*pz;
IkReal x473=pp*pp;
IkReal x474=((0.1707)*pz);
IkReal x475=(npy*pz);
IkReal x476=(pp*r21);
IkReal x477=((0.1707)*rxp1_2);
IkReal x478=(gclwh13_1*pp);
IkReal x479=(gclwh9_13*rxp0_2);
IkReal x480=((4.561674317235e-5)*r21);
IkReal x481=((4.0)*gclwh12_11);
IkReal x482=(npz*pz);
IkReal x483=((0.00163685467575)*r21);
IkReal x484=(gclwh10_12*rxp2_2);
IkReal x485=(pz*r20);
IkReal x486=(gclwh4_2*r22);
IkReal x487=(gclwh11_13*r22);
IkReal x488=((0.02913849)*r22);
IkReal x489=((0.014569245)*r21);
IkReal x490=(gclwh15_1*r20);
IkReal x491=(pp*r20);
IkReal x492=((2.0)*gclwh11_10);
IkReal x493=((0.0072846225)*r21);
IkReal x494=(npx*pz);
IkReal x495=((0.001068933642)*rxp2_2);
IkReal x496=((2.0)*gclwh4_11);
IkReal x497=(gclwh5_9*r22);
IkReal x498=((0.08535)*pp);
IkReal x499=(gclwh2_0*pz);
IkReal x500=((0.019178145)*rxp0_2);
IkReal x501=((0.2247)*gclwh15_15);
IkReal x502=(gclwh9_0*rxp0_2);
IkReal x503=(gclwh8_2*rxp0_2);
IkReal x504=(gclwh12_8*rxp1_2);
IkReal x505=((0.3414)*rxp0_2);
IkReal x506=(pp*r22);
IkReal x507=(gclwh14_3*rxp0_2);
IkReal x508=(gclwh13_0*pz);
IkReal x509=(gclwh12_2*r21);
IkReal x510=(gclwh11_10*rxp2_2);
IkReal x511=((0.0072846225)*r22);
IkReal x512=((0.1707)*rxp2_2);
IkReal x513=(gclwh5_1*pp);
IkReal x514=(gclwh5_0*pz);
IkReal x515=((0.00155960496929498)*r21);
IkReal x516=((2.0)*gclwh9_10);
IkReal x517=((2.0)*gclwh15_10);
IkReal x518=(gclwh14_11*r20);
IkReal x519=((0.1707)*rxp0_2);
IkReal x520=((4.0)*gclwh14_11);
IkReal x521=((0.00332834402025)*r22);
IkReal x522=((0.08318211)*rxp0_2);
IkReal x523=(gclwh12_14*rxp1_2);
IkReal x524=((0.4494)*gclwh4_14);
IkReal x525=(gclwh6_12*rxp1_2);
IkReal x526=((0.001068933642)*rxp1_2);
IkReal x527=(gclwh15_9*r20);
IkReal x528=((0.4494)*gclwh15_15);
IkReal x529=(gclwh4_8*rxp2_2);
IkReal x530=((0.2247)*gclwh12_14);
IkReal x531=((0.0072846225)*r20);
IkReal x532=((0.00310689149625)*r20);
IkReal x533=((0.3414)*rxp1_2);
IkReal x534=((0.6828)*rxp0_2);
IkReal x535=((2.0)*gclwh7_10);
IkReal x536=((0.000442905048)*r21);
IkReal x537=((1.0)*pp);
IkReal x538=((0.0032737093515)*r20);
IkReal x539=((0.07280355)*rxp1_2);
IkReal x540=((1.0)*pz);
IkReal x541=((4.0)*gclwh15_10);
IkReal x542=(gclwh4_14*r22);
IkReal x543=((0.000818427337875)*r20);
IkReal x544=(gclwh7_0*pz);
IkReal x545=(gclwh5_15*rxp2_2);
IkReal x546=(gclwh12_3*pp);
IkReal x547=(gclwh10_2*pz);
IkReal x548=(gclwh13_9*r21);
IkReal x549=(gclwh13_9*rxp1_2);
IkReal x550=((0.014569245)*rxp0_2);
IkReal x551=((0.019178145)*rxp1_2);
IkReal x552=((4.561674317235e-5)*r22);
IkReal x553=((0.15598566)*rxp1_2);
IkReal x554=(gclwh5_0*r22);
IkReal x555=(gclwh5_9*rxp2_2);
IkReal x556=((0.000221452524)*r20);
IkReal x557=(gclwh4_3*pp);
IkReal x558=(gclwh15_1*rxp0_2);
IkReal x559=(gclwh6_12*r21);
IkReal x560=((0.03835629)*rxp0_2);
IkReal x561=((0.019178145)*rxp2_2);
IkReal x562=(gclwh7_1*pp);
IkReal x563=((0.000818427337875)*r22);
IkReal x564=(gclwh10_11*rxp2_2);
IkReal x565=((0.000442905048)*r20);
IkReal x566=((0.4569)*pp);
IkReal x567=((0.000818427337875)*r21);
IkReal x568=((4.0)*gclwh4_11);
IkReal x569=((0.4494)*gclwh12_14);
IkReal x570=((2.0)*pp);
IkReal x571=((0.014569245)*r22);
IkReal x572=(gclwh12_8*r21);
IkReal x573=((0.00332834402025)*r20);
IkReal x574=((2.0)*gclwh6_11);
IkReal x575=(gclwh1_3*r20);
IkReal x576=((0.036546103557)*rxp2_2);
IkReal x577=((0.036546103557)*rxp1_2);
IkReal x578=((0.3414)*rxp2_2);
IkReal x579=(gclwh4_8*r22);
IkReal x580=((0.07280355)*rxp0_2);
IkReal x581=((2.0)*gclwh12_11);
IkReal x582=(gclwh2_0*r21);
IkReal x583=(gclwh5_15*r22);
IkReal x584=(gclwh6_2*pz);
IkReal x585=((0.4494)*gclwh13_15);
IkReal x586=(gclwh7_13*r21);
IkReal x587=(gclwh11_0*pz);
IkReal x588=((0.014569245)*r20);
IkReal x589=((0.00518928)*rxp0_2);
IkReal x590=(gclwh13_0*r21);
IkReal x591=((0.00310689149625)*r22);
IkReal x592=((2.0)*gclwh8_11);
IkReal x593=(gclwh11_0*rxp2_2);
IkReal x594=((0.00163685467575)*r20);
IkReal x595=((0.07280355)*rxp2_2);
IkReal x596=((4.0)*gclwh5_10);
IkReal x597=((2.0)*gclwh5_10);
IkReal x598=((0.6828)*rxp1_2);
IkReal x599=(gclwh8_12*rxp0_2);
IkReal x600=((0.00155960496929498)*r22);
IkReal x601=((0.07799283)*rxp0_2);
IkReal x602=((0.4494)*gclwh14_14);
IkReal x603=((0.2247)*gclwh5_15);
IkReal x604=((2.0)*gclwh13_10);
IkReal x605=((0.00310689149625)*r21);
IkReal x606=((0.2247)*gclwh4_14);
IkReal x607=(gclwh14_3*r20);
IkReal x608=((0.01037856)*rxp1_2);
IkReal x609=(gclwh11_13*rxp2_2);
IkReal x610=((0.4494)*gclwh5_15);
IkReal x611=((0.2247)*gclwh14_14);
IkReal x612=(gclwh12_2*pz);
IkReal x613=((0.02913849)*r21);
IkReal x614=((0.0066566880405)*r20);
IkReal x615=(gclwh14_8*r20);
IkReal x616=((0.0032737093515)*r21);
IkReal x617=((0.2247)*gclwh13_15);
IkReal x618=(gclwh0_1*r20);
IkReal x619=((2.0)*gclwh10_11);
IkReal x620=(gclwh7_13*rxp1_2);
IkReal x621=(gclwh10_2*rxp2_2);
IkReal x622=((4.0)*gclwh13_10);
IkReal x623=((2.0)*gclwh14_11);
IkReal x624=(gclwh8_11*x505);
IkReal x625=((0.3414)*x564);
IkReal x626=(gclwh12_11*x489);
IkReal x627=(gclwh4_11*x571);
IkReal x628=((0.014569245)*x518);
IkReal x629=(gclwh6_11*x533);
IkReal x630=((0.00163685467575)*x542);
IkReal x631=(gclwh12_14*x483);
IkReal x632=(gclwh14_14*x594);
IkReal x633=((0.00163685467575)*x583);
IkReal x634=(gclwh13_15*x483);
IkReal x635=(gclwh15_15*x594);
IkReal x636=(gclwh7_10*x533);
IkReal x637=(gclwh15_10*x588);
IkReal x638=(gclwh13_10*x489);
IkReal x639=((0.3414)*x510);
IkReal x640=(gclwh5_10*x571);
IkReal x641=(gclwh9_10*x505);
IkReal x642=((0.019178145)*x523);
IkReal x643=(gclwh4_14*x561);
IkReal x644=(gclwh6_5*x567);
IkReal x645=(gclwh10_5*x563);
IkReal x646=(gclwh8_5*x543);
IkReal x647=(gclwh14_14*x500);
IkReal x648=((0.014569245)*x529);
IkReal x649=(gclwh14_11*x519);
IkReal x650=((0.014569245)*x504);
IkReal x651=(gclwh10_11*x511);
IkReal x652=(gclwh8_11*x531);
IkReal x653=(gclwh6_11*x493);
IkReal x654=(gclwh4_11*x512);
IkReal x655=(gclwh14_8*x550);
IkReal x656=(gclwh12_11*x477);
IkReal x657=(gclwh5_10*x578);
IkReal x658=(gclwh7_10*x489);
IkReal x659=(gclwh13_10*x533);
IkReal x660=(gclwh13_10*x477);
IkReal x661=(gclwh7_10*x493);
IkReal x662=((0.014569245)*x549);
IkReal x663=(gclwh5_10*x512);
IkReal x664=((0.014569245)*x555);
IkReal x665=(gclwh15_9*x550);
IkReal x666=(gclwh11_10*x511);
IkReal x667=(gclwh15_10*x519);
IkReal x668=(gclwh9_10*x531);
IkReal x669=(gclwh13_15*x551);
IkReal x670=(gclwh7_7*x567);
IkReal x671=((0.019178145)*x545);
IkReal x672=(gclwh15_15*x500);
IkReal x673=(gclwh11_7*x563);
IkReal x674=(gclwh9_7*x543);
IkReal x675=(gclwh12_14*x567);
IkReal x676=(gclwh8_5*x500);
IkReal x677=(gclwh10_5*x561);
IkReal x678=((0.000818427337875)*x542);
IkReal x679=(gclwh6_5*x551);
IkReal x680=(gclwh14_14*x543);
IkReal x681=((0.000621742530375)*x579);
IkReal x682=(gclwh6_11*x477);
IkReal x683=((0.0072846225)*x518);
IkReal x684=((0.000621742530375)*x572);
IkReal x685=((0.000621742530375)*x615);
IkReal x686=(gclwh8_11*x519);
IkReal x687=(gclwh10_11*x512);
IkReal x688=(gclwh12_11*x493);
IkReal x689=(gclwh4_11*x511);
IkReal x690=(gclwh15_10*x531);
IkReal x691=((0.000621742530375)*x527);
IkReal x692=(gclwh7_10*x477);
IkReal x693=((0.000621742530375)*x548);
IkReal x694=(gclwh9_10*x519);
IkReal x695=(gclwh5_10*x511);
IkReal x696=((0.1707)*x510);
IkReal x697=(gclwh13_10*x493);
IkReal x698=((0.000621742530375)*x497);
IkReal x699=(r21*x473);
IkReal x700=((2.0)*x472);
IkReal x701=((1.0)*x473);
IkReal x702=(x496*x506);
IkReal x703=(x476*x581);
IkReal x704=(x494*x520);
IkReal x705=(x491*x623);
IkReal x706=(x475*x481);
IkReal x707=(x482*x568);
IkReal x708=(x506*x606);
IkReal x709=(x494*x602);
IkReal x710=(x476*x530);
IkReal x711=(x482*x524);
IkReal x712=(x491*x611);
IkReal x713=(x475*x569);
IkReal x714=(x506*x603);
IkReal x715=(x476*x617);
IkReal x716=(x494*x528);
IkReal x717=(x491*x501);
IkReal x718=(x475*x585);
IkReal x719=(x482*x610);
IkReal x720=(x491*x517);
IkReal x721=(x482*x596);
IkReal x722=(x475*x622);
IkReal x723=(x476*x604);
IkReal x724=(x494*x541);
IkReal x725=(x506*x597);
IkReal x726=((0.2247)*gclwh10_5*x482);
IkReal x727=((0.2247)*gclwh8_5*x494);
IkReal x728=((0.11235)*gclwh6_5*x476);
IkReal x729=((0.11235)*gclwh8_5*x491);
IkReal x730=((0.2247)*gclwh6_5*x475);
IkReal x731=((0.11235)*gclwh10_5*x506);
IkReal x732=(x477*x546);
IkReal x733=(gclwh14_2*rxp0_2*x474);
IkReal x734=(gclwh6_3*x699);
IkReal x735=(x511*x547);
IkReal x736=(x475*x574);
IkReal x737=(x506*x547);
IkReal x738=(x512*x557);
IkReal x739=((0.0072846225)*gclwh8_2*x485);
IkReal x740=(gclwh8_2*pp*x485);
IkReal x741=(x493*x584);
IkReal x742=(gclwh12_2*rxp1_2*x474);
IkReal x743=(x482*x619);
IkReal x744=(gclwh4_2*rxp2_2*x474);
IkReal x745=(x494*x592);
IkReal x746=((0.1707)*pp*x507);
IkReal x747=(x476*x535);
IkReal x748=((4.0)*gclwh9_10*x494);
IkReal x749=((4.0)*gclwh11_10*x482);
IkReal x750=(x482*x492);
IkReal x751=(x477*x478);
IkReal x752=(x494*x516);
IkReal x753=(gclwh7_1*x699);
IkReal x754=(x511*x587);
IkReal x755=(gclwh15_0*rxp0_2*x474);
IkReal x756=(x506*x587);
IkReal x757=(x512*x513);
IkReal x758=((0.0072846225)*gclwh9_0*x485);
IkReal x759=(gclwh9_0*pp*x485);
IkReal x760=(gclwh15_1*pp*x519);
IkReal x761=(gclwh13_0*rxp1_2*x474);
IkReal x762=(gclwh5_0*rxp2_2*x474);
IkReal x763=(x475*x535);
IkReal x764=(x493*x544);
IkReal x765=((0.2247)*gclwh9_7*x494);
IkReal x766=((0.11235)*gclwh7_7*x476);
IkReal x767=((0.2247)*gclwh11_7*x482);
IkReal x768=((0.11235)*gclwh11_7*x506);
IkReal x769=((0.2247)*gclwh7_7*x475);
IkReal x770=((0.11235)*gclwh9_7*x491);
IkReal x771=((0.11235)*gclwh12_14*x476);
IkReal x772=(x494*x611);
IkReal x773=((0.11235)*gclwh4_14*x506);
IkReal x774=(x475*x530);
IkReal x775=((0.11235)*gclwh14_14*x491);
IkReal x776=(x482*x606);
IkReal x777=(gclwh14_8*npx*x474);
IkReal x778=(gclwh14_2*pp*x485);
IkReal x779=(gclwh12_3*x699);
IkReal x780=(gclwh3_2*pz*x493);
IkReal x781=((0.08535)*gclwh12_8*x476);
IkReal x782=(x482*x496);
IkReal x783=(gclwh6_2*rxp1_2*x474);
IkReal x784=(gclwh3_3*x699);
IkReal x785=(x473*x575);
IkReal x786=(x498*x579);
IkReal x787=((0.0072846225)*gclwh14_2*x485);
IkReal x788=(gclwh4_3*r22*x473);
IkReal x789=((0.0072846225)*gclwh1_2*x485);
IkReal x790=(x475*x581);
IkReal x791=(gclwh12_8*npy*x474);
IkReal x792=(gclwh4_8*npz*x474);
IkReal x793=(x474*x503);
IkReal x794=((0.08535)*gclwh14_8*x491);
IkReal x795=(x494*x623);
IkReal x796=(gclwh6_3*pp*x477);
IkReal x797=(x474*x621);
IkReal x798=((0.0072846225)*pz*x486);
IkReal x799=(x493*x612);
IkReal x800=(x493*x508);
IkReal x801=(x473*x490);
IkReal x802=((0.08535)*gclwh15_9*x491);
IkReal x803=(x506*x514);
IkReal x804=(x476*x508);
IkReal x805=(x493*x499);
IkReal x806=((0.0072846225)*gclwh0_0*x485);
IkReal x807=(x474*x502);
IkReal x808=(x511*x514);
IkReal x809=(gclwh2_1*x699);
IkReal x810=(x482*x597);
IkReal x811=(gclwh5_9*npz*x474);
IkReal x812=(x477*x562);
IkReal x813=(x475*x604);
IkReal x814=(x474*x593);
IkReal x815=(gclwh13_9*npy*x474);
IkReal x816=(x473*x618);
IkReal x817=(x497*x498);
IkReal x818=(gclwh15_9*npx*x474);
IkReal x819=((0.08535)*gclwh13_9*x476);
IkReal x820=(gclwh11_1*pp*x512);
IkReal x821=(x494*x517);
IkReal x822=(gclwh7_0*rxp1_2*x474);
IkReal x823=((0.0072846225)*gclwh15_0*x485);
IkReal x824=(gclwh6_2*npy*x700);
IkReal x825=(gclwh6_3*x475*x570);
IkReal x826=(gclwh6_2*x476*x540);
IkReal x827=(gclwh10_2*npz*x700);
IkReal x828=(gclwh8_2*npx*x700);
IkReal x829=(gclwh11_1*x482*x570);
IkReal x830=(gclwh7_0*npy*x700);
IkReal x831=(gclwh9_0*npx*x700);
IkReal x832=(gclwh11_1*r22*x701);
IkReal x833=((2.0)*x475*x562);
IkReal x834=(gclwh11_0*npz*x700);
IkReal x835=(gclwh7_0*x476*x540);
IkReal x836=(gclwh12_2*npy*x700);
IkReal x837=(gclwh3_2*npy*x700);
IkReal x838=(gclwh1_2*npx*x700);
IkReal x839=(gclwh14_3*x494*x570);
IkReal x840=(gclwh4_2*npz*x700);
IkReal x841=((2.0)*x482*x557);
IkReal x842=(gclwh12_2*x476*x540);
IkReal x843=(gclwh1_2*x485*x537);
IkReal x844=(gclwh3_3*x475*x570);
IkReal x845=(pz*x486*x537);
IkReal x846=(gclwh1_3*x494*x570);
IkReal x847=(gclwh3_2*x476*x540);
IkReal x848=((2.0)*x475*x546);
IkReal x849=(gclwh14_2*npx*x700);
IkReal x850=(x607*x701);
IkReal x851=(gclwh0_0*npx*x700);
IkReal x852=(gclwh2_0*npy*x700);
IkReal x853=((2.0)*x482*x513);
IkReal x854=((2.0)*x475*x478);
IkReal x855=(gclwh15_0*npx*x700);
IkReal x856=(gclwh2_1*x475*x570);
IkReal x857=(gclwh0_1*x494*x570);
IkReal x858=(gclwh5_0*npz*x700);
IkReal x859=(gclwh13_0*npy*x700);
IkReal x860=(gclwh0_0*x485*x537);
IkReal x861=(gclwh15_0*x485*x537);
IkReal x862=((1.0)*x476*x499);
IkReal x863=((1.0)*gclwh13_1*x699);
IkReal x864=(gclwh5_1*r22*x701);
IkReal x865=(gclwh15_1*x494*x570);
IkReal x866=(x676+x677);
IkReal x867=(x643+x642);
IkReal x868=(x669+x671);
IkReal x869=(x649+x651+x652+x736);
IkReal x870=(x668+x667+x666+x763);
IkReal x871=(x690+x692+x813+x810);
IkReal x872=(x683+x682+x790+x782);
IkReal x873=(x632+x711+x713+x712);
IkReal x874=(x680+x776+x775+x774);
IkReal x875=(x635+x719+x718+x717);
IkReal x876=(x670+x765+x766+x767);
IkReal x877=(x644+x726+x727+x728);
IkReal x878=(x689+x688+x687+x686+x795);
IkReal x879=(x694+x695+x696+x697+x821);
IkReal x880=(x653+x654+x656+x745+x743);
IkReal x881=(x661+x660+x663+x750+x752);
IkReal x882=(x629+x628+x706+x707+x705);
IkReal x883=(x630+x631+x710+x708+x709);
IkReal x884=(x636+x637+x720+x721+x722);
IkReal x885=(x646+x645+x731+x730+x729);
IkReal x886=(x634+x633+x715+x714+x716);
IkReal x887=(x673+x674+x770+x768+x769);
IkReal x888=(x678+x675+x773+x772+x771);
IkReal x889=(((x491*x516))+(((4.0)*gclwh7_10*x475))+((gclwh9_10*x588))+((x492*x506))+((gclwh11_10*x571))+((gclwh15_10*x505)));
IkReal x890=(x657+x658+x659+x747+x748+x749);
IkReal x891=(x641+x640+x638+x639+x723+x724+x725);
IkReal x892=(x625+x624+x627+x626+x702+x703+x704);
IkReal x893=(x655+x746+x744+x742+x741+x828+x827+x826+x825);
IkReal x894=(x648+x650+x737+x735+x734+x733+x732+x739+x738+x740+x824);
IkReal x895=(x665+x764+x760+x761+x762+x834+x835+x831+x832+x833);
IkReal x896=(x662+x664+x755+x754+x757+x756+x751+x753+x759+x758+x829+x830);
IkReal x897=(x693+x698+x856+x857+x858+x859+x865+x864+x863+x862+x861+x860+x818+x819+x817+x823+x822+x820);
IkReal x898=(x474+x681+x684+x777+x779+x778+x783+x780+x781+x786+x787+x784+x785+x788+x789+x836+x837+x838+x839+x840);
IkReal x899=(x685+x791+x793+x792+x794+x797+x796+x799+x798+x850+x841+x843+x842+x845+x844+x847+x846+x849+x848);
IkReal x900=(x474+x691+x852+x853+x851+x854+x855+x816+x814+x815+x812+x811+x809+x808+x805+x804+x807+x806+x801+x800+x803+x802);
op[35]=((-0.01366176)+(((-1.0)*x889))+x890);
op[36]=((0.392270175)+(((-1.0)*x892))+x882);
op[37]=((((-0.15598566)*x503))+(((-0.9138)*gclwh1_2*x491))+(((-0.0066566880405)*x486))+(((-0.9138)*pp*x486))+(((1.8276)*gclwh12_2*x475))+((gclwh14_2*x614))+(((-0.9138)*gclwh3_2*x476))+((gclwh1_2*x614))+(((0.0066566880405)*gclwh3_2*r21))+(((-1.0)*x883))+(((-1.8276)*gclwh14_2*x494))+((gclwh6_2*x553))+(((-0.9138)*gclwh12_2*x476))+(((1.8276)*gclwh1_2*x494))+(((0.9138)*gclwh14_2*x491))+(((-0.0066566880405)*x509))+x873+(((-0.15598566)*x621))+(((1.8276)*gclwh4_2*x482))+(((1.8276)*gclwh3_2*x475)));
op[38]=((((-0.8988)*gclwh14_14*x494))+(((0.8988)*gclwh12_14*x475))+((x491*x602))+(((-1.0)*x506*x524))+(((-0.0032737093515)*x542))+(((-0.1456071)*x599))+(((0.1456071)*x525))+(((-1.0)*x476*x569))+(((-0.1456071)*x484))+((gclwh14_14*x538))+(((0.8988)*gclwh4_14*x482))+(((-1.0)*gclwh12_14*x616)));
op[39]=((-0.00506895)+(((-0.02913849)*x518))+((gclwh12_11*x613))+(((8.0)*gclwh14_11*x494))+((gclwh8_11*x534))+((x476*x481))+((x506*x568))+((gclwh4_11*x488))+(((-1.0)*gclwh6_11*x598))+(((-8.0)*gclwh4_11*x482))+(((-8.0)*gclwh12_11*x475))+(((0.6828)*x564))+(((-1.0)*x491*x520)));
op[40]=((0.023396725)+(((-1.0)*x882))+x892);
op[41]=((((-0.01037856)*x503))+(((-0.0608)*gclwh1_2*x491))+((gclwh1_2*x565))+((gclwh14_2*x565))+(((-0.000442905048)*x486))+(((0.1216)*gclwh3_2*x475))+(((0.0608)*gclwh14_2*x491))+(((-0.1216)*gclwh14_2*x494))+(((0.1216)*gclwh1_2*x494))+((gclwh6_2*x608))+(((-0.0608)*pp*x486))+(((0.1216)*gclwh12_2*x475))+((gclwh3_2*x536))+(((-0.01037856)*x621))+(((-0.0608)*gclwh12_2*x476))+(((-0.0608)*gclwh3_2*x476))+(((-0.000442905048)*x509))+(((0.1216)*gclwh4_2*x482))+x883+(((-1.0)*x873)));
op[42]=((((0.0066566880405)*x554))+(((-1.8276)*gclwh13_0*x475))+(((-1.0)*gclwh7_0*x553))+(((0.15598566)*x502))+(((0.0066566880405)*x582))+(((-0.9138)*gclwh0_0*x491))+(((1.8276)*gclwh15_0*x494))+(((1.8276)*gclwh0_0*x494))+(((0.15598566)*x593))+(((0.9138)*gclwh13_0*x476))+(((-1.0)*x886))+(((-1.8276)*gclwh5_0*x482))+(((-1.0)*gclwh15_0*x614))+(((0.9138)*gclwh5_0*x506))+(((0.0066566880405)*x590))+(((1.8276)*gclwh2_0*x475))+x875+((gclwh0_0*x614))+(((-0.9138)*gclwh15_0*x491))+(((-0.9138)*gclwh2_0*x476)));
op[43]=((0.392270175)+(((-1.0)*x884))+x891);
op[44]=((0.00506895)+((gclwh5_10*x488))+(((8.0)*gclwh15_10*x494))+(((-8.0)*gclwh13_10*x475))+(((-1.0)*gclwh7_10*x598))+(((-0.02913849)*gclwh15_10*r20))+(((-8.0)*gclwh5_10*x482))+((x476*x622))+((x506*x596))+((gclwh13_10*x613))+((gclwh9_10*x534))+(((-1.0)*x491*x541))+(((0.6828)*x510)));
op[45]=((((0.8988)*gclwh15_15*x494))+((gclwh13_15*x616))+(((-1.0)*gclwh15_15*x538))+((x476*x585))+(((-0.8988)*gclwh13_15*x475))+(((0.1456071)*x479))+(((-0.8988)*gclwh5_15*x482))+(((-0.1456071)*x620))+((x506*x610))+(((0.0032737093515)*x583))+(((0.1456071)*x609))+(((-1.0)*x491*x528)));
op[46]=((((0.1216)*gclwh0_0*x494))+((gclwh13_0*x536))+(((0.1216)*gclwh2_0*x475))+(((-0.1216)*gclwh13_0*x475))+(((0.000442905048)*x554))+(((-0.0608)*gclwh15_0*x491))+(((-0.0608)*gclwh2_0*x476))+(((0.01037856)*x593))+(((-1.0)*gclwh7_0*x608))+((gclwh2_0*x536))+(((0.01037856)*x502))+(((-0.0608)*gclwh0_0*x491))+(((0.0608)*gclwh13_0*x476))+((gclwh0_0*x565))+(((-0.1216)*gclwh5_0*x482))+x886+(((0.0608)*gclwh5_0*x506))+(((0.1216)*gclwh15_0*x494))+(((-1.0)*gclwh15_0*x565))+(((-1.0)*x875)));
op[47]=((0.023396725)+(((-1.0)*x891))+x884);
op[48]=((((-1.0)*x867))+((gclwh10_12*x521))+(((0.9138)*gclwh6_12*x475))+((gclwh14_8*x601))+(((0.4569)*gclwh8_12*x491))+(((-0.07799283)*x504))+(((-0.9138)*gclwh8_12*x494))+(((-0.9138)*gclwh10_12*x482))+((gclwh8_12*x573))+(((-1.0)*x885))+(((0.4569)*gclwh10_12*x506))+x647+(((-0.07799283)*x529))+(((-0.00332834402025)*x559))+x877+(((-0.4569)*gclwh6_12*x476)));
op[49]=((((-1.0)*x869))+(((0.42819102)*gclwh6_3*x475))+(((-1.0)*gclwh6_3*x515))+(((-1.0)*gclwh10_11*x506))+(((-1.0)*x893))+(((-1.0)*gclwh8_11*x491))+(((-1.0)*gclwh4_3*x576))+((gclwh6_11*x476))+(((0.036546103557)*x507))+(((-0.2068108875)*gclwh6_3*x476))+(((-1.0)*gclwh12_3*x577))+x880+x894);
op[50]=((0.09583455)+(((4.0)*gclwh10_11*x482))+(((-1.0)*gclwh10_11*x571))+(((-1.0)*x506*x619))+(((4.0)*gclwh8_11*x494))+(((-1.0)*x491*x592))+((gclwh12_11*x533))+(((-4.0)*gclwh6_11*x475))+((gclwh6_11*x489))+((x476*x574))+((gclwh4_11*x578))+(((-1.0)*gclwh8_11*x588))+(((-1.0)*gclwh14_11*x505)));
op[51]=((((-1.0)*gclwh8_2*x532))+((gclwh4_2*x595))+(((0.4265)*gclwh6_2*x476))+(((-0.4265)*gclwh10_2*x506))+((gclwh6_2*x605))+(((0.08318211)*x529))+(((0.03835629)*gclwh4_14*rxp2_2))+(((-1.0)*gclwh14_2*x580))+((gclwh12_2*x539))+(((0.853)*gclwh8_2*x494))+(((-0.853)*gclwh6_2*x475))+(((0.853)*gclwh10_2*x482))+(((-0.4265)*gclwh8_2*x491))+(((0.03835629)*x523))+(((-1.0)*gclwh14_8*x522))+(((-1.0)*gclwh14_14*x560))+(((0.08318211)*x504))+(((-1.0)*gclwh10_2*x591)));
op[52]=((((0.0608)*gclwh6_12*x475))+((gclwh8_12*x556))+(((-0.0608)*gclwh8_12*x494))+(((-0.0608)*gclwh10_12*x482))+(((0.000221452524)*gclwh10_12*r22))+(((-1.0)*x885))+(((-1.0)*x647))+(((0.00518928)*x504))+(((-1.0)*gclwh14_8*x589))+(((0.0304)*gclwh8_12*x491))+x867+x877+(((-0.000221452524)*x559))+(((0.0304)*gclwh10_12*x506))+(((-0.0304)*gclwh6_12*x476))+(((0.00518928)*x529)));
op[53]=((((-1.0)*gclwh6_3*x480))+(((-1.0)*x893))+(((0.01252412)*gclwh6_3*x475))+((gclwh10_11*x506))+(((-1.0)*x880))+(((0.0010225625)*gclwh6_3*x476))+(((-1.0)*gclwh6_11*x476))+(((0.001068933642)*x507))+(((-1.0)*gclwh4_3*x495))+x869+x894+(((-1.0)*gclwh12_3*x526))+((gclwh8_11*x491)));
op[54]=((((-0.42819102)*gclwh11_1*x482))+((gclwh11_10*x506))+((gclwh9_10*x491))+(((-1.0)*gclwh7_10*x476))+(((-1.0)*x895))+(((-1.0)*x881))+((gclwh11_1*x600))+(((0.42819102)*gclwh7_1*x475))+(((-1.0)*gclwh13_1*x577))+(((-1.0)*gclwh7_1*x515))+(((-1.0)*gclwh5_1*x576))+x870+x896+(((-0.2068108875)*gclwh7_1*x476))+(((0.2068108875)*gclwh11_1*x506))+(((0.036546103557)*x558)));
op[55]=((((-1.0)*x868))+(((-0.4569)*gclwh7_13*x476))+((gclwh15_9*x601))+(((0.00332834402025)*x487))+(((0.9138)*gclwh7_13*x475))+(((0.4569)*gclwh9_13*x491))+(((-1.0)*x887))+(((-0.07799283)*x555))+(((-0.9138)*gclwh11_13*x482))+(((-0.9138)*gclwh9_13*x494))+((gclwh9_13*x573))+x672+(((-0.07799283)*x549))+((x487*x566))+x876+(((-0.00332834402025)*x586)));
op[56]=(((gclwh13_0*x539))+(((0.853)*gclwh11_0*x482))+((gclwh15_9*x522))+((gclwh7_0*x605))+(((-0.4265)*gclwh9_0*x491))+(((-0.03835629)*x545))+((gclwh15_15*x560))+(((0.853)*gclwh9_0*x494))+(((-0.853)*gclwh7_0*x475))+(((-1.0)*gclwh9_0*x532))+(((-1.0)*gclwh15_0*x580))+(((-0.08318211)*x549))+(((-0.4265)*gclwh11_0*x506))+((gclwh5_0*x595))+(((-0.08318211)*x555))+(((0.4265)*gclwh7_0*x476))+(((-0.03835629)*gclwh13_15*rxp1_2))+(((-1.0)*gclwh11_0*x591)));
op[57]=((0.09583455)+(((-1.0)*x889))+x890);
op[58]=((((-0.0010225625)*gclwh11_1*x506))+(((-0.01252412)*gclwh11_1*x482))+(((0.0010225625)*gclwh7_1*x476))+(((-1.0)*gclwh11_10*x506))+((gclwh7_10*x476))+(((-1.0)*x895))+(((-1.0)*gclwh9_10*x491))+(((0.001068933642)*x558))+(((-1.0)*gclwh7_1*x480))+((gclwh11_1*x552))+(((-1.0)*gclwh5_1*x495))+x881+x896+(((-1.0)*gclwh13_1*x526))+(((0.01252412)*gclwh7_1*x475))+(((-1.0)*x870)));
op[59]=((((0.0608)*gclwh7_13*x475))+(((-1.0)*gclwh15_9*x589))+(((-0.0304)*gclwh7_13*x476))+(((0.0304)*pp*x487))+(((0.0304)*gclwh9_13*x491))+(((0.00518928)*x549))+((gclwh9_13*x556))+(((0.000221452524)*x487))+(((-0.000221452524)*x586))+(((-1.0)*x887))+(((-0.0608)*gclwh11_13*x482))+x868+x876+(((-0.0608)*gclwh9_13*x494))+(((0.00518928)*x555))+(((-1.0)*x672)));
op[60]=((((0.9138)*gclwh12_8*x475))+(((-0.4569)*gclwh4_8*x506))+(((-1.0)*gclwh4_8*x521))+(((0.9138)*gclwh4_8*x482))+(((-0.07799283)*x599))+(((-1.0)*x888))+(((-0.9138)*gclwh14_8*x494))+((gclwh14_8*x573))+(((-0.07799283)*x484))+(((0.4569)*gclwh14_8*x491))+(((0.07799283)*x525))+(((-0.4569)*gclwh12_8*x476))+x866+x874+(((-0.00332834402025)*x572))+(((-1.0)*x679)));
op[61]=((0.2213801325)+(((-0.2068108875)*gclwh12_3*x476))+((gclwh6_3*x577))+(((0.00155960496929498)*x575))+(((-1.0)*x899))+(((0.42819102)*gclwh12_3*x475))+((gclwh12_11*x476))+(((0.2068108875)*gclwh14_3*x491))+(((-0.2068108875)*gclwh4_3*x506))+(((-0.2213801325)*gclwh1_3*x491))+(((-0.2213801325)*gclwh3_3*x476))+(((0.42819102)*gclwh4_3*x482))+(((0.42819102)*gclwh1_3*x494))+((gclwh3_3*x515))+(((-1.0)*gclwh14_11*x491))+(((0.00155960496929498)*x607))+x878+x898+(((-1.0)*gclwh4_3*x600))+(((0.42819102)*gclwh3_3*x475))+(((-1.0)*gclwh12_3*x515))+((gclwh4_11*x506))+(((-0.42819102)*gclwh14_3*x494))+(((-1.0)*x872)));
op[62]=((0.053024565)+(((-1.0)*x882))+x892);
op[63]=(((gclwh10_2*x595))+(((0.4265)*gclwh12_2*x476))+(((-1.0)*gclwh6_2*x539))+(((-1.0)*gclwh3_2*x605))+(((0.4265)*gclwh3_2*x476))+(((-1.0)*gclwh1_2*x532))+(((0.853)*gclwh14_2*x494))+(((-0.00354979654425)*x615))+(((-0.4265)*gclwh14_2*x491))+(((-0.853)*gclwh4_2*x482))+(((0.4873)*gclwh4_8*x506))+(((0.4873)*gclwh12_8*x476))+(((0.00310689149625)*x486))+(((0.00310689149625)*x509))+(((-0.853)*gclwh3_2*x475))+(((-1.0)*gclwh14_2*x532))+(((-0.9746)*gclwh12_8*x475))+(((0.4265)*gclwh1_2*x491))+(((0.4265)*pp*x486))+x883+(((0.9746)*gclwh14_8*x494))+(((0.07280355)*x503))+(((-0.9746)*gclwh4_8*x482))+(((-0.853)*gclwh1_2*x494))+(((-0.853)*gclwh12_2*x475))+(((0.00354979654425)*x572))+(((0.00354979654425)*x579))+(((-1.0)*x873))+(((-0.4873)*gclwh14_8*x491)));
op[64]=((((-0.0304)*gclwh14_8*x491))+(((0.0608)*gclwh14_8*x494))+(((0.000221452524)*x572))+(((0.000221452524)*x579))+(((0.0304)*gclwh12_8*x476))+(((-0.0608)*gclwh12_8*x475))+(((-1.0)*gclwh8_12*x589))+(((-1.0)*gclwh14_8*x556))+x866+x888+(((0.0304)*gclwh4_8*x506))+(((-1.0)*x679))+(((0.00518928)*x525))+(((-0.0608)*gclwh4_8*x482))+(((-0.00518928)*x484))+(((-1.0)*x874)));
op[65]=((-0.0135466825)+((gclwh14_11*x491))+(((-1.0)*gclwh12_11*x476))+((gclwh6_3*x526))+(((0.0010225625)*gclwh4_3*x506))+(((0.01252412)*gclwh1_3*x494))+(((0.01252412)*gclwh3_3*x475))+(((-0.0135466825)*gclwh1_3*x491))+(((0.01252412)*gclwh12_3*x475))+(((4.561674317235e-5)*x607))+(((-1.0)*gclwh12_3*x480))+(((-0.0135466825)*gclwh3_3*x476))+(((-1.0)*x899))+(((-1.0)*gclwh4_3*x552))+(((-0.0010225625)*gclwh14_3*x491))+(((4.561674317235e-5)*x575))+(((-1.0)*gclwh4_11*x506))+(((0.0010225625)*gclwh12_3*x476))+x872+x898+(((0.01252412)*gclwh4_3*x482))+((gclwh3_3*x480))+(((-0.01252412)*gclwh14_3*x494))+(((-1.0)*x878)));
op[66]=((-0.2213801325)+(((0.2068108875)*gclwh5_1*x506))+((gclwh5_1*x600))+((gclwh11_1*x576))+(((0.42819102)*gclwh0_1*x494))+(((-0.2068108875)*pp*x490))+(((-1.0)*x897))+((gclwh13_1*x515))+(((-0.42819102)*gclwh5_1*x482))+(((-1.0)*gclwh15_10*x491))+((gclwh5_10*x506))+(((0.00155960496929498)*x618))+(((0.42819102)*gclwh2_1*x475))+(((-0.42819102)*gclwh13_1*x475))+(((-0.2213801325)*gclwh0_1*x491))+(((0.2068108875)*gclwh13_1*x476))+(((-0.2213801325)*gclwh2_1*x476))+((gclwh13_10*x476))+x879+(((-1.0)*gclwh7_1*x577))+(((0.42819102)*gclwh15_1*x494))+((gclwh2_1*x515))+x900+(((-0.00155960496929498)*x490))+(((-1.0)*x871)));
op[67]=((((0.00332834402025)*x548))+(((-0.9138)*gclwh13_9*x475))+((x494*x501))+(((0.00332834402025)*x497))+((gclwh7_7*x551))+(((0.11235)*gclwh13_15*x476))+(((-1.0)*x475*x617))+(((0.07799283)*x609))+(((-1.0)*gclwh15_15*x543))+(((-0.07799283)*x620))+(((-0.9138)*gclwh5_9*x482))+(((-1.0)*x482*x603))+(((0.11235)*gclwh5_15*x506))+(((-0.4569)*gclwh15_9*x491))+(((-0.00332834402025)*x527))+((gclwh5_15*x563))+(((-0.11235)*gclwh15_15*x491))+(((0.07799283)*x479))+(((-1.0)*gclwh11_7*x561))+(((0.4569)*gclwh13_9*x476))+(((-1.0)*gclwh9_7*x500))+((x497*x566))+((gclwh13_15*x567))+(((0.9138)*gclwh15_9*x494)));
op[68]=(((gclwh15_0*x532))+(((0.853)*gclwh5_0*x482))+(((-0.4265)*gclwh13_0*x476))+(((0.853)*gclwh13_0*x475))+(((-0.9746)*gclwh5_9*x482))+(((0.4265)*gclwh15_0*x491))+(((-0.00310689149625)*x582))+(((-0.853)*gclwh0_0*x494))+(((0.9746)*gclwh15_9*x494))+(((-1.0)*gclwh0_0*x532))+(((-0.07280355)*x593))+(((-0.4265)*gclwh5_0*x506))+(((0.4265)*gclwh0_0*x491))+(((0.4265)*gclwh2_0*x476))+(((0.4873)*pp*x497))+((gclwh7_0*x539))+(((-0.9746)*gclwh13_9*x475))+x886+(((-0.07280355)*x502))+(((-0.00354979654425)*x527))+(((0.4873)*gclwh13_9*x476))+(((-0.853)*gclwh15_0*x494))+(((-0.00310689149625)*x590))+(((0.00354979654425)*x548))+(((-0.4873)*gclwh15_9*x491))+(((0.00354979654425)*x497))+(((-1.0)*x875))+(((-0.00310689149625)*x554))+(((-0.853)*gclwh2_0*x475)));
op[69]=((0.053024565)+(((-1.0)*x891))+x884);
op[70]=((0.0135466825)+(((0.01252412)*gclwh0_1*x494))+(((-1.0)*gclwh7_1*x526))+((gclwh15_10*x491))+(((-1.0)*gclwh5_10*x506))+((gclwh2_1*x480))+(((-0.01252412)*gclwh5_1*x482))+(((0.01252412)*gclwh15_1*x494))+(((-1.0)*x897))+(((-4.561674317235e-5)*x490))+((gclwh5_1*x552))+(((4.561674317235e-5)*x618))+(((-0.01252412)*gclwh13_1*x475))+((gclwh13_1*x480))+(((0.0010225625)*pp*x490))+(((-0.0135466825)*gclwh0_1*x491))+((gclwh11_1*x495))+(((0.01252412)*gclwh2_1*x475))+(((-1.0)*gclwh13_10*x476))+x871+(((-0.0135466825)*gclwh2_1*x476))+(((-0.0010225625)*gclwh5_1*x506))+(((-0.0010225625)*gclwh13_1*x476))+x900+(((-1.0)*x879)));
IkReal x901=((0.0304)*pp);
IkReal x902=(gclwh13_9*r21);
IkReal x903=(gclwh5_9*r22);
IkReal x904=((0.0608)*pz);
IkReal x905=(gclwh15_9*r20);
IkReal x906=((0.2247)*pz);
IkReal x907=(gclwh13_15*r21);
IkReal x908=(gclwh15_15*r20);
IkReal x909=((0.11235)*pp);
IkReal x910=(gclwh5_15*r22);
op[71]=((((0.00518928)*gclwh11_13*rxp2_2))+(((-1.0)*gclwh15_9*npx*x904))+(((-0.000221452524)*x903))+(((-0.000221452524)*x902))+(((-0.019178145)*gclwh11_7*rxp2_2))+((x901*x905))+(((0.00518928)*gclwh9_13*rxp0_2))+((gclwh5_15*npz*x906))+((gclwh13_15*npy*x906))+(((-0.000818427337875)*x907))+(((-0.000818427337875)*x910))+((gclwh13_9*npy*x904))+(((0.000818427337875)*x908))+((gclwh5_9*npz*x904))+(((0.019178145)*gclwh7_7*rxp1_2))+(((-1.0)*x901*x902))+(((-1.0)*x901*x903))+(((-0.019178145)*gclwh9_7*rxp0_2))+(((-0.00518928)*gclwh7_13*rxp1_2))+((x908*x909))+(((-1.0)*gclwh15_15*npx*x906))+(((-1.0)*x907*x909))+(((-1.0)*x909*x910))+(((0.000221452524)*x905)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x911=htj1*htj1;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+x911),-1);
if(!x912.valid){
continue;
}
cj1array[numsolutions]=((x912.value)*(((1.0)+(((-1.0)*x911)))));
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x913.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x913.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x914=htj2*htj2;
CheckValue<IkReal> x915=IKPowWithIntegerCheck(((1.0)+x914),-1);
if(!x915.valid){
continue;
}
cj2array[numsolutions]=((x915.value)*(((1.0)+(((-1.0)*x914)))));
CheckValue<IkReal> x916=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x916.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x916.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x917=htj3*htj3;
CheckValue<IkReal> x918=IKPowWithIntegerCheck(((1.0)+x917),-1);
if(!x918.valid){
continue;
}
cj3array[numsolutions]=((x918.value)*(((1.0)+(((-1.0)*x917)))));
CheckValue<IkReal> x919=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x919.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x919.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x920=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x920);
rxp1_0=(pz*r11);
rxp1_1=(r01*x920);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x921=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x921);
rxp1_0=(pz*r11);
rxp1_1=(r01*x921);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(r22,-1);
if(!x922.valid){
continue;
}
CheckValue<IkReal> x923=IKPowWithIntegerCheck(sj3,-1);
if(!x923.valid){
continue;
}
sj4array[0]=((x922.value)*(x923.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x924=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x924);
rxp1_0=(pz*r11);
rxp1_1=(r01*x924);
IkReal x925=((16.0)*sj4);
IkReal x926=(cj1*cj2);
IkReal x927=((4.0)*sj3);
IkReal x928=((8.0)*sj4);
IkReal x929=((4.0)*cj4);
IkReal x930=(sj1*sj2);
IkReal x931=((4.0)*sj4);
IkReal x932=(cj3*r02);
IkReal x933=((16.0)*sj3);
IkReal x934=((8.0)*sj3);
IkReal x935=((12.0)*cj4);
IkReal x936=((12.0)*sj4);
IkReal x937=(cj3*r12);
IkReal x938=(r11*x927);
IkReal x939=(r01*x927);
IkReal x940=(r01*x930);
IkReal x941=(cj3*cj4*r01);
IkReal x942=(cj3*cj4*r11);
IkReal x943=(cj3*r10*x929);
IkReal x944=(x936*x937);
IkReal x945=(cj3*r00*x929);
IkReal x946=(x932*x936);
IkReal x947=(r00*x930*x931);
IkReal x948=(r02*x930*x935);
IkReal x949=(r00*x926*x931);
IkReal x950=(r02*x926*x935);
IkReal x951=(r10*x930*x931);
IkReal x952=(r12*x926*x935);
IkReal x953=(r12*x930*x935);
IkReal x954=(r10*x926*x931);
IkReal x955=(x938+x949);
IkReal x956=(x939+x951);
IkReal x957=(x943+x947);
IkReal x958=(x950+x944);
IkReal x959=(x954+x945);
IkReal x960=(x953+x946);
j5eval[0]=((IKabs(((((-1.0)*r10*x934))+(((-1.0)*x928*x940))+((r01*x926*x928))+(((-8.0)*x942)))))+(((0.5)*(IKabs((((r01*x925*x926))+(((-1.0)*r10*x933))+(((-1.0)*x925*x940))+(((-16.0)*x942)))))))+(((0.5)*(IKabs((((r11*x925*x930))+(((-1.0)*r11*x925*x926))+(((-16.0)*x941))+(((-1.0)*r00*x933)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x926*x929))+(((-1.0)*x931*x937))+((r02*x929*x930))+(((-1.0)*x957))+x955)))))+(((0.5)*(IKabs(((((-1.0)*x955))+(((-1.0)*x958))+x957+x948)))))+(IKabs(((((-1.0)*r11*x926*x928))+(((-8.0)*x941))+((r11*x928*x930))+(((-1.0)*r00*x934)))))+(((0.5)*(IKabs(((((-1.0)*x959))+x956+x952+(((-1.0)*x960)))))))+(((0.5)*(IKabs(((((-1.0)*x957))+(((-1.0)*x958))+x955+x948)))))+(((0.5)*(IKabs(((((-1.0)*x956))+x959+x952+(((-1.0)*x960)))))))+(((0.5)*(IKabs(((((-1.0)*x931*x932))+(((-1.0)*r12*x929*x930))+((r12*x926*x929))+(((-1.0)*x959))+x956))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x961=(r10*sj3);
IkReal x962=(r01*sj4);
IkReal x963=(cj1*cj2);
IkReal x964=(cj3*cj4);
IkReal x965=(sj1*sj2);
IkReal x966=(cj4*r02);
IkReal x967=((4.0)*r11*sj3);
IkReal x968=(cj3*r12*sj4);
IkReal x969=((4.0)*r00*sj4);
IkReal x970=((4.0)*r10*x964);
IkReal x971=((12.0)*x968);
IkReal x972=((4.0)*x968);
IkReal x973=(x963*x969);
IkReal x974=(x965*x969);
IkReal x975=((12.0)*x965*x966);
IkReal x976=((12.0)*x963*x966);
IkReal x977=((4.0)*x965*x966);
IkReal x978=((4.0)*x963*x966);
IkReal x979=(x973+x967);
IkReal x980=(x970+x974);
IkReal x981=(x972+x978);
IkReal x982=(x971+x976);
IkReal x983=((((8.0)*x962*x963))+(((-8.0)*x962*x965))+(((-8.0)*x961))+(((-8.0)*r11*x964)));
op[0]=((((-1.0)*x981))+(((-1.0)*x980))+x977+x979);
op[1]=x983;
op[2]=((((-1.0)*x982))+(((-1.0)*x980))+x975+x979);
op[3]=((((-16.0)*r11*x964))+(((-16.0)*x961))+(((16.0)*x962*x963))+(((-16.0)*x962*x965)));
op[4]=((((-1.0)*x982))+x980+x975+(((-1.0)*x979)));
op[5]=x983;
op[6]=((((-1.0)*x981))+x980+x977+(((-1.0)*x979)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x984=(cj1*cj2);
IkReal x985=((4.0)*cj4);
IkReal x986=(sj1*sj2);
IkReal x987=((4.0)*sj4);
IkReal x988=(r00*sj3);
IkReal x989=(cj3*r02);
IkReal x990=((4.0)*r01*sj3);
IkReal x991=((16.0)*r11*sj4);
IkReal x992=(cj3*cj4*r01);
IkReal x993=((12.0)*cj4*r12);
IkReal x994=((8.0)*r11*sj4);
IkReal x995=(cj3*r00*x985);
IkReal x996=((12.0)*sj4*x989);
IkReal x997=(x987*x989);
IkReal x998=(r10*x984*x987);
IkReal x999=(r10*x986*x987);
IkReal x1000=(x984*x993);
IkReal x1001=(x986*x993);
IkReal x1002=(r12*x984*x985);
IkReal x1003=(r12*x985*x986);
IkReal x1004=(x990+x999);
IkReal x1005=(x995+x998);
IkReal x1006=(x1003+x997);
IkReal x1007=(x1001+x996);
IkReal x1008=(((x986*x994))+(((-8.0)*x988))+(((-1.0)*x984*x994))+(((-8.0)*x992)));
j5evalpoly[0]=(x1005+x1002+(((-1.0)*x1004))+(((-1.0)*x1006))+(((htj5*htj5*htj5*htj5)*((x1004+x1000+(((-1.0)*x1005))+(((-1.0)*x1007))))))+(((htj5*htj5*htj5)*((((x986*x991))+(((-16.0)*x992))+(((-16.0)*x988))+(((-1.0)*x984*x991))))))+(((htj5*htj5)*((x1005+x1000+(((-1.0)*x1004))+(((-1.0)*x1007))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1004+x1002+(((-1.0)*x1005))+(((-1.0)*x1006))))))+((htj5*x1008))+((x1008*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1009=(cj5*sj4);
IkReal x1010=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1009))+((r01*x1010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r12))+(((-1.0)*r11*x1010))+((r10*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1009))+((r01*x1010))))+IKsqr((((cj4*r12))+(((-1.0)*r11*x1010))+((r10*x1009))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1009))+((r01*x1010))), (((cj4*r12))+(((-1.0)*r11*x1010))+((r10*x1009))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1011=IKcos(j0);
IkReal x1012=IKsin(j0);
IkReal x1013=(r02*sj4);
IkReal x1014=((1.0)*sj3);
IkReal x1015=(r12*sj4);
IkReal x1016=((0.21325)*cj2);
IkReal x1017=((1.0)*cj3);
IkReal x1018=((1.0)*sj2);
IkReal x1019=(r11*sj5);
IkReal x1020=(cj5*r01);
IkReal x1021=(cj5*r11);
IkReal x1022=(r00*sj5);
IkReal x1023=((1.0)*cj2);
IkReal x1024=(r10*sj5);
IkReal x1025=((1.0)*cj4);
IkReal x1026=(cj1*x1012);
IkReal x1027=(cj4*cj5*r00);
IkReal x1028=(cj1*x1011);
IkReal x1029=(cj4*cj5*r10);
IkReal x1030=(cj4*r01*sj5);
IkReal x1031=((0.21325)*sj1*sj2);
IkReal x1032=(sj1*x1011);
IkReal x1033=((1.0)*cj5*sj4);
IkReal x1034=(sj1*x1012);
evalcond[0]=((((-1.0)*r12*x1025))+(((-1.0)*r10*x1033))+x1011+((sj4*x1019)));
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*r02*x1025))+(((-1.0)*r00*x1033))+(((-1.0)*x1012)));
evalcond[2]=((((-0.08535)*x1022))+(((-0.08535)*x1020))+(((-0.11235)*x1012))+(((-1.0)*x1011*x1031))+(((-1.0)*px))+(((0.24365)*x1028))+((x1016*x1028)));
evalcond[3]=((((-0.08535)*x1024))+(((-0.08535)*x1021))+(((0.11235)*x1011))+(((-1.0)*py))+(((-1.0)*x1012*x1031))+(((0.24365)*x1026))+((x1016*x1026)));
evalcond[4]=((((-1.0)*x1023*x1028))+((cj3*x1030))+((cj3*x1013))+((sj2*x1032))+(((-1.0)*x1017*x1027))+((sj3*x1020))+((sj3*x1022)));
evalcond[5]=((((-1.0)*x1023*x1026))+((cj3*x1015))+((cj3*cj4*x1019))+((sj2*x1034))+(((-1.0)*x1017*x1029))+((sj3*x1024))+((sj3*x1021)));
evalcond[6]=((((-1.0)*x1014*x1030))+(((-1.0)*x1018*x1028))+(((-1.0)*x1023*x1032))+(((-1.0)*x1013*x1014))+((sj3*x1027))+((cj3*x1020))+((cj3*x1022)));
evalcond[7]=((((-1.0)*x1014*x1015))+(((-1.0)*x1018*x1026))+(((-1.0)*x1023*x1034))+(((-1.0)*cj4*x1014*x1019))+((sj3*x1029))+((cj3*x1024))+((cj3*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1035=IKPowWithIntegerCheck(cj3,-1);
if(!x1035.valid){
continue;
}
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(r22,-1);
if(!x1036.valid){
continue;
}
sj4array[0]=((-1.0)*(x1035.value)*(x1036.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1037=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1037);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1037);
IkReal x1038=((16.0)*sj4);
IkReal x1039=(cj1*cj2);
IkReal x1040=((4.0)*sj3);
IkReal x1041=((8.0)*sj4);
IkReal x1042=((4.0)*cj4);
IkReal x1043=(sj1*sj2);
IkReal x1044=((4.0)*sj4);
IkReal x1045=(cj3*r02);
IkReal x1046=((16.0)*sj3);
IkReal x1047=((8.0)*sj3);
IkReal x1048=((12.0)*cj4);
IkReal x1049=((12.0)*sj4);
IkReal x1050=(cj3*r12);
IkReal x1051=(r11*x1040);
IkReal x1052=(r01*x1040);
IkReal x1053=(r01*x1043);
IkReal x1054=(cj3*cj4*r01);
IkReal x1055=(cj3*cj4*r11);
IkReal x1056=(cj3*r10*x1042);
IkReal x1057=(x1049*x1050);
IkReal x1058=(cj3*r00*x1042);
IkReal x1059=(x1045*x1049);
IkReal x1060=(r00*x1043*x1044);
IkReal x1061=(r02*x1043*x1048);
IkReal x1062=(r00*x1039*x1044);
IkReal x1063=(r02*x1039*x1048);
IkReal x1064=(r10*x1043*x1044);
IkReal x1065=(r12*x1039*x1048);
IkReal x1066=(r12*x1043*x1048);
IkReal x1067=(r10*x1039*x1044);
IkReal x1068=(x1051+x1062);
IkReal x1069=(x1052+x1064);
IkReal x1070=(x1056+x1060);
IkReal x1071=(x1057+x1063);
IkReal x1072=(x1058+x1067);
IkReal x1073=(x1059+x1066);
j5eval[0]=((((0.5)*(IKabs((x1068+x1061+(((-1.0)*x1071))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs((x1070+x1061+(((-1.0)*x1068))+(((-1.0)*x1071)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1046))+(((-1.0)*r11*x1038*x1039))+((r11*x1038*x1043))+(((-16.0)*x1054)))))))+(((0.5)*(IKabs((x1069+x1065+(((-1.0)*x1073))+(((-1.0)*x1072)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1046))+(((-1.0)*x1038*x1053))+(((-16.0)*x1055))+((r01*x1038*x1039)))))))+(IKabs(((((-1.0)*r00*x1047))+(((-8.0)*x1054))+(((-1.0)*r11*x1039*x1041))+((r11*x1041*x1043)))))+(IKabs(((((-8.0)*x1055))+(((-1.0)*r10*x1047))+((r01*x1039*x1041))+(((-1.0)*x1041*x1053)))))+(((0.5)*(IKabs((x1069+(((-1.0)*x1044*x1045))+((r12*x1039*x1042))+(((-1.0)*r12*x1042*x1043))+(((-1.0)*x1072)))))))+(((0.5)*(IKabs((x1068+(((-1.0)*x1044*x1050))+(((-1.0)*x1070))+((r02*x1042*x1043))+(((-1.0)*r02*x1039*x1042)))))))+(((0.5)*(IKabs((x1072+x1065+(((-1.0)*x1069))+(((-1.0)*x1073))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1074=(r10*sj3);
IkReal x1075=(r01*sj4);
IkReal x1076=(cj1*cj2);
IkReal x1077=(cj3*cj4);
IkReal x1078=(sj1*sj2);
IkReal x1079=(cj4*r02);
IkReal x1080=((4.0)*r11*sj3);
IkReal x1081=(cj3*r12*sj4);
IkReal x1082=((4.0)*r00*sj4);
IkReal x1083=((4.0)*r10*x1077);
IkReal x1084=((12.0)*x1081);
IkReal x1085=((4.0)*x1081);
IkReal x1086=(x1076*x1082);
IkReal x1087=(x1078*x1082);
IkReal x1088=((12.0)*x1078*x1079);
IkReal x1089=((12.0)*x1076*x1079);
IkReal x1090=((4.0)*x1078*x1079);
IkReal x1091=((4.0)*x1076*x1079);
IkReal x1092=(x1086+x1080);
IkReal x1093=(x1087+x1083);
IkReal x1094=(x1091+x1085);
IkReal x1095=(x1084+x1089);
IkReal x1096=((((-8.0)*x1074))+(((8.0)*x1075*x1076))+(((-8.0)*x1075*x1078))+(((-8.0)*r11*x1077)));
op[0]=(x1090+x1092+(((-1.0)*x1094))+(((-1.0)*x1093)));
op[1]=x1096;
op[2]=(x1092+x1088+(((-1.0)*x1095))+(((-1.0)*x1093)));
op[3]=((((16.0)*x1075*x1076))+(((-16.0)*x1075*x1078))+(((-16.0)*r11*x1077))+(((-16.0)*x1074)));
op[4]=(x1093+x1088+(((-1.0)*x1095))+(((-1.0)*x1092)));
op[5]=x1096;
op[6]=(x1090+x1093+(((-1.0)*x1094))+(((-1.0)*x1092)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1097=(cj1*cj2);
IkReal x1098=((4.0)*cj4);
IkReal x1099=(sj1*sj2);
IkReal x1100=((4.0)*sj4);
IkReal x1101=(r00*sj3);
IkReal x1102=(cj3*r02);
IkReal x1103=((4.0)*r01*sj3);
IkReal x1104=((16.0)*r11*sj4);
IkReal x1105=(cj3*cj4*r01);
IkReal x1106=((12.0)*cj4*r12);
IkReal x1107=((8.0)*r11*sj4);
IkReal x1108=(cj3*r00*x1098);
IkReal x1109=((12.0)*sj4*x1102);
IkReal x1110=(x1100*x1102);
IkReal x1111=(r10*x1097*x1100);
IkReal x1112=(r10*x1099*x1100);
IkReal x1113=(x1097*x1106);
IkReal x1114=(x1099*x1106);
IkReal x1115=(r12*x1097*x1098);
IkReal x1116=(r12*x1098*x1099);
IkReal x1117=(x1103+x1112);
IkReal x1118=(x1108+x1111);
IkReal x1119=(x1110+x1116);
IkReal x1120=(x1109+x1114);
IkReal x1121=(((x1099*x1107))+(((-8.0)*x1101))+(((-8.0)*x1105))+(((-1.0)*x1097*x1107)));
j5evalpoly[0]=(((htj5*x1121))+x1115+x1118+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1115+x1117+(((-1.0)*x1118))+(((-1.0)*x1119))))))+(((htj5*htj5)*((x1113+x1118+(((-1.0)*x1120))+(((-1.0)*x1117))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1101))+(((-16.0)*x1105))+((x1099*x1104))+(((-1.0)*x1097*x1104))))))+(((-1.0)*x1119))+(((-1.0)*x1117))+((x1121*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x1113+x1117+(((-1.0)*x1120))+(((-1.0)*x1118)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1122=(cj5*sj4);
IkReal x1123=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1123))+(((-1.0)*r00*x1122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1123))+((r10*x1122))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1123))+(((-1.0)*r00*x1122))))+IKsqr(((((-1.0)*r11*x1123))+((r10*x1122))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1123))+(((-1.0)*r00*x1122))), ((((-1.0)*r11*x1123))+((r10*x1122))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1124=IKcos(j0);
IkReal x1125=IKsin(j0);
IkReal x1126=(r02*sj4);
IkReal x1127=((1.0)*sj3);
IkReal x1128=(r12*sj4);
IkReal x1129=((0.21325)*cj2);
IkReal x1130=((1.0)*cj3);
IkReal x1131=((1.0)*sj2);
IkReal x1132=(r11*sj5);
IkReal x1133=(cj5*r01);
IkReal x1134=(cj5*r11);
IkReal x1135=(r00*sj5);
IkReal x1136=((1.0)*cj2);
IkReal x1137=(r10*sj5);
IkReal x1138=((1.0)*cj4);
IkReal x1139=(cj1*x1125);
IkReal x1140=(cj4*cj5*r00);
IkReal x1141=(cj1*x1124);
IkReal x1142=(cj4*cj5*r10);
IkReal x1143=(cj4*r01*sj5);
IkReal x1144=((0.21325)*sj1*sj2);
IkReal x1145=(sj1*x1124);
IkReal x1146=((1.0)*cj5*sj4);
IkReal x1147=(sj1*x1125);
evalcond[0]=(x1124+(((-1.0)*r12*x1138))+((sj4*x1132))+(((-1.0)*r10*x1146)));
evalcond[1]=((((-1.0)*r00*x1146))+((r01*sj4*sj5))+(((-1.0)*x1125))+(((-1.0)*r02*x1138)));
evalcond[2]=((((-0.11235)*x1125))+(((-0.08535)*x1133))+(((-0.08535)*x1135))+(((0.24365)*x1141))+(((-1.0)*px))+((x1129*x1141))+(((-1.0)*x1124*x1144)));
evalcond[3]=((((-0.08535)*x1137))+(((-0.08535)*x1134))+(((0.24365)*x1139))+((x1129*x1139))+(((-1.0)*py))+(((-1.0)*x1125*x1144))+(((0.11235)*x1124)));
evalcond[4]=((((-1.0)*x1136*x1141))+((cj3*x1143))+((sj2*x1145))+(((-1.0)*x1130*x1140))+((sj3*x1135))+((sj3*x1133))+((cj3*x1126)));
evalcond[5]=(((cj3*cj4*x1132))+((sj2*x1147))+(((-1.0)*x1130*x1142))+(((-1.0)*x1136*x1139))+((sj3*x1134))+((sj3*x1137))+((cj3*x1128)));
evalcond[6]=((((-1.0)*x1136*x1145))+((cj3*x1133))+((cj3*x1135))+(((-1.0)*x1126*x1127))+((sj3*x1140))+(((-1.0)*x1131*x1141))+(((-1.0)*x1127*x1143)));
evalcond[7]=((((-1.0)*x1136*x1147))+((cj3*x1137))+((cj3*x1134))+(((-1.0)*x1131*x1139))+(((-1.0)*x1127*x1128))+((sj3*x1142))+(((-1.0)*cj4*x1127*x1132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1149=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1149);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1149);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1150=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1150);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1150);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(r22,-1);
if(!x1151.valid){
continue;
}
sj4array[0]=((-1.0)*(x1151.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1152=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1152);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1152);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1154 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1154.valid){
continue;
}
IkReal x1153=x1154.value;
j5array[0]=((-1.0)*x1153);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1153)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1155=(cj5*sj4);
IkReal x1156=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1155))+((r01*x1156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1156))+((r10*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1155))+((r01*x1156))))+IKsqr(((((-1.0)*r11*x1156))+((r10*x1155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1155))+((r01*x1156))), ((((-1.0)*r11*x1156))+((r10*x1155))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1157=IKcos(j0);
IkReal x1158=IKsin(j0);
IkReal x1159=(cj5*r01);
IkReal x1160=(sj4*sj5);
IkReal x1161=(r00*sj5);
IkReal x1162=(cj5*r11);
IkReal x1163=((0.24365)*cj1);
IkReal x1164=(r10*sj5);
IkReal x1165=((1.0)*cj1*sj2);
IkReal x1166=((1.0)*cj2*sj1);
IkReal x1167=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1167))+x1157+((r11*x1160)));
evalcond[1]=(((r01*x1160))+(((-1.0)*x1158))+(((-1.0)*r00*x1167)));
evalcond[2]=(x1159+x1161+(((-1.0)*x1157*x1165))+(((-1.0)*x1157*x1166)));
evalcond[3]=(x1164+x1162+(((-1.0)*x1158*x1165))+(((-1.0)*x1158*x1166)));
evalcond[4]=((((-0.08535)*x1161))+(((-0.11235)*x1158))+((x1157*x1163))+(((-1.0)*px))+(((-0.08535)*x1159)));
evalcond[5]=((((-0.08535)*x1164))+(((-0.08535)*x1162))+(((0.11235)*x1157))+(((-1.0)*py))+((x1158*x1163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1168=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1168);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1168);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1169=IKPowWithIntegerCheck(r22,-1);
if(!x1169.valid){
continue;
}
sj4array[0]=((x1169.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1170=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1170);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1170);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1172 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1172.valid){
continue;
}
IkReal x1171=x1172.value;
j5array[0]=((-1.0)*x1171);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1171)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1173=(cj5*sj4);
IkReal x1174=(sj4*sj5);
if( IKabs((((r01*x1174))+(((-1.0)*r00*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1173))+(((-1.0)*r11*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1174))+(((-1.0)*r00*x1173))))+IKsqr((((r10*x1173))+(((-1.0)*r11*x1174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1174))+(((-1.0)*r00*x1173))), (((r10*x1173))+(((-1.0)*r11*x1174))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1175=IKcos(j0);
IkReal x1176=IKsin(j0);
IkReal x1177=(sj4*sj5);
IkReal x1178=(r00*sj5);
IkReal x1179=(cj5*r11);
IkReal x1180=((1.0)*r10);
IkReal x1181=((0.24365)*cj1);
IkReal x1182=(cj5*r01);
IkReal x1183=(cj5*sj4);
IkReal x1184=((1.0)*cj1*sj2);
IkReal x1185=((1.0)*cj2*sj1);
evalcond[0]=(x1175+(((-1.0)*x1180*x1183))+((r11*x1177)));
evalcond[1]=(((r01*x1177))+(((-1.0)*r00*x1183))+(((-1.0)*x1176)));
evalcond[2]=((((-0.08535)*x1182))+(((-0.08535)*x1178))+((x1175*x1181))+(((-1.0)*px))+(((-0.11235)*x1176)));
evalcond[3]=((((-0.08535)*x1179))+((x1176*x1181))+(((-1.0)*py))+(((-0.08535)*r10*sj5))+(((0.11235)*x1175)));
evalcond[4]=((((-1.0)*x1175*x1185))+(((-1.0)*x1175*x1184))+(((-1.0)*x1182))+(((-1.0)*x1178)));
evalcond[5]=((((-1.0)*x1176*x1185))+(((-1.0)*x1176*x1184))+(((-1.0)*sj5*x1180))+(((-1.0)*x1179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1186=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1186);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1186);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(r22,-1);
if(!x1187.valid){
continue;
}
sj4array[0]=((x1187.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1188=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1188);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1188);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1190 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1190.valid){
continue;
}
IkReal x1189=x1190.value;
j5array[0]=((-1.0)*x1189);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1189)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1191=(cj5*sj4);
IkReal x1192=(sj4*sj5);
if( IKabs((((r01*x1192))+(((-1.0)*r00*x1191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1191))+(((-1.0)*r11*x1192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1192))+(((-1.0)*r00*x1191))))+IKsqr((((r10*x1191))+(((-1.0)*r11*x1192))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1192))+(((-1.0)*r00*x1191))), (((r10*x1191))+(((-1.0)*r11*x1192))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1193=IKcos(j0);
IkReal x1194=IKsin(j0);
IkReal x1195=(cj5*r01);
IkReal x1196=(sj4*sj5);
IkReal x1197=(r00*sj5);
IkReal x1198=(cj5*r11);
IkReal x1199=(r10*sj5);
IkReal x1200=((0.21325)*cj1*cj2);
IkReal x1201=((1.0)*x1194);
IkReal x1202=(cj1*x1193);
IkReal x1203=((1.0)*cj5*sj4);
IkReal x1204=(sj1*sj2*x1193);
IkReal x1205=(sj1*sj2*x1194);
evalcond[0]=(x1193+(((-1.0)*r10*x1203))+((r11*x1196)));
evalcond[1]=(((r01*x1196))+(((-1.0)*r00*x1203))+(((-1.0)*x1201)));
evalcond[2]=(x1195+x1197+x1204+(((-1.0)*cj2*x1202)));
evalcond[3]=(x1199+x1198+x1205+(((-1.0)*cj1*cj2*x1201)));
evalcond[4]=((((-0.21325)*x1204))+(((-0.08535)*x1195))+(((-0.08535)*x1197))+(((0.24365)*x1202))+((x1193*x1200))+(((-1.0)*px))+(((-0.11235)*x1194)));
evalcond[5]=((((-0.21325)*x1205))+(((0.24365)*cj1*x1194))+(((-0.08535)*x1198))+(((-0.08535)*x1199))+(((-1.0)*py))+((x1194*x1200))+(((0.11235)*x1193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1206=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1206);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1206);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(r22,-1);
if(!x1207.valid){
continue;
}
sj4array[0]=((-1.0)*(x1207.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1208=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1208);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1208);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1210 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1210.valid){
continue;
}
IkReal x1209=x1210.value;
j5array[0]=((-1.0)*x1209);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1209)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1211=(cj5*sj4);
IkReal x1212=(sj4*sj5);
if( IKabs((((r01*x1212))+(((-1.0)*r00*x1211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1211))+(((-1.0)*r11*x1212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1212))+(((-1.0)*r00*x1211))))+IKsqr((((r10*x1211))+(((-1.0)*r11*x1212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1212))+(((-1.0)*r00*x1211))), (((r10*x1211))+(((-1.0)*r11*x1212))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1213=IKcos(j0);
IkReal x1214=IKsin(j0);
IkReal x1215=(sj4*sj5);
IkReal x1216=(cj5*r11);
IkReal x1217=(r00*sj5);
IkReal x1218=((1.0)*r10);
IkReal x1219=(cj5*r01);
IkReal x1220=(cj5*sj4);
IkReal x1221=((0.21325)*cj1*cj2);
IkReal x1222=((1.0)*x1214);
IkReal x1223=(cj1*x1213);
IkReal x1224=(sj1*sj2*x1213);
IkReal x1225=(sj1*sj2*x1214);
evalcond[0]=(x1213+((r11*x1215))+(((-1.0)*x1218*x1220)));
evalcond[1]=((((-1.0)*x1222))+(((-1.0)*r00*x1220))+((r01*x1215)));
evalcond[2]=(x1224+(((-1.0)*cj2*x1223))+(((-1.0)*x1217))+(((-1.0)*x1219)));
evalcond[3]=(x1225+(((-1.0)*sj5*x1218))+(((-1.0)*x1216))+(((-1.0)*cj1*cj2*x1222)));
evalcond[4]=((((-0.21325)*x1224))+(((-1.0)*px))+(((-0.11235)*x1214))+((x1213*x1221))+(((0.24365)*x1223))+(((-0.08535)*x1217))+(((-0.08535)*x1219)));
evalcond[5]=(((x1214*x1221))+(((-0.21325)*x1225))+(((0.24365)*cj1*x1214))+(((-1.0)*py))+(((-0.08535)*r10*sj5))+(((0.11235)*x1213))+(((-0.08535)*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1226=IKPowWithIntegerCheck(r22,-1);
if(!x1226.valid){
continue;
}
CheckValue<IkReal> x1227=IKPowWithIntegerCheck(sj3,-1);
if(!x1227.valid){
continue;
}
sj4array[0]=((x1226.value)*(x1227.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1228=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1228);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1228);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1229=((4.0)*r01);
IkReal x1230=((16.0)*r00);
IkReal x1231=(cj3*sj2);
IkReal x1232=((8.0)*r00);
IkReal x1233=(cj2*cj3);
IkReal x1234=(cj4*r01);
IkReal x1235=((16.0)*cj1);
IkReal x1236=((8.0)*sj1);
IkReal x1237=((16.0)*sj1);
IkReal x1238=((8.0)*cj1);
IkReal x1239=(sj2*sj3);
IkReal x1240=(cj2*sj3);
IkReal x1241=(sj1*x1240);
IkReal x1242=((4.0)*cj4*r00);
IkReal x1243=(((sj1*x1239*x1242))+((cj1*x1229*x1239))+((x1229*x1241))+((sj1*x1229*x1231)));
IkReal x1244=(((cj1*x1240*x1242))+((cj1*x1229*x1233))+((cj1*x1231*x1242))+((sj1*x1233*x1242)));
IkReal x1245=(x1244+(((-1.0)*x1243)));
IkReal x1246=(((sj1*x1231*x1232))+((x1234*x1238*x1240))+(((-1.0)*x1234*x1236*x1239))+(((-1.0)*cj1*x1232*x1233))+((x1232*x1241))+((cj1*x1232*x1239))+((x1231*x1234*x1238))+((x1233*x1234*x1236)));
IkReal x1247=(x1243+(((-1.0)*x1244)));
op[0]=x1245;
op[1]=x1246;
op[2]=x1245;
op[3]=((((-1.0)*cj1*x1230*x1233))+(((-1.0)*x1234*x1237*x1239))+((cj1*x1230*x1239))+((sj1*x1230*x1231))+((x1234*x1235*x1240))+((x1231*x1234*x1235))+((x1230*x1241))+((x1233*x1234*x1237)));
op[4]=x1247;
op[5]=x1246;
op[6]=x1247;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1248=(cj5*sj4);
IkReal x1249=(sj4*sj5);
if( IKabs((((r01*x1249))+(((-1.0)*r00*x1248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1249))+((r10*x1248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1249))+(((-1.0)*r00*x1248))))+IKsqr(((((-1.0)*r11*x1249))+((r10*x1248))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1249))+(((-1.0)*r00*x1248))), ((((-1.0)*r11*x1249))+((r10*x1248))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1250=IKcos(j0);
IkReal x1251=IKsin(j0);
IkReal x1252=((0.21325)*cj2);
IkReal x1253=((1.0)*cj3);
IkReal x1254=((1.0)*sj2);
IkReal x1255=(r11*sj5);
IkReal x1256=(cj5*r01);
IkReal x1257=(r01*sj5);
IkReal x1258=((0.21325)*sj2);
IkReal x1259=(cj5*r11);
IkReal x1260=(r00*sj5);
IkReal x1261=(cj3*cj4);
IkReal x1262=((1.0)*cj2);
IkReal x1263=(r10*sj5);
IkReal x1264=(cj1*x1251);
IkReal x1265=(cj4*cj5*r00);
IkReal x1266=(cj1*x1250);
IkReal x1267=(cj4*cj5*r10);
IkReal x1268=((1.0)*cj4*sj3);
IkReal x1269=(sj1*x1250);
IkReal x1270=((1.0)*cj5*sj4);
IkReal x1271=(sj1*x1251);
evalcond[0]=(x1250+((sj4*x1255))+(((-1.0)*r10*x1270)));
evalcond[1]=((((-1.0)*r00*x1270))+((sj4*x1257))+(((-1.0)*x1251)));
evalcond[2]=((((-1.0)*x1253*x1265))+(((-1.0)*x1262*x1266))+((x1257*x1261))+((sj3*x1256))+((sj3*x1260))+((sj2*x1269)));
evalcond[3]=(((sj2*x1271))+(((-1.0)*x1253*x1267))+(((-1.0)*x1262*x1264))+((x1255*x1261))+((sj3*x1259))+((sj3*x1263)));
evalcond[4]=(((cj3*x1260))+((cj3*x1256))+(((-1.0)*x1262*x1269))+(((-1.0)*x1257*x1268))+(((-1.0)*x1254*x1266))+((sj3*x1265)));
evalcond[5]=(((cj3*x1263))+((cj3*x1259))+(((-1.0)*x1255*x1268))+(((-1.0)*x1254*x1264))+(((-1.0)*x1262*x1271))+((sj3*x1267)));
evalcond[6]=((((-1.0)*x1258*x1269))+(((0.24365)*x1266))+(((-0.08535)*x1256))+(((-0.08535)*x1260))+(((-1.0)*px))+((x1252*x1266))+(((-0.11235)*x1251)));
evalcond[7]=((((0.24365)*x1264))+(((-0.08535)*x1259))+(((-0.08535)*x1263))+(((-1.0)*py))+((x1252*x1264))+(((0.11235)*x1250))+(((-1.0)*x1258*x1271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(cj3,-1);
if(!x1272.valid){
continue;
}
CheckValue<IkReal> x1273=IKPowWithIntegerCheck(r22,-1);
if(!x1273.valid){
continue;
}
sj4array[0]=((-1.0)*(x1272.value)*(x1273.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1274=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1274);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1274);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1275=((4.0)*r01);
IkReal x1276=((16.0)*r00);
IkReal x1277=(cj3*sj2);
IkReal x1278=((8.0)*r00);
IkReal x1279=(cj2*cj3);
IkReal x1280=(cj4*r01);
IkReal x1281=((16.0)*cj1);
IkReal x1282=((8.0)*sj1);
IkReal x1283=((16.0)*sj1);
IkReal x1284=((8.0)*cj1);
IkReal x1285=(sj2*sj3);
IkReal x1286=(cj2*sj3);
IkReal x1287=(sj1*x1286);
IkReal x1288=((4.0)*cj4*r00);
IkReal x1289=(((sj1*x1275*x1277))+((x1275*x1287))+((sj1*x1285*x1288))+((cj1*x1275*x1285)));
IkReal x1290=(((cj1*x1277*x1288))+((cj1*x1275*x1279))+((cj1*x1286*x1288))+((sj1*x1279*x1288)));
IkReal x1291=(x1290+(((-1.0)*x1289)));
IkReal x1292=(((sj1*x1277*x1278))+((x1279*x1280*x1282))+((x1278*x1287))+(((-1.0)*cj1*x1278*x1279))+((x1280*x1284*x1286))+((cj1*x1278*x1285))+((x1277*x1280*x1284))+(((-1.0)*x1280*x1282*x1285)));
IkReal x1293=(x1289+(((-1.0)*x1290)));
op[0]=x1291;
op[1]=x1292;
op[2]=x1291;
op[3]=(((x1279*x1280*x1283))+((x1280*x1281*x1286))+((x1276*x1287))+((cj1*x1276*x1285))+(((-1.0)*cj1*x1276*x1279))+(((-1.0)*x1280*x1283*x1285))+((x1277*x1280*x1281))+((sj1*x1276*x1277)));
op[4]=x1293;
op[5]=x1292;
op[6]=x1293;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1294=(cj5*sj4);
IkReal x1295=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1294))+((r01*x1295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1294))+(((-1.0)*r11*x1295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1294))+((r01*x1295))))+IKsqr((((r10*x1294))+(((-1.0)*r11*x1295))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1294))+((r01*x1295))), (((r10*x1294))+(((-1.0)*r11*x1295))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1296=IKcos(j0);
IkReal x1297=IKsin(j0);
IkReal x1298=((0.21325)*cj2);
IkReal x1299=((1.0)*cj3);
IkReal x1300=((1.0)*sj2);
IkReal x1301=(r11*sj5);
IkReal x1302=(cj5*r01);
IkReal x1303=(r01*sj5);
IkReal x1304=((0.21325)*sj2);
IkReal x1305=(cj5*r11);
IkReal x1306=(r00*sj5);
IkReal x1307=(cj3*cj4);
IkReal x1308=((1.0)*cj2);
IkReal x1309=(r10*sj5);
IkReal x1310=(cj1*x1297);
IkReal x1311=(cj4*cj5*r00);
IkReal x1312=(cj1*x1296);
IkReal x1313=(cj4*cj5*r10);
IkReal x1314=((1.0)*cj4*sj3);
IkReal x1315=(sj1*x1296);
IkReal x1316=((1.0)*cj5*sj4);
IkReal x1317=(sj1*x1297);
evalcond[0]=(x1296+((sj4*x1301))+(((-1.0)*r10*x1316)));
evalcond[1]=((((-1.0)*r00*x1316))+(((-1.0)*x1297))+((sj4*x1303)));
evalcond[2]=(((sj2*x1315))+(((-1.0)*x1308*x1312))+((sj3*x1306))+((sj3*x1302))+(((-1.0)*x1299*x1311))+((x1303*x1307)));
evalcond[3]=(((sj2*x1317))+(((-1.0)*x1308*x1310))+((sj3*x1309))+((sj3*x1305))+(((-1.0)*x1299*x1313))+((x1301*x1307)));
evalcond[4]=(((sj3*x1311))+(((-1.0)*x1300*x1312))+(((-1.0)*x1308*x1315))+(((-1.0)*x1303*x1314))+((cj3*x1306))+((cj3*x1302)));
evalcond[5]=(((sj3*x1313))+(((-1.0)*x1300*x1310))+(((-1.0)*x1308*x1317))+((cj3*x1305))+((cj3*x1309))+(((-1.0)*x1301*x1314)));
evalcond[6]=((((-1.0)*x1304*x1315))+((x1298*x1312))+(((-0.11235)*x1297))+(((-1.0)*px))+(((-0.08535)*x1302))+(((-0.08535)*x1306))+(((0.24365)*x1312)));
evalcond[7]=((((-1.0)*x1304*x1317))+((x1298*x1310))+(((0.11235)*x1296))+(((-1.0)*py))+(((-0.08535)*x1305))+(((-0.08535)*x1309))+(((0.24365)*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
IkReal x1318=((1.0)*(x1320.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1321.valid){
continue;
}
if( (((-1.0)*(x1321.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1321.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1319=((-1.0)*(IKasin(((-1.0)*(x1321.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1))))))));
j5array[0]=((((-1.0)*x1318))+(((-1.0)*x1319)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1318))+(((1.0)*x1319)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1322=cj5*cj5;
IkReal x1323=r21*r21;
IkReal x1324=(sj3*x1322);
IkReal x1325=(((sj3*(r22*r22)))+(((-1.0)*x1323*x1324))+((sj3*x1323))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1324*(r20*r20))));
j4eval[0]=x1325;
j4eval[1]=IKsign(x1325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1326=cj5*cj5;
IkReal x1327=r21*r21;
IkReal x1328=((1.0)*cj3);
IkReal x1329=(cj3*x1326);
IkReal x1330=((((-1.0)*x1326*x1328*(r20*r20)))+(((-1.0)*x1327*x1328))+((x1327*x1329))+(((-1.0)*x1328*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1330;
j4eval[1]=IKsign(x1330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1331=cj1*cj1;
IkReal x1332=cj2*cj2;
IkReal x1333=(cj1*sj1*sj2);
IkReal x1334=(cj2*x1331);
IkReal x1335=(x1331*x1332);
j0eval[0]=((4.18279977479812)+x1331+(((-6.54807030503047)*cj2*x1333))+(((6.54807030503047)*x1335))+(((-7.48153495812743)*x1333))+(((-3.27403515251523)*x1332))+(((7.48153495812743)*x1334)));
j0eval[1]=IKsign(((23239234.0)+(((-41566690.0)*x1333))+(((41566690.0)*x1334))+(((-36380450.0)*cj2*x1333))+(((-18190225.0)*x1332))+(((5555904.0)*x1331))+(((36380450.0)*x1335))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1336=((1.0)*cj5);
IkReal x1337=((1.0)*sj5);
IkReal x1338=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1338;
j0eval[1]=((IKabs(((((-1.0)*r00*x1337))+(((-1.0)*r01*x1336)))))+(IKabs(((((-1.0)*r10*x1337))+(((-1.0)*r11*x1336))))));
j0eval[2]=IKsign(x1338);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1339=cj5*cj5;
IkReal x1340=r21*r21;
IkReal x1341=(sj1*sj2);
IkReal x1342=(r21*sj5);
IkReal x1343=(cj5*r20);
IkReal x1344=(cj1*cj2);
IkReal x1345=(x1340+(((-1.0)*x1339*x1340))+(r22*r22)+((x1339*(r20*r20)))+(((-2.0)*x1342*x1343)));
j4eval[0]=x1345;
j4eval[1]=IKsign(x1345);
j4eval[2]=((IKabs((((r22*x1341))+(((-1.0)*r22*x1344)))))+(IKabs(((((-1.0)*x1341*x1343))+(((-1.0)*x1342*x1344))+((x1341*x1342))+((x1343*x1344))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1346=IKcos(j0);
IkReal x1347=IKsin(j0);
evalcond[0]=((((0.24365)*x1346))+(((-0.11235)*x1347))+(((-1.0)*px)));
evalcond[1]=((((0.24365)*x1347))+(((0.11235)*x1346))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1348=((1.0)*cj5);
IkReal x1349=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1348)));
j4eval[0]=x1349;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1348)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1350=((1.0)*cj5);
IkReal x1351=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1350)));
j4eval[0]=x1351;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1350))))));
j4eval[2]=IKsign(x1351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1352=cj5*cj5;
IkReal x1353=((1.0)*sj5);
IkReal x1354=(cj5*r20);
IkReal x1355=(r11*r21);
IkReal x1356=(x1355+(((-1.0)*x1352*x1355))+((r10*r20*x1352))+(((-1.0)*cj5*r10*r21*x1353))+((r12*r22))+(((-1.0)*r11*x1353*x1354)));
j4eval[0]=x1356;
j4eval[1]=IKsign(x1356);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1353))+((cj0*x1354))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1357=cj5*cj5;
IkReal x1358=((1.0)*sj5);
IkReal x1359=(cj5*r20);
IkReal x1360=(r11*r21);
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(IKsign((x1360+((r10*r20*x1357))+(((-1.0)*x1357*x1360))+(((-1.0)*r11*x1358*x1359))+(((-1.0)*cj5*r10*r21*x1358))+((r12*r22)))),-1);
if(!x1361.valid){
continue;
}
CheckValue<IkReal> x1362 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1358))+((cj0*x1359)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1361.value)))+(x1362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1363=IKsin(j4);
IkReal x1364=IKcos(j4);
IkReal x1365=((1.0)*sj0);
IkReal x1366=(cj5*r00);
IkReal x1367=(r11*sj5);
IkReal x1368=(cj5*r10);
IkReal x1369=(r21*sj5);
IkReal x1370=(cj5*r20);
IkReal x1371=(r01*sj5);
IkReal x1372=((1.0)*x1364);
IkReal x1373=((1.0)*x1363);
evalcond[0]=(((x1363*x1369))+(((-1.0)*x1370*x1373))+(((-1.0)*r22*x1372)));
evalcond[1]=((((-1.0)*r22*x1373))+(((-1.0)*x1369*x1372))+((x1364*x1370)));
evalcond[2]=(cj0+((x1363*x1367))+(((-1.0)*r12*x1372))+(((-1.0)*x1368*x1373)));
evalcond[3]=((((-1.0)*r02*x1372))+(((-1.0)*x1366*x1373))+((x1363*x1371))+(((-1.0)*x1365)));
evalcond[4]=((((-1.0)*x1371*x1372))+(((-1.0)*r02*x1373))+((x1364*x1366))+(((-1.0)*cj0)));
evalcond[5]=(((x1364*x1368))+(((-1.0)*r12*x1373))+(((-1.0)*x1367*x1372))+(((-1.0)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1374=((1.0)*cj5);
CheckValue<IkReal> x1375 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1374))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1374)))),-1);
if(!x1376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1375.value)+(((1.5707963267949)*(x1376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1377=IKsin(j4);
IkReal x1378=IKcos(j4);
IkReal x1379=((1.0)*sj0);
IkReal x1380=(cj5*r00);
IkReal x1381=(r11*sj5);
IkReal x1382=(cj5*r10);
IkReal x1383=(r21*sj5);
IkReal x1384=(cj5*r20);
IkReal x1385=(r01*sj5);
IkReal x1386=((1.0)*x1378);
IkReal x1387=((1.0)*x1377);
evalcond[0]=((((-1.0)*x1384*x1387))+((x1377*x1383))+(((-1.0)*r22*x1386)));
evalcond[1]=((((-1.0)*x1383*x1386))+(((-1.0)*r22*x1387))+((x1378*x1384)));
evalcond[2]=((((-1.0)*r12*x1386))+cj0+(((-1.0)*x1382*x1387))+((x1377*x1381)));
evalcond[3]=((((-1.0)*r02*x1386))+(((-1.0)*x1379))+(((-1.0)*x1380*x1387))+((x1377*x1385)));
evalcond[4]=((((-1.0)*r02*x1387))+((x1378*x1380))+(((-1.0)*cj0))+(((-1.0)*x1385*x1386)));
evalcond[5]=((((-1.0)*r12*x1387))+(((-1.0)*x1379))+(((-1.0)*x1381*x1386))+((x1378*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1388=((1.0)*cj5);
CheckValue<IkReal> x1389 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1388))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1389.valid){
continue;
}
CheckValue<IkReal> x1390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1388)))),-1);
if(!x1390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1389.value)+(((1.5707963267949)*(x1390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1391=IKsin(j4);
IkReal x1392=IKcos(j4);
IkReal x1393=((1.0)*sj0);
IkReal x1394=(cj5*r00);
IkReal x1395=(r11*sj5);
IkReal x1396=(cj5*r10);
IkReal x1397=(r21*sj5);
IkReal x1398=(cj5*r20);
IkReal x1399=(r01*sj5);
IkReal x1400=((1.0)*x1392);
IkReal x1401=((1.0)*x1391);
evalcond[0]=((((-1.0)*x1398*x1401))+(((-1.0)*r22*x1400))+((x1391*x1397)));
evalcond[1]=((((-1.0)*r22*x1401))+((x1392*x1398))+(((-1.0)*x1397*x1400)));
evalcond[2]=((((-1.0)*r12*x1400))+cj0+((x1391*x1395))+(((-1.0)*x1396*x1401)));
evalcond[3]=((((-1.0)*r02*x1400))+((x1391*x1399))+(((-1.0)*x1394*x1401))+(((-1.0)*x1393)));
evalcond[4]=((((-1.0)*x1399*x1400))+(((-1.0)*r02*x1401))+((x1392*x1394))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1401))+((x1392*x1396))+(((-1.0)*x1395*x1400))+(((-1.0)*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1402=IKcos(j0);
IkReal x1403=IKsin(j0);
evalcond[0]=((((-0.11235)*x1403))+(((-1.0)*px))+(((0.24365)*x1402)));
evalcond[1]=((((0.11235)*x1402))+(((-1.0)*py))+(((0.24365)*x1403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1404=((1.0)*cj5);
IkReal x1405=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1404)));
j4eval[0]=x1405;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1404))))));
j4eval[2]=IKsign(x1405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1406=cj5*cj5;
IkReal x1407=((1.0)*r21);
IkReal x1408=(cj5*sj5);
IkReal x1409=((1.0)*r20);
IkReal x1410=((((-1.0)*r01*x1406*x1407))+(((-1.0)*r01*x1408*x1409))+((r01*r21))+(((-1.0)*r00*x1407*x1408))+((r00*r20*x1406))+((r02*r22)));
j4eval[0]=x1410;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1409))))));
j4eval[2]=IKsign(x1410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1411=cj5*cj5;
IkReal x1412=(r21*sj5);
IkReal x1413=(r11*r21);
IkReal x1414=((1.0)*cj5*r20);
IkReal x1415=((((-1.0)*x1411*x1413))+(((-1.0)*cj5*r10*x1412))+((r12*r22))+(((-1.0)*r11*sj5*x1414))+((r10*r20*x1411))+x1413);
j4eval[0]=x1415;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1414))+((sj0*x1412)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1416=cj5*cj5;
IkReal x1417=(r21*sj5);
IkReal x1418=(r11*r21);
IkReal x1419=((1.0)*cj5*r20);
CheckValue<IkReal> x1420 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1419))+((sj0*x1417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1420.valid){
continue;
}
CheckValue<IkReal> x1421=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1416*x1418))+(((-1.0)*cj5*r10*x1417))+((r12*r22))+(((-1.0)*r11*sj5*x1419))+((r10*r20*x1416))+x1418)),-1);
if(!x1421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1420.value)+(((1.5707963267949)*(x1421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1422=IKsin(j4);
IkReal x1423=IKcos(j4);
IkReal x1424=(r11*sj5);
IkReal x1425=(cj5*r00);
IkReal x1426=(cj5*r10);
IkReal x1427=(r21*sj5);
IkReal x1428=(cj5*r20);
IkReal x1429=(r01*sj5);
IkReal x1430=((1.0)*x1423);
IkReal x1431=((1.0)*x1422);
evalcond[0]=(((x1422*x1427))+(((-1.0)*r22*x1430))+(((-1.0)*x1428*x1431)));
evalcond[1]=(((x1423*x1428))+(((-1.0)*r22*x1431))+(((-1.0)*x1427*x1430)));
evalcond[2]=((((-1.0)*r12*x1430))+((x1422*x1424))+cj0+(((-1.0)*x1426*x1431)));
evalcond[3]=(cj0+((x1423*x1425))+(((-1.0)*x1429*x1430))+(((-1.0)*r02*x1431)));
evalcond[4]=((((-1.0)*r12*x1431))+sj0+((x1423*x1426))+(((-1.0)*x1424*x1430)));
evalcond[5]=((((-1.0)*sj0))+((x1422*x1429))+(((-1.0)*r02*x1430))+(((-1.0)*x1425*x1431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1432=cj5*cj5;
IkReal x1433=((1.0)*r21);
IkReal x1434=(cj5*sj5);
IkReal x1435=((1.0)*r20);
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1432*x1433))+((r01*r21))+(((-1.0)*r00*x1433*x1434))+((r00*r20*x1432))+((r02*r22))+(((-1.0)*r01*x1434*x1435)))),-1);
if(!x1436.valid){
continue;
}
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1436.value)))+(x1437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1438=IKsin(j4);
IkReal x1439=IKcos(j4);
IkReal x1440=(r11*sj5);
IkReal x1441=(cj5*r00);
IkReal x1442=(cj5*r10);
IkReal x1443=(r21*sj5);
IkReal x1444=(cj5*r20);
IkReal x1445=(r01*sj5);
IkReal x1446=((1.0)*x1439);
IkReal x1447=((1.0)*x1438);
evalcond[0]=(((x1438*x1443))+(((-1.0)*r22*x1446))+(((-1.0)*x1444*x1447)));
evalcond[1]=((((-1.0)*r22*x1447))+((x1439*x1444))+(((-1.0)*x1443*x1446)));
evalcond[2]=(((x1438*x1440))+cj0+(((-1.0)*r12*x1446))+(((-1.0)*x1442*x1447)));
evalcond[3]=(((x1439*x1441))+(((-1.0)*x1445*x1446))+cj0+(((-1.0)*r02*x1447)));
evalcond[4]=(sj0+((x1439*x1442))+(((-1.0)*r12*x1447))+(((-1.0)*x1440*x1446)));
evalcond[5]=(((x1438*x1445))+(((-1.0)*sj0))+(((-1.0)*x1441*x1447))+(((-1.0)*r02*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1448=((1.0)*cj5);
CheckValue<IkReal> x1449 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1449.valid){
continue;
}
CheckValue<IkReal> x1450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1448))+(((-1.0)*r00*sj5)))),-1);
if(!x1450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1449.value)+(((1.5707963267949)*(x1450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1451=IKsin(j4);
IkReal x1452=IKcos(j4);
IkReal x1453=(r11*sj5);
IkReal x1454=(cj5*r00);
IkReal x1455=(cj5*r10);
IkReal x1456=(r21*sj5);
IkReal x1457=(cj5*r20);
IkReal x1458=(r01*sj5);
IkReal x1459=((1.0)*x1452);
IkReal x1460=((1.0)*x1451);
evalcond[0]=((((-1.0)*r22*x1459))+(((-1.0)*x1457*x1460))+((x1451*x1456)));
evalcond[1]=((((-1.0)*r22*x1460))+(((-1.0)*x1456*x1459))+((x1452*x1457)));
evalcond[2]=(cj0+(((-1.0)*x1455*x1460))+((x1451*x1453))+(((-1.0)*r12*x1459)));
evalcond[3]=((((-1.0)*r02*x1460))+(((-1.0)*x1458*x1459))+cj0+((x1452*x1454)));
evalcond[4]=(sj0+(((-1.0)*x1453*x1459))+(((-1.0)*r12*x1460))+((x1452*x1455)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1454*x1460))+(((-1.0)*r02*x1459))+((x1451*x1458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1461=((1.0)*cj5);
IkReal x1462=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1461)));
j4eval[0]=x1462;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1461)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1462);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1463=((1.0)*cj5);
IkReal x1464=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1463)));
j4eval[0]=x1464;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1463))))));
j4eval[2]=IKsign(x1464);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1465=cj5*cj5;
IkReal x1466=((1.0)*sj5);
IkReal x1467=(cj5*r20);
IkReal x1468=(r11*r21);
IkReal x1469=((((-1.0)*r11*x1466*x1467))+(((-1.0)*cj5*r10*r21*x1466))+((r12*r22))+((r10*r20*x1465))+x1468+(((-1.0)*x1465*x1468)));
j4eval[0]=x1469;
j4eval[1]=IKsign(x1469);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1467))+(((-1.0)*cj0*r21*x1466))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1470=cj5*cj5;
IkReal x1471=((1.0)*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r11*r21);
CheckValue<IkReal> x1474 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1471))+((cj0*x1472)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1474.valid){
continue;
}
CheckValue<IkReal> x1475=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1471))+(((-1.0)*r11*x1471*x1472))+((r12*r22))+x1473+(((-1.0)*x1470*x1473))+((r10*r20*x1470)))),-1);
if(!x1475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1474.value)+(((1.5707963267949)*(x1475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1476=IKsin(j4);
IkReal x1477=IKcos(j4);
IkReal x1478=((1.0)*sj0);
IkReal x1479=(cj5*r00);
IkReal x1480=(r11*sj5);
IkReal x1481=(cj5*r10);
IkReal x1482=(r21*sj5);
IkReal x1483=(cj5*r20);
IkReal x1484=(r01*sj5);
IkReal x1485=((1.0)*x1477);
IkReal x1486=((1.0)*x1476);
evalcond[0]=(((x1476*x1482))+(((-1.0)*x1483*x1486))+(((-1.0)*r22*x1485)));
evalcond[1]=((((-1.0)*x1482*x1485))+((x1477*x1483))+(((-1.0)*r22*x1486)));
evalcond[2]=(((x1476*x1480))+cj0+(((-1.0)*r12*x1485))+(((-1.0)*x1481*x1486)));
evalcond[3]=((((-1.0)*x1479*x1486))+((x1476*x1484))+(((-1.0)*r02*x1485))+(((-1.0)*x1478)));
evalcond[4]=((((-1.0)*x1484*x1485))+(((-1.0)*r02*x1486))+((x1477*x1479))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1486))+((x1477*x1481))+(((-1.0)*x1480*x1485))+(((-1.0)*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1487=((1.0)*cj5);
CheckValue<IkReal> x1488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1487))+(((-1.0)*r10*sj5)))),-1);
if(!x1488.valid){
continue;
}
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1487))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1488.value)))+(x1489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1490=IKsin(j4);
IkReal x1491=IKcos(j4);
IkReal x1492=((1.0)*sj0);
IkReal x1493=(cj5*r00);
IkReal x1494=(r11*sj5);
IkReal x1495=(cj5*r10);
IkReal x1496=(r21*sj5);
IkReal x1497=(cj5*r20);
IkReal x1498=(r01*sj5);
IkReal x1499=((1.0)*x1491);
IkReal x1500=((1.0)*x1490);
evalcond[0]=((((-1.0)*x1497*x1500))+(((-1.0)*r22*x1499))+((x1490*x1496)));
evalcond[1]=((((-1.0)*r22*x1500))+(((-1.0)*x1496*x1499))+((x1491*x1497)));
evalcond[2]=((((-1.0)*r12*x1499))+cj0+(((-1.0)*x1495*x1500))+((x1490*x1494)));
evalcond[3]=((((-1.0)*x1492))+(((-1.0)*r02*x1499))+(((-1.0)*x1493*x1500))+((x1490*x1498)));
evalcond[4]=(((x1491*x1493))+(((-1.0)*r02*x1500))+(((-1.0)*x1498*x1499))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1494*x1499))+(((-1.0)*x1492))+((x1491*x1495))+(((-1.0)*r12*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1501=((1.0)*cj5);
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1501))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1501))+(((-1.0)*r00*sj5)))),-1);
if(!x1503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j4);
IkReal x1505=IKcos(j4);
IkReal x1506=((1.0)*sj0);
IkReal x1507=(cj5*r00);
IkReal x1508=(r11*sj5);
IkReal x1509=(cj5*r10);
IkReal x1510=(r21*sj5);
IkReal x1511=(cj5*r20);
IkReal x1512=(r01*sj5);
IkReal x1513=((1.0)*x1505);
IkReal x1514=((1.0)*x1504);
evalcond[0]=((((-1.0)*r22*x1513))+((x1504*x1510))+(((-1.0)*x1511*x1514)));
evalcond[1]=((((-1.0)*r22*x1514))+(((-1.0)*x1510*x1513))+((x1505*x1511)));
evalcond[2]=(cj0+((x1504*x1508))+(((-1.0)*x1509*x1514))+(((-1.0)*r12*x1513)));
evalcond[3]=((((-1.0)*x1506))+((x1504*x1512))+(((-1.0)*x1507*x1514))+(((-1.0)*r02*x1513)));
evalcond[4]=((((-1.0)*r02*x1514))+(((-1.0)*x1512*x1513))+((x1505*x1507))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1506))+((x1505*x1509))+(((-1.0)*x1508*x1513))+(((-1.0)*r12*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1515=((1.0)*cj5);
IkReal x1516=((((-1.0)*r01*x1515))+(((-1.0)*r00*sj5)));
j4eval[0]=x1516;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1515))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1517=cj5*cj5;
IkReal x1518=((1.0)*r21);
IkReal x1519=(cj5*sj5);
IkReal x1520=((1.0)*r20);
IkReal x1521=((((-1.0)*r00*x1518*x1519))+(((-1.0)*r01*x1517*x1518))+((r01*r21))+(((-1.0)*r01*x1519*x1520))+((r02*r22))+((r00*r20*x1517)));
j4eval[0]=x1521;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1520))))));
j4eval[2]=IKsign(x1521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1522=cj5*cj5;
IkReal x1523=(r21*sj5);
IkReal x1524=(r11*r21);
IkReal x1525=((1.0)*cj5*r20);
IkReal x1526=(((r12*r22))+(((-1.0)*r11*sj5*x1525))+x1524+(((-1.0)*cj5*r10*x1523))+((r10*r20*x1522))+(((-1.0)*x1522*x1524)));
j4eval[0]=x1526;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1525))+((sj0*x1523))))));
j4eval[2]=IKsign(x1526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1527=cj5*cj5;
IkReal x1528=(r21*sj5);
IkReal x1529=(r11*r21);
IkReal x1530=((1.0)*cj5*r20);
CheckValue<IkReal> x1531=IKPowWithIntegerCheck(IKsign((((r12*r22))+x1529+(((-1.0)*r11*sj5*x1530))+(((-1.0)*cj5*r10*x1528))+(((-1.0)*x1527*x1529))+((r10*r20*x1527)))),-1);
if(!x1531.valid){
continue;
}
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1530))+((sj0*x1528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1531.value)))+(x1532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1533=IKsin(j4);
IkReal x1534=IKcos(j4);
IkReal x1535=(r11*sj5);
IkReal x1536=(cj5*r00);
IkReal x1537=(cj5*r10);
IkReal x1538=(r21*sj5);
IkReal x1539=(cj5*r20);
IkReal x1540=(r01*sj5);
IkReal x1541=((1.0)*x1534);
IkReal x1542=((1.0)*x1533);
evalcond[0]=((((-1.0)*r22*x1541))+(((-1.0)*x1539*x1542))+((x1533*x1538)));
evalcond[1]=((((-1.0)*r22*x1542))+((x1534*x1539))+(((-1.0)*x1538*x1541)));
evalcond[2]=(cj0+(((-1.0)*x1537*x1542))+((x1533*x1535))+(((-1.0)*r12*x1541)));
evalcond[3]=((((-1.0)*r02*x1542))+cj0+(((-1.0)*x1540*x1541))+((x1534*x1536)));
evalcond[4]=((((-1.0)*x1535*x1541))+sj0+((x1534*x1537))+(((-1.0)*r12*x1542)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1541))+((x1533*x1540))+(((-1.0)*x1536*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1543=cj5*cj5;
IkReal x1544=((1.0)*r21);
IkReal x1545=(cj5*sj5);
IkReal x1546=((1.0)*r20);
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1543*x1544))+((r01*r21))+((r00*r20*x1543))+(((-1.0)*r01*x1545*x1546))+((r02*r22))+(((-1.0)*r00*x1544*x1545)))),-1);
if(!x1548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1547.value)+(((1.5707963267949)*(x1548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1549=IKsin(j4);
IkReal x1550=IKcos(j4);
IkReal x1551=(r11*sj5);
IkReal x1552=(cj5*r00);
IkReal x1553=(cj5*r10);
IkReal x1554=(r21*sj5);
IkReal x1555=(cj5*r20);
IkReal x1556=(r01*sj5);
IkReal x1557=((1.0)*x1550);
IkReal x1558=((1.0)*x1549);
evalcond[0]=((((-1.0)*r22*x1557))+(((-1.0)*x1555*x1558))+((x1549*x1554)));
evalcond[1]=((((-1.0)*r22*x1558))+((x1550*x1555))+(((-1.0)*x1554*x1557)));
evalcond[2]=(cj0+(((-1.0)*x1553*x1558))+((x1549*x1551))+(((-1.0)*r12*x1557)));
evalcond[3]=(cj0+((x1550*x1552))+(((-1.0)*r02*x1558))+(((-1.0)*x1556*x1557)));
evalcond[4]=(sj0+((x1550*x1553))+(((-1.0)*r12*x1558))+(((-1.0)*x1551*x1557)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1552*x1558))+(((-1.0)*r02*x1557))+((x1549*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1559=((1.0)*cj5);
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1559)))),-1);
if(!x1561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1560.value)+(((1.5707963267949)*(x1561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1562=IKsin(j4);
IkReal x1563=IKcos(j4);
IkReal x1564=(r11*sj5);
IkReal x1565=(cj5*r00);
IkReal x1566=(cj5*r10);
IkReal x1567=(r21*sj5);
IkReal x1568=(cj5*r20);
IkReal x1569=(r01*sj5);
IkReal x1570=((1.0)*x1563);
IkReal x1571=((1.0)*x1562);
evalcond[0]=((((-1.0)*r22*x1570))+(((-1.0)*x1568*x1571))+((x1562*x1567)));
evalcond[1]=((((-1.0)*x1567*x1570))+(((-1.0)*r22*x1571))+((x1563*x1568)));
evalcond[2]=(cj0+(((-1.0)*x1566*x1571))+((x1562*x1564))+(((-1.0)*r12*x1570)));
evalcond[3]=((((-1.0)*r02*x1571))+cj0+(((-1.0)*x1569*x1570))+((x1563*x1565)));
evalcond[4]=(sj0+(((-1.0)*x1564*x1570))+(((-1.0)*r12*x1571))+((x1563*x1566)));
evalcond[5]=((((-1.0)*x1565*x1571))+(((-1.0)*r02*x1570))+(((-1.0)*sj0))+((x1562*x1569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1572=IKcos(j0);
IkReal x1573=IKsin(j0);
evalcond[0]=((((-0.11235)*x1573))+(((-0.24365)*x1572))+(((-1.0)*px)));
evalcond[1]=((((-0.24365)*x1573))+(((0.11235)*x1572))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1574=((1.0)*cj5);
IkReal x1575=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1574)));
j4eval[0]=x1575;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1574)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1576=cj5*cj5;
IkReal x1577=((1.0)*r21);
IkReal x1578=(cj5*sj5);
IkReal x1579=((1.0)*r20);
IkReal x1580=((((-1.0)*r00*x1577*x1578))+(((-1.0)*r01*x1578*x1579))+((r01*r21))+((r00*r20*x1576))+((r02*r22))+(((-1.0)*r01*x1576*x1577)));
j4eval[0]=x1580;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1579)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1581=cj5*cj5;
IkReal x1582=(r21*sj5);
IkReal x1583=(r11*r21);
IkReal x1584=((1.0)*cj5*r20);
IkReal x1585=((((-1.0)*cj5*r10*x1582))+((r10*r20*x1581))+((r12*r22))+x1583+(((-1.0)*r11*sj5*x1584))+(((-1.0)*x1581*x1583)));
j4eval[0]=x1585;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1584))+((sj0*x1582))))));
j4eval[2]=IKsign(x1585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1586=cj5*cj5;
IkReal x1587=(r21*sj5);
IkReal x1588=(r11*r21);
IkReal x1589=((1.0)*cj5*r20);
CheckValue<IkReal> x1590 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1589))+((sj0*x1587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1590.valid){
continue;
}
CheckValue<IkReal> x1591=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1587))+((r10*r20*x1586))+((r12*r22))+x1588+(((-1.0)*r11*sj5*x1589))+(((-1.0)*x1586*x1588)))),-1);
if(!x1591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1590.value)+(((1.5707963267949)*(x1591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1592=IKsin(j4);
IkReal x1593=IKcos(j4);
IkReal x1594=(r11*sj5);
IkReal x1595=(cj5*r00);
IkReal x1596=(cj5*r10);
IkReal x1597=(r21*sj5);
IkReal x1598=(cj5*r20);
IkReal x1599=(r01*sj5);
IkReal x1600=((1.0)*x1593);
IkReal x1601=((1.0)*x1592);
evalcond[0]=(((x1592*x1597))+(((-1.0)*r22*x1600))+(((-1.0)*x1598*x1601)));
evalcond[1]=(((x1593*x1598))+(((-1.0)*r22*x1601))+(((-1.0)*x1597*x1600)));
evalcond[2]=(cj0+((x1592*x1594))+(((-1.0)*x1596*x1601))+(((-1.0)*r12*x1600)));
evalcond[3]=(cj0+((x1593*x1595))+(((-1.0)*x1599*x1600))+(((-1.0)*r02*x1601)));
evalcond[4]=(sj0+(((-1.0)*x1594*x1600))+((x1593*x1596))+(((-1.0)*r12*x1601)));
evalcond[5]=((((-1.0)*sj0))+((x1592*x1599))+(((-1.0)*x1595*x1601))+(((-1.0)*r02*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=cj5*cj5;
IkReal x1603=((1.0)*r21);
IkReal x1604=(cj5*sj5);
IkReal x1605=((1.0)*r20);
CheckValue<IkReal> x1606 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
CheckValue<IkReal> x1607=IKPowWithIntegerCheck(IKsign((((r00*r20*x1602))+((r01*r21))+(((-1.0)*r00*x1603*x1604))+(((-1.0)*r01*x1602*x1603))+((r02*r22))+(((-1.0)*r01*x1604*x1605)))),-1);
if(!x1607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1606.value)+(((1.5707963267949)*(x1607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1608=IKsin(j4);
IkReal x1609=IKcos(j4);
IkReal x1610=(r11*sj5);
IkReal x1611=(cj5*r00);
IkReal x1612=(cj5*r10);
IkReal x1613=(r21*sj5);
IkReal x1614=(cj5*r20);
IkReal x1615=(r01*sj5);
IkReal x1616=((1.0)*x1609);
IkReal x1617=((1.0)*x1608);
evalcond[0]=(((x1608*x1613))+(((-1.0)*r22*x1616))+(((-1.0)*x1614*x1617)));
evalcond[1]=(((x1609*x1614))+(((-1.0)*r22*x1617))+(((-1.0)*x1613*x1616)));
evalcond[2]=((((-1.0)*r12*x1616))+cj0+((x1608*x1610))+(((-1.0)*x1612*x1617)));
evalcond[3]=(cj0+(((-1.0)*r02*x1617))+((x1609*x1611))+(((-1.0)*x1615*x1616)));
evalcond[4]=((((-1.0)*r12*x1617))+sj0+(((-1.0)*x1610*x1616))+((x1609*x1612)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1611*x1617))+(((-1.0)*r02*x1616))+((x1608*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1618=((1.0)*cj5);
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1618))+(((-1.0)*r00*sj5)))),-1);
if(!x1620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1619.value)+(((1.5707963267949)*(x1620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1621=IKsin(j4);
IkReal x1622=IKcos(j4);
IkReal x1623=(r11*sj5);
IkReal x1624=(cj5*r00);
IkReal x1625=(cj5*r10);
IkReal x1626=(r21*sj5);
IkReal x1627=(cj5*r20);
IkReal x1628=(r01*sj5);
IkReal x1629=((1.0)*x1622);
IkReal x1630=((1.0)*x1621);
evalcond[0]=((((-1.0)*r22*x1629))+((x1621*x1626))+(((-1.0)*x1627*x1630)));
evalcond[1]=((((-1.0)*r22*x1630))+((x1622*x1627))+(((-1.0)*x1626*x1629)));
evalcond[2]=((((-1.0)*r12*x1629))+cj0+(((-1.0)*x1625*x1630))+((x1621*x1623)));
evalcond[3]=(cj0+((x1622*x1624))+(((-1.0)*x1628*x1629))+(((-1.0)*r02*x1630)));
evalcond[4]=(sj0+(((-1.0)*r12*x1630))+((x1622*x1625))+(((-1.0)*x1623*x1629)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1624*x1630))+(((-1.0)*r02*x1629))+((x1621*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1631=IKcos(j0);
IkReal x1632=IKsin(j0);
evalcond[0]=((((-0.11235)*x1632))+(((-0.24365)*x1631))+(((-1.0)*px)));
evalcond[1]=((((-0.24365)*x1632))+(((-1.0)*py))+(((0.11235)*x1631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1633=((1.0)*cj5);
IkReal x1634=((((-1.0)*r01*x1633))+(((-1.0)*r00*sj5)));
j4eval[0]=x1634;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1633))))));
j4eval[2]=IKsign(x1634);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1635=((1.0)*cj5);
IkReal x1636=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1635)));
j4eval[0]=x1636;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1635))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1637=cj5*cj5;
IkReal x1638=((1.0)*sj5);
IkReal x1639=(cj5*r20);
IkReal x1640=(r11*r21);
IkReal x1641=((((-1.0)*r11*x1638*x1639))+x1640+(((-1.0)*cj5*r10*r21*x1638))+((r12*r22))+(((-1.0)*x1637*x1640))+((r10*r20*x1637)));
j4eval[0]=x1641;
j4eval[1]=IKsign(x1641);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1638))+((cj0*x1639)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1642=cj5*cj5;
IkReal x1643=((1.0)*sj5);
IkReal x1644=(cj5*r20);
IkReal x1645=(r11*r21);
CheckValue<IkReal> x1646=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1642*x1645))+x1645+(((-1.0)*cj5*r10*r21*x1643))+((r12*r22))+(((-1.0)*r11*x1643*x1644))+((r10*r20*x1642)))),-1);
if(!x1646.valid){
continue;
}
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1643))+((cj0*x1644)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1646.value)))+(x1647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1648=IKsin(j4);
IkReal x1649=IKcos(j4);
IkReal x1650=((1.0)*sj0);
IkReal x1651=(cj5*r00);
IkReal x1652=(r11*sj5);
IkReal x1653=(cj5*r10);
IkReal x1654=(r21*sj5);
IkReal x1655=(cj5*r20);
IkReal x1656=(r01*sj5);
IkReal x1657=((1.0)*x1649);
IkReal x1658=((1.0)*x1648);
evalcond[0]=(((x1648*x1654))+(((-1.0)*r22*x1657))+(((-1.0)*x1655*x1658)));
evalcond[1]=((((-1.0)*x1654*x1657))+(((-1.0)*r22*x1658))+((x1649*x1655)));
evalcond[2]=(cj0+((x1648*x1652))+(((-1.0)*x1653*x1658))+(((-1.0)*r12*x1657)));
evalcond[3]=(((x1648*x1656))+(((-1.0)*x1650))+(((-1.0)*r02*x1657))+(((-1.0)*x1651*x1658)));
evalcond[4]=((((-1.0)*x1656*x1657))+((x1649*x1651))+(((-1.0)*r02*x1658))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1652*x1657))+(((-1.0)*r12*x1658))+((x1649*x1653))+(((-1.0)*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1659=((1.0)*cj5);
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1659))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
CheckValue<IkReal> x1661=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1659)))),-1);
if(!x1661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1660.value)+(((1.5707963267949)*(x1661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1662=IKsin(j4);
IkReal x1663=IKcos(j4);
IkReal x1664=((1.0)*sj0);
IkReal x1665=(cj5*r00);
IkReal x1666=(r11*sj5);
IkReal x1667=(cj5*r10);
IkReal x1668=(r21*sj5);
IkReal x1669=(cj5*r20);
IkReal x1670=(r01*sj5);
IkReal x1671=((1.0)*x1663);
IkReal x1672=((1.0)*x1662);
evalcond[0]=((((-1.0)*x1669*x1672))+((x1662*x1668))+(((-1.0)*r22*x1671)));
evalcond[1]=((((-1.0)*x1668*x1671))+((x1663*x1669))+(((-1.0)*r22*x1672)));
evalcond[2]=((((-1.0)*x1667*x1672))+cj0+((x1662*x1666))+(((-1.0)*r12*x1671)));
evalcond[3]=((((-1.0)*r02*x1671))+((x1662*x1670))+(((-1.0)*x1664))+(((-1.0)*x1665*x1672)));
evalcond[4]=((((-1.0)*r02*x1672))+(((-1.0)*x1670*x1671))+(((-1.0)*cj0))+((x1663*x1665)));
evalcond[5]=((((-1.0)*r12*x1672))+(((-1.0)*x1664))+(((-1.0)*x1666*x1671))+((x1663*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1673=((1.0)*cj5);
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1673)))),-1);
if(!x1675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1674.value)+(((1.5707963267949)*(x1675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1676=IKsin(j4);
IkReal x1677=IKcos(j4);
IkReal x1678=((1.0)*sj0);
IkReal x1679=(cj5*r00);
IkReal x1680=(r11*sj5);
IkReal x1681=(cj5*r10);
IkReal x1682=(r21*sj5);
IkReal x1683=(cj5*r20);
IkReal x1684=(r01*sj5);
IkReal x1685=((1.0)*x1677);
IkReal x1686=((1.0)*x1676);
evalcond[0]=((((-1.0)*x1683*x1686))+((x1676*x1682))+(((-1.0)*r22*x1685)));
evalcond[1]=(((x1677*x1683))+(((-1.0)*x1682*x1685))+(((-1.0)*r22*x1686)));
evalcond[2]=((((-1.0)*r12*x1685))+(((-1.0)*x1681*x1686))+cj0+((x1676*x1680)));
evalcond[3]=(((x1676*x1684))+(((-1.0)*x1679*x1686))+(((-1.0)*r02*x1685))+(((-1.0)*x1678)));
evalcond[4]=((((-1.0)*r02*x1686))+(((-1.0)*cj0))+((x1677*x1679))+(((-1.0)*x1684*x1685)));
evalcond[5]=((((-1.0)*r12*x1686))+((x1677*x1681))+(((-1.0)*x1680*x1685))+(((-1.0)*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1687=((1.0)*cj5);
IkReal x1688=((((-1.0)*r01*x1687))+(((-1.0)*r00*sj5)));
j4eval[0]=x1688;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1687))))));
j4eval[2]=IKsign(x1688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1689=cj5*cj5;
IkReal x1690=((1.0)*r21);
IkReal x1691=(cj5*sj5);
IkReal x1692=((1.0)*r20);
IkReal x1693=(((r01*r21))+((r00*r20*x1689))+(((-1.0)*r01*x1691*x1692))+((r02*r22))+(((-1.0)*r00*x1690*x1691))+(((-1.0)*r01*x1689*x1690)));
j4eval[0]=x1693;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1692))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1694=cj5*cj5;
IkReal x1695=(r21*sj5);
IkReal x1696=(r11*r21);
IkReal x1697=((1.0)*cj5*r20);
IkReal x1698=(x1696+((r12*r22))+(((-1.0)*r11*sj5*x1697))+((r10*r20*x1694))+(((-1.0)*x1694*x1696))+(((-1.0)*cj5*r10*x1695)));
j4eval[0]=x1698;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1697))+((sj0*x1695))))));
j4eval[2]=IKsign(x1698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1699=cj5*cj5;
IkReal x1700=(r21*sj5);
IkReal x1701=(r11*r21);
IkReal x1702=((1.0)*cj5*r20);
CheckValue<IkReal> x1703=IKPowWithIntegerCheck(IKsign((x1701+((r12*r22))+(((-1.0)*r11*sj5*x1702))+((r10*r20*x1699))+(((-1.0)*cj5*r10*x1700))+(((-1.0)*x1699*x1701)))),-1);
if(!x1703.valid){
continue;
}
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1702))+((sj0*x1700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1703.value)))+(x1704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1705=IKsin(j4);
IkReal x1706=IKcos(j4);
IkReal x1707=(r11*sj5);
IkReal x1708=(cj5*r00);
IkReal x1709=(cj5*r10);
IkReal x1710=(r21*sj5);
IkReal x1711=(cj5*r20);
IkReal x1712=(r01*sj5);
IkReal x1713=((1.0)*x1706);
IkReal x1714=((1.0)*x1705);
evalcond[0]=((((-1.0)*x1711*x1714))+(((-1.0)*r22*x1713))+((x1705*x1710)));
evalcond[1]=((((-1.0)*x1710*x1713))+(((-1.0)*r22*x1714))+((x1706*x1711)));
evalcond[2]=(cj0+(((-1.0)*x1709*x1714))+((x1705*x1707))+(((-1.0)*r12*x1713)));
evalcond[3]=(cj0+(((-1.0)*x1712*x1713))+((x1706*x1708))+(((-1.0)*r02*x1714)));
evalcond[4]=(sj0+(((-1.0)*x1707*x1713))+((x1706*x1709))+(((-1.0)*r12*x1714)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1708*x1714))+(((-1.0)*r02*x1713))+((x1705*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1715=cj5*cj5;
IkReal x1716=((1.0)*r21);
IkReal x1717=(cj5*sj5);
IkReal x1718=((1.0)*r20);
CheckValue<IkReal> x1719 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1719.valid){
continue;
}
CheckValue<IkReal> x1720=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1716*x1717))+((r00*r20*x1715))+((r01*r21))+(((-1.0)*r01*x1715*x1716))+(((-1.0)*r01*x1717*x1718))+((r02*r22)))),-1);
if(!x1720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1719.value)+(((1.5707963267949)*(x1720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1721=IKsin(j4);
IkReal x1722=IKcos(j4);
IkReal x1723=(r11*sj5);
IkReal x1724=(cj5*r00);
IkReal x1725=(cj5*r10);
IkReal x1726=(r21*sj5);
IkReal x1727=(cj5*r20);
IkReal x1728=(r01*sj5);
IkReal x1729=((1.0)*x1722);
IkReal x1730=((1.0)*x1721);
evalcond[0]=((((-1.0)*r22*x1729))+((x1721*x1726))+(((-1.0)*x1727*x1730)));
evalcond[1]=(((x1722*x1727))+(((-1.0)*x1726*x1729))+(((-1.0)*r22*x1730)));
evalcond[2]=(cj0+(((-1.0)*r12*x1729))+((x1721*x1723))+(((-1.0)*x1725*x1730)));
evalcond[3]=(((x1722*x1724))+cj0+(((-1.0)*x1728*x1729))+(((-1.0)*r02*x1730)));
evalcond[4]=(((x1722*x1725))+sj0+(((-1.0)*r12*x1730))+(((-1.0)*x1723*x1729)));
evalcond[5]=((((-1.0)*sj0))+((x1721*x1728))+(((-1.0)*x1724*x1730))+(((-1.0)*r02*x1729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1731=((1.0)*cj5);
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1731))+(((-1.0)*r00*sj5)))),-1);
if(!x1732.valid){
continue;
}
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1732.value)))+(x1733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1734=IKsin(j4);
IkReal x1735=IKcos(j4);
IkReal x1736=(r11*sj5);
IkReal x1737=(cj5*r00);
IkReal x1738=(cj5*r10);
IkReal x1739=(r21*sj5);
IkReal x1740=(cj5*r20);
IkReal x1741=(r01*sj5);
IkReal x1742=((1.0)*x1735);
IkReal x1743=((1.0)*x1734);
evalcond[0]=((((-1.0)*x1740*x1743))+(((-1.0)*r22*x1742))+((x1734*x1739)));
evalcond[1]=((((-1.0)*r22*x1743))+(((-1.0)*x1739*x1742))+((x1735*x1740)));
evalcond[2]=((((-1.0)*r12*x1742))+cj0+(((-1.0)*x1738*x1743))+((x1734*x1736)));
evalcond[3]=((((-1.0)*x1741*x1742))+cj0+((x1735*x1737))+(((-1.0)*r02*x1743)));
evalcond[4]=((((-1.0)*r12*x1743))+sj0+(((-1.0)*x1736*x1742))+((x1735*x1738)));
evalcond[5]=((((-1.0)*sj0))+((x1734*x1741))+(((-1.0)*x1737*x1743))+(((-1.0)*r02*x1742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1744=((1.0)*cj5);
IkReal x1745=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1744)));
j4eval[0]=x1745;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1744)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1746=((1.0)*cj5);
IkReal x1747=((((-1.0)*r11*x1746))+(((-1.0)*r10*sj5)));
j4eval[0]=x1747;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1746))))));
j4eval[2]=IKsign(x1747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1748=cj5*cj5;
IkReal x1749=((1.0)*sj5);
IkReal x1750=(cj5*r20);
IkReal x1751=(r11*r21);
IkReal x1752=(((r10*r20*x1748))+(((-1.0)*cj5*r10*r21*x1749))+x1751+((r12*r22))+(((-1.0)*r11*x1749*x1750))+(((-1.0)*x1748*x1751)));
j4eval[0]=x1752;
j4eval[1]=IKsign(x1752);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1749))+((cj0*x1750)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1753=cj5*cj5;
IkReal x1754=((1.0)*sj5);
IkReal x1755=(cj5*r20);
IkReal x1756=(r11*r21);
CheckValue<IkReal> x1757=IKPowWithIntegerCheck(IKsign((((r10*r20*x1753))+(((-1.0)*r11*x1754*x1755))+(((-1.0)*cj5*r10*r21*x1754))+x1756+((r12*r22))+(((-1.0)*x1753*x1756)))),-1);
if(!x1757.valid){
continue;
}
CheckValue<IkReal> x1758 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1754))+((cj0*x1755)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1757.value)))+(x1758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1759=IKsin(j4);
IkReal x1760=IKcos(j4);
IkReal x1761=((1.0)*sj0);
IkReal x1762=(cj5*r00);
IkReal x1763=(r11*sj5);
IkReal x1764=(cj5*r10);
IkReal x1765=(r21*sj5);
IkReal x1766=(cj5*r20);
IkReal x1767=(r01*sj5);
IkReal x1768=((1.0)*x1760);
IkReal x1769=((1.0)*x1759);
evalcond[0]=(((x1759*x1765))+(((-1.0)*x1766*x1769))+(((-1.0)*r22*x1768)));
evalcond[1]=((((-1.0)*x1765*x1768))+(((-1.0)*r22*x1769))+((x1760*x1766)));
evalcond[2]=(cj0+((x1759*x1763))+(((-1.0)*r12*x1768))+(((-1.0)*x1764*x1769)));
evalcond[3]=((((-1.0)*x1762*x1769))+(((-1.0)*x1761))+((x1759*x1767))+(((-1.0)*r02*x1768)));
evalcond[4]=((((-1.0)*r02*x1769))+(((-1.0)*x1767*x1768))+(((-1.0)*cj0))+((x1760*x1762)));
evalcond[5]=((((-1.0)*x1761))+(((-1.0)*x1763*x1768))+(((-1.0)*r12*x1769))+((x1760*x1764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1770=((1.0)*cj5);
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1770))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
CheckValue<IkReal> x1772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1770)))),-1);
if(!x1772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1771.value)+(((1.5707963267949)*(x1772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1773=IKsin(j4);
IkReal x1774=IKcos(j4);
IkReal x1775=((1.0)*sj0);
IkReal x1776=(cj5*r00);
IkReal x1777=(r11*sj5);
IkReal x1778=(cj5*r10);
IkReal x1779=(r21*sj5);
IkReal x1780=(cj5*r20);
IkReal x1781=(r01*sj5);
IkReal x1782=((1.0)*x1774);
IkReal x1783=((1.0)*x1773);
evalcond[0]=((((-1.0)*r22*x1782))+((x1773*x1779))+(((-1.0)*x1780*x1783)));
evalcond[1]=((((-1.0)*r22*x1783))+((x1774*x1780))+(((-1.0)*x1779*x1782)));
evalcond[2]=(cj0+(((-1.0)*r12*x1782))+((x1773*x1777))+(((-1.0)*x1778*x1783)));
evalcond[3]=((((-1.0)*x1775))+(((-1.0)*x1776*x1783))+((x1773*x1781))+(((-1.0)*r02*x1782)));
evalcond[4]=(((x1774*x1776))+(((-1.0)*x1781*x1782))+(((-1.0)*r02*x1783))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1783))+(((-1.0)*x1777*x1782))+(((-1.0)*x1775))+((x1774*x1778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1784=((1.0)*cj5);
CheckValue<IkReal> x1785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1784))+(((-1.0)*r00*sj5)))),-1);
if(!x1785.valid){
continue;
}
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1784))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1785.value)))+(x1786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1787=IKsin(j4);
IkReal x1788=IKcos(j4);
IkReal x1789=((1.0)*sj0);
IkReal x1790=(cj5*r00);
IkReal x1791=(r11*sj5);
IkReal x1792=(cj5*r10);
IkReal x1793=(r21*sj5);
IkReal x1794=(cj5*r20);
IkReal x1795=(r01*sj5);
IkReal x1796=((1.0)*x1788);
IkReal x1797=((1.0)*x1787);
evalcond[0]=((((-1.0)*r22*x1796))+((x1787*x1793))+(((-1.0)*x1794*x1797)));
evalcond[1]=((((-1.0)*r22*x1797))+(((-1.0)*x1793*x1796))+((x1788*x1794)));
evalcond[2]=((((-1.0)*x1792*x1797))+cj0+(((-1.0)*r12*x1796))+((x1787*x1791)));
evalcond[3]=((((-1.0)*x1789))+(((-1.0)*x1790*x1797))+((x1787*x1795))+(((-1.0)*r02*x1796)));
evalcond[4]=((((-1.0)*x1795*x1796))+(((-1.0)*r02*x1797))+((x1788*x1790))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1789))+(((-1.0)*r12*x1797))+((x1788*x1792))+(((-1.0)*x1791*x1796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1798=(cj5*r01);
IkReal x1799=((4873.0)*cj1);
IkReal x1800=(r00*sj5);
IkReal x1801=(cj1*cj2);
IkReal x1802=((20000.0)*px);
IkReal x1803=(sj1*sj2);
IkReal x1804=((2558.0)*x1803);
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(((((-2247.0)*x1801))+(((2247.0)*x1803))),-1);
if(!x1805.valid){
continue;
}
CheckValue<IkReal> x1806=IKPowWithIntegerCheck((x1803+(((-1.0)*x1801))),-1);
if(!x1806.valid){
continue;
}
if( IKabs(((x1805.value)*((((x1801*x1802))+(((-2558.0)*x1800*x1801))+((x1798*x1804))+((x1800*x1804))+(((-1.0)*x1799*x1800))+(((-1.0)*x1802*x1803))+(((-2558.0)*x1798*x1801))+(((-1.0)*x1798*x1799)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1806.value)*(((((-1.0)*x1798))+(((-1.0)*x1800)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1805.value)*((((x1801*x1802))+(((-2558.0)*x1800*x1801))+((x1798*x1804))+((x1800*x1804))+(((-1.0)*x1799*x1800))+(((-1.0)*x1802*x1803))+(((-2558.0)*x1798*x1801))+(((-1.0)*x1798*x1799))))))+IKsqr(((x1806.value)*(((((-1.0)*x1798))+(((-1.0)*x1800))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1805.value)*((((x1801*x1802))+(((-2558.0)*x1800*x1801))+((x1798*x1804))+((x1800*x1804))+(((-1.0)*x1799*x1800))+(((-1.0)*x1802*x1803))+(((-2558.0)*x1798*x1801))+(((-1.0)*x1798*x1799))))), ((x1806.value)*(((((-1.0)*x1798))+(((-1.0)*x1800))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1807=IKcos(j0);
IkReal x1808=IKsin(j0);
IkReal x1809=(cj5*r01);
IkReal x1810=(r00*sj5);
IkReal x1811=(cj5*r11);
IkReal x1812=((1.0)*cj2);
IkReal x1813=(r10*sj5);
IkReal x1814=((0.21325)*cj1*cj2);
IkReal x1815=(cj1*x1807);
IkReal x1816=(cj1*x1808);
IkReal x1817=(sj1*sj2*x1807);
IkReal x1818=(sj1*sj2*x1808);
evalcond[0]=((((-1.0)*x1812*x1815))+x1817+x1810+x1809);
evalcond[1]=((((-1.0)*x1812*x1816))+x1811+x1813+x1818);
evalcond[2]=(((x1807*x1814))+(((-1.0)*px))+(((0.24365)*x1815))+(((-0.08535)*x1810))+(((-0.11235)*x1808))+(((-0.08535)*x1809))+(((-0.21325)*x1817)));
evalcond[3]=((((-1.0)*py))+((x1808*x1814))+(((0.24365)*x1816))+(((0.11235)*x1807))+(((-0.08535)*x1811))+(((-0.08535)*x1813))+(((-0.21325)*x1818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1819=((1.0)*cj5);
IkReal x1820=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1819)));
j4eval[0]=x1820;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1819))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1821=((1.0)*cj5);
IkReal x1822=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1821)));
j4eval[0]=x1822;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1821))))));
j4eval[2]=IKsign(x1822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1823=((1.0)*sj0);
IkReal x1824=((1.0)*cj0);
IkReal x1825=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1825;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1823))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1824)))))+(IKabs(((((-1.0)*r12*x1823))+(((-1.0)*r02*x1824))))));
j4eval[2]=IKsign(x1825);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1826=((-1.0)*r20);
IkReal x1828 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1828)==0){
continue;
}
IkReal x1827=pow(x1828,-0.5);
CheckValue<IkReal> x1829 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1826),IKFAST_ATAN2_MAGTHRESH);
if(!x1829.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1829.value));
IkReal gconst79=(r21*x1827);
IkReal gconst80=(x1826*x1827);
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1830.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1831=((-1.0)*r20);
IkReal x1832=x1827;
CheckValue<IkReal> x1834 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1831),IKFAST_ATAN2_MAGTHRESH);
if(!x1834.valid){
continue;
}
IkReal x1833=((-1.0)*(x1834.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1833;
IkReal gconst78=x1833;
IkReal gconst79=(r21*x1832);
IkReal gconst80=(x1831*x1832);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1835=((-1.0)*r20);
IkReal x1836=x1827;
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1835),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
IkReal x1837=((-1.0)*(x1838.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1837;
IkReal gconst78=x1837;
IkReal gconst79=(r21*x1836);
IkReal gconst80=(x1835*x1836);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1839=((-1.0)*r20);
IkReal x1840=x1827;
CheckValue<IkReal> x1842 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1839),IKFAST_ATAN2_MAGTHRESH);
if(!x1842.valid){
continue;
}
IkReal x1841=((-1.0)*(x1842.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1841;
IkReal gconst78=x1841;
IkReal gconst79=(r21*x1840);
IkReal gconst80=(x1839*x1840);
IkReal x1843=r22*r22;
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1843))),-1);
if(!x1846.valid){
continue;
}
IkReal x1844=x1846.value;
IkReal x1845=(((x1844*(r20*r20*r20*r20)))+(((2.0)*x1844*(r20*r20)*(r21*r21)))+x1843+((x1844*(r21*r21*r21*r21))));
j4eval[0]=x1845;
j4eval[1]=IKsign(x1845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1847=(sj1*sj2);
IkReal x1848=(gconst80*r20);
IkReal x1849=(gconst79*r21);
IkReal x1850=(cj1*cj2);
CheckValue<IkReal> x1851=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1848*x1849))+(x1849*x1849)+(r22*r22)+(x1848*x1848))),-1);
if(!x1851.valid){
continue;
}
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal((((r22*x1847))+(((-1.0)*r22*x1850)))),IkReal(((((-1.0)*x1849*x1850))+((x1848*x1850))+(((-1.0)*x1847*x1848))+((x1847*x1849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1851.value)))+(x1852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1853=IKsin(j4);
IkReal x1854=IKcos(j4);
IkReal x1855=(gconst79*r01);
IkReal x1856=(gconst79*r21);
IkReal x1857=((1.0)*cj2);
IkReal x1858=(gconst79*r11);
IkReal x1859=((1.0)*sj0);
IkReal x1860=(cj1*sj2);
IkReal x1861=((1.0)*x1854);
IkReal x1862=(gconst80*x1854);
IkReal x1863=((1.0)*x1853);
IkReal x1864=(gconst80*x1863);
evalcond[0]=((((-1.0)*r20*x1864))+((x1853*x1856))+(((-1.0)*r22*x1861)));
evalcond[1]=(cj0+(((-1.0)*r12*x1861))+((x1853*x1858))+(((-1.0)*r10*x1864)));
evalcond[2]=((((-1.0)*r02*x1861))+((x1853*x1855))+(((-1.0)*r00*x1864))+(((-1.0)*x1859)));
evalcond[3]=((((-1.0)*x1856*x1861))+((sj1*sj2))+((r20*x1862))+(((-1.0)*r22*x1863))+(((-1.0)*cj1*x1857)));
evalcond[4]=((((-1.0)*x1855*x1861))+(((-1.0)*r02*x1863))+(((-1.0)*cj0*x1860))+(((-1.0)*cj0*sj1*x1857))+((r00*x1862)));
evalcond[5]=((((-1.0)*sj0*sj1*x1857))+(((-1.0)*r12*x1863))+((r10*x1862))+(((-1.0)*x1859*x1860))+(((-1.0)*x1858*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1865=((1.0)*gconst80);
CheckValue<IkReal> x1866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1865))+(((-1.0)*gconst79*r10)))),-1);
if(!x1866.valid){
continue;
}
CheckValue<IkReal> x1867 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1865))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1866.value)))+(x1867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1868=IKsin(j4);
IkReal x1869=IKcos(j4);
IkReal x1870=(gconst79*r01);
IkReal x1871=(gconst79*r21);
IkReal x1872=((1.0)*cj2);
IkReal x1873=(gconst79*r11);
IkReal x1874=((1.0)*sj0);
IkReal x1875=(cj1*sj2);
IkReal x1876=((1.0)*x1869);
IkReal x1877=(gconst80*x1869);
IkReal x1878=((1.0)*x1868);
IkReal x1879=(gconst80*x1878);
evalcond[0]=((((-1.0)*r22*x1876))+((x1868*x1871))+(((-1.0)*r20*x1879)));
evalcond[1]=(cj0+(((-1.0)*r10*x1879))+(((-1.0)*r12*x1876))+((x1868*x1873)));
evalcond[2]=((((-1.0)*x1874))+(((-1.0)*r02*x1876))+(((-1.0)*r00*x1879))+((x1868*x1870)));
evalcond[3]=((((-1.0)*r22*x1878))+((sj1*sj2))+((r20*x1877))+(((-1.0)*cj1*x1872))+(((-1.0)*x1871*x1876)));
evalcond[4]=((((-1.0)*cj0*x1875))+(((-1.0)*r02*x1878))+(((-1.0)*x1870*x1876))+(((-1.0)*cj0*sj1*x1872))+((r00*x1877)));
evalcond[5]=((((-1.0)*x1873*x1876))+(((-1.0)*x1874*x1875))+(((-1.0)*sj0*sj1*x1872))+(((-1.0)*r12*x1878))+((r10*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1880=((1.0)*gconst80);
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1880)))),-1);
if(!x1882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1881.value)+(((1.5707963267949)*(x1882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1883=IKsin(j4);
IkReal x1884=IKcos(j4);
IkReal x1885=(gconst79*r01);
IkReal x1886=(gconst79*r21);
IkReal x1887=((1.0)*cj2);
IkReal x1888=(gconst79*r11);
IkReal x1889=((1.0)*sj0);
IkReal x1890=(cj1*sj2);
IkReal x1891=((1.0)*x1884);
IkReal x1892=(gconst80*x1884);
IkReal x1893=((1.0)*x1883);
IkReal x1894=(gconst80*x1893);
evalcond[0]=(((x1883*x1886))+(((-1.0)*r22*x1891))+(((-1.0)*r20*x1894)));
evalcond[1]=(cj0+((x1883*x1888))+(((-1.0)*r10*x1894))+(((-1.0)*r12*x1891)));
evalcond[2]=((((-1.0)*r02*x1891))+((x1883*x1885))+(((-1.0)*r00*x1894))+(((-1.0)*x1889)));
evalcond[3]=(((r20*x1892))+(((-1.0)*cj1*x1887))+((sj1*sj2))+(((-1.0)*r22*x1893))+(((-1.0)*x1886*x1891)));
evalcond[4]=((((-1.0)*r02*x1893))+(((-1.0)*cj0*sj1*x1887))+((r00*x1892))+(((-1.0)*x1885*x1891))+(((-1.0)*cj0*x1890)));
evalcond[5]=((((-1.0)*sj0*sj1*x1887))+((r10*x1892))+(((-1.0)*x1888*x1891))+(((-1.0)*x1889*x1890))+(((-1.0)*r12*x1893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1895=((-1.0)*r21);
IkReal x1897 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1897)==0){
continue;
}
IkReal x1896=pow(x1897,-0.5);
CheckValue<IkReal> x1898 = IKatan2WithCheck(IkReal(x1895),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1898.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1898.value))));
IkReal gconst82=(x1895*x1896);
IkReal gconst83=((1.0)*r20*x1896);
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1899.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1900=((-1.0)*r21);
CheckValue<IkReal> x1903 = IKatan2WithCheck(IkReal(x1900),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1903.valid){
continue;
}
IkReal x1901=((1.0)*(x1903.value));
IkReal x1902=x1896;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1901)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1901)));
IkReal gconst82=(x1900*x1902);
IkReal gconst83=((1.0)*r20*x1902);
IkReal x1904=r22*r22;
IkReal x1905=((1.0)*x1904);
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(((-1.0)+x1904),-1);
if(!x1909.valid){
continue;
}
IkReal x1906=x1909.value;
if((((1.0)+(((-1.0)*x1905)))) < -0.00001)
continue;
IkReal x1907=IKsqrt(((1.0)+(((-1.0)*x1905))));
IkReal x1908=(cj0*x1906*x1907);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x1905*x1908))+x1908))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1910=((-1.0)*r21);
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal(x1910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
IkReal x1911=((1.0)*(x1913.value));
IkReal x1912=x1896;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1911)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1911)));
IkReal gconst82=(x1910*x1912);
IkReal gconst83=((1.0)*r20*x1912);
IkReal x1914=r22*r22;
IkReal x1915=((1.0)*x1914);
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(((-1.0)+x1914),-1);
if(!x1919.valid){
continue;
}
IkReal x1916=x1919.value;
if((((1.0)+(((-1.0)*x1915)))) < -0.00001)
continue;
IkReal x1917=IKsqrt(((1.0)+(((-1.0)*x1915))));
IkReal x1918=(sj0*x1916*x1917);
j4eval[0]=((IKabs(((((-1.0)*x1915*x1918))+x1918)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1920=((-1.0)*r21);
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal(x1920),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
IkReal x1921=((1.0)*(x1923.value));
IkReal x1922=x1896;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1921)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1921)));
IkReal gconst82=(x1920*x1922);
IkReal gconst83=((1.0)*r20*x1922);
IkReal x1924=r22*r22;
IkReal x1925=(r12*sj0);
IkReal x1926=(cj0*r02);
CheckValue<IkReal> x1930=IKPowWithIntegerCheck(((-1.0)+x1924),-1);
if(!x1930.valid){
continue;
}
IkReal x1927=x1930.value;
if((((1.0)+(((-1.0)*x1924)))) < -0.00001)
continue;
IkReal x1928=IKsqrt(((1.0)+(((-1.0)*x1924))));
IkReal x1929=(r22*x1927*x1928);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1926*x1929))+((x1925*x1929)))))+(IKabs(((((-1.0)*x1925))+(((-1.0)*x1926))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1931=((1.0)*sj0);
IkReal x1932=((1.0)*cj0);
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1933.valid){
continue;
}
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1931))+(((-1.0)*r02*x1932)))),IkReal(((((-1.0)*gconst82*r11*x1931))+(((-1.0)*gconst82*r01*x1932))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1933.value)))+(x1934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1935=IKsin(j4);
IkReal x1936=IKcos(j4);
IkReal x1937=(gconst82*r11);
IkReal x1938=((1.0)*cj2);
IkReal x1939=((1.0)*sj0);
IkReal x1940=(cj1*sj2);
IkReal x1941=((1.0)*x1936);
IkReal x1942=(gconst83*x1936);
IkReal x1943=(gconst82*x1935);
IkReal x1944=((1.0)*x1935);
evalcond[0]=((((-1.0)*r22*x1941))+(((-1.0)*gconst83*r20*x1944))+((r21*x1943)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1944))+((x1935*x1937))+(((-1.0)*r12*x1941)));
evalcond[2]=((((-1.0)*r02*x1941))+((r01*x1943))+(((-1.0)*gconst83*r00*x1944))+(((-1.0)*x1939)));
evalcond[3]=((((-1.0)*r22*x1944))+((r20*x1942))+(((-1.0)*cj1*x1938))+(((-1.0)*gconst82*r21*x1941))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x1940))+(((-1.0)*r02*x1944))+(((-1.0)*gconst82*r01*x1941))+((r00*x1942))+(((-1.0)*cj0*sj1*x1938)));
evalcond[5]=((((-1.0)*x1937*x1941))+((r10*x1942))+(((-1.0)*r12*x1944))+(((-1.0)*x1939*x1940))+(((-1.0)*sj0*sj1*x1938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1945=((1.0)*gconst83);
CheckValue<IkReal> x1946=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1945)))),-1);
if(!x1946.valid){
continue;
}
CheckValue<IkReal> x1947 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1946.value)))+(x1947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1948=IKsin(j4);
IkReal x1949=IKcos(j4);
IkReal x1950=(gconst82*r11);
IkReal x1951=((1.0)*cj2);
IkReal x1952=((1.0)*sj0);
IkReal x1953=(cj1*sj2);
IkReal x1954=((1.0)*x1949);
IkReal x1955=(gconst83*x1949);
IkReal x1956=(gconst82*x1948);
IkReal x1957=((1.0)*x1948);
evalcond[0]=((((-1.0)*r22*x1954))+((r21*x1956))+(((-1.0)*gconst83*r20*x1957)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1957))+((x1948*x1950))+(((-1.0)*r12*x1954)));
evalcond[2]=((((-1.0)*x1952))+(((-1.0)*r02*x1954))+((r01*x1956))+(((-1.0)*gconst83*r00*x1957)));
evalcond[3]=((((-1.0)*r22*x1957))+((r20*x1955))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1954))+(((-1.0)*cj1*x1951)));
evalcond[4]=((((-1.0)*cj0*sj1*x1951))+(((-1.0)*cj0*x1953))+(((-1.0)*r02*x1957))+(((-1.0)*gconst82*r01*x1954))+((r00*x1955)));
evalcond[5]=((((-1.0)*x1952*x1953))+(((-1.0)*x1950*x1954))+((r10*x1955))+(((-1.0)*r12*x1957))+(((-1.0)*sj0*sj1*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1958=((1.0)*gconst83);
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1958))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
CheckValue<IkReal> x1960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1958)))),-1);
if(!x1960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1959.value)+(((1.5707963267949)*(x1960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1961=IKsin(j4);
IkReal x1962=IKcos(j4);
IkReal x1963=(gconst82*r11);
IkReal x1964=((1.0)*cj2);
IkReal x1965=((1.0)*sj0);
IkReal x1966=(cj1*sj2);
IkReal x1967=((1.0)*x1962);
IkReal x1968=(gconst83*x1962);
IkReal x1969=(gconst82*x1961);
IkReal x1970=((1.0)*x1961);
evalcond[0]=((((-1.0)*r22*x1967))+((r21*x1969))+(((-1.0)*gconst83*r20*x1970)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1970))+((x1961*x1963))+(((-1.0)*r12*x1967)));
evalcond[2]=((((-1.0)*r02*x1967))+(((-1.0)*x1965))+((r01*x1969))+(((-1.0)*gconst83*r00*x1970)));
evalcond[3]=((((-1.0)*r22*x1970))+((r20*x1968))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1967))+(((-1.0)*cj1*x1964)));
evalcond[4]=((((-1.0)*cj0*x1966))+(((-1.0)*cj0*sj1*x1964))+(((-1.0)*r02*x1970))+((r00*x1968))+(((-1.0)*gconst82*r01*x1967)));
evalcond[5]=((((-1.0)*sj0*sj1*x1964))+((r10*x1968))+(((-1.0)*x1965*x1966))+(((-1.0)*r12*x1970))+(((-1.0)*x1963*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1971=((-1.0)*r10);
IkReal x1973 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1973)==0){
continue;
}
IkReal x1972=pow(x1973,-0.5);
CheckValue<IkReal> x1974 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1971),IKFAST_ATAN2_MAGTHRESH);
if(!x1974.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1974.value));
IkReal gconst85=(r11*x1972);
IkReal gconst86=(x1971*x1972);
CheckValue<IkReal> x1975 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1975.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1975.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1976=((-1.0)*r10);
IkReal x1977=x1972;
CheckValue<IkReal> x1979 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1976),IKFAST_ATAN2_MAGTHRESH);
if(!x1979.valid){
continue;
}
IkReal x1978=((-1.0)*(x1979.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1978;
IkReal gconst84=x1978;
IkReal gconst85=(r11*x1977);
IkReal gconst86=(x1976*x1977);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1980=((1.0)*sj0);
IkReal x1981=((1.0)*gconst85);
CheckValue<IkReal> x1982 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1980)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x1980))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1982.valid){
continue;
}
CheckValue<IkReal> x1983=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1981)))),-1);
if(!x1983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1982.value)+(((1.5707963267949)*(x1983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1984=IKsin(j4);
IkReal x1985=IKcos(j4);
IkReal x1986=(gconst85*r21);
IkReal x1987=(gconst86*r00);
IkReal x1988=(gconst86*r10);
IkReal x1989=((1.0)*cj2);
IkReal x1990=(gconst85*r11);
IkReal x1991=(gconst85*r01);
IkReal x1992=((1.0)*sj0);
IkReal x1993=(gconst86*r20);
IkReal x1994=(cj1*sj2);
IkReal x1995=((1.0)*x1985);
IkReal x1996=((1.0)*x1984);
evalcond[0]=((((-1.0)*x1993*x1996))+((x1984*x1986))+(((-1.0)*r22*x1995)));
evalcond[1]=(cj0+((x1984*x1990))+(((-1.0)*r12*x1995))+(((-1.0)*x1988*x1996)));
evalcond[2]=((((-1.0)*r02*x1995))+(((-1.0)*x1987*x1996))+(((-1.0)*x1992))+((x1984*x1991)));
evalcond[3]=((((-1.0)*x1986*x1995))+((sj1*sj2))+(((-1.0)*cj1*x1989))+(((-1.0)*r22*x1996))+((x1985*x1993)));
evalcond[4]=((((-1.0)*cj0*x1994))+(((-1.0)*r02*x1996))+(((-1.0)*x1991*x1995))+(((-1.0)*cj0*sj1*x1989))+((x1985*x1987)));
evalcond[5]=((((-1.0)*x1992*x1994))+(((-1.0)*sj0*sj1*x1989))+(((-1.0)*x1990*x1995))+(((-1.0)*r12*x1996))+((x1985*x1988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1997=((1.0)*gconst86);
CheckValue<IkReal> x1998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1997))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1998.valid){
continue;
}
CheckValue<IkReal> x1999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1997))+(((-1.0)*gconst85*r00)))),-1);
if(!x1999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1998.value)+(((1.5707963267949)*(x1999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2000=IKsin(j4);
IkReal x2001=IKcos(j4);
IkReal x2002=(gconst85*r21);
IkReal x2003=(gconst86*r00);
IkReal x2004=(gconst86*r10);
IkReal x2005=((1.0)*cj2);
IkReal x2006=(gconst85*r11);
IkReal x2007=(gconst85*r01);
IkReal x2008=((1.0)*sj0);
IkReal x2009=(gconst86*r20);
IkReal x2010=(cj1*sj2);
IkReal x2011=((1.0)*x2001);
IkReal x2012=((1.0)*x2000);
evalcond[0]=((((-1.0)*x2009*x2012))+((x2000*x2002))+(((-1.0)*r22*x2011)));
evalcond[1]=(cj0+((x2000*x2006))+(((-1.0)*x2004*x2012))+(((-1.0)*r12*x2011)));
evalcond[2]=(((x2000*x2007))+(((-1.0)*x2003*x2012))+(((-1.0)*x2008))+(((-1.0)*r02*x2011)));
evalcond[3]=((((-1.0)*x2002*x2011))+((sj1*sj2))+(((-1.0)*cj1*x2005))+((x2001*x2009))+(((-1.0)*r22*x2012)));
evalcond[4]=((((-1.0)*x2007*x2011))+((x2001*x2003))+(((-1.0)*r02*x2012))+(((-1.0)*cj0*x2010))+(((-1.0)*cj0*sj1*x2005)));
evalcond[5]=((((-1.0)*x2008*x2010))+(((-1.0)*sj0*sj1*x2005))+(((-1.0)*x2006*x2011))+(((-1.0)*r12*x2012))+((x2001*x2004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2013=((-1.0)*r11);
IkReal x2015 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2015)==0){
continue;
}
IkReal x2014=pow(x2015,-0.5);
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal(x2013),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2016.value))));
IkReal gconst88=(x2013*x2014);
IkReal gconst89=((1.0)*r10*x2014);
CheckValue<IkReal> x2017 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2017.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2017.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2018=((-1.0)*r11);
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal(x2018),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
IkReal x2019=((1.0)*(x2021.value));
IkReal x2020=x2014;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2019)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2019)));
IkReal gconst88=(x2018*x2020);
IkReal gconst89=((1.0)*r10*x2020);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2022=((-1.0)*r11);
CheckValue<IkReal> x2025 = IKatan2WithCheck(IkReal(x2022),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2025.valid){
continue;
}
IkReal x2023=((1.0)*(x2025.value));
IkReal x2024=x2014;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2023)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2023)));
IkReal gconst88=(x2022*x2024);
IkReal gconst89=((1.0)*r10*x2024);
IkReal x2026=r12*r12;
IkReal x2027=((1.0)*sj0);
IkReal x2028=(cj0*r02);
IkReal x2029=x2014;
j4eval[0]=((IKabs((((r12*x2028*x2029))+((sj0*x2026*x2029))+(((-1.0)*x2027*x2029)))))+(IKabs(((((-1.0)*r12*x2027))+(((-1.0)*x2028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2030=((-1.0)*r11);
CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal(x2030),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2033.valid){
continue;
}
IkReal x2031=((1.0)*(x2033.value));
IkReal x2032=x2014;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2031)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2031)));
IkReal gconst88=(x2030*x2032);
IkReal gconst89=((1.0)*r10*x2032);
IkReal x2034=r12*r12;
IkReal x2035=(cj1*cj2*r22);
IkReal x2036=(r22*sj1*sj2);
CheckValue<IkReal> x2040=IKPowWithIntegerCheck(((-1.0)+x2034),-1);
if(!x2040.valid){
continue;
}
IkReal x2037=x2040.value;
if((((1.0)+(((-1.0)*x2034)))) < -0.00001)
continue;
IkReal x2038=IKsqrt(((1.0)+(((-1.0)*x2034))));
IkReal x2039=(r12*x2037*x2038);
j4eval[0]=((IKabs((((x2035*x2039))+(((-1.0)*x2036*x2039)))))+(IKabs((x2036+(((-1.0)*x2035))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2041=(cj1*cj2);
IkReal x2042=(gconst89*r20);
IkReal x2043=(gconst88*r21);
IkReal x2044=(sj1*sj2);
CheckValue<IkReal> x2045=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2042*x2042)+(x2043*x2043)+(((-2.0)*x2042*x2043)))),-1);
if(!x2045.valid){
continue;
}
CheckValue<IkReal> x2046 = IKatan2WithCheck(IkReal((((r22*x2044))+(((-1.0)*r22*x2041)))),IkReal((((x2041*x2042))+(((-1.0)*x2042*x2044))+((x2043*x2044))+(((-1.0)*x2041*x2043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2045.value)))+(x2046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2047=IKsin(j4);
IkReal x2048=IKcos(j4);
IkReal x2049=((1.0)*sj0);
IkReal x2050=((1.0)*cj2);
IkReal x2051=(gconst89*r20);
IkReal x2052=(gconst89*r10);
IkReal x2053=(gconst89*r00);
IkReal x2054=(cj1*sj2);
IkReal x2055=((1.0)*x2048);
IkReal x2056=((1.0)*x2047);
IkReal x2057=(gconst88*x2047);
evalcond[0]=((((-1.0)*r22*x2055))+(((-1.0)*x2051*x2056))+((r21*x2057)));
evalcond[1]=(((r11*x2057))+cj0+(((-1.0)*r12*x2055))+(((-1.0)*x2052*x2056)));
evalcond[2]=(((r01*x2057))+(((-1.0)*x2049))+(((-1.0)*r02*x2055))+(((-1.0)*x2053*x2056)));
evalcond[3]=((((-1.0)*cj1*x2050))+(((-1.0)*r22*x2056))+((sj1*sj2))+((x2048*x2051))+(((-1.0)*gconst88*r21*x2055)));
evalcond[4]=((((-1.0)*gconst88*r01*x2055))+(((-1.0)*r02*x2056))+(((-1.0)*cj0*x2054))+((x2048*x2053))+(((-1.0)*cj0*sj1*x2050)));
evalcond[5]=((((-1.0)*cj2*sj1*x2049))+(((-1.0)*r12*x2056))+(((-1.0)*gconst88*r11*x2055))+(((-1.0)*x2049*x2054))+((x2048*x2052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2058=((1.0)*sj0);
IkReal x2059=((1.0)*cj0);
CheckValue<IkReal> x2060 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2058))+(((-1.0)*r02*x2059)))),IkReal(((((-1.0)*gconst88*r01*x2059))+(((-1.0)*gconst88*r11*x2058))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2060.valid){
continue;
}
CheckValue<IkReal> x2061=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2060.value)+(((1.5707963267949)*(x2061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2062=IKsin(j4);
IkReal x2063=IKcos(j4);
IkReal x2064=((1.0)*sj0);
IkReal x2065=((1.0)*cj2);
IkReal x2066=(gconst89*r20);
IkReal x2067=(gconst89*r10);
IkReal x2068=(gconst89*r00);
IkReal x2069=(cj1*sj2);
IkReal x2070=((1.0)*x2063);
IkReal x2071=((1.0)*x2062);
IkReal x2072=(gconst88*x2062);
evalcond[0]=((((-1.0)*r22*x2070))+(((-1.0)*x2066*x2071))+((r21*x2072)));
evalcond[1]=(cj0+(((-1.0)*r12*x2070))+((r11*x2072))+(((-1.0)*x2067*x2071)));
evalcond[2]=((((-1.0)*r02*x2070))+(((-1.0)*x2064))+((r01*x2072))+(((-1.0)*x2068*x2071)));
evalcond[3]=((((-1.0)*gconst88*r21*x2070))+(((-1.0)*r22*x2071))+((sj1*sj2))+(((-1.0)*cj1*x2065))+((x2063*x2066)));
evalcond[4]=((((-1.0)*cj0*x2069))+(((-1.0)*r02*x2071))+(((-1.0)*cj0*sj1*x2065))+((x2063*x2068))+(((-1.0)*gconst88*r01*x2070)));
evalcond[5]=((((-1.0)*r12*x2071))+(((-1.0)*x2064*x2069))+(((-1.0)*gconst88*r11*x2070))+((x2063*x2067))+(((-1.0)*cj2*sj1*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2073=((1.0)*gconst89);
CheckValue<IkReal> x2074=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2073))+(((-1.0)*gconst88*r00)))),-1);
if(!x2074.valid){
continue;
}
CheckValue<IkReal> x2075 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2073))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2074.value)))+(x2075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2076=IKsin(j4);
IkReal x2077=IKcos(j4);
IkReal x2078=((1.0)*sj0);
IkReal x2079=((1.0)*cj2);
IkReal x2080=(gconst89*r20);
IkReal x2081=(gconst89*r10);
IkReal x2082=(gconst89*r00);
IkReal x2083=(cj1*sj2);
IkReal x2084=((1.0)*x2077);
IkReal x2085=((1.0)*x2076);
IkReal x2086=(gconst88*x2076);
evalcond[0]=((((-1.0)*r22*x2084))+((r21*x2086))+(((-1.0)*x2080*x2085)));
evalcond[1]=(cj0+(((-1.0)*x2081*x2085))+(((-1.0)*r12*x2084))+((r11*x2086)));
evalcond[2]=((((-1.0)*r02*x2084))+(((-1.0)*x2078))+((r01*x2086))+(((-1.0)*x2082*x2085)));
evalcond[3]=((((-1.0)*r22*x2085))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2084))+((x2077*x2080))+(((-1.0)*cj1*x2079)));
evalcond[4]=((((-1.0)*r02*x2085))+(((-1.0)*gconst88*r01*x2084))+((x2077*x2082))+(((-1.0)*cj0*x2083))+(((-1.0)*cj0*sj1*x2079)));
evalcond[5]=((((-1.0)*x2078*x2083))+(((-1.0)*gconst88*r11*x2084))+((x2077*x2081))+(((-1.0)*r12*x2085))+(((-1.0)*cj2*sj1*x2078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2087=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2087;
j4eval[1]=IKsign(x2087);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2088=((1.0)*cj5);
IkReal x2089=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2088)));
j4eval[0]=x2089;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2088))+((r21*sj5))))));
j4eval[2]=IKsign(x2089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2090=cj5*cj5;
IkReal x2091=r11*r11;
IkReal x2092=(r11*sj5);
IkReal x2093=(cj5*r10);
IkReal x2094=((r12*r12)+x2091+((x2090*(r10*r10)))+(((-2.0)*x2092*x2093))+(((-1.0)*x2090*x2091)));
j4eval[0]=x2094;
j4eval[1]=IKsign(x2094);
j4eval[2]=((IKabs(r12))+(IKabs((x2093+(((-1.0)*x2092))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2095=cj5*cj5;
IkReal x2096=r11*r11;
IkReal x2097=(cj5*r10);
IkReal x2098=(r11*sj5);
CheckValue<IkReal> x2099=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x2097*x2098))+x2096+((x2095*(r10*r10)))+(((-1.0)*x2095*x2096)))),-1);
if(!x2099.valid){
continue;
}
CheckValue<IkReal> x2100 = IKatan2WithCheck(IkReal((x2097+(((-1.0)*x2098)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2099.value)))+(x2100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2101=IKsin(j4);
IkReal x2102=IKcos(j4);
IkReal x2103=(cj5*r10);
IkReal x2104=(r01*sj5);
IkReal x2105=((1.0)*cj2);
IkReal x2106=(cj5*r00);
IkReal x2107=(cj5*r20);
IkReal x2108=((1.0)*x2102);
IkReal x2109=((1.0)*x2101);
IkReal x2110=(sj5*x2101);
evalcond[0]=((((-1.0)*r22*x2108))+(((-1.0)*x2107*x2109))+((r21*x2110)));
evalcond[1]=((((-1.0)*r02*x2108))+(((-1.0)*x2106*x2109))+((x2101*x2104)));
evalcond[2]=((((-1.0)*r12*x2109))+((x2102*x2103))+(((-1.0)*r11*sj5*x2108)));
evalcond[3]=((1.0)+(((-1.0)*x2103*x2109))+(((-1.0)*r12*x2108))+((r11*x2110)));
evalcond[4]=((((-1.0)*r22*x2109))+(((-1.0)*cj1*x2105))+((sj1*sj2))+((x2102*x2107))+(((-1.0)*r21*sj5*x2108)));
evalcond[5]=((((-1.0)*r02*x2109))+(((-1.0)*sj1*x2105))+(((-1.0)*cj1*sj2))+((x2102*x2106))+(((-1.0)*x2104*x2108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2111=((1.0)*cj5);
CheckValue<IkReal> x2112 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2111))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2112.valid){
continue;
}
CheckValue<IkReal> x2113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2111))+(((-1.0)*r00*sj5)))),-1);
if(!x2113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2112.value)+(((1.5707963267949)*(x2113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2114=IKsin(j4);
IkReal x2115=IKcos(j4);
IkReal x2116=(cj5*r10);
IkReal x2117=(r01*sj5);
IkReal x2118=((1.0)*cj2);
IkReal x2119=(cj5*r00);
IkReal x2120=(cj5*r20);
IkReal x2121=((1.0)*x2115);
IkReal x2122=((1.0)*x2114);
IkReal x2123=(sj5*x2114);
evalcond[0]=((((-1.0)*r22*x2121))+(((-1.0)*x2120*x2122))+((r21*x2123)));
evalcond[1]=((((-1.0)*x2119*x2122))+(((-1.0)*r02*x2121))+((x2114*x2117)));
evalcond[2]=((((-1.0)*r12*x2122))+(((-1.0)*r11*sj5*x2121))+((x2115*x2116)));
evalcond[3]=((1.0)+(((-1.0)*x2116*x2122))+((r11*x2123))+(((-1.0)*r12*x2121)));
evalcond[4]=((((-1.0)*r22*x2122))+((x2115*x2120))+((sj1*sj2))+(((-1.0)*cj1*x2118))+(((-1.0)*r21*sj5*x2121)));
evalcond[5]=((((-1.0)*x2117*x2121))+(((-1.0)*sj1*x2118))+(((-1.0)*r02*x2122))+(((-1.0)*cj1*sj2))+((x2115*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2124=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2124.valid){
continue;
}
CheckValue<IkReal> x2125 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2124.value)))+(x2125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2126=IKsin(j4);
IkReal x2127=IKcos(j4);
IkReal x2128=(cj5*r10);
IkReal x2129=(r01*sj5);
IkReal x2130=((1.0)*cj2);
IkReal x2131=(cj5*r00);
IkReal x2132=(cj5*r20);
IkReal x2133=((1.0)*x2127);
IkReal x2134=((1.0)*x2126);
IkReal x2135=(sj5*x2126);
evalcond[0]=((((-1.0)*r22*x2133))+((r21*x2135))+(((-1.0)*x2132*x2134)));
evalcond[1]=((((-1.0)*x2131*x2134))+((x2126*x2129))+(((-1.0)*r02*x2133)));
evalcond[2]=((((-1.0)*r12*x2134))+(((-1.0)*r11*sj5*x2133))+((x2127*x2128)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2133))+((r11*x2135))+(((-1.0)*x2128*x2134)));
evalcond[4]=((((-1.0)*r22*x2134))+((sj1*sj2))+(((-1.0)*cj1*x2130))+(((-1.0)*r21*sj5*x2133))+((x2127*x2132)));
evalcond[5]=((((-1.0)*sj1*x2130))+(((-1.0)*cj1*sj2))+((x2127*x2131))+(((-1.0)*x2129*x2133))+(((-1.0)*r02*x2134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2136=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2136;
j4eval[1]=IKsign(x2136);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2137=((1.0)*cj5);
IkReal x2138=((((-1.0)*r21*x2137))+(((-1.0)*r20*sj5)));
j4eval[0]=x2138;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2137))))));
j4eval[2]=IKsign(x2138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2139=cj5*cj5;
IkReal x2140=r11*r11;
IkReal x2141=(cj5*r10);
IkReal x2142=(r11*sj5);
IkReal x2143=((((2.0)*x2141*x2142))+(((-1.0)*x2140))+(((-1.0)*x2139*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2139*x2140)));
j4eval[0]=x2143;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2142))+x2141))));
j4eval[2]=IKsign(x2143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2144=cj5*cj5;
IkReal x2145=r11*r11;
IkReal x2146=(cj5*r10);
IkReal x2147=(r11*sj5);
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal(((((-1.0)*x2147))+x2146)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
CheckValue<IkReal> x2149=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2145))+(((2.0)*x2146*x2147))+((x2144*x2145))+(((-1.0)*(r12*r12)))+(((-1.0)*x2144*(r10*r10))))),-1);
if(!x2149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2148.value)+(((1.5707963267949)*(x2149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2150=IKsin(j4);
IkReal x2151=IKcos(j4);
IkReal x2152=(cj5*r10);
IkReal x2153=(r01*sj5);
IkReal x2154=(cj5*r00);
IkReal x2155=(cj5*r20);
IkReal x2156=((1.0)*x2151);
IkReal x2157=((1.0)*x2150);
IkReal x2158=(sj5*x2150);
evalcond[0]=((((-1.0)*x2155*x2157))+(((-1.0)*r22*x2156))+((r21*x2158)));
evalcond[1]=((((-1.0)*r02*x2156))+((x2150*x2153))+(((-1.0)*x2154*x2157)));
evalcond[2]=((((-1.0)*r11*sj5*x2156))+(((-1.0)*r12*x2157))+((x2151*x2152)));
evalcond[3]=((-1.0)+(((-1.0)*x2152*x2157))+(((-1.0)*r12*x2156))+((r11*x2158)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2157))+(((-1.0)*x2153*x2156))+((x2151*x2154)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2151*x2155))+(((-1.0)*r22*x2157))+(((-1.0)*r21*sj5*x2156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2159=((1.0)*cj5);
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2159))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2159))+(((-1.0)*r20*sj5)))),-1);
if(!x2161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2160.value)+(((1.5707963267949)*(x2161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2162=IKsin(j4);
IkReal x2163=IKcos(j4);
IkReal x2164=(cj5*r10);
IkReal x2165=(r01*sj5);
IkReal x2166=(cj5*r00);
IkReal x2167=(cj5*r20);
IkReal x2168=((1.0)*x2163);
IkReal x2169=((1.0)*x2162);
IkReal x2170=(sj5*x2162);
evalcond[0]=(((r21*x2170))+(((-1.0)*r22*x2168))+(((-1.0)*x2167*x2169)));
evalcond[1]=((((-1.0)*x2166*x2169))+((x2162*x2165))+(((-1.0)*r02*x2168)));
evalcond[2]=((((-1.0)*r11*sj5*x2168))+(((-1.0)*r12*x2169))+((x2163*x2164)));
evalcond[3]=((-1.0)+((r11*x2170))+(((-1.0)*x2164*x2169))+(((-1.0)*r12*x2168)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2165*x2168))+((x2163*x2166))+(((-1.0)*r02*x2169)));
evalcond[5]=((((-1.0)*r21*sj5*x2168))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2169))+((x2163*x2167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2171 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2171.valid){
continue;
}
CheckValue<IkReal> x2172=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2171.value)+(((1.5707963267949)*(x2172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2173=IKsin(j4);
IkReal x2174=IKcos(j4);
IkReal x2175=(cj5*r10);
IkReal x2176=(r01*sj5);
IkReal x2177=(cj5*r00);
IkReal x2178=(cj5*r20);
IkReal x2179=((1.0)*x2174);
IkReal x2180=((1.0)*x2173);
IkReal x2181=(sj5*x2173);
evalcond[0]=(((r21*x2181))+(((-1.0)*x2178*x2180))+(((-1.0)*r22*x2179)));
evalcond[1]=(((x2173*x2176))+(((-1.0)*r02*x2179))+(((-1.0)*x2177*x2180)));
evalcond[2]=(((x2174*x2175))+(((-1.0)*r11*sj5*x2179))+(((-1.0)*r12*x2180)));
evalcond[3]=((-1.0)+(((-1.0)*x2175*x2180))+((r11*x2181))+(((-1.0)*r12*x2179)));
evalcond[4]=((((-1.0)*x2176*x2179))+((cj2*sj1))+((cj1*sj2))+((x2174*x2177))+(((-1.0)*r02*x2180)));
evalcond[5]=((((-1.0)*r21*sj5*x2179))+((x2174*x2178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2182=((-1.0)*r00);
IkReal x2184 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2184)==0){
continue;
}
IkReal x2183=pow(x2184,-0.5);
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2182),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2185.value));
IkReal gconst91=(r01*x2183);
IkReal gconst92=(x2182*x2183);
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2186.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2187=((-1.0)*r00);
IkReal x2188=x2183;
CheckValue<IkReal> x2190 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2187),IKFAST_ATAN2_MAGTHRESH);
if(!x2190.valid){
continue;
}
IkReal x2189=((-1.0)*(x2190.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2189;
IkReal gconst90=x2189;
IkReal gconst91=(r01*x2188);
IkReal gconst92=(x2187*x2188);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2191=((1.0)*sj0);
IkReal x2192=((1.0)*cj0);
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2192))+(((-1.0)*r12*x2191)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2192))+(((-1.0)*gconst91*r11*x2191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
CheckValue<IkReal> x2194=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2193.value)+(((1.5707963267949)*(x2194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2195=IKsin(j4);
IkReal x2196=IKcos(j4);
IkReal x2197=((1.0)*cj2);
IkReal x2198=(gconst92*r00);
IkReal x2199=(gconst92*r20);
IkReal x2200=((1.0)*sj0);
IkReal x2201=(gconst92*r10);
IkReal x2202=(cj1*sj2);
IkReal x2203=((1.0)*x2196);
IkReal x2204=(gconst91*x2195);
IkReal x2205=((1.0)*x2195);
evalcond[0]=((((-1.0)*r22*x2203))+(((-1.0)*x2199*x2205))+((r21*x2204)));
evalcond[1]=(cj0+(((-1.0)*r12*x2203))+((r11*x2204))+(((-1.0)*x2201*x2205)));
evalcond[2]=(((r01*x2204))+(((-1.0)*x2200))+(((-1.0)*x2198*x2205))+(((-1.0)*r02*x2203)));
evalcond[3]=(((x2196*x2199))+(((-1.0)*r22*x2205))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2203))+(((-1.0)*cj1*x2197)));
evalcond[4]=(((x2196*x2198))+(((-1.0)*gconst91*r01*x2203))+(((-1.0)*cj0*sj1*x2197))+(((-1.0)*r02*x2205))+(((-1.0)*cj0*x2202)));
evalcond[5]=((((-1.0)*r12*x2205))+(((-1.0)*sj0*sj1*x2197))+(((-1.0)*gconst91*r11*x2203))+(((-1.0)*x2200*x2202))+((x2196*x2201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2206=((1.0)*gconst92);
CheckValue<IkReal> x2207=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2206)))),-1);
if(!x2207.valid){
continue;
}
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2206))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2207.value)))+(x2208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2209=IKsin(j4);
IkReal x2210=IKcos(j4);
IkReal x2211=((1.0)*cj2);
IkReal x2212=(gconst92*r00);
IkReal x2213=(gconst92*r20);
IkReal x2214=((1.0)*sj0);
IkReal x2215=(gconst92*r10);
IkReal x2216=(cj1*sj2);
IkReal x2217=((1.0)*x2210);
IkReal x2218=(gconst91*x2209);
IkReal x2219=((1.0)*x2209);
evalcond[0]=((((-1.0)*r22*x2217))+(((-1.0)*x2213*x2219))+((r21*x2218)));
evalcond[1]=(cj0+(((-1.0)*x2215*x2219))+(((-1.0)*r12*x2217))+((r11*x2218)));
evalcond[2]=(((r01*x2218))+(((-1.0)*x2214))+(((-1.0)*r02*x2217))+(((-1.0)*x2212*x2219)));
evalcond[3]=(((x2210*x2213))+(((-1.0)*cj1*x2211))+(((-1.0)*r22*x2219))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2217)));
evalcond[4]=(((x2210*x2212))+(((-1.0)*gconst91*r01*x2217))+(((-1.0)*cj0*sj1*x2211))+(((-1.0)*r02*x2219))+(((-1.0)*cj0*x2216)));
evalcond[5]=((((-1.0)*x2214*x2216))+((x2210*x2215))+(((-1.0)*r12*x2219))+(((-1.0)*gconst91*r11*x2217))+(((-1.0)*sj0*sj1*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2220=((-1.0)*r01);
IkReal x2222 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2222)==0){
continue;
}
IkReal x2221=pow(x2222,-0.5);
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal(x2220),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2223.value))));
IkReal gconst94=(x2220*x2221);
IkReal gconst95=((1.0)*r00*x2221);
CheckValue<IkReal> x2224 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2224.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2224.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2225=((-1.0)*r01);
CheckValue<IkReal> x2228 = IKatan2WithCheck(IkReal(x2225),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2228.valid){
continue;
}
IkReal x2226=((1.0)*(x2228.value));
IkReal x2227=x2221;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2226)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2226)));
IkReal gconst94=(x2225*x2227);
IkReal gconst95=((1.0)*r00*x2227);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2229=((-1.0)*r01);
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal(x2229),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
IkReal x2230=((1.0)*(x2232.value));
IkReal x2231=x2221;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2230)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2230)));
IkReal gconst94=(x2229*x2231);
IkReal gconst95=((1.0)*r00*x2231);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2233=((-1.0)*r01);
CheckValue<IkReal> x2236 = IKatan2WithCheck(IkReal(x2233),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2236.valid){
continue;
}
IkReal x2234=((1.0)*(x2236.value));
IkReal x2235=x2221;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2234)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2234)));
IkReal gconst94=(x2233*x2235);
IkReal gconst95=((1.0)*r00*x2235);
IkReal x2237=r02*r02;
IkReal x2238=(r12*sj0);
IkReal x2239=((1.0)*cj0);
IkReal x2240=x2221;
j4eval[0]=((IKabs(((((-1.0)*r02*x2239))+(((-1.0)*x2238)))))+(IKabs((((r02*x2238*x2240))+(((-1.0)*x2239*x2240))+((cj0*x2237*x2240))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2241=((1.0)*sj0);
IkReal x2242=((1.0)*cj0);
CheckValue<IkReal> x2243=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2243.valid){
continue;
}
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2242))+(((-1.0)*r12*x2241)))),IkReal(((((-1.0)*gconst94*r01*x2242))+(((-1.0)*gconst94*r11*x2241))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2243.value)))+(x2244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2245=IKsin(j4);
IkReal x2246=IKcos(j4);
IkReal x2247=(gconst94*r11);
IkReal x2248=((1.0)*cj2);
IkReal x2249=(gconst94*r21);
IkReal x2250=((1.0)*sj0);
IkReal x2251=(gconst94*r01);
IkReal x2252=(cj1*sj2);
IkReal x2253=((1.0)*x2246);
IkReal x2254=(gconst95*x2246);
IkReal x2255=((1.0)*x2245);
IkReal x2256=(gconst95*x2255);
evalcond[0]=((((-1.0)*r22*x2253))+(((-1.0)*r20*x2256))+((x2245*x2249)));
evalcond[1]=(cj0+(((-1.0)*r12*x2253))+(((-1.0)*r10*x2256))+((x2245*x2247)));
evalcond[2]=(((x2245*x2251))+(((-1.0)*r02*x2253))+(((-1.0)*x2250))+(((-1.0)*r00*x2256)));
evalcond[3]=((((-1.0)*x2249*x2253))+(((-1.0)*r22*x2255))+((sj1*sj2))+((r20*x2254))+(((-1.0)*cj1*x2248)));
evalcond[4]=((((-1.0)*r02*x2255))+(((-1.0)*cj0*x2252))+((r00*x2254))+(((-1.0)*x2251*x2253))+(((-1.0)*cj0*sj1*x2248)));
evalcond[5]=(((r10*x2254))+(((-1.0)*sj0*sj1*x2248))+(((-1.0)*r12*x2255))+(((-1.0)*x2250*x2252))+(((-1.0)*x2247*x2253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2257=((1.0)*gconst95);
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2257)))),-1);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2258.value)+(((1.5707963267949)*(x2259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2260=IKsin(j4);
IkReal x2261=IKcos(j4);
IkReal x2262=(gconst94*r11);
IkReal x2263=((1.0)*cj2);
IkReal x2264=(gconst94*r21);
IkReal x2265=((1.0)*sj0);
IkReal x2266=(gconst94*r01);
IkReal x2267=(cj1*sj2);
IkReal x2268=((1.0)*x2261);
IkReal x2269=(gconst95*x2261);
IkReal x2270=((1.0)*x2260);
IkReal x2271=(gconst95*x2270);
evalcond[0]=(((x2260*x2264))+(((-1.0)*r20*x2271))+(((-1.0)*r22*x2268)));
evalcond[1]=(((x2260*x2262))+cj0+(((-1.0)*r10*x2271))+(((-1.0)*r12*x2268)));
evalcond[2]=(((x2260*x2266))+(((-1.0)*r00*x2271))+(((-1.0)*r02*x2268))+(((-1.0)*x2265)));
evalcond[3]=((((-1.0)*cj1*x2263))+((sj1*sj2))+(((-1.0)*r22*x2270))+((r20*x2269))+(((-1.0)*x2264*x2268)));
evalcond[4]=(((r00*x2269))+(((-1.0)*cj0*sj1*x2263))+(((-1.0)*r02*x2270))+(((-1.0)*cj0*x2267))+(((-1.0)*x2266*x2268)));
evalcond[5]=((((-1.0)*sj0*sj1*x2263))+((r10*x2269))+(((-1.0)*r12*x2270))+(((-1.0)*x2262*x2268))+(((-1.0)*x2265*x2267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2272=((1.0)*gconst95);
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2272))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
CheckValue<IkReal> x2274=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2272)))),-1);
if(!x2274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2273.value)+(((1.5707963267949)*(x2274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2275=IKsin(j4);
IkReal x2276=IKcos(j4);
IkReal x2277=(gconst94*r11);
IkReal x2278=((1.0)*cj2);
IkReal x2279=(gconst94*r21);
IkReal x2280=((1.0)*sj0);
IkReal x2281=(gconst94*r01);
IkReal x2282=(cj1*sj2);
IkReal x2283=((1.0)*x2276);
IkReal x2284=(gconst95*x2276);
IkReal x2285=((1.0)*x2275);
IkReal x2286=(gconst95*x2285);
evalcond[0]=((((-1.0)*r20*x2286))+(((-1.0)*r22*x2283))+((x2275*x2279)));
evalcond[1]=(cj0+(((-1.0)*r12*x2283))+(((-1.0)*r10*x2286))+((x2275*x2277)));
evalcond[2]=((((-1.0)*r02*x2283))+(((-1.0)*x2280))+((x2275*x2281))+(((-1.0)*r00*x2286)));
evalcond[3]=((((-1.0)*cj1*x2278))+((r20*x2284))+((sj1*sj2))+(((-1.0)*x2279*x2283))+(((-1.0)*r22*x2285)));
evalcond[4]=((((-1.0)*r02*x2285))+(((-1.0)*cj0*sj1*x2278))+(((-1.0)*cj0*x2282))+(((-1.0)*x2281*x2283))+((r00*x2284)));
evalcond[5]=((((-1.0)*x2280*x2282))+((r10*x2284))+(((-1.0)*x2277*x2283))+(((-1.0)*r12*x2285))+(((-1.0)*sj0*sj1*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2287=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2287;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2288=((1.0)*cj5);
IkReal x2289=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2288)));
j4eval[0]=x2289;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2288)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2290=cj5*cj5;
IkReal x2291=r01*r01;
IkReal x2292=(r01*sj5);
IkReal x2293=(cj5*r00);
IkReal x2294=((((-1.0)*x2290*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2291))+((x2290*x2291))+(((2.0)*x2292*x2293)));
j4eval[0]=x2294;
j4eval[1]=IKsign(x2294);
j4eval[2]=((IKabs((x2293+(((-1.0)*x2292)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2295=cj5*cj5;
IkReal x2296=r01*r01;
IkReal x2297=(r01*sj5);
IkReal x2298=(cj5*r00);
CheckValue<IkReal> x2299=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x2295*x2296))+(((-1.0)*x2296))+(((-1.0)*x2295*(r00*r00)))+(((2.0)*x2297*x2298)))),-1);
if(!x2299.valid){
continue;
}
CheckValue<IkReal> x2300 = IKatan2WithCheck(IkReal((x2298+(((-1.0)*x2297)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2299.value)))+(x2300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2301=IKsin(j4);
IkReal x2302=IKcos(j4);
IkReal x2303=(cj5*r10);
IkReal x2304=(r01*sj5);
IkReal x2305=((1.0)*cj2);
IkReal x2306=(cj5*r00);
IkReal x2307=(cj5*r20);
IkReal x2308=((1.0)*x2302);
IkReal x2309=((1.0)*x2301);
IkReal x2310=(sj5*x2301);
evalcond[0]=((((-1.0)*r22*x2308))+((r21*x2310))+(((-1.0)*x2307*x2309)));
evalcond[1]=((((-1.0)*x2303*x2309))+((r11*x2310))+(((-1.0)*r12*x2308)));
evalcond[2]=((((-1.0)*x2304*x2308))+(((-1.0)*r02*x2309))+((x2302*x2306)));
evalcond[3]=((-1.0)+(((-1.0)*x2306*x2309))+((x2301*x2304))+(((-1.0)*r02*x2308)));
evalcond[4]=((((-1.0)*r22*x2309))+((sj1*sj2))+(((-1.0)*r21*sj5*x2308))+(((-1.0)*cj1*x2305))+((x2302*x2307)));
evalcond[5]=((((-1.0)*sj1*x2305))+(((-1.0)*r11*sj5*x2308))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2309))+((x2302*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2311=((1.0)*cj5);
CheckValue<IkReal> x2312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2311)))),-1);
if(!x2312.valid){
continue;
}
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2311))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2312.value)))+(x2313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2314=IKsin(j4);
IkReal x2315=IKcos(j4);
IkReal x2316=(cj5*r10);
IkReal x2317=(r01*sj5);
IkReal x2318=((1.0)*cj2);
IkReal x2319=(cj5*r00);
IkReal x2320=(cj5*r20);
IkReal x2321=((1.0)*x2315);
IkReal x2322=((1.0)*x2314);
IkReal x2323=(sj5*x2314);
evalcond[0]=((((-1.0)*r22*x2321))+((r21*x2323))+(((-1.0)*x2320*x2322)));
evalcond[1]=(((r11*x2323))+(((-1.0)*r12*x2321))+(((-1.0)*x2316*x2322)));
evalcond[2]=(((x2315*x2319))+(((-1.0)*x2317*x2321))+(((-1.0)*r02*x2322)));
evalcond[3]=((-1.0)+(((-1.0)*x2319*x2322))+((x2314*x2317))+(((-1.0)*r02*x2321)));
evalcond[4]=(((x2315*x2320))+(((-1.0)*r22*x2322))+((sj1*sj2))+(((-1.0)*cj1*x2318))+(((-1.0)*r21*sj5*x2321)));
evalcond[5]=(((x2315*x2316))+(((-1.0)*r11*sj5*x2321))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2322))+(((-1.0)*sj1*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2324=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2324.valid){
continue;
}
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2324.value)))+(x2325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2326=IKsin(j4);
IkReal x2327=IKcos(j4);
IkReal x2328=(cj5*r10);
IkReal x2329=(r01*sj5);
IkReal x2330=((1.0)*cj2);
IkReal x2331=(cj5*r00);
IkReal x2332=(cj5*r20);
IkReal x2333=((1.0)*x2327);
IkReal x2334=((1.0)*x2326);
IkReal x2335=(sj5*x2326);
evalcond[0]=(((r21*x2335))+(((-1.0)*x2332*x2334))+(((-1.0)*r22*x2333)));
evalcond[1]=((((-1.0)*x2328*x2334))+((r11*x2335))+(((-1.0)*r12*x2333)));
evalcond[2]=(((x2327*x2331))+(((-1.0)*r02*x2334))+(((-1.0)*x2329*x2333)));
evalcond[3]=((-1.0)+(((-1.0)*x2331*x2334))+(((-1.0)*r02*x2333))+((x2326*x2329)));
evalcond[4]=((((-1.0)*r22*x2334))+((sj1*sj2))+(((-1.0)*cj1*x2330))+((x2327*x2332))+(((-1.0)*r21*sj5*x2333)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2327*x2328))+(((-1.0)*r11*sj5*x2333))+(((-1.0)*sj1*x2330))+(((-1.0)*r12*x2334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2336=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2336;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2337=((1.0)*cj5);
IkReal x2338=((((-1.0)*r21*x2337))+(((-1.0)*r20*sj5)));
j4eval[0]=x2338;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2337))+((r11*sj5))))));
j4eval[2]=IKsign(x2338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2339=cj5*cj5;
IkReal x2340=r01*r01;
IkReal x2341=(cj5*r00);
IkReal x2342=(r01*sj5);
IkReal x2343=(x2340+(((-1.0)*x2339*x2340))+(((-2.0)*x2341*x2342))+(r02*r02)+((x2339*(r00*r00))));
j4eval[0]=x2343;
j4eval[1]=((IKabs(r02))+(IKabs((x2341+(((-1.0)*x2342))))));
j4eval[2]=IKsign(x2343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2344=cj5*cj5;
IkReal x2345=r01*r01;
IkReal x2346=(r01*sj5);
IkReal x2347=(cj5*r00);
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(IKsign((((x2344*(r00*r00)))+(((-1.0)*x2344*x2345))+x2345+(r02*r02)+(((-2.0)*x2346*x2347)))),-1);
if(!x2348.valid){
continue;
}
CheckValue<IkReal> x2349 = IKatan2WithCheck(IkReal((x2347+(((-1.0)*x2346)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2348.value)))+(x2349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2350=IKsin(j4);
IkReal x2351=IKcos(j4);
IkReal x2352=(cj5*r10);
IkReal x2353=(r01*sj5);
IkReal x2354=(cj5*r00);
IkReal x2355=(cj5*r20);
IkReal x2356=((1.0)*x2351);
IkReal x2357=((1.0)*x2350);
IkReal x2358=(sj5*x2350);
evalcond[0]=((((-1.0)*x2355*x2357))+(((-1.0)*r22*x2356))+((r21*x2358)));
evalcond[1]=(((r11*x2358))+(((-1.0)*x2352*x2357))+(((-1.0)*r12*x2356)));
evalcond[2]=(((x2351*x2354))+(((-1.0)*x2353*x2356))+(((-1.0)*r02*x2357)));
evalcond[3]=((1.0)+(((-1.0)*x2354*x2357))+((x2350*x2353))+(((-1.0)*r02*x2356)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2356))+((cj1*sj2))+((x2351*x2352))+(((-1.0)*r12*x2357)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2351*x2355))+(((-1.0)*r22*x2357))+(((-1.0)*r21*sj5*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2359=((1.0)*cj5);
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
CheckValue<IkReal> x2361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2359))+(((-1.0)*r20*sj5)))),-1);
if(!x2361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2360.value)+(((1.5707963267949)*(x2361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2362=IKsin(j4);
IkReal x2363=IKcos(j4);
IkReal x2364=(cj5*r10);
IkReal x2365=(r01*sj5);
IkReal x2366=(cj5*r00);
IkReal x2367=(cj5*r20);
IkReal x2368=((1.0)*x2363);
IkReal x2369=((1.0)*x2362);
IkReal x2370=(sj5*x2362);
evalcond[0]=((((-1.0)*r22*x2368))+(((-1.0)*x2367*x2369))+((r21*x2370)));
evalcond[1]=((((-1.0)*x2364*x2369))+(((-1.0)*r12*x2368))+((r11*x2370)));
evalcond[2]=((((-1.0)*x2365*x2368))+((x2363*x2366))+(((-1.0)*r02*x2369)));
evalcond[3]=((1.0)+((x2362*x2365))+(((-1.0)*x2366*x2369))+(((-1.0)*r02*x2368)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2368))+((cj1*sj2))+((x2363*x2364))+(((-1.0)*r12*x2369)));
evalcond[5]=((((-1.0)*r21*sj5*x2368))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2369))+((x2363*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2371 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2371.valid){
continue;
}
CheckValue<IkReal> x2372=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2371.value)+(((1.5707963267949)*(x2372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2373=IKsin(j4);
IkReal x2374=IKcos(j4);
IkReal x2375=(cj5*r10);
IkReal x2376=(r01*sj5);
IkReal x2377=(cj5*r00);
IkReal x2378=(cj5*r20);
IkReal x2379=((1.0)*x2374);
IkReal x2380=((1.0)*x2373);
IkReal x2381=(sj5*x2373);
evalcond[0]=((((-1.0)*x2378*x2380))+((r21*x2381))+(((-1.0)*r22*x2379)));
evalcond[1]=((((-1.0)*x2375*x2380))+(((-1.0)*r12*x2379))+((r11*x2381)));
evalcond[2]=((((-1.0)*r02*x2380))+(((-1.0)*x2376*x2379))+((x2374*x2377)));
evalcond[3]=((1.0)+((x2373*x2376))+(((-1.0)*r02*x2379))+(((-1.0)*x2377*x2380)));
evalcond[4]=((((-1.0)*r12*x2380))+(((-1.0)*r11*sj5*x2379))+((cj2*sj1))+((cj1*sj2))+((x2374*x2375)));
evalcond[5]=((((-1.0)*r21*sj5*x2379))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2380))+((x2374*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2382=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2382);
rxp1_1=(px*r21);
rxp1_2=(r11*x2382);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2383=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2383);
rxp1_1=(px*r21);
rxp1_2=(r11*x2383);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2384=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2384);
rxp1_1=(px*r21);
rxp1_2=(r11*x2384);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2387=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2387.valid){
continue;
}
IkReal x2385=x2387.value;
IkReal x2386=(sj0*x2385);
cj4array[0]=(((cj2*sj1*x2386))+((cj1*sj2*x2386)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2388=IKsin(j4);
IkReal x2389=IKcos(j4);
IkReal x2390=(cj5*r20);
IkReal x2391=(r21*sj5);
IkReal x2392=((1.0)*x2388);
IkReal x2393=((1.0)*x2389);
evalcond[0]=((-1.0)*r02*x2388);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2393)));
evalcond[2]=((((-1.0)*x2390*x2392))+((x2388*x2391)));
evalcond[3]=((((-1.0)*cj5*r10*x2392))+((r11*sj5*x2388)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2391*x2393))+((x2389*x2390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2395=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2395.valid){
continue;
}
IkReal x2394=x2395.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2394))+((cj1*cj2*x2394)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2396=IKsin(j4);
IkReal x2397=IKcos(j4);
IkReal x2398=(r11*sj5);
IkReal x2399=((1.0)*sj0);
IkReal x2400=((1.0)*x2397);
IkReal x2401=((1.0)*cj5*x2396);
evalcond[0]=((-1.0)*r02*x2396);
evalcond[1]=((((-1.0)*r02*x2400))+(((-1.0)*x2399)));
evalcond[2]=((((-1.0)*r20*x2401))+((r21*sj5*x2396)));
evalcond[3]=(((x2396*x2398))+(((-1.0)*r10*x2401)));
evalcond[4]=((((-1.0)*cj1*sj2*x2399))+(((-1.0)*cj2*sj1*x2399))+((cj5*r10*x2397))+(((-1.0)*x2398*x2400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(r02,-1);
if(!x2402.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2402.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2403=IKsin(j4);
IkReal x2404=IKcos(j4);
IkReal x2405=((1.0)*sj0);
IkReal x2406=(cj5*x2404);
IkReal x2407=(sj5*x2403);
IkReal x2408=((1.0)*sj5*x2404);
IkReal x2409=((1.0)*cj5*x2403);
evalcond[0]=((-1.0)*r02*x2403);
evalcond[1]=(((r21*x2407))+(((-1.0)*r20*x2409)));
evalcond[2]=(((r11*x2407))+(((-1.0)*r10*x2409)));
evalcond[3]=(((r20*x2406))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2408)));
evalcond[4]=(((r10*x2406))+(((-1.0)*cj2*sj1*x2405))+(((-1.0)*cj1*sj2*x2405))+(((-1.0)*r11*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2410=((1.0)*sj0);
IkReal x2411=((1.0)*cj0);
CheckValue<IkReal> x2412 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2410))+(((-1.0)*r02*x2411)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2411))+(((-1.0)*r11*sj5*x2410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2412.value)+(((1.5707963267949)*(x2413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2414=IKsin(j4);
IkReal x2415=IKcos(j4);
IkReal x2416=(cj5*r10);
IkReal x2417=(r01*sj5);
IkReal x2418=((1.0)*cj2);
IkReal x2419=(cj5*r00);
IkReal x2420=((1.0)*sj0);
IkReal x2421=(cj5*r20);
IkReal x2422=(cj1*sj2);
IkReal x2423=((1.0)*x2415);
IkReal x2424=((1.0)*x2414);
IkReal x2425=(sj5*x2414);
evalcond[0]=(((r21*x2425))+(((-1.0)*x2421*x2424))+(((-1.0)*r22*x2423)));
evalcond[1]=(cj0+(((-1.0)*r12*x2423))+((r11*x2425))+(((-1.0)*x2416*x2424)));
evalcond[2]=((((-1.0)*r02*x2423))+((x2414*x2417))+(((-1.0)*x2420))+(((-1.0)*x2419*x2424)));
evalcond[3]=(((x2415*x2421))+((sj1*sj2))+(((-1.0)*r22*x2424))+(((-1.0)*cj1*x2418))+(((-1.0)*r21*sj5*x2423)));
evalcond[4]=((((-1.0)*r02*x2424))+(((-1.0)*cj0*sj1*x2418))+(((-1.0)*cj0*x2422))+((x2415*x2419))+(((-1.0)*x2417*x2423)));
evalcond[5]=((((-1.0)*r11*sj5*x2423))+((x2415*x2416))+(((-1.0)*x2420*x2422))+(((-1.0)*r12*x2424))+(((-1.0)*sj0*sj1*x2418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2426=((1.0)*cj5);
CheckValue<IkReal> x2427 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2426))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2427.valid){
continue;
}
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2426)))),-1);
if(!x2428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2427.value)+(((1.5707963267949)*(x2428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2429=IKsin(j4);
IkReal x2430=IKcos(j4);
IkReal x2431=(cj5*r10);
IkReal x2432=(r01*sj5);
IkReal x2433=((1.0)*cj2);
IkReal x2434=(cj5*r00);
IkReal x2435=((1.0)*sj0);
IkReal x2436=(cj5*r20);
IkReal x2437=(cj1*sj2);
IkReal x2438=((1.0)*x2430);
IkReal x2439=((1.0)*x2429);
IkReal x2440=(sj5*x2429);
evalcond[0]=((((-1.0)*r22*x2438))+(((-1.0)*x2436*x2439))+((r21*x2440)));
evalcond[1]=(cj0+(((-1.0)*x2431*x2439))+((r11*x2440))+(((-1.0)*r12*x2438)));
evalcond[2]=(((x2429*x2432))+(((-1.0)*x2435))+(((-1.0)*x2434*x2439))+(((-1.0)*r02*x2438)));
evalcond[3]=((((-1.0)*r22*x2439))+(((-1.0)*r21*sj5*x2438))+((sj1*sj2))+(((-1.0)*cj1*x2433))+((x2430*x2436)));
evalcond[4]=((((-1.0)*cj0*x2437))+(((-1.0)*r02*x2439))+(((-1.0)*x2432*x2438))+(((-1.0)*cj0*sj1*x2433))+((x2430*x2434)));
evalcond[5]=((((-1.0)*sj0*sj1*x2433))+(((-1.0)*x2435*x2437))+(((-1.0)*r11*sj5*x2438))+((x2430*x2431))+(((-1.0)*r12*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2441=((1.0)*cj5);
CheckValue<IkReal> x2442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2441)))),-1);
if(!x2442.valid){
continue;
}
CheckValue<IkReal> x2443 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2442.value)))+(x2443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2444=IKsin(j4);
IkReal x2445=IKcos(j4);
IkReal x2446=(cj5*r10);
IkReal x2447=(r01*sj5);
IkReal x2448=((1.0)*cj2);
IkReal x2449=(cj5*r00);
IkReal x2450=((1.0)*sj0);
IkReal x2451=(cj5*r20);
IkReal x2452=(cj1*sj2);
IkReal x2453=((1.0)*x2445);
IkReal x2454=((1.0)*x2444);
IkReal x2455=(sj5*x2444);
evalcond[0]=((((-1.0)*x2451*x2454))+(((-1.0)*r22*x2453))+((r21*x2455)));
evalcond[1]=(cj0+(((-1.0)*x2446*x2454))+(((-1.0)*r12*x2453))+((r11*x2455)));
evalcond[2]=((((-1.0)*x2449*x2454))+((x2444*x2447))+(((-1.0)*x2450))+(((-1.0)*r02*x2453)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2454))+((x2445*x2451))+(((-1.0)*cj1*x2448))+(((-1.0)*r21*sj5*x2453)));
evalcond[4]=((((-1.0)*cj0*x2452))+(((-1.0)*cj0*sj1*x2448))+((x2445*x2449))+(((-1.0)*x2447*x2453))+(((-1.0)*r02*x2454)));
evalcond[5]=((((-1.0)*x2450*x2452))+(((-1.0)*r11*sj5*x2453))+(((-1.0)*r12*x2454))+((x2445*x2446))+(((-1.0)*sj0*sj1*x2448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2456=cj5*cj5;
IkReal x2457=r21*r21;
IkReal x2458=(sj1*sj2);
IkReal x2459=(r21*sj5);
IkReal x2460=(cj1*cj2);
IkReal x2461=(cj5*r20);
CheckValue<IkReal> x2462=IKPowWithIntegerCheck(IKsign((x2457+((x2456*(r20*r20)))+(r22*r22)+(((-2.0)*x2459*x2461))+(((-1.0)*x2456*x2457)))),-1);
if(!x2462.valid){
continue;
}
CheckValue<IkReal> x2463 = IKatan2WithCheck(IkReal((((r22*x2458))+(((-1.0)*r22*x2460)))),IkReal((((x2458*x2459))+((x2460*x2461))+(((-1.0)*x2459*x2460))+(((-1.0)*x2458*x2461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2462.value)))+(x2463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2464=IKsin(j4);
IkReal x2465=IKcos(j4);
IkReal x2466=(r21*sj5);
IkReal x2467=(cj5*r20);
IkReal x2468=((1.0)*x2465);
IkReal x2469=((1.0)*x2464);
evalcond[0]=((((-1.0)*r22*x2468))+((x2464*x2466))+(((-1.0)*x2467*x2469)));
evalcond[1]=((((-1.0)*r22*x2469))+(((-1.0)*x2466*x2468))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2465*x2467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2470=(cj5*sj4);
IkReal x2471=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2471))+(((-1.0)*r00*x2470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2470))+(((-1.0)*r11*x2471))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2471))+(((-1.0)*r00*x2470))))+IKsqr((((r10*x2470))+(((-1.0)*r11*x2471))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2471))+(((-1.0)*r00*x2470))), (((r10*x2470))+(((-1.0)*r11*x2471))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2472=IKcos(j0);
IkReal x2473=IKsin(j0);
IkReal x2474=(cj4*cj5);
IkReal x2475=((0.21325)*cj2);
IkReal x2476=(cj5*r01);
IkReal x2477=((1.0)*sj2);
IkReal x2478=(r11*sj5);
IkReal x2479=((1.0)*sj4);
IkReal x2480=(r00*sj5);
IkReal x2481=(cj5*r11);
IkReal x2482=((1.0)*cj2);
IkReal x2483=((1.0)*cj4);
IkReal x2484=((0.21325)*sj2);
IkReal x2485=(r01*sj5);
IkReal x2486=(r10*sj5);
IkReal x2487=(cj1*x2473);
IkReal x2488=(cj1*x2472);
IkReal x2489=(sj1*x2472);
IkReal x2490=(sj1*x2473);
evalcond[0]=(x2472+(((-1.0)*cj5*r10*x2479))+((sj4*x2478))+(((-1.0)*r12*x2483)));
evalcond[1]=((((-1.0)*x2473))+(((-1.0)*cj5*r00*x2479))+(((-1.0)*r02*x2483))+((sj4*x2485)));
evalcond[2]=(x2480+x2476+((sj2*x2489))+(((-1.0)*x2482*x2488)));
evalcond[3]=(x2486+x2481+((sj2*x2490))+(((-1.0)*x2482*x2487)));
evalcond[4]=((((-1.0)*x2477*x2488))+((r00*x2474))+(((-1.0)*x2482*x2489))+(((-1.0)*r02*x2479))+(((-1.0)*x2483*x2485)));
evalcond[5]=((((-1.0)*r12*x2479))+(((-1.0)*x2477*x2487))+((r10*x2474))+(((-1.0)*x2482*x2490))+(((-1.0)*x2478*x2483)));
evalcond[6]=((((0.24365)*x2488))+(((-0.11235)*x2473))+(((-1.0)*px))+((x2475*x2488))+(((-1.0)*x2484*x2489))+(((-0.08535)*x2480))+(((-0.08535)*x2476)));
evalcond[7]=((((0.24365)*x2487))+(((0.11235)*x2472))+(((-1.0)*py))+((x2475*x2487))+(((-1.0)*x2484*x2490))+(((-0.08535)*x2486))+(((-0.08535)*x2481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2491=((1.0)*cj5);
IkReal x2492=((1.0)*sj5);
CheckValue<IkReal> x2493 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2492))+(((-1.0)*r11*x2491)))),IkReal(((((-1.0)*r01*x2491))+(((-1.0)*r00*x2492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2493.valid){
continue;
}
CheckValue<IkReal> x2494=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2494.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2493.value)+(((1.5707963267949)*(x2494.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2495=IKcos(j0);
IkReal x2496=IKsin(j0);
IkReal x2497=(cj5*r01);
IkReal x2498=(r00*sj5);
IkReal x2499=(cj5*r11);
IkReal x2500=((1.0)*cj2);
IkReal x2501=(r10*sj5);
IkReal x2502=((0.21325)*cj1*cj2);
IkReal x2503=(cj1*x2495);
IkReal x2504=(cj1*x2496);
IkReal x2505=(sj1*sj2*x2495);
IkReal x2506=(sj1*sj2*x2496);
evalcond[0]=(x2505+x2498+x2497+(((-1.0)*x2500*x2503)));
evalcond[1]=(x2506+x2501+x2499+(((-1.0)*x2500*x2504)));
evalcond[2]=((((-0.21325)*x2505))+(((-0.11235)*x2496))+((x2495*x2502))+(((-1.0)*px))+(((0.24365)*x2503))+(((-0.08535)*x2498))+(((-0.08535)*x2497)));
evalcond[3]=((((-0.21325)*x2506))+((x2496*x2502))+(((-1.0)*py))+(((0.11235)*x2495))+(((-0.08535)*x2501))+(((0.24365)*x2504))+(((-0.08535)*x2499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2507=((1.0)*cj5);
IkReal x2508=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2507)));
j4eval[0]=x2508;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2507))))));
j4eval[2]=IKsign(x2508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2509=((1.0)*cj5);
IkReal x2510=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2509)));
j4eval[0]=x2510;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2509))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2511=((1.0)*sj0);
IkReal x2512=((1.0)*cj0);
IkReal x2513=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2513;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2512))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2511)))))+(IKabs(((((-1.0)*r12*x2511))+(((-1.0)*r02*x2512))))));
j4eval[2]=IKsign(x2513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2514=((-1.0)*r20);
IkReal x2516 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2516)==0){
continue;
}
IkReal x2515=pow(x2516,-0.5);
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2514),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2517.value));
IkReal gconst79=(r21*x2515);
IkReal gconst80=(x2514*x2515);
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2518.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2519=((-1.0)*r20);
IkReal x2520=x2515;
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2519),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
IkReal x2521=((-1.0)*(x2522.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2521;
IkReal gconst78=x2521;
IkReal gconst79=(r21*x2520);
IkReal gconst80=(x2519*x2520);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2523=((-1.0)*r20);
IkReal x2524=x2515;
CheckValue<IkReal> x2526 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2523),IKFAST_ATAN2_MAGTHRESH);
if(!x2526.valid){
continue;
}
IkReal x2525=((-1.0)*(x2526.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2525;
IkReal gconst78=x2525;
IkReal gconst79=(r21*x2524);
IkReal gconst80=(x2523*x2524);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2527=((-1.0)*r20);
IkReal x2528=x2515;
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2527),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
IkReal x2529=((-1.0)*(x2530.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2529;
IkReal gconst78=x2529;
IkReal gconst79=(r21*x2528);
IkReal gconst80=(x2527*x2528);
IkReal x2531=r22*r22;
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2531))),-1);
if(!x2534.valid){
continue;
}
IkReal x2532=x2534.value;
IkReal x2533=(x2531+((x2532*(r21*r21*r21*r21)))+(((2.0)*x2532*(r20*r20)*(r21*r21)))+((x2532*(r20*r20*r20*r20))));
j4eval[0]=x2533;
j4eval[1]=IKsign(x2533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2535=(sj1*sj2);
IkReal x2536=(gconst80*r20);
IkReal x2537=(gconst79*r21);
IkReal x2538=(cj1*cj2);
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2536*x2536)+(x2537*x2537)+(((-2.0)*x2536*x2537)))),-1);
if(!x2539.valid){
continue;
}
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2538))+((r22*x2535)))),IkReal((((x2536*x2538))+(((-1.0)*x2535*x2536))+(((-1.0)*x2537*x2538))+((x2535*x2537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2539.value)))+(x2540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2541=IKsin(j4);
IkReal x2542=IKcos(j4);
IkReal x2543=(gconst79*r01);
IkReal x2544=(gconst79*r21);
IkReal x2545=((1.0)*cj2);
IkReal x2546=(gconst79*r11);
IkReal x2547=((1.0)*sj0);
IkReal x2548=(cj1*sj2);
IkReal x2549=((1.0)*x2542);
IkReal x2550=(gconst80*x2542);
IkReal x2551=((1.0)*x2541);
IkReal x2552=(gconst80*x2551);
evalcond[0]=((((-1.0)*r20*x2552))+(((-1.0)*r22*x2549))+((x2541*x2544)));
evalcond[1]=((((-1.0)*r12*x2549))+cj0+(((-1.0)*r10*x2552))+((x2541*x2546)));
evalcond[2]=((((-1.0)*r00*x2552))+(((-1.0)*x2547))+(((-1.0)*r02*x2549))+((x2541*x2543)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2544*x2549))+(((-1.0)*cj1*x2545))+((r20*x2550))+(((-1.0)*r22*x2551)));
evalcond[4]=((((-1.0)*x2543*x2549))+((r00*x2550))+(((-1.0)*r02*x2551))+(((-1.0)*cj0*x2548))+(((-1.0)*cj0*sj1*x2545)));
evalcond[5]=((((-1.0)*r12*x2551))+(((-1.0)*sj0*sj1*x2545))+(((-1.0)*x2546*x2549))+(((-1.0)*x2547*x2548))+((r10*x2550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2553=((1.0)*gconst80);
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2553))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2553))+(((-1.0)*gconst79*r10)))),-1);
if(!x2555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2554.value)+(((1.5707963267949)*(x2555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2556=IKsin(j4);
IkReal x2557=IKcos(j4);
IkReal x2558=(gconst79*r01);
IkReal x2559=(gconst79*r21);
IkReal x2560=((1.0)*cj2);
IkReal x2561=(gconst79*r11);
IkReal x2562=((1.0)*sj0);
IkReal x2563=(cj1*sj2);
IkReal x2564=((1.0)*x2557);
IkReal x2565=(gconst80*x2557);
IkReal x2566=((1.0)*x2556);
IkReal x2567=(gconst80*x2566);
evalcond[0]=((((-1.0)*r22*x2564))+(((-1.0)*r20*x2567))+((x2556*x2559)));
evalcond[1]=(cj0+((x2556*x2561))+(((-1.0)*r12*x2564))+(((-1.0)*r10*x2567)));
evalcond[2]=((((-1.0)*r00*x2567))+(((-1.0)*r02*x2564))+((x2556*x2558))+(((-1.0)*x2562)));
evalcond[3]=((((-1.0)*cj1*x2560))+(((-1.0)*r22*x2566))+((sj1*sj2))+((r20*x2565))+(((-1.0)*x2559*x2564)));
evalcond[4]=((((-1.0)*cj0*x2563))+((r00*x2565))+(((-1.0)*r02*x2566))+(((-1.0)*x2558*x2564))+(((-1.0)*cj0*sj1*x2560)));
evalcond[5]=((((-1.0)*x2562*x2563))+((r10*x2565))+(((-1.0)*x2561*x2564))+(((-1.0)*sj0*sj1*x2560))+(((-1.0)*r12*x2566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2568=((1.0)*gconst80);
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
CheckValue<IkReal> x2570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2568))+(((-1.0)*gconst79*r00)))),-1);
if(!x2570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2569.value)+(((1.5707963267949)*(x2570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2571=IKsin(j4);
IkReal x2572=IKcos(j4);
IkReal x2573=(gconst79*r01);
IkReal x2574=(gconst79*r21);
IkReal x2575=((1.0)*cj2);
IkReal x2576=(gconst79*r11);
IkReal x2577=((1.0)*sj0);
IkReal x2578=(cj1*sj2);
IkReal x2579=((1.0)*x2572);
IkReal x2580=(gconst80*x2572);
IkReal x2581=((1.0)*x2571);
IkReal x2582=(gconst80*x2581);
evalcond[0]=(((x2571*x2574))+(((-1.0)*r20*x2582))+(((-1.0)*r22*x2579)));
evalcond[1]=(((x2571*x2576))+(((-1.0)*r12*x2579))+cj0+(((-1.0)*r10*x2582)));
evalcond[2]=(((x2571*x2573))+(((-1.0)*r00*x2582))+(((-1.0)*x2577))+(((-1.0)*r02*x2579)));
evalcond[3]=(((r20*x2580))+((sj1*sj2))+(((-1.0)*cj1*x2575))+(((-1.0)*x2574*x2579))+(((-1.0)*r22*x2581)));
evalcond[4]=(((r00*x2580))+(((-1.0)*r02*x2581))+(((-1.0)*cj0*x2578))+(((-1.0)*x2573*x2579))+(((-1.0)*cj0*sj1*x2575)));
evalcond[5]=(((r10*x2580))+(((-1.0)*sj0*sj1*x2575))+(((-1.0)*r12*x2581))+(((-1.0)*x2577*x2578))+(((-1.0)*x2576*x2579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2583=((-1.0)*r21);
IkReal x2585 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2585)==0){
continue;
}
IkReal x2584=pow(x2585,-0.5);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(x2583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2586.value))));
IkReal gconst82=(x2583*x2584);
IkReal gconst83=((1.0)*r20*x2584);
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2587.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2588=((-1.0)*r21);
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal(x2588),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
IkReal x2589=((1.0)*(x2591.value));
IkReal x2590=x2584;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2589)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2589)));
IkReal gconst82=(x2588*x2590);
IkReal gconst83=((1.0)*r20*x2590);
IkReal x2592=r22*r22;
IkReal x2593=((1.0)*x2592);
CheckValue<IkReal> x2597=IKPowWithIntegerCheck(((-1.0)+x2592),-1);
if(!x2597.valid){
continue;
}
IkReal x2594=x2597.value;
if((((1.0)+(((-1.0)*x2593)))) < -0.00001)
continue;
IkReal x2595=IKsqrt(((1.0)+(((-1.0)*x2593))));
IkReal x2596=(cj0*x2594*x2595);
j4eval[0]=((IKabs((x2596+(((-1.0)*x2593*x2596)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2598=((-1.0)*r21);
CheckValue<IkReal> x2601 = IKatan2WithCheck(IkReal(x2598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2601.valid){
continue;
}
IkReal x2599=((1.0)*(x2601.value));
IkReal x2600=x2584;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2599)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2599)));
IkReal gconst82=(x2598*x2600);
IkReal gconst83=((1.0)*r20*x2600);
IkReal x2602=r22*r22;
IkReal x2603=((1.0)*x2602);
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(((-1.0)+x2602),-1);
if(!x2607.valid){
continue;
}
IkReal x2604=x2607.value;
if((((1.0)+(((-1.0)*x2603)))) < -0.00001)
continue;
IkReal x2605=IKsqrt(((1.0)+(((-1.0)*x2603))));
IkReal x2606=(sj0*x2604*x2605);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2603*x2606))+x2606))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2608=((-1.0)*r21);
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal(x2608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
IkReal x2609=((1.0)*(x2611.value));
IkReal x2610=x2584;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2609)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2609)));
IkReal gconst82=(x2608*x2610);
IkReal gconst83=((1.0)*r20*x2610);
IkReal x2612=r22*r22;
IkReal x2613=(r12*sj0);
IkReal x2614=(cj0*r02);
CheckValue<IkReal> x2618=IKPowWithIntegerCheck(((-1.0)+x2612),-1);
if(!x2618.valid){
continue;
}
IkReal x2615=x2618.value;
if((((1.0)+(((-1.0)*x2612)))) < -0.00001)
continue;
IkReal x2616=IKsqrt(((1.0)+(((-1.0)*x2612))));
IkReal x2617=(r22*x2615*x2616);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2613))+(((-1.0)*x2614)))))+(IKabs((((x2613*x2617))+((x2614*x2617))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2619=((1.0)*sj0);
IkReal x2620=((1.0)*cj0);
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2621.valid){
continue;
}
CheckValue<IkReal> x2622 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2619))+(((-1.0)*r02*x2620)))),IkReal(((((-1.0)*gconst82*r01*x2620))+(((-1.0)*gconst82*r11*x2619))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2621.value)))+(x2622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2623=IKsin(j4);
IkReal x2624=IKcos(j4);
IkReal x2625=(gconst82*r11);
IkReal x2626=((1.0)*cj2);
IkReal x2627=((1.0)*sj0);
IkReal x2628=(cj1*sj2);
IkReal x2629=((1.0)*x2624);
IkReal x2630=(gconst83*x2624);
IkReal x2631=(gconst82*x2623);
IkReal x2632=((1.0)*x2623);
evalcond[0]=(((r21*x2631))+(((-1.0)*r22*x2629))+(((-1.0)*gconst83*r20*x2632)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2632))+(((-1.0)*r12*x2629))+((x2623*x2625)));
evalcond[2]=((((-1.0)*gconst83*r00*x2632))+((r01*x2631))+(((-1.0)*r02*x2629))+(((-1.0)*x2627)));
evalcond[3]=((((-1.0)*gconst82*r21*x2629))+((sj1*sj2))+((r20*x2630))+(((-1.0)*cj1*x2626))+(((-1.0)*r22*x2632)));
evalcond[4]=((((-1.0)*gconst82*r01*x2629))+(((-1.0)*r02*x2632))+(((-1.0)*cj0*x2628))+((r00*x2630))+(((-1.0)*cj0*sj1*x2626)));
evalcond[5]=((((-1.0)*x2625*x2629))+((r10*x2630))+(((-1.0)*x2627*x2628))+(((-1.0)*sj0*sj1*x2626))+(((-1.0)*r12*x2632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2633=((1.0)*gconst83);
CheckValue<IkReal> x2634=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x2633)))),-1);
if(!x2634.valid){
continue;
}
CheckValue<IkReal> x2635 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2634.value)))+(x2635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2636=IKsin(j4);
IkReal x2637=IKcos(j4);
IkReal x2638=(gconst82*r11);
IkReal x2639=((1.0)*cj2);
IkReal x2640=((1.0)*sj0);
IkReal x2641=(cj1*sj2);
IkReal x2642=((1.0)*x2637);
IkReal x2643=(gconst83*x2637);
IkReal x2644=(gconst82*x2636);
IkReal x2645=((1.0)*x2636);
evalcond[0]=((((-1.0)*gconst83*r20*x2645))+(((-1.0)*r22*x2642))+((r21*x2644)));
evalcond[1]=((((-1.0)*r12*x2642))+cj0+(((-1.0)*gconst83*r10*x2645))+((x2636*x2638)));
evalcond[2]=((((-1.0)*r02*x2642))+((r01*x2644))+(((-1.0)*x2640))+(((-1.0)*gconst83*r00*x2645)));
evalcond[3]=((((-1.0)*r22*x2645))+(((-1.0)*cj1*x2639))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2642))+((r20*x2643)));
evalcond[4]=((((-1.0)*cj0*sj1*x2639))+(((-1.0)*r02*x2645))+(((-1.0)*gconst82*r01*x2642))+((r00*x2643))+(((-1.0)*cj0*x2641)));
evalcond[5]=((((-1.0)*sj0*sj1*x2639))+(((-1.0)*r12*x2645))+((r10*x2643))+(((-1.0)*x2640*x2641))+(((-1.0)*x2638*x2642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2646=((1.0)*gconst83);
CheckValue<IkReal> x2647 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2647.valid){
continue;
}
CheckValue<IkReal> x2648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2646))+(((-1.0)*gconst82*r00)))),-1);
if(!x2648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2647.value)+(((1.5707963267949)*(x2648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2649=IKsin(j4);
IkReal x2650=IKcos(j4);
IkReal x2651=(gconst82*r11);
IkReal x2652=((1.0)*cj2);
IkReal x2653=((1.0)*sj0);
IkReal x2654=(cj1*sj2);
IkReal x2655=((1.0)*x2650);
IkReal x2656=(gconst83*x2650);
IkReal x2657=(gconst82*x2649);
IkReal x2658=((1.0)*x2649);
evalcond[0]=((((-1.0)*r22*x2655))+(((-1.0)*gconst83*r20*x2658))+((r21*x2657)));
evalcond[1]=(((x2649*x2651))+cj0+(((-1.0)*r12*x2655))+(((-1.0)*gconst83*r10*x2658)));
evalcond[2]=((((-1.0)*r02*x2655))+((r01*x2657))+(((-1.0)*x2653))+(((-1.0)*gconst83*r00*x2658)));
evalcond[3]=((((-1.0)*r22*x2658))+(((-1.0)*cj1*x2652))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2655))+((r20*x2656)));
evalcond[4]=((((-1.0)*r02*x2658))+(((-1.0)*cj0*sj1*x2652))+(((-1.0)*gconst82*r01*x2655))+((r00*x2656))+(((-1.0)*cj0*x2654)));
evalcond[5]=((((-1.0)*x2651*x2655))+(((-1.0)*r12*x2658))+((r10*x2656))+(((-1.0)*sj0*sj1*x2652))+(((-1.0)*x2653*x2654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2659=((-1.0)*r10);
IkReal x2661 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2661)==0){
continue;
}
IkReal x2660=pow(x2661,-0.5);
CheckValue<IkReal> x2662 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2659),IKFAST_ATAN2_MAGTHRESH);
if(!x2662.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2662.value));
IkReal gconst85=(r11*x2660);
IkReal gconst86=(x2659*x2660);
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2663.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2664=((-1.0)*r10);
IkReal x2665=x2660;
CheckValue<IkReal> x2667 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2664),IKFAST_ATAN2_MAGTHRESH);
if(!x2667.valid){
continue;
}
IkReal x2666=((-1.0)*(x2667.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2666;
IkReal gconst84=x2666;
IkReal gconst85=(r11*x2665);
IkReal gconst86=(x2664*x2665);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2668=((1.0)*sj0);
IkReal x2669=((1.0)*gconst85);
CheckValue<IkReal> x2670 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2668))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2669))+(((-1.0)*gconst85*r11*x2668))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2670.valid){
continue;
}
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2669)))),-1);
if(!x2671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2670.value)+(((1.5707963267949)*(x2671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2672=IKsin(j4);
IkReal x2673=IKcos(j4);
IkReal x2674=(gconst85*r21);
IkReal x2675=(gconst86*r00);
IkReal x2676=(gconst86*r10);
IkReal x2677=((1.0)*cj2);
IkReal x2678=(gconst85*r11);
IkReal x2679=(gconst85*r01);
IkReal x2680=((1.0)*sj0);
IkReal x2681=(gconst86*r20);
IkReal x2682=(cj1*sj2);
IkReal x2683=((1.0)*x2673);
IkReal x2684=((1.0)*x2672);
evalcond[0]=(((x2672*x2674))+(((-1.0)*r22*x2683))+(((-1.0)*x2681*x2684)));
evalcond[1]=((((-1.0)*r12*x2683))+cj0+((x2672*x2678))+(((-1.0)*x2676*x2684)));
evalcond[2]=((((-1.0)*r02*x2683))+((x2672*x2679))+(((-1.0)*x2680))+(((-1.0)*x2675*x2684)));
evalcond[3]=(((x2673*x2681))+(((-1.0)*cj1*x2677))+((sj1*sj2))+(((-1.0)*r22*x2684))+(((-1.0)*x2674*x2683)));
evalcond[4]=((((-1.0)*cj0*x2682))+(((-1.0)*r02*x2684))+((x2673*x2675))+(((-1.0)*cj0*sj1*x2677))+(((-1.0)*x2679*x2683)));
evalcond[5]=((((-1.0)*r12*x2684))+((x2673*x2676))+(((-1.0)*x2680*x2682))+(((-1.0)*sj0*sj1*x2677))+(((-1.0)*x2678*x2683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2685=((1.0)*gconst86);
CheckValue<IkReal> x2686 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2686.valid){
continue;
}
CheckValue<IkReal> x2687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2685))+(((-1.0)*gconst85*r00)))),-1);
if(!x2687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2686.value)+(((1.5707963267949)*(x2687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2688=IKsin(j4);
IkReal x2689=IKcos(j4);
IkReal x2690=(gconst85*r21);
IkReal x2691=(gconst86*r00);
IkReal x2692=(gconst86*r10);
IkReal x2693=((1.0)*cj2);
IkReal x2694=(gconst85*r11);
IkReal x2695=(gconst85*r01);
IkReal x2696=((1.0)*sj0);
IkReal x2697=(gconst86*r20);
IkReal x2698=(cj1*sj2);
IkReal x2699=((1.0)*x2689);
IkReal x2700=((1.0)*x2688);
evalcond[0]=((((-1.0)*x2697*x2700))+(((-1.0)*r22*x2699))+((x2688*x2690)));
evalcond[1]=(cj0+(((-1.0)*x2692*x2700))+(((-1.0)*r12*x2699))+((x2688*x2694)));
evalcond[2]=((((-1.0)*r02*x2699))+(((-1.0)*x2696))+(((-1.0)*x2691*x2700))+((x2688*x2695)));
evalcond[3]=((((-1.0)*r22*x2700))+(((-1.0)*cj1*x2693))+((sj1*sj2))+((x2689*x2697))+(((-1.0)*x2690*x2699)));
evalcond[4]=((((-1.0)*cj0*x2698))+(((-1.0)*r02*x2700))+((x2689*x2691))+(((-1.0)*cj0*sj1*x2693))+(((-1.0)*x2695*x2699)));
evalcond[5]=((((-1.0)*x2696*x2698))+(((-1.0)*r12*x2700))+((x2689*x2692))+(((-1.0)*sj0*sj1*x2693))+(((-1.0)*x2694*x2699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2701=((-1.0)*r11);
IkReal x2703 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2703)==0){
continue;
}
IkReal x2702=pow(x2703,-0.5);
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal(x2701),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2704.value))));
IkReal gconst88=(x2701*x2702);
IkReal gconst89=((1.0)*r10*x2702);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2705.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2706=((-1.0)*r11);
CheckValue<IkReal> x2709 = IKatan2WithCheck(IkReal(x2706),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2709.valid){
continue;
}
IkReal x2707=((1.0)*(x2709.value));
IkReal x2708=x2702;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2707)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2707)));
IkReal gconst88=(x2706*x2708);
IkReal gconst89=((1.0)*r10*x2708);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2710=((-1.0)*r11);
CheckValue<IkReal> x2713 = IKatan2WithCheck(IkReal(x2710),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
IkReal x2711=((1.0)*(x2713.value));
IkReal x2712=x2702;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2711)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2711)));
IkReal gconst88=(x2710*x2712);
IkReal gconst89=((1.0)*r10*x2712);
IkReal x2714=r12*r12;
IkReal x2715=((1.0)*sj0);
IkReal x2716=(cj0*r02);
IkReal x2717=x2702;
j4eval[0]=((IKabs((((sj0*x2714*x2717))+(((-1.0)*x2715*x2717))+((r12*x2716*x2717)))))+(IKabs(((((-1.0)*x2716))+(((-1.0)*r12*x2715))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2718=((-1.0)*r11);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(x2718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
IkReal x2719=((1.0)*(x2721.value));
IkReal x2720=x2702;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2719)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2719)));
IkReal gconst88=(x2718*x2720);
IkReal gconst89=((1.0)*r10*x2720);
IkReal x2722=r12*r12;
IkReal x2723=(cj1*cj2*r22);
IkReal x2724=(r22*sj1*sj2);
CheckValue<IkReal> x2728=IKPowWithIntegerCheck(((-1.0)+x2722),-1);
if(!x2728.valid){
continue;
}
IkReal x2725=x2728.value;
if((((1.0)+(((-1.0)*x2722)))) < -0.00001)
continue;
IkReal x2726=IKsqrt(((1.0)+(((-1.0)*x2722))));
IkReal x2727=(r12*x2725*x2726);
j4eval[0]=((IKabs(((((-1.0)*x2724*x2727))+((x2723*x2727)))))+(IKabs((x2724+(((-1.0)*x2723))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2729=(cj1*cj2);
IkReal x2730=(gconst89*r20);
IkReal x2731=(gconst88*r21);
IkReal x2732=(sj1*sj2);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal((((r22*x2732))+(((-1.0)*r22*x2729)))),IkReal(((((-1.0)*x2730*x2732))+(((-1.0)*x2729*x2731))+((x2731*x2732))+((x2729*x2730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2730*x2731))+(r22*r22)+(x2731*x2731)+(x2730*x2730))),-1);
if(!x2734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2733.value)+(((1.5707963267949)*(x2734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2735=IKsin(j4);
IkReal x2736=IKcos(j4);
IkReal x2737=((1.0)*sj0);
IkReal x2738=((1.0)*cj2);
IkReal x2739=(gconst89*r20);
IkReal x2740=(gconst89*r10);
IkReal x2741=(gconst89*r00);
IkReal x2742=(cj1*sj2);
IkReal x2743=((1.0)*x2736);
IkReal x2744=((1.0)*x2735);
IkReal x2745=(gconst88*x2735);
evalcond[0]=(((r21*x2745))+(((-1.0)*x2739*x2744))+(((-1.0)*r22*x2743)));
evalcond[1]=(((r11*x2745))+cj0+(((-1.0)*x2740*x2744))+(((-1.0)*r12*x2743)));
evalcond[2]=((((-1.0)*x2741*x2744))+((r01*x2745))+(((-1.0)*x2737))+(((-1.0)*r02*x2743)));
evalcond[3]=((((-1.0)*gconst88*r21*x2743))+((sj1*sj2))+((x2736*x2739))+(((-1.0)*cj1*x2738))+(((-1.0)*r22*x2744)));
evalcond[4]=((((-1.0)*cj0*sj1*x2738))+(((-1.0)*cj0*x2742))+((x2736*x2741))+(((-1.0)*r02*x2744))+(((-1.0)*gconst88*r01*x2743)));
evalcond[5]=((((-1.0)*cj2*sj1*x2737))+(((-1.0)*gconst88*r11*x2743))+(((-1.0)*r12*x2744))+(((-1.0)*x2737*x2742))+((x2736*x2740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2746=((1.0)*sj0);
IkReal x2747=((1.0)*cj0);
CheckValue<IkReal> x2748=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2748.valid){
continue;
}
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2746))+(((-1.0)*r02*x2747)))),IkReal(((((-1.0)*gconst88*r11*x2746))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2747))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2748.value)))+(x2749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2750=IKsin(j4);
IkReal x2751=IKcos(j4);
IkReal x2752=((1.0)*sj0);
IkReal x2753=((1.0)*cj2);
IkReal x2754=(gconst89*r20);
IkReal x2755=(gconst89*r10);
IkReal x2756=(gconst89*r00);
IkReal x2757=(cj1*sj2);
IkReal x2758=((1.0)*x2751);
IkReal x2759=((1.0)*x2750);
IkReal x2760=(gconst88*x2750);
evalcond[0]=((((-1.0)*r22*x2758))+(((-1.0)*x2754*x2759))+((r21*x2760)));
evalcond[1]=(cj0+(((-1.0)*r12*x2758))+(((-1.0)*x2755*x2759))+((r11*x2760)));
evalcond[2]=(((r01*x2760))+(((-1.0)*x2756*x2759))+(((-1.0)*x2752))+(((-1.0)*r02*x2758)));
evalcond[3]=((((-1.0)*r22*x2759))+(((-1.0)*gconst88*r21*x2758))+((sj1*sj2))+(((-1.0)*cj1*x2753))+((x2751*x2754)));
evalcond[4]=((((-1.0)*gconst88*r01*x2758))+(((-1.0)*cj0*x2757))+(((-1.0)*cj0*sj1*x2753))+((x2751*x2756))+(((-1.0)*r02*x2759)));
evalcond[5]=((((-1.0)*gconst88*r11*x2758))+(((-1.0)*x2752*x2757))+(((-1.0)*cj2*sj1*x2752))+(((-1.0)*r12*x2759))+((x2751*x2755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2761=((1.0)*gconst89);
CheckValue<IkReal> x2762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2761))+(((-1.0)*gconst88*r00)))),-1);
if(!x2762.valid){
continue;
}
CheckValue<IkReal> x2763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2761))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2762.value)))+(x2763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2764=IKsin(j4);
IkReal x2765=IKcos(j4);
IkReal x2766=((1.0)*sj0);
IkReal x2767=((1.0)*cj2);
IkReal x2768=(gconst89*r20);
IkReal x2769=(gconst89*r10);
IkReal x2770=(gconst89*r00);
IkReal x2771=(cj1*sj2);
IkReal x2772=((1.0)*x2765);
IkReal x2773=((1.0)*x2764);
IkReal x2774=(gconst88*x2764);
evalcond[0]=((((-1.0)*x2768*x2773))+((r21*x2774))+(((-1.0)*r22*x2772)));
evalcond[1]=(((r11*x2774))+cj0+(((-1.0)*x2769*x2773))+(((-1.0)*r12*x2772)));
evalcond[2]=(((r01*x2774))+(((-1.0)*r02*x2772))+(((-1.0)*x2770*x2773))+(((-1.0)*x2766)));
evalcond[3]=(((sj1*sj2))+((x2765*x2768))+(((-1.0)*gconst88*r21*x2772))+(((-1.0)*cj1*x2767))+(((-1.0)*r22*x2773)));
evalcond[4]=((((-1.0)*cj0*x2771))+(((-1.0)*r02*x2773))+(((-1.0)*gconst88*r01*x2772))+(((-1.0)*cj0*sj1*x2767))+((x2765*x2770)));
evalcond[5]=((((-1.0)*x2766*x2771))+(((-1.0)*gconst88*r11*x2772))+(((-1.0)*r12*x2773))+(((-1.0)*cj2*sj1*x2766))+((x2765*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2775=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2775;
j4eval[1]=IKsign(x2775);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2776=((1.0)*cj5);
IkReal x2777=((((-1.0)*r01*x2776))+(((-1.0)*r00*sj5)));
j4eval[0]=x2777;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2776)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2778=cj5*cj5;
IkReal x2779=r11*r11;
IkReal x2780=(r11*sj5);
IkReal x2781=(cj5*r10);
IkReal x2782=(x2779+(r12*r12)+(((-1.0)*x2778*x2779))+(((-2.0)*x2780*x2781))+((x2778*(r10*r10))));
j4eval[0]=x2782;
j4eval[1]=IKsign(x2782);
j4eval[2]=((IKabs(r12))+(IKabs((x2781+(((-1.0)*x2780))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2783=cj5*cj5;
IkReal x2784=r11*r11;
IkReal x2785=(cj5*r10);
IkReal x2786=(r11*sj5);
CheckValue<IkReal> x2787=IKPowWithIntegerCheck(IKsign((x2784+(r12*r12)+(((-1.0)*x2783*x2784))+((x2783*(r10*r10)))+(((-2.0)*x2785*x2786)))),-1);
if(!x2787.valid){
continue;
}
CheckValue<IkReal> x2788 = IKatan2WithCheck(IkReal((x2785+(((-1.0)*x2786)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2787.value)))+(x2788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2789=IKsin(j4);
IkReal x2790=IKcos(j4);
IkReal x2791=(cj5*r10);
IkReal x2792=(r01*sj5);
IkReal x2793=((1.0)*cj2);
IkReal x2794=(cj5*r00);
IkReal x2795=(cj5*r20);
IkReal x2796=((1.0)*x2790);
IkReal x2797=((1.0)*x2789);
IkReal x2798=(sj5*x2789);
evalcond[0]=((((-1.0)*x2795*x2797))+((r21*x2798))+(((-1.0)*r22*x2796)));
evalcond[1]=(((x2789*x2792))+(((-1.0)*x2794*x2797))+(((-1.0)*r02*x2796)));
evalcond[2]=((((-1.0)*r11*sj5*x2796))+((x2790*x2791))+(((-1.0)*r12*x2797)));
evalcond[3]=((1.0)+(((-1.0)*x2791*x2797))+((r11*x2798))+(((-1.0)*r12*x2796)));
evalcond[4]=((((-1.0)*r21*sj5*x2796))+((sj1*sj2))+((x2790*x2795))+(((-1.0)*r22*x2797))+(((-1.0)*cj1*x2793)));
evalcond[5]=((((-1.0)*sj1*x2793))+(((-1.0)*cj1*sj2))+((x2790*x2794))+(((-1.0)*x2792*x2796))+(((-1.0)*r02*x2797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2799=((1.0)*cj5);
CheckValue<IkReal> x2800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2799)))),-1);
if(!x2800.valid){
continue;
}
CheckValue<IkReal> x2801 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2799))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2800.value)))+(x2801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2802=IKsin(j4);
IkReal x2803=IKcos(j4);
IkReal x2804=(cj5*r10);
IkReal x2805=(r01*sj5);
IkReal x2806=((1.0)*cj2);
IkReal x2807=(cj5*r00);
IkReal x2808=(cj5*r20);
IkReal x2809=((1.0)*x2803);
IkReal x2810=((1.0)*x2802);
IkReal x2811=(sj5*x2802);
evalcond[0]=(((r21*x2811))+(((-1.0)*r22*x2809))+(((-1.0)*x2808*x2810)));
evalcond[1]=((((-1.0)*x2807*x2810))+((x2802*x2805))+(((-1.0)*r02*x2809)));
evalcond[2]=((((-1.0)*r12*x2810))+((x2803*x2804))+(((-1.0)*r11*sj5*x2809)));
evalcond[3]=((1.0)+(((-1.0)*x2804*x2810))+(((-1.0)*r12*x2809))+((r11*x2811)));
evalcond[4]=((((-1.0)*r21*sj5*x2809))+(((-1.0)*cj1*x2806))+((sj1*sj2))+(((-1.0)*r22*x2810))+((x2803*x2808)));
evalcond[5]=((((-1.0)*sj1*x2806))+(((-1.0)*r02*x2810))+(((-1.0)*x2805*x2809))+(((-1.0)*cj1*sj2))+((x2803*x2807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2812=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2812.valid){
continue;
}
CheckValue<IkReal> x2813 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2812.value)))+(x2813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2814=IKsin(j4);
IkReal x2815=IKcos(j4);
IkReal x2816=(cj5*r10);
IkReal x2817=(r01*sj5);
IkReal x2818=((1.0)*cj2);
IkReal x2819=(cj5*r00);
IkReal x2820=(cj5*r20);
IkReal x2821=((1.0)*x2815);
IkReal x2822=((1.0)*x2814);
IkReal x2823=(sj5*x2814);
evalcond[0]=((((-1.0)*x2820*x2822))+((r21*x2823))+(((-1.0)*r22*x2821)));
evalcond[1]=((((-1.0)*r02*x2821))+((x2814*x2817))+(((-1.0)*x2819*x2822)));
evalcond[2]=((((-1.0)*r12*x2822))+(((-1.0)*r11*sj5*x2821))+((x2815*x2816)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2821))+(((-1.0)*x2816*x2822))+((r11*x2823)));
evalcond[4]=((((-1.0)*cj1*x2818))+((x2815*x2820))+((sj1*sj2))+(((-1.0)*r22*x2822))+(((-1.0)*r21*sj5*x2821)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x2817*x2821))+(((-1.0)*r02*x2822))+((x2815*x2819))+(((-1.0)*sj1*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2824=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2824;
j4eval[1]=IKsign(x2824);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2825=((1.0)*cj5);
IkReal x2826=((((-1.0)*r21*x2825))+(((-1.0)*r20*sj5)));
j4eval[0]=x2826;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2825))))));
j4eval[2]=IKsign(x2826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2827=cj5*cj5;
IkReal x2828=r11*r11;
IkReal x2829=(cj5*r10);
IkReal x2830=(r11*sj5);
IkReal x2831=((((2.0)*x2829*x2830))+(((-1.0)*x2828))+(((-1.0)*(r12*r12)))+((x2827*x2828))+(((-1.0)*x2827*(r10*r10))));
j4eval[0]=x2831;
j4eval[1]=((IKabs(((((-1.0)*x2830))+x2829)))+(IKabs(r12)));
j4eval[2]=IKsign(x2831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2832=cj5*cj5;
IkReal x2833=r11*r11;
IkReal x2834=(cj5*r10);
IkReal x2835=(r11*sj5);
CheckValue<IkReal> x2836 = IKatan2WithCheck(IkReal(((((-1.0)*x2835))+x2834)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2836.valid){
continue;
}
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2833))+(((-1.0)*x2832*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2832*x2833))+(((2.0)*x2834*x2835)))),-1);
if(!x2837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2836.value)+(((1.5707963267949)*(x2837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2838=IKsin(j4);
IkReal x2839=IKcos(j4);
IkReal x2840=(cj5*r10);
IkReal x2841=(r01*sj5);
IkReal x2842=(cj5*r00);
IkReal x2843=(cj5*r20);
IkReal x2844=((1.0)*x2839);
IkReal x2845=((1.0)*x2838);
IkReal x2846=(sj5*x2838);
evalcond[0]=((((-1.0)*x2843*x2845))+((r21*x2846))+(((-1.0)*r22*x2844)));
evalcond[1]=((((-1.0)*x2842*x2845))+((x2838*x2841))+(((-1.0)*r02*x2844)));
evalcond[2]=((((-1.0)*r12*x2845))+((x2839*x2840))+(((-1.0)*r11*sj5*x2844)));
evalcond[3]=((-1.0)+((r11*x2846))+(((-1.0)*x2840*x2845))+(((-1.0)*r12*x2844)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2845))+(((-1.0)*x2841*x2844))+((x2839*x2842)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2845))+((x2839*x2843))+(((-1.0)*r21*sj5*x2844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2847=((1.0)*cj5);
CheckValue<IkReal> x2848 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2848.valid){
continue;
}
CheckValue<IkReal> x2849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2847))+(((-1.0)*r20*sj5)))),-1);
if(!x2849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2848.value)+(((1.5707963267949)*(x2849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2850=IKsin(j4);
IkReal x2851=IKcos(j4);
IkReal x2852=(cj5*r10);
IkReal x2853=(r01*sj5);
IkReal x2854=(cj5*r00);
IkReal x2855=(cj5*r20);
IkReal x2856=((1.0)*x2851);
IkReal x2857=((1.0)*x2850);
IkReal x2858=(sj5*x2850);
evalcond[0]=(((r21*x2858))+(((-1.0)*r22*x2856))+(((-1.0)*x2855*x2857)));
evalcond[1]=(((x2850*x2853))+(((-1.0)*r02*x2856))+(((-1.0)*x2854*x2857)));
evalcond[2]=((((-1.0)*r11*sj5*x2856))+(((-1.0)*r12*x2857))+((x2851*x2852)));
evalcond[3]=((-1.0)+((r11*x2858))+(((-1.0)*r12*x2856))+(((-1.0)*x2852*x2857)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2857))+((x2851*x2854))+(((-1.0)*x2853*x2856)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2851*x2855))+(((-1.0)*r22*x2857))+(((-1.0)*r21*sj5*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2859 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2859.valid){
continue;
}
CheckValue<IkReal> x2860=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2859.value)+(((1.5707963267949)*(x2860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2861=IKsin(j4);
IkReal x2862=IKcos(j4);
IkReal x2863=(cj5*r10);
IkReal x2864=(r01*sj5);
IkReal x2865=(cj5*r00);
IkReal x2866=(cj5*r20);
IkReal x2867=((1.0)*x2862);
IkReal x2868=((1.0)*x2861);
IkReal x2869=(sj5*x2861);
evalcond[0]=(((r21*x2869))+(((-1.0)*r22*x2867))+(((-1.0)*x2866*x2868)));
evalcond[1]=((((-1.0)*r02*x2867))+(((-1.0)*x2865*x2868))+((x2861*x2864)));
evalcond[2]=((((-1.0)*r12*x2868))+(((-1.0)*r11*sj5*x2867))+((x2862*x2863)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2867))+(((-1.0)*x2863*x2868))+((r11*x2869)));
evalcond[4]=((((-1.0)*r02*x2868))+((cj2*sj1))+(((-1.0)*x2864*x2867))+((cj1*sj2))+((x2862*x2865)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2868))+(((-1.0)*r21*sj5*x2867))+((x2862*x2866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2870=((-1.0)*r00);
IkReal x2872 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2872)==0){
continue;
}
IkReal x2871=pow(x2872,-0.5);
CheckValue<IkReal> x2873 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2870),IKFAST_ATAN2_MAGTHRESH);
if(!x2873.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2873.value));
IkReal gconst91=(r01*x2871);
IkReal gconst92=(x2870*x2871);
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2874.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2875=((-1.0)*r00);
IkReal x2876=x2871;
CheckValue<IkReal> x2878 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2875),IKFAST_ATAN2_MAGTHRESH);
if(!x2878.valid){
continue;
}
IkReal x2877=((-1.0)*(x2878.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2877;
IkReal gconst90=x2877;
IkReal gconst91=(r01*x2876);
IkReal gconst92=(x2875*x2876);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=((1.0)*sj0);
IkReal x2880=((1.0)*cj0);
CheckValue<IkReal> x2881 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2880))+(((-1.0)*r12*x2879)))),IkReal(((((-1.0)*gconst91*r11*x2879))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2881.valid){
continue;
}
CheckValue<IkReal> x2882=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2881.value)+(((1.5707963267949)*(x2882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2883=IKsin(j4);
IkReal x2884=IKcos(j4);
IkReal x2885=((1.0)*cj2);
IkReal x2886=(gconst92*r00);
IkReal x2887=(gconst92*r20);
IkReal x2888=((1.0)*sj0);
IkReal x2889=(gconst92*r10);
IkReal x2890=(cj1*sj2);
IkReal x2891=((1.0)*x2884);
IkReal x2892=(gconst91*x2883);
IkReal x2893=((1.0)*x2883);
evalcond[0]=((((-1.0)*r22*x2891))+(((-1.0)*x2887*x2893))+((r21*x2892)));
evalcond[1]=(cj0+(((-1.0)*x2889*x2893))+((r11*x2892))+(((-1.0)*r12*x2891)));
evalcond[2]=((((-1.0)*r02*x2891))+((r01*x2892))+(((-1.0)*x2888))+(((-1.0)*x2886*x2893)));
evalcond[3]=((((-1.0)*r22*x2893))+((x2884*x2887))+(((-1.0)*gconst91*r21*x2891))+((sj1*sj2))+(((-1.0)*cj1*x2885)));
evalcond[4]=(((x2884*x2886))+(((-1.0)*r02*x2893))+(((-1.0)*cj0*sj1*x2885))+(((-1.0)*cj0*x2890))+(((-1.0)*gconst91*r01*x2891)));
evalcond[5]=(((x2884*x2889))+(((-1.0)*sj0*sj1*x2885))+(((-1.0)*gconst91*r11*x2891))+(((-1.0)*x2888*x2890))+(((-1.0)*r12*x2893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2894=((1.0)*gconst92);
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2894))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
CheckValue<IkReal> x2896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2894)))),-1);
if(!x2896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2895.value)+(((1.5707963267949)*(x2896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2897=IKsin(j4);
IkReal x2898=IKcos(j4);
IkReal x2899=((1.0)*cj2);
IkReal x2900=(gconst92*r00);
IkReal x2901=(gconst92*r20);
IkReal x2902=((1.0)*sj0);
IkReal x2903=(gconst92*r10);
IkReal x2904=(cj1*sj2);
IkReal x2905=((1.0)*x2898);
IkReal x2906=(gconst91*x2897);
IkReal x2907=((1.0)*x2897);
evalcond[0]=((((-1.0)*x2901*x2907))+((r21*x2906))+(((-1.0)*r22*x2905)));
evalcond[1]=(cj0+(((-1.0)*x2903*x2907))+(((-1.0)*r12*x2905))+((r11*x2906)));
evalcond[2]=((((-1.0)*r02*x2905))+(((-1.0)*x2900*x2907))+((r01*x2906))+(((-1.0)*x2902)));
evalcond[3]=(((sj1*sj2))+((x2898*x2901))+(((-1.0)*cj1*x2899))+(((-1.0)*gconst91*r21*x2905))+(((-1.0)*r22*x2907)));
evalcond[4]=((((-1.0)*r02*x2907))+(((-1.0)*cj0*x2904))+(((-1.0)*cj0*sj1*x2899))+((x2898*x2900))+(((-1.0)*gconst91*r01*x2905)));
evalcond[5]=((((-1.0)*x2902*x2904))+(((-1.0)*sj0*sj1*x2899))+(((-1.0)*gconst91*r11*x2905))+((x2898*x2903))+(((-1.0)*r12*x2907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2908=((-1.0)*r01);
IkReal x2910 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2910)==0){
continue;
}
IkReal x2909=pow(x2910,-0.5);
CheckValue<IkReal> x2911 = IKatan2WithCheck(IkReal(x2908),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2911.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2911.value))));
IkReal gconst94=(x2908*x2909);
IkReal gconst95=((1.0)*r00*x2909);
CheckValue<IkReal> x2912 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2912.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2912.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2913=((-1.0)*r01);
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal(x2913),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
IkReal x2914=((1.0)*(x2916.value));
IkReal x2915=x2909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2914)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2914)));
IkReal gconst94=(x2913*x2915);
IkReal gconst95=((1.0)*r00*x2915);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2917=((-1.0)*r01);
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal(x2917),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
IkReal x2918=((1.0)*(x2920.value));
IkReal x2919=x2909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2918)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2918)));
IkReal gconst94=(x2917*x2919);
IkReal gconst95=((1.0)*r00*x2919);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2921=((-1.0)*r01);
CheckValue<IkReal> x2924 = IKatan2WithCheck(IkReal(x2921),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
IkReal x2922=((1.0)*(x2924.value));
IkReal x2923=x2909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2922)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2922)));
IkReal gconst94=(x2921*x2923);
IkReal gconst95=((1.0)*r00*x2923);
IkReal x2925=r02*r02;
IkReal x2926=(r12*sj0);
IkReal x2927=((1.0)*cj0);
IkReal x2928=x2909;
j4eval[0]=((IKabs(((((-1.0)*r02*x2927))+(((-1.0)*x2926)))))+(IKabs((((r02*x2926*x2928))+(((-1.0)*x2927*x2928))+((cj0*x2925*x2928))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2929=((1.0)*sj0);
IkReal x2930=((1.0)*cj0);
CheckValue<IkReal> x2931=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2929))+(((-1.0)*r02*x2930)))),IkReal(((((-1.0)*gconst94*r11*x2929))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2930))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2931.value)))+(x2932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2933=IKsin(j4);
IkReal x2934=IKcos(j4);
IkReal x2935=(gconst94*r11);
IkReal x2936=((1.0)*cj2);
IkReal x2937=(gconst94*r21);
IkReal x2938=((1.0)*sj0);
IkReal x2939=(gconst94*r01);
IkReal x2940=(cj1*sj2);
IkReal x2941=((1.0)*x2934);
IkReal x2942=(gconst95*x2934);
IkReal x2943=((1.0)*x2933);
IkReal x2944=(gconst95*x2943);
evalcond[0]=((((-1.0)*r20*x2944))+(((-1.0)*r22*x2941))+((x2933*x2937)));
evalcond[1]=((((-1.0)*r12*x2941))+cj0+(((-1.0)*r10*x2944))+((x2933*x2935)));
evalcond[2]=((((-1.0)*r02*x2941))+(((-1.0)*x2938))+(((-1.0)*r00*x2944))+((x2933*x2939)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2936))+(((-1.0)*r22*x2943))+((r20*x2942))+(((-1.0)*x2937*x2941)));
evalcond[4]=((((-1.0)*x2939*x2941))+(((-1.0)*r02*x2943))+(((-1.0)*cj0*x2940))+((r00*x2942))+(((-1.0)*cj0*sj1*x2936)));
evalcond[5]=((((-1.0)*r12*x2943))+(((-1.0)*x2935*x2941))+((r10*x2942))+(((-1.0)*sj0*sj1*x2936))+(((-1.0)*x2938*x2940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2945=((1.0)*gconst95);
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2945)))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2946.value)))+(x2947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2948=IKsin(j4);
IkReal x2949=IKcos(j4);
IkReal x2950=(gconst94*r11);
IkReal x2951=((1.0)*cj2);
IkReal x2952=(gconst94*r21);
IkReal x2953=((1.0)*sj0);
IkReal x2954=(gconst94*r01);
IkReal x2955=(cj1*sj2);
IkReal x2956=((1.0)*x2949);
IkReal x2957=(gconst95*x2949);
IkReal x2958=((1.0)*x2948);
IkReal x2959=(gconst95*x2958);
evalcond[0]=((((-1.0)*r20*x2959))+((x2948*x2952))+(((-1.0)*r22*x2956)));
evalcond[1]=((((-1.0)*r10*x2959))+cj0+((x2948*x2950))+(((-1.0)*r12*x2956)));
evalcond[2]=((((-1.0)*r02*x2956))+(((-1.0)*x2953))+((x2948*x2954))+(((-1.0)*r00*x2959)));
evalcond[3]=((((-1.0)*x2952*x2956))+((sj1*sj2))+((r20*x2957))+(((-1.0)*r22*x2958))+(((-1.0)*cj1*x2951)));
evalcond[4]=((((-1.0)*r02*x2958))+(((-1.0)*cj0*x2955))+(((-1.0)*cj0*sj1*x2951))+((r00*x2957))+(((-1.0)*x2954*x2956)));
evalcond[5]=((((-1.0)*x2953*x2955))+((r10*x2957))+(((-1.0)*sj0*sj1*x2951))+(((-1.0)*r12*x2958))+(((-1.0)*x2950*x2956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2960=((1.0)*gconst95);
CheckValue<IkReal> x2961 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2960))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2961.valid){
continue;
}
CheckValue<IkReal> x2962=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2960)))),-1);
if(!x2962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2961.value)+(((1.5707963267949)*(x2962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2963=IKsin(j4);
IkReal x2964=IKcos(j4);
IkReal x2965=(gconst94*r11);
IkReal x2966=((1.0)*cj2);
IkReal x2967=(gconst94*r21);
IkReal x2968=((1.0)*sj0);
IkReal x2969=(gconst94*r01);
IkReal x2970=(cj1*sj2);
IkReal x2971=((1.0)*x2964);
IkReal x2972=(gconst95*x2964);
IkReal x2973=((1.0)*x2963);
IkReal x2974=(gconst95*x2973);
evalcond[0]=((((-1.0)*r20*x2974))+(((-1.0)*r22*x2971))+((x2963*x2967)));
evalcond[1]=(cj0+(((-1.0)*r12*x2971))+(((-1.0)*r10*x2974))+((x2963*x2965)));
evalcond[2]=((((-1.0)*r02*x2971))+(((-1.0)*r00*x2974))+(((-1.0)*x2968))+((x2963*x2969)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2973))+(((-1.0)*x2967*x2971))+(((-1.0)*cj1*x2966))+((r20*x2972)));
evalcond[4]=((((-1.0)*cj0*x2970))+(((-1.0)*r02*x2973))+(((-1.0)*x2969*x2971))+((r00*x2972))+(((-1.0)*cj0*sj1*x2966)));
evalcond[5]=((((-1.0)*r12*x2973))+(((-1.0)*x2965*x2971))+((r10*x2972))+(((-1.0)*x2968*x2970))+(((-1.0)*sj0*sj1*x2966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2975=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2975;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2976=((1.0)*cj5);
IkReal x2977=((((-1.0)*r11*x2976))+(((-1.0)*r10*sj5)));
j4eval[0]=x2977;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2976)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2978=cj5*cj5;
IkReal x2979=r01*r01;
IkReal x2980=(r01*sj5);
IkReal x2981=(cj5*r00);
IkReal x2982=((((-1.0)*x2979))+(((2.0)*x2980*x2981))+(((-1.0)*(r02*r02)))+(((-1.0)*x2978*(r00*r00)))+((x2978*x2979)));
j4eval[0]=x2982;
j4eval[1]=IKsign(x2982);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2980))+x2981))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2983=cj5*cj5;
IkReal x2984=r01*r01;
IkReal x2985=(r01*sj5);
IkReal x2986=(cj5*r00);
CheckValue<IkReal> x2987 = IKatan2WithCheck(IkReal(((((-1.0)*x2985))+x2986)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2987.valid){
continue;
}
CheckValue<IkReal> x2988=IKPowWithIntegerCheck(IKsign((((x2983*x2984))+(((-1.0)*(r02*r02)))+(((-1.0)*x2984))+(((-1.0)*x2983*(r00*r00)))+(((2.0)*x2985*x2986)))),-1);
if(!x2988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2987.value)+(((1.5707963267949)*(x2988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2989=IKsin(j4);
IkReal x2990=IKcos(j4);
IkReal x2991=(cj5*r10);
IkReal x2992=(r01*sj5);
IkReal x2993=((1.0)*cj2);
IkReal x2994=(cj5*r00);
IkReal x2995=(cj5*r20);
IkReal x2996=((1.0)*x2990);
IkReal x2997=((1.0)*x2989);
IkReal x2998=(sj5*x2989);
evalcond[0]=((((-1.0)*x2995*x2997))+(((-1.0)*r22*x2996))+((r21*x2998)));
evalcond[1]=((((-1.0)*r12*x2996))+(((-1.0)*x2991*x2997))+((r11*x2998)));
evalcond[2]=(((x2990*x2994))+(((-1.0)*x2992*x2996))+(((-1.0)*r02*x2997)));
evalcond[3]=((-1.0)+(((-1.0)*x2994*x2997))+((x2989*x2992))+(((-1.0)*r02*x2996)));
evalcond[4]=(((x2990*x2995))+(((-1.0)*r22*x2997))+((sj1*sj2))+(((-1.0)*cj1*x2993))+(((-1.0)*r21*sj5*x2996)));
evalcond[5]=(((x2990*x2991))+(((-1.0)*sj1*x2993))+(((-1.0)*r12*x2997))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2999=((1.0)*cj5);
CheckValue<IkReal> x3000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2999)))),-1);
if(!x3000.valid){
continue;
}
CheckValue<IkReal> x3001 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3000.value)))+(x3001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3002=IKsin(j4);
IkReal x3003=IKcos(j4);
IkReal x3004=(cj5*r10);
IkReal x3005=(r01*sj5);
IkReal x3006=((1.0)*cj2);
IkReal x3007=(cj5*r00);
IkReal x3008=(cj5*r20);
IkReal x3009=((1.0)*x3003);
IkReal x3010=((1.0)*x3002);
IkReal x3011=(sj5*x3002);
evalcond[0]=((((-1.0)*r22*x3009))+((r21*x3011))+(((-1.0)*x3008*x3010)));
evalcond[1]=((((-1.0)*x3004*x3010))+(((-1.0)*r12*x3009))+((r11*x3011)));
evalcond[2]=((((-1.0)*r02*x3010))+((x3003*x3007))+(((-1.0)*x3005*x3009)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3009))+((x3002*x3005))+(((-1.0)*x3007*x3010)));
evalcond[4]=((((-1.0)*r21*sj5*x3009))+(((-1.0)*r22*x3010))+((sj1*sj2))+((x3003*x3008))+(((-1.0)*cj1*x3006)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x3003*x3004))+(((-1.0)*r11*sj5*x3009))+(((-1.0)*r12*x3010))+(((-1.0)*sj1*x3006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3012.valid){
continue;
}
CheckValue<IkReal> x3013 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3012.value)))+(x3013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3014=IKsin(j4);
IkReal x3015=IKcos(j4);
IkReal x3016=(cj5*r10);
IkReal x3017=(r01*sj5);
IkReal x3018=((1.0)*cj2);
IkReal x3019=(cj5*r00);
IkReal x3020=(cj5*r20);
IkReal x3021=((1.0)*x3015);
IkReal x3022=((1.0)*x3014);
IkReal x3023=(sj5*x3014);
evalcond[0]=((((-1.0)*x3020*x3022))+((r21*x3023))+(((-1.0)*r22*x3021)));
evalcond[1]=((((-1.0)*r12*x3021))+((r11*x3023))+(((-1.0)*x3016*x3022)));
evalcond[2]=(((x3015*x3019))+(((-1.0)*r02*x3022))+(((-1.0)*x3017*x3021)));
evalcond[3]=((-1.0)+(((-1.0)*x3019*x3022))+(((-1.0)*r02*x3021))+((x3014*x3017)));
evalcond[4]=(((x3015*x3020))+((sj1*sj2))+(((-1.0)*cj1*x3018))+(((-1.0)*r22*x3022))+(((-1.0)*r21*sj5*x3021)));
evalcond[5]=(((x3015*x3016))+(((-1.0)*r12*x3022))+(((-1.0)*r11*sj5*x3021))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3024=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3024;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3025=((1.0)*cj5);
IkReal x3026=((((-1.0)*r21*x3025))+(((-1.0)*r20*sj5)));
j4eval[0]=x3026;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x3025)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3027=cj5*cj5;
IkReal x3028=r01*r01;
IkReal x3029=(cj5*r00);
IkReal x3030=(r01*sj5);
IkReal x3031=(x3028+((x3027*(r00*r00)))+(((-1.0)*x3027*x3028))+(((-2.0)*x3029*x3030))+(r02*r02));
j4eval[0]=x3031;
j4eval[1]=((IKabs(r02))+(IKabs((x3029+(((-1.0)*x3030))))));
j4eval[2]=IKsign(x3031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3032=cj5*cj5;
IkReal x3033=r01*r01;
IkReal x3034=(r01*sj5);
IkReal x3035=(cj5*r00);
CheckValue<IkReal> x3036 = IKatan2WithCheck(IkReal((x3035+(((-1.0)*x3034)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3036.valid){
continue;
}
CheckValue<IkReal> x3037=IKPowWithIntegerCheck(IKsign((x3033+(((-1.0)*x3032*x3033))+((x3032*(r00*r00)))+(r02*r02)+(((-2.0)*x3034*x3035)))),-1);
if(!x3037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3036.value)+(((1.5707963267949)*(x3037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3038=IKsin(j4);
IkReal x3039=IKcos(j4);
IkReal x3040=(cj5*r10);
IkReal x3041=(r01*sj5);
IkReal x3042=(cj5*r00);
IkReal x3043=(cj5*r20);
IkReal x3044=((1.0)*x3039);
IkReal x3045=((1.0)*x3038);
IkReal x3046=(sj5*x3038);
evalcond[0]=(((r21*x3046))+(((-1.0)*r22*x3044))+(((-1.0)*x3043*x3045)));
evalcond[1]=((((-1.0)*r12*x3044))+(((-1.0)*x3040*x3045))+((r11*x3046)));
evalcond[2]=(((x3039*x3042))+(((-1.0)*x3041*x3044))+(((-1.0)*r02*x3045)));
evalcond[3]=((1.0)+(((-1.0)*x3042*x3045))+((x3038*x3041))+(((-1.0)*r02*x3044)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3045))+((x3039*x3040))+((cj1*sj2))+(((-1.0)*r11*sj5*x3044)));
evalcond[5]=(((x3039*x3043))+(((-1.0)*r22*x3045))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3047=((1.0)*cj5);
CheckValue<IkReal> x3048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3047))+(((-1.0)*r20*sj5)))),-1);
if(!x3048.valid){
continue;
}
CheckValue<IkReal> x3049 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3047))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3048.value)))+(x3049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3050=IKsin(j4);
IkReal x3051=IKcos(j4);
IkReal x3052=(cj5*r10);
IkReal x3053=(r01*sj5);
IkReal x3054=(cj5*r00);
IkReal x3055=(cj5*r20);
IkReal x3056=((1.0)*x3051);
IkReal x3057=((1.0)*x3050);
IkReal x3058=(sj5*x3050);
evalcond[0]=((((-1.0)*x3055*x3057))+((r21*x3058))+(((-1.0)*r22*x3056)));
evalcond[1]=((((-1.0)*x3052*x3057))+((r11*x3058))+(((-1.0)*r12*x3056)));
evalcond[2]=((((-1.0)*x3053*x3056))+((x3051*x3054))+(((-1.0)*r02*x3057)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3056))+(((-1.0)*x3054*x3057))+((x3050*x3053)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3051*x3052))+(((-1.0)*r12*x3057))+(((-1.0)*r11*sj5*x3056)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3051*x3055))+(((-1.0)*r21*sj5*x3056))+(((-1.0)*r22*x3057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3059 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3059.value)+(((1.5707963267949)*(x3060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3061=IKsin(j4);
IkReal x3062=IKcos(j4);
IkReal x3063=(cj5*r10);
IkReal x3064=(r01*sj5);
IkReal x3065=(cj5*r00);
IkReal x3066=(cj5*r20);
IkReal x3067=((1.0)*x3062);
IkReal x3068=((1.0)*x3061);
IkReal x3069=(sj5*x3061);
evalcond[0]=((((-1.0)*r22*x3067))+(((-1.0)*x3066*x3068))+((r21*x3069)));
evalcond[1]=((((-1.0)*x3063*x3068))+(((-1.0)*r12*x3067))+((r11*x3069)));
evalcond[2]=((((-1.0)*r02*x3068))+(((-1.0)*x3064*x3067))+((x3062*x3065)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3067))+(((-1.0)*x3065*x3068))+((x3061*x3064)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3067))+((cj1*sj2))+(((-1.0)*r12*x3068))+((x3062*x3063)));
evalcond[5]=((((-1.0)*r21*sj5*x3067))+(((-1.0)*r22*x3068))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3062*x3066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3070=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3070);
rxp1_1=(px*r21);
rxp1_2=(r11*x3070);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3071=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3071);
rxp1_1=(px*r21);
rxp1_2=(r11*x3071);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3072=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3072);
rxp1_1=(px*r21);
rxp1_2=(r11*x3072);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3075=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3075.valid){
continue;
}
IkReal x3073=x3075.value;
IkReal x3074=(sj0*x3073);
cj4array[0]=(((cj2*sj1*x3074))+((cj1*sj2*x3074)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3076=IKsin(j4);
IkReal x3077=IKcos(j4);
IkReal x3078=(cj5*r20);
IkReal x3079=(r21*sj5);
IkReal x3080=((1.0)*x3076);
IkReal x3081=((1.0)*x3077);
evalcond[0]=((-1.0)*r02*x3076);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3081)));
evalcond[2]=(((x3076*x3079))+(((-1.0)*x3078*x3080)));
evalcond[3]=(((r11*sj5*x3076))+(((-1.0)*cj5*r10*x3080)));
evalcond[4]=((((-1.0)*x3079*x3081))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3077*x3078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3083=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3083.valid){
continue;
}
IkReal x3082=x3083.value;
cj4array[0]=(((cj1*cj2*x3082))+(((-1.0)*sj1*sj2*x3082)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3084=IKsin(j4);
IkReal x3085=IKcos(j4);
IkReal x3086=(r11*sj5);
IkReal x3087=((1.0)*sj0);
IkReal x3088=((1.0)*x3085);
IkReal x3089=((1.0)*cj5*x3084);
evalcond[0]=((-1.0)*r02*x3084);
evalcond[1]=((((-1.0)*x3087))+(((-1.0)*r02*x3088)));
evalcond[2]=((((-1.0)*r20*x3089))+((r21*sj5*x3084)));
evalcond[3]=(((x3084*x3086))+(((-1.0)*r10*x3089)));
evalcond[4]=(((cj5*r10*x3085))+(((-1.0)*cj1*sj2*x3087))+(((-1.0)*cj2*sj1*x3087))+(((-1.0)*x3086*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3090=IKPowWithIntegerCheck(r02,-1);
if(!x3090.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3090.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3091=IKsin(j4);
IkReal x3092=IKcos(j4);
IkReal x3093=((1.0)*sj0);
IkReal x3094=(cj5*x3092);
IkReal x3095=(sj5*x3091);
IkReal x3096=((1.0)*sj5*x3092);
IkReal x3097=((1.0)*cj5*x3091);
evalcond[0]=((-1.0)*r02*x3091);
evalcond[1]=(((r21*x3095))+(((-1.0)*r20*x3097)));
evalcond[2]=((((-1.0)*r10*x3097))+((r11*x3095)));
evalcond[3]=(((r20*x3094))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x3096)));
evalcond[4]=((((-1.0)*r11*x3096))+((r10*x3094))+(((-1.0)*cj1*sj2*x3093))+(((-1.0)*cj2*sj1*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3098=((1.0)*sj0);
IkReal x3099=((1.0)*cj0);
CheckValue<IkReal> x3100 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3099))+(((-1.0)*r12*x3098)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3099))+(((-1.0)*r11*sj5*x3098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3100.valid){
continue;
}
CheckValue<IkReal> x3101=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3100.value)+(((1.5707963267949)*(x3101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3102=IKsin(j4);
IkReal x3103=IKcos(j4);
IkReal x3104=(cj5*r10);
IkReal x3105=(r01*sj5);
IkReal x3106=((1.0)*cj2);
IkReal x3107=(cj5*r00);
IkReal x3108=((1.0)*sj0);
IkReal x3109=(cj5*r20);
IkReal x3110=(cj1*sj2);
IkReal x3111=((1.0)*x3103);
IkReal x3112=((1.0)*x3102);
IkReal x3113=(sj5*x3102);
evalcond[0]=((((-1.0)*x3109*x3112))+((r21*x3113))+(((-1.0)*r22*x3111)));
evalcond[1]=(cj0+(((-1.0)*r12*x3111))+(((-1.0)*x3104*x3112))+((r11*x3113)));
evalcond[2]=((((-1.0)*r02*x3111))+(((-1.0)*x3108))+((x3102*x3105))+(((-1.0)*x3107*x3112)));
evalcond[3]=((((-1.0)*cj1*x3106))+((sj1*sj2))+((x3103*x3109))+(((-1.0)*r22*x3112))+(((-1.0)*r21*sj5*x3111)));
evalcond[4]=((((-1.0)*r02*x3112))+(((-1.0)*cj0*x3110))+((x3103*x3107))+(((-1.0)*x3105*x3111))+(((-1.0)*cj0*sj1*x3106)));
evalcond[5]=((((-1.0)*r12*x3112))+(((-1.0)*r11*sj5*x3111))+((x3103*x3104))+(((-1.0)*sj0*sj1*x3106))+(((-1.0)*x3108*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3114=((1.0)*cj5);
CheckValue<IkReal> x3115 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3114))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3115.valid){
continue;
}
CheckValue<IkReal> x3116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3114)))),-1);
if(!x3116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3115.value)+(((1.5707963267949)*(x3116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3117=IKsin(j4);
IkReal x3118=IKcos(j4);
IkReal x3119=(cj5*r10);
IkReal x3120=(r01*sj5);
IkReal x3121=((1.0)*cj2);
IkReal x3122=(cj5*r00);
IkReal x3123=((1.0)*sj0);
IkReal x3124=(cj5*r20);
IkReal x3125=(cj1*sj2);
IkReal x3126=((1.0)*x3118);
IkReal x3127=((1.0)*x3117);
IkReal x3128=(sj5*x3117);
evalcond[0]=((((-1.0)*x3124*x3127))+((r21*x3128))+(((-1.0)*r22*x3126)));
evalcond[1]=(cj0+(((-1.0)*r12*x3126))+((r11*x3128))+(((-1.0)*x3119*x3127)));
evalcond[2]=((((-1.0)*r02*x3126))+(((-1.0)*x3122*x3127))+(((-1.0)*x3123))+((x3117*x3120)));
evalcond[3]=((((-1.0)*r21*sj5*x3126))+((sj1*sj2))+((x3118*x3124))+(((-1.0)*cj1*x3121))+(((-1.0)*r22*x3127)));
evalcond[4]=((((-1.0)*cj0*sj1*x3121))+(((-1.0)*r02*x3127))+(((-1.0)*cj0*x3125))+((x3118*x3122))+(((-1.0)*x3120*x3126)));
evalcond[5]=(((x3118*x3119))+(((-1.0)*x3123*x3125))+(((-1.0)*r12*x3127))+(((-1.0)*r11*sj5*x3126))+(((-1.0)*sj0*sj1*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3129=((1.0)*cj5);
CheckValue<IkReal> x3130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3129)))),-1);
if(!x3130.valid){
continue;
}
CheckValue<IkReal> x3131 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3129))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3130.value)))+(x3131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3132=IKsin(j4);
IkReal x3133=IKcos(j4);
IkReal x3134=(cj5*r10);
IkReal x3135=(r01*sj5);
IkReal x3136=((1.0)*cj2);
IkReal x3137=(cj5*r00);
IkReal x3138=((1.0)*sj0);
IkReal x3139=(cj5*r20);
IkReal x3140=(cj1*sj2);
IkReal x3141=((1.0)*x3133);
IkReal x3142=((1.0)*x3132);
IkReal x3143=(sj5*x3132);
evalcond[0]=((((-1.0)*r22*x3141))+((r21*x3143))+(((-1.0)*x3139*x3142)));
evalcond[1]=((((-1.0)*r12*x3141))+cj0+((r11*x3143))+(((-1.0)*x3134*x3142)));
evalcond[2]=(((x3132*x3135))+(((-1.0)*r02*x3141))+(((-1.0)*x3137*x3142))+(((-1.0)*x3138)));
evalcond[3]=((((-1.0)*r22*x3142))+((x3133*x3139))+((sj1*sj2))+(((-1.0)*r21*sj5*x3141))+(((-1.0)*cj1*x3136)));
evalcond[4]=((((-1.0)*cj0*sj1*x3136))+((x3133*x3137))+(((-1.0)*x3135*x3141))+(((-1.0)*r02*x3142))+(((-1.0)*cj0*x3140)));
evalcond[5]=((((-1.0)*r12*x3142))+((x3133*x3134))+(((-1.0)*x3138*x3140))+(((-1.0)*sj0*sj1*x3136))+(((-1.0)*r11*sj5*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3144=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3144;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3144);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3145=r21*r21;
IkReal x3146=cj5*cj5;
IkReal x3147=(sj1*sj2);
IkReal x3148=(r21*sj5);
IkReal x3149=(cj5*r20);
IkReal x3150=(cj1*cj2);
IkReal x3151=((((2.0)*x3148*x3149))+(((-1.0)*x3145))+((x3145*x3146))+(((-1.0)*x3146*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3151;
j4eval[1]=((IKabs((((x3149*x3150))+((x3147*x3148))+(((-1.0)*x3148*x3150))+(((-1.0)*x3147*x3149)))))+(IKabs(((((-1.0)*r22*x3150))+((r22*x3147))))));
j4eval[2]=IKsign(x3151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3152=IKcos(j0);
IkReal x3153=IKsin(j0);
evalcond[0]=((((-0.11235)*x3153))+(((-1.0)*px))+(((0.24365)*x3152)));
evalcond[1]=((((-1.0)*py))+(((0.24365)*x3153))+(((0.11235)*x3152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3154=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3154;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3155=((1.0)*cj5);
IkReal x3156=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3155)));
j4eval[0]=x3156;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3155)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3157=((1.0)*cj5);
IkReal x3158=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3157)));
j4eval[0]=x3158;
j4eval[1]=IKsign(x3158);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3157)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3159=((1.0)*cj5);
CheckValue<IkReal> x3160 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3159)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3160.valid){
continue;
}
CheckValue<IkReal> x3161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3159)))),-1);
if(!x3161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3160.value)+(((1.5707963267949)*(x3161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3162=IKcos(j4);
IkReal x3163=IKsin(j4);
IkReal x3164=((1.0)*sj0);
IkReal x3165=(cj5*r00);
IkReal x3166=(cj5*r10);
IkReal x3167=(cj5*r20);
IkReal x3168=((1.0)*x3162);
IkReal x3169=((1.0)*x3163);
IkReal x3170=(sj5*x3162);
IkReal x3171=(sj5*x3163);
evalcond[0]=(((r22*x3163))+(((-1.0)*x3167*x3168))+((r21*x3170)));
evalcond[1]=((((-1.0)*x3167*x3169))+((r21*x3171))+(((-1.0)*r22*x3168)));
evalcond[2]=((((-1.0)*r12*x3168))+((r11*x3171))+cj0+(((-1.0)*x3166*x3169)));
evalcond[3]=(((r02*x3163))+(((-1.0)*x3165*x3168))+((r01*x3170))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3170))+((r12*x3163))+(((-1.0)*x3166*x3168))+(((-1.0)*x3164)));
evalcond[5]=((((-1.0)*x3165*x3169))+(((-1.0)*r02*x3168))+((r01*x3171))+(((-1.0)*x3164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3172=((1.0)*cj5);
CheckValue<IkReal> x3173 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3173.valid){
continue;
}
CheckValue<IkReal> x3174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3172)))),-1);
if(!x3174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3173.value)+(((1.5707963267949)*(x3174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3175=IKcos(j4);
IkReal x3176=IKsin(j4);
IkReal x3177=((1.0)*sj0);
IkReal x3178=(cj5*r00);
IkReal x3179=(cj5*r10);
IkReal x3180=(cj5*r20);
IkReal x3181=((1.0)*x3175);
IkReal x3182=((1.0)*x3176);
IkReal x3183=(sj5*x3175);
IkReal x3184=(sj5*x3176);
evalcond[0]=((((-1.0)*x3180*x3181))+((r22*x3176))+((r21*x3183)));
evalcond[1]=((((-1.0)*x3180*x3182))+(((-1.0)*r22*x3181))+((r21*x3184)));
evalcond[2]=(cj0+(((-1.0)*x3179*x3182))+((r11*x3184))+(((-1.0)*r12*x3181)));
evalcond[3]=(((r01*x3183))+((r02*x3176))+(((-1.0)*x3178*x3181))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3179*x3181))+(((-1.0)*x3177))+((r11*x3183))+((r12*x3176)));
evalcond[5]=((((-1.0)*r02*x3181))+((r01*x3184))+(((-1.0)*x3177))+(((-1.0)*x3178*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3185 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3185.valid){
continue;
}
CheckValue<IkReal> x3186=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3185.value)+(((1.5707963267949)*(x3186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3187=IKcos(j4);
IkReal x3188=IKsin(j4);
IkReal x3189=((1.0)*sj0);
IkReal x3190=(cj5*r00);
IkReal x3191=(cj5*r10);
IkReal x3192=(cj5*r20);
IkReal x3193=((1.0)*x3187);
IkReal x3194=((1.0)*x3188);
IkReal x3195=(sj5*x3187);
IkReal x3196=(sj5*x3188);
evalcond[0]=(((r22*x3188))+((r21*x3195))+(((-1.0)*x3192*x3193)));
evalcond[1]=((((-1.0)*r22*x3193))+((r21*x3196))+(((-1.0)*x3192*x3194)));
evalcond[2]=(cj0+(((-1.0)*x3191*x3194))+((r11*x3196))+(((-1.0)*r12*x3193)));
evalcond[3]=((((-1.0)*x3190*x3193))+((r01*x3195))+(((-1.0)*cj0))+((r02*x3188)));
evalcond[4]=((((-1.0)*x3191*x3193))+((r12*x3188))+((r11*x3195))+(((-1.0)*x3189)));
evalcond[5]=((((-1.0)*x3190*x3194))+((r01*x3196))+(((-1.0)*r02*x3193))+(((-1.0)*x3189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3197=IKcos(j0);
IkReal x3198=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x3198))+(((0.24365)*x3197)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x3197))+(((0.24365)*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3199=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3199;
j4eval[1]=IKsign(x3199);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3200=((1.0)*cj5);
IkReal x3201=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3200)));
j4eval[0]=x3201;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3200))))));
j4eval[2]=IKsign(x3201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3202=cj5*cj5;
IkReal x3203=((1.0)*r20);
IkReal x3204=(r01*r21);
IkReal x3205=(r21*sj5);
IkReal x3206=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3204))+((x3202*x3204))+((cj5*r00*x3205))+(((-1.0)*r00*x3202*x3203)));
j4eval[0]=x3206;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3205))+(((-1.0)*cj0*cj5*x3203))))));
j4eval[2]=IKsign(x3206);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3207=cj5*cj5;
IkReal x3208=((1.0)*r20);
IkReal x3209=(r01*r21);
IkReal x3210=(r21*sj5);
CheckValue<IkReal> x3211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3208))+((cj0*x3210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3211.valid){
continue;
}
CheckValue<IkReal> x3212=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x3210))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3207*x3208))+((x3207*x3209))+(((-1.0)*x3209)))),-1);
if(!x3212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3211.value)+(((1.5707963267949)*(x3212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3213=IKcos(j4);
IkReal x3214=IKsin(j4);
IkReal x3215=(cj5*r00);
IkReal x3216=(cj5*r10);
IkReal x3217=(cj5*r20);
IkReal x3218=((1.0)*x3213);
IkReal x3219=((1.0)*x3214);
IkReal x3220=(sj5*x3213);
IkReal x3221=(sj5*x3214);
evalcond[0]=(((r22*x3214))+(((-1.0)*x3217*x3218))+((r21*x3220)));
evalcond[1]=((((-1.0)*x3217*x3219))+((r21*x3221))+(((-1.0)*r22*x3218)));
evalcond[2]=(cj0+(((-1.0)*x3215*x3218))+((r01*x3220))+((r02*x3214)));
evalcond[3]=(sj0+((r11*x3220))+((r12*x3214))+(((-1.0)*x3216*x3218)));
evalcond[4]=(cj0+((r11*x3221))+(((-1.0)*x3216*x3219))+(((-1.0)*r12*x3218)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3215*x3219))+((r01*x3221))+(((-1.0)*r02*x3218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3222=((1.0)*cj5);
CheckValue<IkReal> x3223 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3222)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3223.valid){
continue;
}
CheckValue<IkReal> x3224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3222)))),-1);
if(!x3224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3223.value)+(((1.5707963267949)*(x3224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3225=IKcos(j4);
IkReal x3226=IKsin(j4);
IkReal x3227=(cj5*r00);
IkReal x3228=(cj5*r10);
IkReal x3229=(cj5*r20);
IkReal x3230=((1.0)*x3225);
IkReal x3231=((1.0)*x3226);
IkReal x3232=(sj5*x3225);
IkReal x3233=(sj5*x3226);
evalcond[0]=((((-1.0)*x3229*x3230))+((r22*x3226))+((r21*x3232)));
evalcond[1]=((((-1.0)*x3229*x3231))+(((-1.0)*r22*x3230))+((r21*x3233)));
evalcond[2]=(cj0+((r02*x3226))+((r01*x3232))+(((-1.0)*x3227*x3230)));
evalcond[3]=(((r12*x3226))+sj0+(((-1.0)*x3228*x3230))+((r11*x3232)));
evalcond[4]=(cj0+(((-1.0)*x3228*x3231))+((r11*x3233))+(((-1.0)*r12*x3230)));
evalcond[5]=((((-1.0)*r02*x3230))+(((-1.0)*sj0))+((r01*x3233))+(((-1.0)*x3227*x3231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3234 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3234.valid){
continue;
}
CheckValue<IkReal> x3235=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3234.value)+(((1.5707963267949)*(x3235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3236=IKcos(j4);
IkReal x3237=IKsin(j4);
IkReal x3238=(cj5*r00);
IkReal x3239=(cj5*r10);
IkReal x3240=(cj5*r20);
IkReal x3241=((1.0)*x3236);
IkReal x3242=((1.0)*x3237);
IkReal x3243=(sj5*x3236);
IkReal x3244=(sj5*x3237);
evalcond[0]=(((r21*x3243))+((r22*x3237))+(((-1.0)*x3240*x3241)));
evalcond[1]=(((r21*x3244))+(((-1.0)*x3240*x3242))+(((-1.0)*r22*x3241)));
evalcond[2]=(((r01*x3243))+cj0+(((-1.0)*x3238*x3241))+((r02*x3237)));
evalcond[3]=((((-1.0)*x3239*x3241))+sj0+((r12*x3237))+((r11*x3243)));
evalcond[4]=((((-1.0)*x3239*x3242))+cj0+(((-1.0)*r12*x3241))+((r11*x3244)));
evalcond[5]=(((r01*x3244))+(((-1.0)*sj0))+(((-1.0)*x3238*x3242))+(((-1.0)*r02*x3241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3245=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3245;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3246=((1.0)*cj5);
IkReal x3247=((((-1.0)*r01*x3246))+(((-1.0)*r00*sj5)));
j4eval[0]=x3247;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3246)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3248=((1.0)*cj5);
IkReal x3249=((((-1.0)*r01*x3248))+(((-1.0)*r00*sj5)));
j4eval[0]=x3249;
j4eval[1]=IKsign(x3249);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3248))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3250=((1.0)*cj5);
CheckValue<IkReal> x3251=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3250)))),-1);
if(!x3251.valid){
continue;
}
CheckValue<IkReal> x3252 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3250))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3251.value)))+(x3252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3253=IKcos(j4);
IkReal x3254=IKsin(j4);
IkReal x3255=((1.0)*sj0);
IkReal x3256=(cj5*r00);
IkReal x3257=(cj5*r10);
IkReal x3258=(cj5*r20);
IkReal x3259=((1.0)*x3253);
IkReal x3260=((1.0)*x3254);
IkReal x3261=(sj5*x3253);
IkReal x3262=(sj5*x3254);
evalcond[0]=(((r21*x3261))+(((-1.0)*x3258*x3259))+((r22*x3254)));
evalcond[1]=(((r21*x3262))+(((-1.0)*r22*x3259))+(((-1.0)*x3258*x3260)));
evalcond[2]=((((-1.0)*x3257*x3260))+cj0+((r11*x3262))+(((-1.0)*r12*x3259)));
evalcond[3]=(((r01*x3261))+((r02*x3254))+(((-1.0)*x3256*x3259))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3254))+(((-1.0)*x3257*x3259))+((r11*x3261))+(((-1.0)*x3255)));
evalcond[5]=((((-1.0)*r02*x3259))+((r01*x3262))+(((-1.0)*x3256*x3260))+(((-1.0)*x3255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3263=((1.0)*cj5);
CheckValue<IkReal> x3264 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3263))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3264.valid){
continue;
}
CheckValue<IkReal> x3265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3263)))),-1);
if(!x3265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3264.value)+(((1.5707963267949)*(x3265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3266=IKcos(j4);
IkReal x3267=IKsin(j4);
IkReal x3268=((1.0)*sj0);
IkReal x3269=(cj5*r00);
IkReal x3270=(cj5*r10);
IkReal x3271=(cj5*r20);
IkReal x3272=((1.0)*x3266);
IkReal x3273=((1.0)*x3267);
IkReal x3274=(sj5*x3266);
IkReal x3275=(sj5*x3267);
evalcond[0]=(((r21*x3274))+(((-1.0)*x3271*x3272))+((r22*x3267)));
evalcond[1]=(((r21*x3275))+(((-1.0)*x3271*x3273))+(((-1.0)*r22*x3272)));
evalcond[2]=((((-1.0)*r12*x3272))+cj0+((r11*x3275))+(((-1.0)*x3270*x3273)));
evalcond[3]=(((r01*x3274))+((r02*x3267))+(((-1.0)*x3269*x3272))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3268))+((r11*x3274))+((r12*x3267))+(((-1.0)*x3270*x3272)));
evalcond[5]=(((r01*x3275))+(((-1.0)*x3268))+(((-1.0)*x3269*x3273))+(((-1.0)*r02*x3272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3276 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3276.valid){
continue;
}
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3276.value)+(((1.5707963267949)*(x3277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3278=IKcos(j4);
IkReal x3279=IKsin(j4);
IkReal x3280=((1.0)*sj0);
IkReal x3281=(cj5*r00);
IkReal x3282=(cj5*r10);
IkReal x3283=(cj5*r20);
IkReal x3284=((1.0)*x3278);
IkReal x3285=((1.0)*x3279);
IkReal x3286=(sj5*x3278);
IkReal x3287=(sj5*x3279);
evalcond[0]=((((-1.0)*x3283*x3284))+((r21*x3286))+((r22*x3279)));
evalcond[1]=((((-1.0)*r22*x3284))+(((-1.0)*x3283*x3285))+((r21*x3287)));
evalcond[2]=((((-1.0)*r12*x3284))+cj0+(((-1.0)*x3282*x3285))+((r11*x3287)));
evalcond[3]=((((-1.0)*x3281*x3284))+((r02*x3279))+(((-1.0)*cj0))+((r01*x3286)));
evalcond[4]=((((-1.0)*x3280))+(((-1.0)*x3282*x3284))+((r12*x3279))+((r11*x3286)));
evalcond[5]=((((-1.0)*x3280))+(((-1.0)*x3281*x3285))+(((-1.0)*r02*x3284))+((r01*x3287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3288=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3288;
j4eval[1]=IKsign(x3288);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3289=((1.0)*cj5);
IkReal x3290=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3289)));
j4eval[0]=x3290;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3289))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3291=cj5*cj5;
IkReal x3292=((1.0)*r20);
IkReal x3293=(r01*r21);
IkReal x3294=(r21*sj5);
IkReal x3295=((((-1.0)*r00*x3291*x3292))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3291*x3293))+((cj5*r00*x3294))+(((-1.0)*x3293)));
j4eval[0]=x3295;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3292))+((cj0*x3294))))));
j4eval[2]=IKsign(x3295);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3296=cj5*cj5;
IkReal x3297=((1.0)*r20);
IkReal x3298=(r01*r21);
IkReal x3299=(r21*sj5);
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3297))+((cj0*x3299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3296*x3298))+(((-1.0)*r00*x3296*x3297))+((cj5*r00*x3299))+(((-1.0)*x3298)))),-1);
if(!x3301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3300.value)+(((1.5707963267949)*(x3301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3302=IKcos(j4);
IkReal x3303=IKsin(j4);
IkReal x3304=(cj5*r00);
IkReal x3305=(cj5*r10);
IkReal x3306=(cj5*r20);
IkReal x3307=((1.0)*x3302);
IkReal x3308=((1.0)*x3303);
IkReal x3309=(sj5*x3302);
IkReal x3310=(sj5*x3303);
evalcond[0]=(((r21*x3309))+((r22*x3303))+(((-1.0)*x3306*x3307)));
evalcond[1]=(((r21*x3310))+(((-1.0)*r22*x3307))+(((-1.0)*x3306*x3308)));
evalcond[2]=((((-1.0)*x3304*x3307))+cj0+((r02*x3303))+((r01*x3309)));
evalcond[3]=(sj0+(((-1.0)*x3305*x3307))+((r11*x3309))+((r12*x3303)));
evalcond[4]=(cj0+(((-1.0)*x3305*x3308))+((r11*x3310))+(((-1.0)*r12*x3307)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3304*x3308))+(((-1.0)*r02*x3307))+((r01*x3310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3311=((1.0)*cj5);
CheckValue<IkReal> x3312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3311)))),-1);
if(!x3312.valid){
continue;
}
CheckValue<IkReal> x3313 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3311)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3312.value)))+(x3313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3314=IKcos(j4);
IkReal x3315=IKsin(j4);
IkReal x3316=(cj5*r00);
IkReal x3317=(cj5*r10);
IkReal x3318=(cj5*r20);
IkReal x3319=((1.0)*x3314);
IkReal x3320=((1.0)*x3315);
IkReal x3321=(sj5*x3314);
IkReal x3322=(sj5*x3315);
evalcond[0]=((((-1.0)*x3318*x3319))+((r22*x3315))+((r21*x3321)));
evalcond[1]=((((-1.0)*r22*x3319))+((r21*x3322))+(((-1.0)*x3318*x3320)));
evalcond[2]=(cj0+((r01*x3321))+((r02*x3315))+(((-1.0)*x3316*x3319)));
evalcond[3]=(sj0+((r11*x3321))+(((-1.0)*x3317*x3319))+((r12*x3315)));
evalcond[4]=(cj0+((r11*x3322))+(((-1.0)*x3317*x3320))+(((-1.0)*r12*x3319)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3322))+(((-1.0)*r02*x3319))+(((-1.0)*x3316*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3323 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3323.valid){
continue;
}
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3323.value)+(((1.5707963267949)*(x3324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3325=IKcos(j4);
IkReal x3326=IKsin(j4);
IkReal x3327=(cj5*r00);
IkReal x3328=(cj5*r10);
IkReal x3329=(cj5*r20);
IkReal x3330=((1.0)*x3325);
IkReal x3331=((1.0)*x3326);
IkReal x3332=(sj5*x3325);
IkReal x3333=(sj5*x3326);
evalcond[0]=(((r22*x3326))+((r21*x3332))+(((-1.0)*x3329*x3330)));
evalcond[1]=(((r21*x3333))+(((-1.0)*r22*x3330))+(((-1.0)*x3329*x3331)));
evalcond[2]=(cj0+((r01*x3332))+((r02*x3326))+(((-1.0)*x3327*x3330)));
evalcond[3]=(((r12*x3326))+sj0+((r11*x3332))+(((-1.0)*x3328*x3330)));
evalcond[4]=(cj0+((r11*x3333))+(((-1.0)*x3328*x3331))+(((-1.0)*r12*x3330)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3330))+((r01*x3333))+(((-1.0)*x3327*x3331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3334=IKcos(j0);
IkReal x3335=IKsin(j0);
evalcond[0]=((((-0.24365)*x3334))+(((-0.11235)*x3335))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x3334))+(((-0.24365)*x3335))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3336=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3336;
j4eval[1]=IKsign(x3336);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3337=((1.0)*cj5);
IkReal x3338=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3337)));
j4eval[0]=x3338;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3337))))));
j4eval[2]=IKsign(x3338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3339=cj5*cj5;
IkReal x3340=((1.0)*r20);
IkReal x3341=(r01*r21);
IkReal x3342=(r21*sj5);
IkReal x3343=(((cj5*r01*r20*sj5))+(((-1.0)*x3341))+(((-1.0)*r02*r22))+((cj5*r00*x3342))+(((-1.0)*r00*x3339*x3340))+((x3339*x3341)));
j4eval[0]=x3343;
j4eval[1]=((IKabs((((cj0*x3342))+(((-1.0)*cj0*cj5*x3340)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3344=cj5*cj5;
IkReal x3345=((1.0)*r20);
IkReal x3346=(r01*r21);
IkReal x3347=(r21*sj5);
CheckValue<IkReal> x3348=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3344*x3346))+(((-1.0)*x3346))+(((-1.0)*r02*r22))+((cj5*r00*x3347))+(((-1.0)*r00*x3344*x3345)))),-1);
if(!x3348.valid){
continue;
}
CheckValue<IkReal> x3349 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3347))+(((-1.0)*cj0*cj5*x3345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3348.value)))+(x3349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3350=IKcos(j4);
IkReal x3351=IKsin(j4);
IkReal x3352=(cj5*r00);
IkReal x3353=(cj5*r10);
IkReal x3354=(cj5*r20);
IkReal x3355=((1.0)*x3350);
IkReal x3356=((1.0)*x3351);
IkReal x3357=(sj5*x3350);
IkReal x3358=(sj5*x3351);
evalcond[0]=((((-1.0)*x3354*x3355))+((r21*x3357))+((r22*x3351)));
evalcond[1]=((((-1.0)*x3354*x3356))+((r21*x3358))+(((-1.0)*r22*x3355)));
evalcond[2]=((((-1.0)*x3352*x3355))+cj0+((r01*x3357))+((r02*x3351)));
evalcond[3]=(((r12*x3351))+sj0+((r11*x3357))+(((-1.0)*x3353*x3355)));
evalcond[4]=(cj0+((r11*x3358))+(((-1.0)*x3353*x3356))+(((-1.0)*r12*x3355)));
evalcond[5]=((((-1.0)*x3352*x3356))+(((-1.0)*sj0))+(((-1.0)*r02*x3355))+((r01*x3358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3359=((1.0)*cj5);
CheckValue<IkReal> x3360 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3359)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3360.valid){
continue;
}
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3359)))),-1);
if(!x3361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3360.value)+(((1.5707963267949)*(x3361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3362=IKcos(j4);
IkReal x3363=IKsin(j4);
IkReal x3364=(cj5*r00);
IkReal x3365=(cj5*r10);
IkReal x3366=(cj5*r20);
IkReal x3367=((1.0)*x3362);
IkReal x3368=((1.0)*x3363);
IkReal x3369=(sj5*x3362);
IkReal x3370=(sj5*x3363);
evalcond[0]=(((r22*x3363))+((r21*x3369))+(((-1.0)*x3366*x3367)));
evalcond[1]=((((-1.0)*r22*x3367))+((r21*x3370))+(((-1.0)*x3366*x3368)));
evalcond[2]=(((r02*x3363))+cj0+((r01*x3369))+(((-1.0)*x3364*x3367)));
evalcond[3]=(sj0+(((-1.0)*x3365*x3367))+((r12*x3363))+((r11*x3369)));
evalcond[4]=((((-1.0)*r12*x3367))+cj0+(((-1.0)*x3365*x3368))+((r11*x3370)));
evalcond[5]=(((r01*x3370))+(((-1.0)*sj0))+(((-1.0)*r02*x3367))+(((-1.0)*x3364*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3371 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3371.valid){
continue;
}
CheckValue<IkReal> x3372=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3371.value)+(((1.5707963267949)*(x3372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3373=IKcos(j4);
IkReal x3374=IKsin(j4);
IkReal x3375=(cj5*r00);
IkReal x3376=(cj5*r10);
IkReal x3377=(cj5*r20);
IkReal x3378=((1.0)*x3373);
IkReal x3379=((1.0)*x3374);
IkReal x3380=(sj5*x3373);
IkReal x3381=(sj5*x3374);
evalcond[0]=(((r22*x3374))+((r21*x3380))+(((-1.0)*x3377*x3378)));
evalcond[1]=((((-1.0)*r22*x3378))+((r21*x3381))+(((-1.0)*x3377*x3379)));
evalcond[2]=(((r01*x3380))+cj0+((r02*x3374))+(((-1.0)*x3375*x3378)));
evalcond[3]=(((r12*x3374))+sj0+(((-1.0)*x3376*x3378))+((r11*x3380)));
evalcond[4]=(cj0+(((-1.0)*x3376*x3379))+(((-1.0)*r12*x3378))+((r11*x3381)));
evalcond[5]=(((r01*x3381))+(((-1.0)*sj0))+(((-1.0)*x3375*x3379))+(((-1.0)*r02*x3378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3382=IKcos(j0);
IkReal x3383=IKsin(j0);
evalcond[0]=((((-0.11235)*x3383))+(((-1.0)*px))+(((-0.24365)*x3382)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x3382))+(((-0.24365)*x3383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3384=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3384;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3385=((1.0)*cj5);
IkReal x3386=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3385)));
j4eval[0]=x3386;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3385)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3387=((1.0)*cj5);
IkReal x3388=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3387)));
j4eval[0]=x3388;
j4eval[1]=IKsign(x3388);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3387))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3389=((1.0)*cj5);
CheckValue<IkReal> x3390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3389)))),-1);
if(!x3390.valid){
continue;
}
CheckValue<IkReal> x3391 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3389)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3390.value)))+(x3391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3392=IKcos(j4);
IkReal x3393=IKsin(j4);
IkReal x3394=((1.0)*sj0);
IkReal x3395=(cj5*r00);
IkReal x3396=(cj5*r10);
IkReal x3397=(cj5*r20);
IkReal x3398=((1.0)*x3392);
IkReal x3399=((1.0)*x3393);
IkReal x3400=(sj5*x3392);
IkReal x3401=(sj5*x3393);
evalcond[0]=(((r21*x3400))+((r22*x3393))+(((-1.0)*x3397*x3398)));
evalcond[1]=((((-1.0)*r22*x3398))+((r21*x3401))+(((-1.0)*x3397*x3399)));
evalcond[2]=(cj0+(((-1.0)*x3396*x3399))+((r11*x3401))+(((-1.0)*r12*x3398)));
evalcond[3]=((((-1.0)*x3395*x3398))+((r02*x3393))+((r01*x3400))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3396*x3398))+((r11*x3400))+(((-1.0)*x3394))+((r12*x3393)));
evalcond[5]=((((-1.0)*x3395*x3399))+(((-1.0)*r02*x3398))+(((-1.0)*x3394))+((r01*x3401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3402=((1.0)*cj5);
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3402))+(((-1.0)*r00*sj5)))),-1);
if(!x3403.valid){
continue;
}
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3403.value)))+(x3404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3405=IKcos(j4);
IkReal x3406=IKsin(j4);
IkReal x3407=((1.0)*sj0);
IkReal x3408=(cj5*r00);
IkReal x3409=(cj5*r10);
IkReal x3410=(cj5*r20);
IkReal x3411=((1.0)*x3405);
IkReal x3412=((1.0)*x3406);
IkReal x3413=(sj5*x3405);
IkReal x3414=(sj5*x3406);
evalcond[0]=(((r22*x3406))+((r21*x3413))+(((-1.0)*x3410*x3411)));
evalcond[1]=((((-1.0)*r22*x3411))+((r21*x3414))+(((-1.0)*x3410*x3412)));
evalcond[2]=(cj0+((r11*x3414))+(((-1.0)*r12*x3411))+(((-1.0)*x3409*x3412)));
evalcond[3]=(((r02*x3406))+(((-1.0)*x3408*x3411))+((r01*x3413))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3413))+((r12*x3406))+(((-1.0)*x3409*x3411))+(((-1.0)*x3407)));
evalcond[5]=((((-1.0)*r02*x3411))+(((-1.0)*x3408*x3412))+((r01*x3414))+(((-1.0)*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3415 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3415.valid){
continue;
}
CheckValue<IkReal> x3416=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3415.value)+(((1.5707963267949)*(x3416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3417=IKcos(j4);
IkReal x3418=IKsin(j4);
IkReal x3419=((1.0)*sj0);
IkReal x3420=(cj5*r00);
IkReal x3421=(cj5*r10);
IkReal x3422=(cj5*r20);
IkReal x3423=((1.0)*x3417);
IkReal x3424=((1.0)*x3418);
IkReal x3425=(sj5*x3417);
IkReal x3426=(sj5*x3418);
evalcond[0]=(((r22*x3418))+((r21*x3425))+(((-1.0)*x3422*x3423)));
evalcond[1]=((((-1.0)*r22*x3423))+((r21*x3426))+(((-1.0)*x3422*x3424)));
evalcond[2]=((((-1.0)*r12*x3423))+cj0+(((-1.0)*x3421*x3424))+((r11*x3426)));
evalcond[3]=((((-1.0)*x3420*x3423))+((r02*x3418))+(((-1.0)*cj0))+((r01*x3425)));
evalcond[4]=(((r12*x3418))+(((-1.0)*x3421*x3423))+((r11*x3425))+(((-1.0)*x3419)));
evalcond[5]=((((-1.0)*x3420*x3424))+(((-1.0)*r02*x3423))+((r01*x3426))+(((-1.0)*x3419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3427=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3427;
j4eval[1]=IKsign(x3427);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3428=((1.0)*cj5);
IkReal x3429=((((-1.0)*r11*x3428))+(((-1.0)*r10*sj5)));
j4eval[0]=x3429;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3428)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3430=cj5*cj5;
IkReal x3431=((1.0)*r20);
IkReal x3432=(r01*r21);
IkReal x3433=(r21*sj5);
IkReal x3434=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3433))+((x3430*x3432))+(((-1.0)*r00*x3430*x3431))+(((-1.0)*x3432)));
j4eval[0]=x3434;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3433))+(((-1.0)*cj0*cj5*x3431))))));
j4eval[2]=IKsign(x3434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3435=cj5*cj5;
IkReal x3436=((1.0)*r20);
IkReal x3437=(r01*r21);
IkReal x3438=(r21*sj5);
CheckValue<IkReal> x3439=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3435*x3437))+((cj5*r00*x3438))+(((-1.0)*r00*x3435*x3436))+(((-1.0)*x3437)))),-1);
if(!x3439.valid){
continue;
}
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3438))+(((-1.0)*cj0*cj5*x3436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3439.value)))+(x3440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3441=IKcos(j4);
IkReal x3442=IKsin(j4);
IkReal x3443=(cj5*r00);
IkReal x3444=(cj5*r10);
IkReal x3445=(cj5*r20);
IkReal x3446=((1.0)*x3441);
IkReal x3447=((1.0)*x3442);
IkReal x3448=(sj5*x3441);
IkReal x3449=(sj5*x3442);
evalcond[0]=(((r21*x3448))+((r22*x3442))+(((-1.0)*x3445*x3446)));
evalcond[1]=(((r21*x3449))+(((-1.0)*r22*x3446))+(((-1.0)*x3445*x3447)));
evalcond[2]=(cj0+((r02*x3442))+(((-1.0)*x3443*x3446))+((r01*x3448)));
evalcond[3]=(((r11*x3448))+sj0+((r12*x3442))+(((-1.0)*x3444*x3446)));
evalcond[4]=(((r11*x3449))+cj0+(((-1.0)*x3444*x3447))+(((-1.0)*r12*x3446)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3443*x3447))+(((-1.0)*r02*x3446))+((r01*x3449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3450=((1.0)*cj5);
CheckValue<IkReal> x3451 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3450))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3451.valid){
continue;
}
CheckValue<IkReal> x3452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3450)))),-1);
if(!x3452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3451.value)+(((1.5707963267949)*(x3452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3453=IKcos(j4);
IkReal x3454=IKsin(j4);
IkReal x3455=(cj5*r00);
IkReal x3456=(cj5*r10);
IkReal x3457=(cj5*r20);
IkReal x3458=((1.0)*x3453);
IkReal x3459=((1.0)*x3454);
IkReal x3460=(sj5*x3453);
IkReal x3461=(sj5*x3454);
evalcond[0]=((((-1.0)*x3457*x3458))+((r22*x3454))+((r21*x3460)));
evalcond[1]=((((-1.0)*x3457*x3459))+((r21*x3461))+(((-1.0)*r22*x3458)));
evalcond[2]=(cj0+((r01*x3460))+((r02*x3454))+(((-1.0)*x3455*x3458)));
evalcond[3]=(sj0+((r12*x3454))+((r11*x3460))+(((-1.0)*x3456*x3458)));
evalcond[4]=(cj0+((r11*x3461))+(((-1.0)*r12*x3458))+(((-1.0)*x3456*x3459)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3461))+(((-1.0)*x3455*x3459))+(((-1.0)*r02*x3458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3462 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3462.valid){
continue;
}
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3462.value)+(((1.5707963267949)*(x3463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3464=IKcos(j4);
IkReal x3465=IKsin(j4);
IkReal x3466=(cj5*r00);
IkReal x3467=(cj5*r10);
IkReal x3468=(cj5*r20);
IkReal x3469=((1.0)*x3464);
IkReal x3470=((1.0)*x3465);
IkReal x3471=(sj5*x3464);
IkReal x3472=(sj5*x3465);
evalcond[0]=(((r21*x3471))+(((-1.0)*x3468*x3469))+((r22*x3465)));
evalcond[1]=((((-1.0)*r22*x3469))+((r21*x3472))+(((-1.0)*x3468*x3470)));
evalcond[2]=(cj0+((r01*x3471))+((r02*x3465))+(((-1.0)*x3466*x3469)));
evalcond[3]=(sj0+(((-1.0)*x3467*x3469))+((r12*x3465))+((r11*x3471)));
evalcond[4]=((((-1.0)*x3467*x3470))+cj0+(((-1.0)*r12*x3469))+((r11*x3472)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3469))+((r01*x3472))+(((-1.0)*x3466*x3470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3473=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3473;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3474=((1.0)*cj5);
IkReal x3475=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3474)));
j4eval[0]=x3475;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3474))))));
j4eval[2]=IKsign(x3475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3476=((1.0)*cj5);
IkReal x3477=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3476)));
j4eval[0]=x3477;
j4eval[1]=IKsign(x3477);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3476))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3478=((1.0)*cj5);
CheckValue<IkReal> x3479 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3478))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3479.valid){
continue;
}
CheckValue<IkReal> x3480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3478)))),-1);
if(!x3480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3479.value)+(((1.5707963267949)*(x3480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3481=IKcos(j4);
IkReal x3482=IKsin(j4);
IkReal x3483=((1.0)*sj0);
IkReal x3484=(cj5*r00);
IkReal x3485=(cj5*r10);
IkReal x3486=(cj5*r20);
IkReal x3487=((1.0)*x3481);
IkReal x3488=((1.0)*x3482);
IkReal x3489=(sj5*x3481);
IkReal x3490=(sj5*x3482);
evalcond[0]=(((r21*x3489))+((r22*x3482))+(((-1.0)*x3486*x3487)));
evalcond[1]=((((-1.0)*r22*x3487))+((r21*x3490))+(((-1.0)*x3486*x3488)));
evalcond[2]=(cj0+(((-1.0)*x3485*x3488))+(((-1.0)*r12*x3487))+((r11*x3490)));
evalcond[3]=(((r01*x3489))+(((-1.0)*x3484*x3487))+((r02*x3482))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3485*x3487))+((r12*x3482))+((r11*x3489))+(((-1.0)*x3483)));
evalcond[5]=(((r01*x3490))+(((-1.0)*r02*x3487))+(((-1.0)*x3484*x3488))+(((-1.0)*x3483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3491=((1.0)*cj5);
CheckValue<IkReal> x3492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3491)))),-1);
if(!x3492.valid){
continue;
}
CheckValue<IkReal> x3493 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3492.value)))+(x3493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3494=IKcos(j4);
IkReal x3495=IKsin(j4);
IkReal x3496=((1.0)*sj0);
IkReal x3497=(cj5*r00);
IkReal x3498=(cj5*r10);
IkReal x3499=(cj5*r20);
IkReal x3500=((1.0)*x3494);
IkReal x3501=((1.0)*x3495);
IkReal x3502=(sj5*x3494);
IkReal x3503=(sj5*x3495);
evalcond[0]=(((r22*x3495))+(((-1.0)*x3499*x3500))+((r21*x3502)));
evalcond[1]=((((-1.0)*r22*x3500))+(((-1.0)*x3499*x3501))+((r21*x3503)));
evalcond[2]=((((-1.0)*r12*x3500))+cj0+(((-1.0)*x3498*x3501))+((r11*x3503)));
evalcond[3]=(((r01*x3502))+((r02*x3495))+(((-1.0)*x3497*x3500))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3496))+(((-1.0)*x3498*x3500))+((r11*x3502))+((r12*x3495)));
evalcond[5]=(((r01*x3503))+(((-1.0)*x3496))+(((-1.0)*r02*x3500))+(((-1.0)*x3497*x3501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3504 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3504.value)+(((1.5707963267949)*(x3505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3506=IKcos(j4);
IkReal x3507=IKsin(j4);
IkReal x3508=((1.0)*sj0);
IkReal x3509=(cj5*r00);
IkReal x3510=(cj5*r10);
IkReal x3511=(cj5*r20);
IkReal x3512=((1.0)*x3506);
IkReal x3513=((1.0)*x3507);
IkReal x3514=(sj5*x3506);
IkReal x3515=(sj5*x3507);
evalcond[0]=(((r21*x3514))+(((-1.0)*x3511*x3512))+((r22*x3507)));
evalcond[1]=(((r21*x3515))+(((-1.0)*x3511*x3513))+(((-1.0)*r22*x3512)));
evalcond[2]=(cj0+(((-1.0)*x3510*x3513))+((r11*x3515))+(((-1.0)*r12*x3512)));
evalcond[3]=((((-1.0)*x3509*x3512))+((r01*x3514))+((r02*x3507))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3508))+(((-1.0)*x3510*x3512))+((r12*x3507))+((r11*x3514)));
evalcond[5]=((((-1.0)*r02*x3512))+(((-1.0)*x3509*x3513))+((r01*x3515))+(((-1.0)*x3508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3516=((4873.0)*cj1);
IkReal x3517=(cj5*r01);
IkReal x3518=(r00*sj5);
IkReal x3519=(cj1*cj2);
IkReal x3520=((20000.0)*px);
IkReal x3521=(sj1*sj2);
IkReal x3522=((5972.0)*x3521);
CheckValue<IkReal> x3523=IKPowWithIntegerCheck(((((2247.0)*x3521))+(((-2247.0)*x3519))),-1);
if(!x3523.valid){
continue;
}
CheckValue<IkReal> x3524=IKPowWithIntegerCheck((x3521+(((-1.0)*x3519))),-1);
if(!x3524.valid){
continue;
}
if( IKabs(((x3523.value)*(((((5972.0)*x3517*x3519))+(((-1.0)*x3517*x3522))+(((5972.0)*x3518*x3519))+(((-1.0)*x3520*x3521))+((x3516*x3518))+((x3516*x3517))+((x3519*x3520))+(((-1.0)*x3518*x3522)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3524.value)*((x3518+x3517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3523.value)*(((((5972.0)*x3517*x3519))+(((-1.0)*x3517*x3522))+(((5972.0)*x3518*x3519))+(((-1.0)*x3520*x3521))+((x3516*x3518))+((x3516*x3517))+((x3519*x3520))+(((-1.0)*x3518*x3522))))))+IKsqr(((x3524.value)*((x3518+x3517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3523.value)*(((((5972.0)*x3517*x3519))+(((-1.0)*x3517*x3522))+(((5972.0)*x3518*x3519))+(((-1.0)*x3520*x3521))+((x3516*x3518))+((x3516*x3517))+((x3519*x3520))+(((-1.0)*x3518*x3522))))), ((x3524.value)*((x3518+x3517))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3525=IKcos(j0);
IkReal x3526=IKsin(j0);
IkReal x3527=(cj1*cj2);
IkReal x3528=((1.0)*cj5);
IkReal x3529=(sj1*sj2);
IkReal x3530=(r00*sj5);
IkReal x3531=(r10*sj5);
IkReal x3532=((0.24365)*cj1);
IkReal x3533=((0.08535)*cj5);
IkReal x3534=((0.21325)*x3526);
IkReal x3535=((0.21325)*x3525);
evalcond[0]=(((x3525*x3529))+(((-1.0)*x3525*x3527))+(((-1.0)*r01*x3528))+(((-1.0)*x3530)));
evalcond[1]=(((x3526*x3529))+(((-1.0)*x3526*x3527))+(((-1.0)*x3531))+(((-1.0)*r11*x3528)));
evalcond[2]=((((-0.08535)*x3530))+(((-0.11235)*x3526))+(((-1.0)*r01*x3533))+(((-1.0)*x3529*x3535))+(((-1.0)*px))+((x3525*x3532))+((x3527*x3535)));
evalcond[3]=((((-0.08535)*x3531))+(((-1.0)*r11*x3533))+(((-1.0)*x3529*x3534))+(((-1.0)*py))+((x3527*x3534))+(((0.11235)*x3525))+((x3526*x3532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3536=((1.0)*cj5);
IkReal x3537=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3536)));
j4eval[0]=x3537;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3536)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3538=((1.0)*cj5);
IkReal x3539=((((-1.0)*r11*x3538))+(((-1.0)*r10*sj5)));
j4eval[0]=x3539;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3538))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3540=((1.0)*sj0);
IkReal x3541=((1.0)*cj0);
IkReal x3542=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3542;
j4eval[1]=((IKabs(((((-1.0)*r02*x3541))+(((-1.0)*r12*x3540)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3541))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3540))))));
j4eval[2]=IKsign(x3542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3543=((-1.0)*r20);
IkReal x3545 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3545)==0){
continue;
}
IkReal x3544=pow(x3545,-0.5);
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3543),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3546.value));
IkReal gconst97=(r21*x3544);
IkReal gconst98=(x3543*x3544);
CheckValue<IkReal> x3547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3547.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3548=((-1.0)*r20);
IkReal x3549=x3544;
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3548),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
IkReal x3550=((-1.0)*(x3551.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3550;
IkReal gconst96=x3550;
IkReal gconst97=(r21*x3549);
IkReal gconst98=(x3548*x3549);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3552=((-1.0)*r20);
IkReal x3553=x3544;
CheckValue<IkReal> x3555 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3552),IKFAST_ATAN2_MAGTHRESH);
if(!x3555.valid){
continue;
}
IkReal x3554=((-1.0)*(x3555.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3554;
IkReal gconst96=x3554;
IkReal gconst97=(r21*x3553);
IkReal gconst98=(x3552*x3553);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3556=((-1.0)*r20);
IkReal x3557=x3544;
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3556),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
IkReal x3558=((-1.0)*(x3559.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3558;
IkReal gconst96=x3558;
IkReal gconst97=(r21*x3557);
IkReal gconst98=(x3556*x3557);
IkReal x3560=((1.0)*(r22*r22));
CheckValue<IkReal> x3564=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3560))),-1);
if(!x3564.valid){
continue;
}
IkReal x3561=x3564.value;
IkReal x3562=((1.0)*x3561);
IkReal x3563=((((-1.0)*x3562*(r21*r21*r21*r21)))+(((-1.0)*x3560))+(((-2.0)*x3561*(r20*r20)*(r21*r21)))+(((-1.0)*x3562*(r20*r20*r20*r20))));
j4eval[0]=x3563;
j4eval[1]=IKsign(x3563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3565=(cj1*cj2);
IkReal x3566=(gconst98*r20);
IkReal x3567=(sj1*sj2);
IkReal x3568=(gconst97*r21);
CheckValue<IkReal> x3569=IKPowWithIntegerCheck(IKsign(((((2.0)*x3566*x3568))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3568*x3568)))+(((-1.0)*(x3566*x3566))))),-1);
if(!x3569.valid){
continue;
}
CheckValue<IkReal> x3570 = IKatan2WithCheck(IkReal((((r22*x3567))+(((-1.0)*r22*x3565)))),IkReal((((x3565*x3566))+(((-1.0)*x3566*x3567))+((x3567*x3568))+(((-1.0)*x3565*x3568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3569.value)))+(x3570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3571=IKsin(j4);
IkReal x3572=IKcos(j4);
IkReal x3573=(gconst98*r10);
IkReal x3574=(gconst97*r21);
IkReal x3575=(gconst98*r20);
IkReal x3576=((1.0)*cj2);
IkReal x3577=((1.0)*sj0);
IkReal x3578=(gconst98*r00);
IkReal x3579=(cj1*sj2);
IkReal x3580=((1.0)*x3572);
IkReal x3581=((1.0)*x3571);
IkReal x3582=(gconst97*x3571);
IkReal x3583=(gconst97*x3572);
evalcond[0]=((((-1.0)*r22*x3580))+((x3571*x3574))+(((-1.0)*x3575*x3581)));
evalcond[1]=((((-1.0)*x3573*x3581))+cj0+((r11*x3582))+(((-1.0)*r12*x3580)));
evalcond[2]=((((-1.0)*r02*x3580))+(((-1.0)*x3577))+((r01*x3582))+(((-1.0)*x3578*x3581)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3575*x3580))+((x3572*x3574))+((r22*x3571))+(((-1.0)*cj1*x3576)));
evalcond[4]=((((-1.0)*cj0*x3579))+((r01*x3583))+((r02*x3571))+(((-1.0)*x3578*x3580))+(((-1.0)*cj0*sj1*x3576)));
evalcond[5]=((((-1.0)*sj0*sj1*x3576))+(((-1.0)*x3573*x3580))+((r11*x3583))+((r12*x3571))+(((-1.0)*x3577*x3579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3584=((1.0)*gconst98);
CheckValue<IkReal> x3585 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3585.valid){
continue;
}
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r10))+(((-1.0)*r11*x3584)))),-1);
if(!x3586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3585.value)+(((1.5707963267949)*(x3586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3587=IKsin(j4);
IkReal x3588=IKcos(j4);
IkReal x3589=(gconst98*r10);
IkReal x3590=(gconst97*r21);
IkReal x3591=(gconst98*r20);
IkReal x3592=((1.0)*cj2);
IkReal x3593=((1.0)*sj0);
IkReal x3594=(gconst98*r00);
IkReal x3595=(cj1*sj2);
IkReal x3596=((1.0)*x3588);
IkReal x3597=((1.0)*x3587);
IkReal x3598=(gconst97*x3587);
IkReal x3599=(gconst97*x3588);
evalcond[0]=((((-1.0)*r22*x3596))+((x3587*x3590))+(((-1.0)*x3591*x3597)));
evalcond[1]=((((-1.0)*x3589*x3597))+cj0+((r11*x3598))+(((-1.0)*r12*x3596)));
evalcond[2]=((((-1.0)*x3594*x3597))+(((-1.0)*r02*x3596))+((r01*x3598))+(((-1.0)*x3593)));
evalcond[3]=((((-1.0)*cj1*x3592))+((sj1*sj2))+((x3588*x3590))+(((-1.0)*x3591*x3596))+((r22*x3587)));
evalcond[4]=((((-1.0)*x3594*x3596))+((r02*x3587))+(((-1.0)*cj0*x3595))+((r01*x3599))+(((-1.0)*cj0*sj1*x3592)));
evalcond[5]=((((-1.0)*x3589*x3596))+((r12*x3587))+((r11*x3599))+(((-1.0)*x3593*x3595))+(((-1.0)*sj0*sj1*x3592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3600=((1.0)*gconst98);
CheckValue<IkReal> x3601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3600))+(((-1.0)*gconst97*r00)))),-1);
if(!x3601.valid){
continue;
}
CheckValue<IkReal> x3602 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3601.value)))+(x3602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3603=IKsin(j4);
IkReal x3604=IKcos(j4);
IkReal x3605=(gconst98*r10);
IkReal x3606=(gconst97*r21);
IkReal x3607=(gconst98*r20);
IkReal x3608=((1.0)*cj2);
IkReal x3609=((1.0)*sj0);
IkReal x3610=(gconst98*r00);
IkReal x3611=(cj1*sj2);
IkReal x3612=((1.0)*x3604);
IkReal x3613=((1.0)*x3603);
IkReal x3614=(gconst97*x3603);
IkReal x3615=(gconst97*x3604);
evalcond[0]=((((-1.0)*x3607*x3613))+(((-1.0)*r22*x3612))+((x3603*x3606)));
evalcond[1]=(((r11*x3614))+(((-1.0)*x3605*x3613))+cj0+(((-1.0)*r12*x3612)));
evalcond[2]=((((-1.0)*r02*x3612))+((r01*x3614))+(((-1.0)*x3609))+(((-1.0)*x3610*x3613)));
evalcond[3]=(((x3604*x3606))+((r22*x3603))+((sj1*sj2))+(((-1.0)*x3607*x3612))+(((-1.0)*cj1*x3608)));
evalcond[4]=(((r02*x3603))+((r01*x3615))+(((-1.0)*cj0*sj1*x3608))+(((-1.0)*x3610*x3612))+(((-1.0)*cj0*x3611)));
evalcond[5]=(((r11*x3615))+(((-1.0)*x3605*x3612))+(((-1.0)*x3609*x3611))+(((-1.0)*sj0*sj1*x3608))+((r12*x3603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3616=((-1.0)*r21);
IkReal x3618 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3618)==0){
continue;
}
IkReal x3617=pow(x3618,-0.5);
CheckValue<IkReal> x3619 = IKatan2WithCheck(IkReal(x3616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3619.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3619.value))));
IkReal gconst100=(x3616*x3617);
IkReal gconst101=((1.0)*r20*x3617);
CheckValue<IkReal> x3620 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3620.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3621=((-1.0)*r21);
CheckValue<IkReal> x3624 = IKatan2WithCheck(IkReal(x3621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3624.valid){
continue;
}
IkReal x3622=((1.0)*(x3624.value));
IkReal x3623=x3617;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3622)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3622)));
IkReal gconst100=(x3621*x3623);
IkReal gconst101=((1.0)*r20*x3623);
IkReal x3625=r22*r22;
IkReal x3626=((1.0)*x3625);
CheckValue<IkReal> x3630=IKPowWithIntegerCheck(((-1.0)+x3625),-1);
if(!x3630.valid){
continue;
}
IkReal x3627=x3630.value;
if((((1.0)+(((-1.0)*x3626)))) < -0.00001)
continue;
IkReal x3628=IKsqrt(((1.0)+(((-1.0)*x3626))));
IkReal x3629=(cj0*x3627*x3628);
j4eval[0]=((IKabs(((((-1.0)*x3626*x3629))+x3629)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3631=((-1.0)*r21);
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(x3631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
IkReal x3632=((1.0)*(x3634.value));
IkReal x3633=x3617;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3632)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3632)));
IkReal gconst100=(x3631*x3633);
IkReal gconst101=((1.0)*r20*x3633);
IkReal x3635=r22*r22;
IkReal x3636=((1.0)*x3635);
CheckValue<IkReal> x3640=IKPowWithIntegerCheck(((-1.0)+x3635),-1);
if(!x3640.valid){
continue;
}
IkReal x3637=x3640.value;
if((((1.0)+(((-1.0)*x3636)))) < -0.00001)
continue;
IkReal x3638=IKsqrt(((1.0)+(((-1.0)*x3636))));
IkReal x3639=(sj0*x3637*x3638);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3639+(((-1.0)*x3636*x3639))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3641=((-1.0)*r21);
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal(x3641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
IkReal x3642=((1.0)*(x3644.value));
IkReal x3643=x3617;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3642)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3642)));
IkReal gconst100=(x3641*x3643);
IkReal gconst101=((1.0)*r20*x3643);
IkReal x3645=r22*r22;
IkReal x3646=(r12*sj0);
IkReal x3647=(cj0*r02);
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(((-1.0)+x3645),-1);
if(!x3651.valid){
continue;
}
IkReal x3648=x3651.value;
if((((1.0)+(((-1.0)*x3645)))) < -0.00001)
continue;
IkReal x3649=IKsqrt(((1.0)+(((-1.0)*x3645))));
IkReal x3650=(r22*x3648*x3649);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3646*x3650))+((x3647*x3650)))))+(IKabs(((((-1.0)*x3646))+(((-1.0)*x3647))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3652=((1.0)*sj0);
IkReal x3653=((1.0)*gconst100);
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3652)))),IkReal(((((-1.0)*gconst100*r11*x3652))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
CheckValue<IkReal> x3655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3653))+(((-1.0)*gconst101*r21)))),-1);
if(!x3655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3654.value)+(((1.5707963267949)*(x3655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3656=IKsin(j4);
IkReal x3657=IKcos(j4);
IkReal x3658=(gconst101*r20);
IkReal x3659=(gconst101*r10);
IkReal x3660=((1.0)*cj2);
IkReal x3661=(gconst101*r00);
IkReal x3662=((1.0)*sj0);
IkReal x3663=(cj1*sj2);
IkReal x3664=((1.0)*x3657);
IkReal x3665=((1.0)*x3656);
IkReal x3666=(gconst100*x3656);
IkReal x3667=(gconst100*x3657);
evalcond[0]=((((-1.0)*x3658*x3665))+(((-1.0)*r22*x3664))+((r21*x3666)));
evalcond[1]=(cj0+((r11*x3666))+(((-1.0)*x3659*x3665))+(((-1.0)*r12*x3664)));
evalcond[2]=((((-1.0)*x3661*x3665))+(((-1.0)*x3662))+(((-1.0)*r02*x3664))+((r01*x3666)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3658*x3664))+(((-1.0)*cj1*x3660))+((r21*x3667))+((r22*x3656)));
evalcond[4]=((((-1.0)*cj0*sj1*x3660))+(((-1.0)*x3661*x3664))+((r01*x3667))+(((-1.0)*cj0*x3663))+((r02*x3656)));
evalcond[5]=((((-1.0)*x3662*x3663))+((r12*x3656))+(((-1.0)*sj0*sj1*x3660))+((r11*x3667))+(((-1.0)*x3659*x3664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3668=((1.0)*gconst101);
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3668))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
CheckValue<IkReal> x3670=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3668)))),-1);
if(!x3670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3669.value)+(((1.5707963267949)*(x3670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3671=IKsin(j4);
IkReal x3672=IKcos(j4);
IkReal x3673=(gconst101*r20);
IkReal x3674=(gconst101*r10);
IkReal x3675=((1.0)*cj2);
IkReal x3676=(gconst101*r00);
IkReal x3677=((1.0)*sj0);
IkReal x3678=(cj1*sj2);
IkReal x3679=((1.0)*x3672);
IkReal x3680=((1.0)*x3671);
IkReal x3681=(gconst100*x3671);
IkReal x3682=(gconst100*x3672);
evalcond[0]=(((r21*x3681))+(((-1.0)*r22*x3679))+(((-1.0)*x3673*x3680)));
evalcond[1]=(cj0+(((-1.0)*r12*x3679))+(((-1.0)*x3674*x3680))+((r11*x3681)));
evalcond[2]=(((r01*x3681))+(((-1.0)*x3676*x3680))+(((-1.0)*r02*x3679))+(((-1.0)*x3677)));
evalcond[3]=(((r21*x3682))+(((-1.0)*x3673*x3679))+((sj1*sj2))+((r22*x3671))+(((-1.0)*cj1*x3675)));
evalcond[4]=((((-1.0)*x3676*x3679))+((r01*x3682))+(((-1.0)*cj0*x3678))+((r02*x3671))+(((-1.0)*cj0*sj1*x3675)));
evalcond[5]=(((r12*x3671))+((r11*x3682))+(((-1.0)*x3677*x3678))+(((-1.0)*sj0*sj1*x3675))+(((-1.0)*x3674*x3679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3683=((1.0)*gconst101);
CheckValue<IkReal> x3684=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3683)))),-1);
if(!x3684.valid){
continue;
}
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3684.value)))+(x3685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3686=IKsin(j4);
IkReal x3687=IKcos(j4);
IkReal x3688=(gconst101*r20);
IkReal x3689=(gconst101*r10);
IkReal x3690=((1.0)*cj2);
IkReal x3691=(gconst101*r00);
IkReal x3692=((1.0)*sj0);
IkReal x3693=(cj1*sj2);
IkReal x3694=((1.0)*x3687);
IkReal x3695=((1.0)*x3686);
IkReal x3696=(gconst100*x3686);
IkReal x3697=(gconst100*x3687);
evalcond[0]=((((-1.0)*x3688*x3695))+(((-1.0)*r22*x3694))+((r21*x3696)));
evalcond[1]=((((-1.0)*x3689*x3695))+cj0+(((-1.0)*r12*x3694))+((r11*x3696)));
evalcond[2]=(((r01*x3696))+(((-1.0)*r02*x3694))+(((-1.0)*x3692))+(((-1.0)*x3691*x3695)));
evalcond[3]=((((-1.0)*x3688*x3694))+(((-1.0)*cj1*x3690))+((sj1*sj2))+((r21*x3697))+((r22*x3686)));
evalcond[4]=(((r01*x3697))+(((-1.0)*cj0*x3693))+(((-1.0)*cj0*sj1*x3690))+((r02*x3686))+(((-1.0)*x3691*x3694)));
evalcond[5]=((((-1.0)*x3689*x3694))+((r12*x3686))+(((-1.0)*sj0*sj1*x3690))+((r11*x3697))+(((-1.0)*x3692*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3698=((-1.0)*r10);
IkReal x3700 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3700)==0){
continue;
}
IkReal x3699=pow(x3700,-0.5);
CheckValue<IkReal> x3701 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3698),IKFAST_ATAN2_MAGTHRESH);
if(!x3701.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3701.value));
IkReal gconst103=(r11*x3699);
IkReal gconst104=(x3698*x3699);
CheckValue<IkReal> x3702 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3702.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3703=((-1.0)*r10);
IkReal x3704=x3699;
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3703),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
IkReal x3705=((-1.0)*(x3706.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3705;
IkReal gconst102=x3705;
IkReal gconst103=(r11*x3704);
IkReal gconst104=(x3703*x3704);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3707=((1.0)*sj0);
IkReal x3708=((1.0)*gconst103);
CheckValue<IkReal> x3709 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3707)))),IkReal(((((-1.0)*gconst103*r11*x3707))+(((-1.0)*cj0*r01*x3708))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3709.valid){
continue;
}
CheckValue<IkReal> x3710=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3708)))),-1);
if(!x3710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3709.value)+(((1.5707963267949)*(x3710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3711=IKsin(j4);
IkReal x3712=IKcos(j4);
IkReal x3713=(gconst103*r11);
IkReal x3714=((1.0)*cj2);
IkReal x3715=((1.0)*sj0);
IkReal x3716=(cj1*sj2);
IkReal x3717=((1.0)*x3712);
IkReal x3718=(gconst103*x3712);
IkReal x3719=(gconst103*x3711);
IkReal x3720=((1.0)*gconst104*x3711);
evalcond[0]=((((-1.0)*r20*x3720))+((r21*x3719))+(((-1.0)*r22*x3717)));
evalcond[1]=(((x3711*x3713))+cj0+(((-1.0)*r12*x3717))+(((-1.0)*r10*x3720)));
evalcond[2]=((((-1.0)*r02*x3717))+(((-1.0)*x3715))+(((-1.0)*r00*x3720))+((r01*x3719)));
evalcond[3]=((((-1.0)*gconst104*r20*x3717))+(((-1.0)*cj1*x3714))+((sj1*sj2))+((r21*x3718))+((r22*x3711)));
evalcond[4]=((((-1.0)*cj0*x3716))+((r01*x3718))+(((-1.0)*gconst104*r00*x3717))+((r02*x3711))+(((-1.0)*cj0*sj1*x3714)));
evalcond[5]=(((r12*x3711))+(((-1.0)*x3715*x3716))+((x3712*x3713))+(((-1.0)*sj0*sj1*x3714))+(((-1.0)*gconst104*r10*x3717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3721=((1.0)*gconst104);
CheckValue<IkReal> x3722=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3721)))),-1);
if(!x3722.valid){
continue;
}
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3721))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3722.value)))+(x3723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3724=IKsin(j4);
IkReal x3725=IKcos(j4);
IkReal x3726=(gconst103*r11);
IkReal x3727=((1.0)*cj2);
IkReal x3728=((1.0)*sj0);
IkReal x3729=(cj1*sj2);
IkReal x3730=((1.0)*x3725);
IkReal x3731=(gconst103*x3725);
IkReal x3732=(gconst103*x3724);
IkReal x3733=((1.0)*gconst104*x3724);
evalcond[0]=((((-1.0)*r20*x3733))+(((-1.0)*r22*x3730))+((r21*x3732)));
evalcond[1]=(cj0+(((-1.0)*r12*x3730))+((x3724*x3726))+(((-1.0)*r10*x3733)));
evalcond[2]=(((r01*x3732))+(((-1.0)*x3728))+(((-1.0)*r00*x3733))+(((-1.0)*r02*x3730)));
evalcond[3]=((((-1.0)*cj1*x3727))+((r22*x3724))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3730))+((r21*x3731)));
evalcond[4]=((((-1.0)*gconst104*r00*x3730))+((r01*x3731))+(((-1.0)*cj0*x3729))+((r02*x3724))+(((-1.0)*cj0*sj1*x3727)));
evalcond[5]=((((-1.0)*sj0*sj1*x3727))+((x3725*x3726))+((r12*x3724))+(((-1.0)*x3728*x3729))+(((-1.0)*gconst104*r10*x3730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3734=((-1.0)*r11);
IkReal x3736 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3736)==0){
continue;
}
IkReal x3735=pow(x3736,-0.5);
CheckValue<IkReal> x3737 = IKatan2WithCheck(IkReal(x3734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3737.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3737.value))));
IkReal gconst106=(x3734*x3735);
IkReal gconst107=((1.0)*r10*x3735);
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3738.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3739=((-1.0)*r11);
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal(x3739),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
IkReal x3740=((1.0)*(x3742.value));
IkReal x3741=x3735;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3740)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3740)));
IkReal gconst106=(x3739*x3741);
IkReal gconst107=((1.0)*r10*x3741);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3743=((-1.0)*r11);
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal(x3743),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
IkReal x3744=((1.0)*(x3746.value));
IkReal x3745=x3735;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3744)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3744)));
IkReal gconst106=(x3743*x3745);
IkReal gconst107=((1.0)*r10*x3745);
IkReal x3747=r12*r12;
IkReal x3748=((1.0)*sj0);
IkReal x3749=(cj0*r02);
IkReal x3750=x3735;
j4eval[0]=((IKabs(((((-1.0)*x3748*x3750))+((r12*x3749*x3750))+((sj0*x3747*x3750)))))+(IKabs(((((-1.0)*r12*x3748))+(((-1.0)*x3749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3751=((-1.0)*r11);
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal(x3751),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
IkReal x3752=((1.0)*(x3754.value));
IkReal x3753=x3735;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3752)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3752)));
IkReal gconst106=(x3751*x3753);
IkReal gconst107=((1.0)*r10*x3753);
IkReal x3755=r12*r12;
IkReal x3756=((1.0)+(((-1.0)*x3755)));
IkReal x3757=(r22*sj1*sj2);
IkReal x3758=(cj1*cj2*r22);
CheckValue<IkReal> x3765=IKPowWithIntegerCheck(x3756,-1);
if(!x3765.valid){
continue;
}
IkReal x3759=x3765.value;
CheckValue<IkReal> x3766=IKPowWithIntegerCheck(((-1.0)+x3755),-1);
if(!x3766.valid){
continue;
}
IkReal x3760=x3766.value;
IkReal x3761=((1.0)*x3759);
if((x3756) < -0.00001)
continue;
IkReal x3762=IKsqrt(x3756);
IkReal x3763=(r12*x3760*x3762);
IkReal x3764=((((-2.0)*r10*r11*r20*r21*x3759))+(((-1.0)*x3761*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3761*(r11*r11)*(r21*r21))));
j4eval[0]=x3764;
j4eval[1]=((IKabs((((x3758*x3763))+(((-1.0)*x3757*x3763)))))+(IKabs((x3757+(((-1.0)*x3758))))));
j4eval[2]=IKsign(x3764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3767=(sj1*sj2);
IkReal x3768=(gconst106*r21);
IkReal x3769=(gconst107*r20);
IkReal x3770=(cj1*cj2);
CheckValue<IkReal> x3771 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3770))+((r22*x3767)))),IkReal((((x3769*x3770))+((x3767*x3768))+(((-1.0)*x3768*x3770))+(((-1.0)*x3767*x3769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3771.valid){
continue;
}
CheckValue<IkReal> x3772=IKPowWithIntegerCheck(IKsign(((((2.0)*x3768*x3769))+(((-1.0)*(x3769*x3769)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3768*x3768))))),-1);
if(!x3772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3771.value)+(((1.5707963267949)*(x3772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3773=IKsin(j4);
IkReal x3774=IKcos(j4);
IkReal x3775=(gconst107*r10);
IkReal x3776=(gconst107*r00);
IkReal x3777=((1.0)*cj2);
IkReal x3778=(gconst107*r20);
IkReal x3779=((1.0)*sj0);
IkReal x3780=(cj1*sj2);
IkReal x3781=((1.0)*x3774);
IkReal x3782=(gconst106*x3774);
IkReal x3783=(gconst106*x3773);
IkReal x3784=((1.0)*x3773);
evalcond[0]=((((-1.0)*x3778*x3784))+((r21*x3783))+(((-1.0)*r22*x3781)));
evalcond[1]=(cj0+(((-1.0)*r12*x3781))+(((-1.0)*x3775*x3784))+((r11*x3783)));
evalcond[2]=((((-1.0)*r02*x3781))+((r01*x3783))+(((-1.0)*x3779))+(((-1.0)*x3776*x3784)));
evalcond[3]=((((-1.0)*x3778*x3781))+((r22*x3773))+((r21*x3782))+((sj1*sj2))+(((-1.0)*cj1*x3777)));
evalcond[4]=(((r02*x3773))+(((-1.0)*cj0*sj1*x3777))+(((-1.0)*cj0*x3780))+((r01*x3782))+(((-1.0)*x3776*x3781)));
evalcond[5]=((((-1.0)*x3779*x3780))+((r12*x3773))+(((-1.0)*sj0*sj1*x3777))+(((-1.0)*x3775*x3781))+((r11*x3782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3785=((1.0)*sj0);
IkReal x3786=((1.0)*gconst106);
CheckValue<IkReal> x3787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3786)))),-1);
if(!x3787.valid){
continue;
}
CheckValue<IkReal> x3788 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3785)))),IkReal(((((-1.0)*cj0*r01*x3786))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3785))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3787.value)))+(x3788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3789=IKsin(j4);
IkReal x3790=IKcos(j4);
IkReal x3791=(gconst107*r10);
IkReal x3792=(gconst107*r00);
IkReal x3793=((1.0)*cj2);
IkReal x3794=(gconst107*r20);
IkReal x3795=((1.0)*sj0);
IkReal x3796=(cj1*sj2);
IkReal x3797=((1.0)*x3790);
IkReal x3798=(gconst106*x3790);
IkReal x3799=(gconst106*x3789);
IkReal x3800=((1.0)*x3789);
evalcond[0]=(((r21*x3799))+(((-1.0)*r22*x3797))+(((-1.0)*x3794*x3800)));
evalcond[1]=((((-1.0)*r12*x3797))+cj0+(((-1.0)*x3791*x3800))+((r11*x3799)));
evalcond[2]=((((-1.0)*x3795))+(((-1.0)*r02*x3797))+(((-1.0)*x3792*x3800))+((r01*x3799)));
evalcond[3]=(((r21*x3798))+((r22*x3789))+((sj1*sj2))+(((-1.0)*cj1*x3793))+(((-1.0)*x3794*x3797)));
evalcond[4]=(((r02*x3789))+(((-1.0)*cj0*sj1*x3793))+(((-1.0)*cj0*x3796))+(((-1.0)*x3792*x3797))+((r01*x3798)));
evalcond[5]=((((-1.0)*sj0*sj1*x3793))+((r12*x3789))+(((-1.0)*x3791*x3797))+(((-1.0)*x3795*x3796))+((r11*x3798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3801=((1.0)*gconst107);
CheckValue<IkReal> x3802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3802.valid){
continue;
}
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3801)))),-1);
if(!x3803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3802.value)+(((1.5707963267949)*(x3803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3804=IKsin(j4);
IkReal x3805=IKcos(j4);
IkReal x3806=(gconst107*r10);
IkReal x3807=(gconst107*r00);
IkReal x3808=((1.0)*cj2);
IkReal x3809=(gconst107*r20);
IkReal x3810=((1.0)*sj0);
IkReal x3811=(cj1*sj2);
IkReal x3812=((1.0)*x3805);
IkReal x3813=(gconst106*x3805);
IkReal x3814=(gconst106*x3804);
IkReal x3815=((1.0)*x3804);
evalcond[0]=((((-1.0)*r22*x3812))+((r21*x3814))+(((-1.0)*x3809*x3815)));
evalcond[1]=((((-1.0)*r12*x3812))+cj0+((r11*x3814))+(((-1.0)*x3806*x3815)));
evalcond[2]=((((-1.0)*x3807*x3815))+(((-1.0)*r02*x3812))+(((-1.0)*x3810))+((r01*x3814)));
evalcond[3]=(((r21*x3813))+((r22*x3804))+((sj1*sj2))+(((-1.0)*x3809*x3812))+(((-1.0)*cj1*x3808)));
evalcond[4]=((((-1.0)*x3807*x3812))+(((-1.0)*cj0*x3811))+((r02*x3804))+(((-1.0)*cj0*sj1*x3808))+((r01*x3813)));
evalcond[5]=((((-1.0)*sj0*sj1*x3808))+((r11*x3813))+((r12*x3804))+(((-1.0)*x3810*x3811))+(((-1.0)*x3806*x3812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3816=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3816;
j4eval[1]=IKsign(x3816);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3817=((1.0)*cj5);
IkReal x3818=((((-1.0)*r01*x3817))+(((-1.0)*r00*sj5)));
j4eval[0]=x3818;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3817))))));
j4eval[2]=IKsign(x3818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3819=(sj1*sj2);
IkReal x3820=(cj5*r10);
IkReal x3821=(r11*sj5);
IkReal x3822=(cj1*cj2);
IkReal x3823=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3823;
j4eval[1]=((IKabs((((x3819*x3821))+(((-1.0)*x3819*x3820))+((x3820*x3822))+(((-1.0)*x3821*x3822)))))+(IKabs((((r12*x3822))+(((-1.0)*r12*x3819))))));
j4eval[2]=IKsign(x3823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3824=(sj1*sj2);
IkReal x3825=(cj5*r10);
IkReal x3826=(r11*sj5);
IkReal x3827=(cj1*cj2);
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3828.valid){
continue;
}
CheckValue<IkReal> x3829 = IKatan2WithCheck(IkReal((((x3825*x3827))+(((-1.0)*x3824*x3825))+((x3824*x3826))+(((-1.0)*x3826*x3827)))),IkReal((((r12*x3827))+(((-1.0)*r12*x3824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3828.value)))+(x3829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3830=IKcos(j4);
IkReal x3831=IKsin(j4);
IkReal x3832=(cj5*r00);
IkReal x3833=(cj5*r10);
IkReal x3834=(r21*sj5);
IkReal x3835=((1.0)*cj2);
IkReal x3836=(cj5*r20);
IkReal x3837=((1.0)*x3830);
IkReal x3838=((1.0)*x3831);
IkReal x3839=(sj5*x3831);
IkReal x3840=(sj5*x3830);
evalcond[0]=((((-1.0)*x3833*x3837))+((r12*x3831))+((r11*x3840)));
evalcond[1]=(((x3831*x3834))+(((-1.0)*r22*x3837))+(((-1.0)*x3836*x3838)));
evalcond[2]=((((-1.0)*x3832*x3838))+((r01*x3839))+(((-1.0)*r02*x3837)));
evalcond[3]=((1.0)+(((-1.0)*x3833*x3838))+(((-1.0)*r12*x3837))+((r11*x3839)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3835))+(((-1.0)*x3836*x3837))+((x3830*x3834))+((r22*x3831)));
evalcond[5]=((((-1.0)*x3832*x3837))+((r02*x3831))+(((-1.0)*cj1*sj2))+((r01*x3840))+(((-1.0)*sj1*x3835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3841=((1.0)*cj5);
CheckValue<IkReal> x3842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3841)))),-1);
if(!x3842.valid){
continue;
}
CheckValue<IkReal> x3843 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3841))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3842.value)))+(x3843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3844=IKcos(j4);
IkReal x3845=IKsin(j4);
IkReal x3846=(cj5*r00);
IkReal x3847=(cj5*r10);
IkReal x3848=(r21*sj5);
IkReal x3849=((1.0)*cj2);
IkReal x3850=(cj5*r20);
IkReal x3851=((1.0)*x3844);
IkReal x3852=((1.0)*x3845);
IkReal x3853=(sj5*x3845);
IkReal x3854=(sj5*x3844);
evalcond[0]=(((r12*x3845))+((r11*x3854))+(((-1.0)*x3847*x3851)));
evalcond[1]=((((-1.0)*x3850*x3852))+((x3845*x3848))+(((-1.0)*r22*x3851)));
evalcond[2]=(((r01*x3853))+(((-1.0)*x3846*x3852))+(((-1.0)*r02*x3851)));
evalcond[3]=((1.0)+((r11*x3853))+(((-1.0)*r12*x3851))+(((-1.0)*x3847*x3852)));
evalcond[4]=((((-1.0)*x3850*x3851))+((sj1*sj2))+((x3844*x3848))+(((-1.0)*cj1*x3849))+((r22*x3845)));
evalcond[5]=((((-1.0)*sj1*x3849))+(((-1.0)*cj1*sj2))+((r01*x3854))+(((-1.0)*x3846*x3851))+((r02*x3845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3855=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3855.valid){
continue;
}
CheckValue<IkReal> x3856 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3855.value)))+(x3856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3857=IKcos(j4);
IkReal x3858=IKsin(j4);
IkReal x3859=(cj5*r00);
IkReal x3860=(cj5*r10);
IkReal x3861=(r21*sj5);
IkReal x3862=((1.0)*cj2);
IkReal x3863=(cj5*r20);
IkReal x3864=((1.0)*x3857);
IkReal x3865=((1.0)*x3858);
IkReal x3866=(sj5*x3858);
IkReal x3867=(sj5*x3857);
evalcond[0]=(((r11*x3867))+(((-1.0)*x3860*x3864))+((r12*x3858)));
evalcond[1]=((((-1.0)*x3863*x3865))+((x3858*x3861))+(((-1.0)*r22*x3864)));
evalcond[2]=((((-1.0)*r02*x3864))+(((-1.0)*x3859*x3865))+((r01*x3866)));
evalcond[3]=((1.0)+((r11*x3866))+(((-1.0)*x3860*x3865))+(((-1.0)*r12*x3864)));
evalcond[4]=((((-1.0)*x3863*x3864))+((sj1*sj2))+((x3857*x3861))+(((-1.0)*cj1*x3862))+((r22*x3858)));
evalcond[5]=(((r02*x3858))+(((-1.0)*x3859*x3864))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3862))+((r01*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3868=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3868;
j4eval[1]=IKsign(x3868);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3869=((1.0)*cj5);
IkReal x3870=((((-1.0)*r21*x3869))+(((-1.0)*r20*sj5)));
j4eval[0]=x3870;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3869))))));
j4eval[2]=IKsign(x3870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3871=cj5*cj5;
IkReal x3872=r11*r11;
IkReal x3873=(r11*sj5);
IkReal x3874=(cj5*r10);
IkReal x3875=((r12*r12)+((x3871*(r10*r10)))+x3872+(((-1.0)*x3871*x3872))+(((-2.0)*x3873*x3874)));
j4eval[0]=x3875;
j4eval[1]=IKsign(x3875);
j4eval[2]=((IKabs(r12))+(IKabs((x3873+(((-1.0)*x3874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3876=cj5*cj5;
IkReal x3877=r11*r11;
IkReal x3878=(cj5*r10);
IkReal x3879=(r11*sj5);
CheckValue<IkReal> x3880 = IKatan2WithCheck(IkReal((x3879+(((-1.0)*x3878)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3880.valid){
continue;
}
CheckValue<IkReal> x3881=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3876*(r10*r10)))+x3877+(((-1.0)*x3876*x3877))+(((-2.0)*x3878*x3879)))),-1);
if(!x3881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3880.value)+(((1.5707963267949)*(x3881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3882=IKcos(j4);
IkReal x3883=IKsin(j4);
IkReal x3884=(cj5*r00);
IkReal x3885=(cj5*r10);
IkReal x3886=(r21*sj5);
IkReal x3887=(cj5*r20);
IkReal x3888=((1.0)*x3882);
IkReal x3889=((1.0)*x3883);
IkReal x3890=(sj5*x3883);
IkReal x3891=(sj5*x3882);
evalcond[0]=(((r12*x3883))+(((-1.0)*x3885*x3888))+((r11*x3891)));
evalcond[1]=(((x3883*x3886))+(((-1.0)*r22*x3888))+(((-1.0)*x3887*x3889)));
evalcond[2]=((((-1.0)*r02*x3888))+((r01*x3890))+(((-1.0)*x3884*x3889)));
evalcond[3]=((-1.0)+(((-1.0)*x3885*x3889))+((r11*x3890))+(((-1.0)*r12*x3888)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3891))+((r02*x3883))+(((-1.0)*x3884*x3888)));
evalcond[5]=(((x3882*x3886))+((r22*x3883))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3887*x3888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3892=((1.0)*cj5);
CheckValue<IkReal> x3893 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3893.valid){
continue;
}
CheckValue<IkReal> x3894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3892))+(((-1.0)*r20*sj5)))),-1);
if(!x3894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3893.value)+(((1.5707963267949)*(x3894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3895=IKcos(j4);
IkReal x3896=IKsin(j4);
IkReal x3897=(cj5*r00);
IkReal x3898=(cj5*r10);
IkReal x3899=(r21*sj5);
IkReal x3900=(cj5*r20);
IkReal x3901=((1.0)*x3895);
IkReal x3902=((1.0)*x3896);
IkReal x3903=(sj5*x3896);
IkReal x3904=(sj5*x3895);
evalcond[0]=(((r12*x3896))+(((-1.0)*x3898*x3901))+((r11*x3904)));
evalcond[1]=((((-1.0)*x3900*x3902))+(((-1.0)*r22*x3901))+((x3896*x3899)));
evalcond[2]=((((-1.0)*x3897*x3902))+((r01*x3903))+(((-1.0)*r02*x3901)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3901))+(((-1.0)*x3898*x3902))+((r11*x3903)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3897*x3901))+((cj1*sj2))+((r01*x3904))+((r02*x3896)));
evalcond[5]=((((-1.0)*x3900*x3901))+((x3895*x3899))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
CheckValue<IkReal> x3906=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3905.value)+(((1.5707963267949)*(x3906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3907=IKcos(j4);
IkReal x3908=IKsin(j4);
IkReal x3909=(cj5*r00);
IkReal x3910=(cj5*r10);
IkReal x3911=(r21*sj5);
IkReal x3912=(cj5*r20);
IkReal x3913=((1.0)*x3907);
IkReal x3914=((1.0)*x3908);
IkReal x3915=(sj5*x3908);
IkReal x3916=(sj5*x3907);
evalcond[0]=(((r12*x3908))+((r11*x3916))+(((-1.0)*x3910*x3913)));
evalcond[1]=((((-1.0)*x3912*x3914))+(((-1.0)*r22*x3913))+((x3908*x3911)));
evalcond[2]=((((-1.0)*r02*x3913))+(((-1.0)*x3909*x3914))+((r01*x3915)));
evalcond[3]=((-1.0)+((r11*x3915))+(((-1.0)*x3910*x3914))+(((-1.0)*r12*x3913)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3909*x3913))+((r01*x3916))+((r02*x3908)));
evalcond[5]=((((-1.0)*x3912*x3913))+((r22*x3908))+((x3907*x3911))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3917=((-1.0)*r00);
IkReal x3919 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3919)==0){
continue;
}
IkReal x3918=pow(x3919,-0.5);
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3917),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3920.value));
IkReal gconst109=(r01*x3918);
IkReal gconst110=(x3917*x3918);
CheckValue<IkReal> x3921 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3922=((-1.0)*r00);
IkReal x3923=x3918;
CheckValue<IkReal> x3925 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3922),IKFAST_ATAN2_MAGTHRESH);
if(!x3925.valid){
continue;
}
IkReal x3924=((-1.0)*(x3925.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3924;
IkReal gconst108=x3924;
IkReal gconst109=(r01*x3923);
IkReal gconst110=(x3922*x3923);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3926=((1.0)*sj0);
IkReal x3927=((1.0)*gconst109);
CheckValue<IkReal> x3928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3927))+(((-1.0)*gconst110*r21)))),-1);
if(!x3928.valid){
continue;
}
CheckValue<IkReal> x3929 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3926))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+(((-1.0)*cj0*r01*x3927))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3928.value)))+(x3929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3930=IKsin(j4);
IkReal x3931=IKcos(j4);
IkReal x3932=(gconst109*r21);
IkReal x3933=((1.0)*cj2);
IkReal x3934=((1.0)*sj0);
IkReal x3935=(cj1*sj2);
IkReal x3936=((1.0)*x3931);
IkReal x3937=(gconst109*x3930);
IkReal x3938=(gconst109*x3931);
IkReal x3939=((1.0)*gconst110*x3930);
evalcond[0]=((((-1.0)*r22*x3936))+(((-1.0)*r20*x3939))+((x3930*x3932)));
evalcond[1]=(cj0+(((-1.0)*r12*x3936))+(((-1.0)*r10*x3939))+((r11*x3937)));
evalcond[2]=(((r01*x3937))+(((-1.0)*r00*x3939))+(((-1.0)*r02*x3936))+(((-1.0)*x3934)));
evalcond[3]=(((r22*x3930))+(((-1.0)*cj1*x3933))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3936))+((x3931*x3932)));
evalcond[4]=(((r01*x3938))+(((-1.0)*cj0*sj1*x3933))+(((-1.0)*cj0*x3935))+(((-1.0)*gconst110*r00*x3936))+((r02*x3930)));
evalcond[5]=((((-1.0)*x3934*x3935))+(((-1.0)*gconst110*r10*x3936))+((r12*x3930))+(((-1.0)*sj0*sj1*x3933))+((r11*x3938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3940=((1.0)*gconst110);
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3940))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3940)))),-1);
if(!x3942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3941.value)+(((1.5707963267949)*(x3942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3943=IKsin(j4);
IkReal x3944=IKcos(j4);
IkReal x3945=(gconst109*r21);
IkReal x3946=((1.0)*cj2);
IkReal x3947=((1.0)*sj0);
IkReal x3948=(cj1*sj2);
IkReal x3949=((1.0)*x3944);
IkReal x3950=(gconst109*x3943);
IkReal x3951=(gconst109*x3944);
IkReal x3952=((1.0)*gconst110*x3943);
evalcond[0]=((((-1.0)*r22*x3949))+((x3943*x3945))+(((-1.0)*r20*x3952)));
evalcond[1]=(cj0+(((-1.0)*r12*x3949))+((r11*x3950))+(((-1.0)*r10*x3952)));
evalcond[2]=(((r01*x3950))+(((-1.0)*r00*x3952))+(((-1.0)*r02*x3949))+(((-1.0)*x3947)));
evalcond[3]=(((r22*x3943))+(((-1.0)*cj1*x3946))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3949))+((x3944*x3945)));
evalcond[4]=((((-1.0)*cj0*x3948))+((r01*x3951))+(((-1.0)*cj0*sj1*x3946))+(((-1.0)*gconst110*r00*x3949))+((r02*x3943)));
evalcond[5]=(((r11*x3951))+((r12*x3943))+(((-1.0)*sj0*sj1*x3946))+(((-1.0)*gconst110*r10*x3949))+(((-1.0)*x3947*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3953=((-1.0)*r01);
IkReal x3955 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3955)==0){
continue;
}
IkReal x3954=pow(x3955,-0.5);
CheckValue<IkReal> x3956 = IKatan2WithCheck(IkReal(x3953),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3956.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3956.value))));
IkReal gconst112=(x3953*x3954);
IkReal gconst113=((1.0)*r00*x3954);
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3957.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3958=((-1.0)*r01);
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal(x3958),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
IkReal x3959=((1.0)*(x3961.value));
IkReal x3960=x3954;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3959)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3959)));
IkReal gconst112=(x3958*x3960);
IkReal gconst113=((1.0)*r00*x3960);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3962=((-1.0)*r01);
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal(x3962),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
IkReal x3963=((1.0)*(x3965.value));
IkReal x3964=x3954;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3963)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3963)));
IkReal gconst112=(x3962*x3964);
IkReal gconst113=((1.0)*r00*x3964);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3966=((-1.0)*r01);
CheckValue<IkReal> x3969 = IKatan2WithCheck(IkReal(x3966),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3969.valid){
continue;
}
IkReal x3967=((1.0)*(x3969.value));
IkReal x3968=x3954;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3967)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3967)));
IkReal gconst112=(x3966*x3968);
IkReal gconst113=((1.0)*r00*x3968);
IkReal x3970=r02*r02;
IkReal x3971=(r12*sj0);
IkReal x3972=((1.0)*cj0);
IkReal x3973=x3954;
j4eval[0]=((IKabs(((((-1.0)*r02*x3972))+(((-1.0)*x3971)))))+(IKabs((((r02*x3971*x3973))+(((-1.0)*x3972*x3973))+((cj0*x3970*x3973))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3974=((1.0)*sj0);
IkReal x3975=((1.0)*gconst112);
CheckValue<IkReal> x3976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3975))+(((-1.0)*gconst113*r21)))),-1);
if(!x3976.valid){
continue;
}
CheckValue<IkReal> x3977 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3974))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3975))+(((-1.0)*gconst112*r11*x3974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3976.value)))+(x3977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3978=IKsin(j4);
IkReal x3979=IKcos(j4);
IkReal x3980=(gconst113*r20);
IkReal x3981=(gconst112*r21);
IkReal x3982=((1.0)*cj2);
IkReal x3983=(gconst113*r00);
IkReal x3984=(gconst113*r10);
IkReal x3985=((1.0)*sj0);
IkReal x3986=(cj1*sj2);
IkReal x3987=((1.0)*x3979);
IkReal x3988=((1.0)*x3978);
IkReal x3989=(gconst112*x3979);
IkReal x3990=(gconst112*x3978);
evalcond[0]=((((-1.0)*r22*x3987))+((x3978*x3981))+(((-1.0)*x3980*x3988)));
evalcond[1]=((((-1.0)*r12*x3987))+cj0+(((-1.0)*x3984*x3988))+((r11*x3990)));
evalcond[2]=((((-1.0)*x3983*x3988))+((r01*x3990))+(((-1.0)*x3985))+(((-1.0)*r02*x3987)));
evalcond[3]=(((sj1*sj2))+((r22*x3978))+((x3979*x3981))+(((-1.0)*cj1*x3982))+(((-1.0)*x3980*x3987)));
evalcond[4]=((((-1.0)*cj0*sj1*x3982))+((r02*x3978))+((r01*x3989))+(((-1.0)*cj0*x3986))+(((-1.0)*x3983*x3987)));
evalcond[5]=(((r11*x3989))+(((-1.0)*x3984*x3987))+(((-1.0)*x3985*x3986))+((r12*x3978))+(((-1.0)*sj0*sj1*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3991=((1.0)*gconst113);
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3991))+(((-1.0)*gconst112*r10)))),-1);
if(!x3992.valid){
continue;
}
CheckValue<IkReal> x3993 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3992.value)))+(x3993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3994=IKsin(j4);
IkReal x3995=IKcos(j4);
IkReal x3996=(gconst113*r20);
IkReal x3997=(gconst112*r21);
IkReal x3998=((1.0)*cj2);
IkReal x3999=(gconst113*r00);
IkReal x4000=(gconst113*r10);
IkReal x4001=((1.0)*sj0);
IkReal x4002=(cj1*sj2);
IkReal x4003=((1.0)*x3995);
IkReal x4004=((1.0)*x3994);
IkReal x4005=(gconst112*x3995);
IkReal x4006=(gconst112*x3994);
evalcond[0]=(((x3994*x3997))+(((-1.0)*r22*x4003))+(((-1.0)*x3996*x4004)));
evalcond[1]=(cj0+(((-1.0)*x4000*x4004))+(((-1.0)*r12*x4003))+((r11*x4006)));
evalcond[2]=((((-1.0)*x3999*x4004))+(((-1.0)*r02*x4003))+(((-1.0)*x4001))+((r01*x4006)));
evalcond[3]=(((x3995*x3997))+((sj1*sj2))+((r22*x3994))+(((-1.0)*x3996*x4003))+(((-1.0)*cj1*x3998)));
evalcond[4]=((((-1.0)*x3999*x4003))+(((-1.0)*cj0*x4002))+((r01*x4005))+(((-1.0)*cj0*sj1*x3998))+((r02*x3994)));
evalcond[5]=((((-1.0)*x4001*x4002))+(((-1.0)*x4000*x4003))+((r12*x3994))+(((-1.0)*sj0*sj1*x3998))+((r11*x4005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4007=((1.0)*gconst113);
CheckValue<IkReal> x4008 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4007))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4008.valid){
continue;
}
CheckValue<IkReal> x4009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4007))+(((-1.0)*gconst112*r00)))),-1);
if(!x4009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4008.value)+(((1.5707963267949)*(x4009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4010=IKsin(j4);
IkReal x4011=IKcos(j4);
IkReal x4012=(gconst113*r20);
IkReal x4013=(gconst112*r21);
IkReal x4014=((1.0)*cj2);
IkReal x4015=(gconst113*r00);
IkReal x4016=(gconst113*r10);
IkReal x4017=((1.0)*sj0);
IkReal x4018=(cj1*sj2);
IkReal x4019=((1.0)*x4011);
IkReal x4020=((1.0)*x4010);
IkReal x4021=(gconst112*x4011);
IkReal x4022=(gconst112*x4010);
evalcond[0]=(((x4010*x4013))+(((-1.0)*r22*x4019))+(((-1.0)*x4012*x4020)));
evalcond[1]=((((-1.0)*r12*x4019))+cj0+(((-1.0)*x4016*x4020))+((r11*x4022)));
evalcond[2]=(((r01*x4022))+(((-1.0)*r02*x4019))+(((-1.0)*x4017))+(((-1.0)*x4015*x4020)));
evalcond[3]=((((-1.0)*x4012*x4019))+(((-1.0)*cj1*x4014))+((sj1*sj2))+((x4011*x4013))+((r22*x4010)));
evalcond[4]=(((r02*x4010))+(((-1.0)*cj0*x4018))+(((-1.0)*cj0*sj1*x4014))+((r01*x4021))+(((-1.0)*x4015*x4019)));
evalcond[5]=((((-1.0)*sj0*sj1*x4014))+((r12*x4010))+(((-1.0)*x4017*x4018))+((r11*x4021))+(((-1.0)*x4016*x4019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4023=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4023;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4024=((1.0)*cj5);
IkReal x4025=((((-1.0)*r11*x4024))+(((-1.0)*r10*sj5)));
j4eval[0]=x4025;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4024)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4026=cj5*cj5;
IkReal x4027=r01*r01;
IkReal x4028=(cj5*r00);
IkReal x4029=(r01*sj5);
IkReal x4030=(((x4026*(r00*r00)))+(((-1.0)*x4026*x4027))+x4027+(r02*r02)+(((-2.0)*x4028*x4029)));
j4eval[0]=x4030;
j4eval[1]=IKsign(x4030);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4028))+x4029))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4031=cj5*cj5;
IkReal x4032=r01*r01;
IkReal x4033=(r01*sj5);
IkReal x4034=(cj5*r00);
CheckValue<IkReal> x4035=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4033*x4034))+(((-1.0)*x4031*x4032))+x4032+(r02*r02)+((x4031*(r00*r00))))),-1);
if(!x4035.valid){
continue;
}
CheckValue<IkReal> x4036 = IKatan2WithCheck(IkReal((x4033+(((-1.0)*x4034)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4035.value)))+(x4036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4037=IKcos(j4);
IkReal x4038=IKsin(j4);
IkReal x4039=(cj5*r00);
IkReal x4040=(cj5*r10);
IkReal x4041=(r21*sj5);
IkReal x4042=((1.0)*cj2);
IkReal x4043=(cj5*r20);
IkReal x4044=((1.0)*x4037);
IkReal x4045=((1.0)*x4038);
IkReal x4046=(sj5*x4038);
IkReal x4047=(sj5*x4037);
evalcond[0]=((((-1.0)*x4039*x4044))+((r02*x4038))+((r01*x4047)));
evalcond[1]=((((-1.0)*x4043*x4045))+((x4038*x4041))+(((-1.0)*r22*x4044)));
evalcond[2]=((((-1.0)*r12*x4044))+((r11*x4046))+(((-1.0)*x4040*x4045)));
evalcond[3]=((-1.0)+(((-1.0)*x4039*x4045))+(((-1.0)*r02*x4044))+((r01*x4046)));
evalcond[4]=((((-1.0)*x4043*x4044))+((x4037*x4041))+((sj1*sj2))+(((-1.0)*cj1*x4042))+((r22*x4038)));
evalcond[5]=((((-1.0)*sj1*x4042))+(((-1.0)*cj1*sj2))+((r11*x4047))+(((-1.0)*x4040*x4044))+((r12*x4038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4048=((1.0)*cj5);
CheckValue<IkReal> x4049 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4048))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4049.valid){
continue;
}
CheckValue<IkReal> x4050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4048)))),-1);
if(!x4050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4049.value)+(((1.5707963267949)*(x4050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4051=IKcos(j4);
IkReal x4052=IKsin(j4);
IkReal x4053=(cj5*r00);
IkReal x4054=(cj5*r10);
IkReal x4055=(r21*sj5);
IkReal x4056=((1.0)*cj2);
IkReal x4057=(cj5*r20);
IkReal x4058=((1.0)*x4051);
IkReal x4059=((1.0)*x4052);
IkReal x4060=(sj5*x4052);
IkReal x4061=(sj5*x4051);
evalcond[0]=(((r02*x4052))+(((-1.0)*x4053*x4058))+((r01*x4061)));
evalcond[1]=((((-1.0)*x4057*x4059))+(((-1.0)*r22*x4058))+((x4052*x4055)));
evalcond[2]=((((-1.0)*r12*x4058))+((r11*x4060))+(((-1.0)*x4054*x4059)));
evalcond[3]=((-1.0)+(((-1.0)*x4053*x4059))+(((-1.0)*r02*x4058))+((r01*x4060)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4057*x4058))+((x4051*x4055))+(((-1.0)*cj1*x4056))+((r22*x4052)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4061))+((r12*x4052))+(((-1.0)*x4054*x4058))+(((-1.0)*sj1*x4056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4062=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4062.valid){
continue;
}
CheckValue<IkReal> x4063 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4062.value)))+(x4063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4064=IKcos(j4);
IkReal x4065=IKsin(j4);
IkReal x4066=(cj5*r00);
IkReal x4067=(cj5*r10);
IkReal x4068=(r21*sj5);
IkReal x4069=((1.0)*cj2);
IkReal x4070=(cj5*r20);
IkReal x4071=((1.0)*x4064);
IkReal x4072=((1.0)*x4065);
IkReal x4073=(sj5*x4065);
IkReal x4074=(sj5*x4064);
evalcond[0]=(((r02*x4065))+((r01*x4074))+(((-1.0)*x4066*x4071)));
evalcond[1]=((((-1.0)*x4070*x4072))+(((-1.0)*r22*x4071))+((x4065*x4068)));
evalcond[2]=((((-1.0)*x4067*x4072))+(((-1.0)*r12*x4071))+((r11*x4073)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4071))+((r01*x4073))+(((-1.0)*x4066*x4072)));
evalcond[4]=((((-1.0)*x4070*x4071))+((x4064*x4068))+((sj1*sj2))+(((-1.0)*cj1*x4069))+((r22*x4065)));
evalcond[5]=((((-1.0)*x4067*x4071))+(((-1.0)*cj1*sj2))+((r12*x4065))+((r11*x4074))+(((-1.0)*sj1*x4069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4075=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4075;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4076=((1.0)*cj5);
IkReal x4077=((((-1.0)*r21*x4076))+(((-1.0)*r20*sj5)));
j4eval[0]=x4077;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4076))+((r11*sj5))))));
j4eval[2]=IKsign(x4077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4078=cj5*cj5;
IkReal x4079=r01*r01;
IkReal x4080=(r01*sj5);
IkReal x4081=(cj5*r00);
IkReal x4082=((((-1.0)*x4078*(r00*r00)))+((x4078*x4079))+(((-1.0)*x4079))+(((-1.0)*(r02*r02)))+(((2.0)*x4080*x4081)));
j4eval[0]=x4082;
j4eval[1]=IKsign(x4082);
j4eval[2]=((IKabs(r02))+(IKabs((x4080+(((-1.0)*x4081))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4083=cj5*cj5;
IkReal x4084=r01*r01;
IkReal x4085=(r01*sj5);
IkReal x4086=(cj5*r00);
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(IKsign((((x4083*x4084))+(((-1.0)*x4083*(r00*r00)))+(((2.0)*x4085*x4086))+(((-1.0)*(r02*r02)))+(((-1.0)*x4084)))),-1);
if(!x4087.valid){
continue;
}
CheckValue<IkReal> x4088 = IKatan2WithCheck(IkReal((x4085+(((-1.0)*x4086)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4087.value)))+(x4088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4089=IKcos(j4);
IkReal x4090=IKsin(j4);
IkReal x4091=(cj5*r00);
IkReal x4092=(cj5*r10);
IkReal x4093=(r21*sj5);
IkReal x4094=(cj5*r20);
IkReal x4095=((1.0)*x4089);
IkReal x4096=((1.0)*x4090);
IkReal x4097=(sj5*x4090);
IkReal x4098=(sj5*x4089);
evalcond[0]=(((r01*x4098))+((r02*x4090))+(((-1.0)*x4091*x4095)));
evalcond[1]=((((-1.0)*r22*x4095))+((x4090*x4093))+(((-1.0)*x4094*x4096)));
evalcond[2]=((((-1.0)*r12*x4095))+(((-1.0)*x4092*x4096))+((r11*x4097)));
evalcond[3]=((1.0)+((r01*x4097))+(((-1.0)*r02*x4095))+(((-1.0)*x4091*x4096)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4092*x4095))+((r11*x4098))+((r12*x4090)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4090))+((x4089*x4093))+(((-1.0)*x4094*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4099=((1.0)*cj5);
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4099))+(((-1.0)*r20*sj5)))),-1);
if(!x4100.valid){
continue;
}
CheckValue<IkReal> x4101 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4099))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4100.value)))+(x4101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4102=IKcos(j4);
IkReal x4103=IKsin(j4);
IkReal x4104=(cj5*r00);
IkReal x4105=(cj5*r10);
IkReal x4106=(r21*sj5);
IkReal x4107=(cj5*r20);
IkReal x4108=((1.0)*x4102);
IkReal x4109=((1.0)*x4103);
IkReal x4110=(sj5*x4103);
IkReal x4111=(sj5*x4102);
evalcond[0]=((((-1.0)*x4104*x4108))+((r02*x4103))+((r01*x4111)));
evalcond[1]=((((-1.0)*r22*x4108))+((x4103*x4106))+(((-1.0)*x4107*x4109)));
evalcond[2]=((((-1.0)*x4105*x4109))+(((-1.0)*r12*x4108))+((r11*x4110)));
evalcond[3]=((1.0)+(((-1.0)*x4104*x4109))+((r01*x4110))+(((-1.0)*r02*x4108)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4105*x4108))+((cj1*sj2))+((r12*x4103))+((r11*x4111)));
evalcond[5]=(((r22*x4103))+(((-1.0)*x4107*x4108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4102*x4106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4112 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4112.valid){
continue;
}
CheckValue<IkReal> x4113=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4112.value)+(((1.5707963267949)*(x4113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4114=IKcos(j4);
IkReal x4115=IKsin(j4);
IkReal x4116=(cj5*r00);
IkReal x4117=(cj5*r10);
IkReal x4118=(r21*sj5);
IkReal x4119=(cj5*r20);
IkReal x4120=((1.0)*x4114);
IkReal x4121=((1.0)*x4115);
IkReal x4122=(sj5*x4115);
IkReal x4123=(sj5*x4114);
evalcond[0]=(((r02*x4115))+(((-1.0)*x4116*x4120))+((r01*x4123)));
evalcond[1]=((((-1.0)*r22*x4120))+(((-1.0)*x4119*x4121))+((x4115*x4118)));
evalcond[2]=((((-1.0)*r12*x4120))+((r11*x4122))+(((-1.0)*x4117*x4121)));
evalcond[3]=((1.0)+(((-1.0)*x4116*x4121))+(((-1.0)*r02*x4120))+((r01*x4122)));
evalcond[4]=(((r12*x4115))+((cj2*sj1))+((cj1*sj2))+((r11*x4123))+(((-1.0)*x4117*x4120)));
evalcond[5]=((((-1.0)*x4119*x4120))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4114*x4118))+((r22*x4115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4124=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4124);
rxp1_1=(px*r21);
rxp1_2=(r11*x4124);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4125=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4125);
rxp1_1=(px*r21);
rxp1_2=(r11*x4125);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4126=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4126);
rxp1_1=(px*r21);
rxp1_2=(r11*x4126);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4129=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4129.valid){
continue;
}
IkReal x4127=x4129.value;
IkReal x4128=(sj0*x4127);
cj4array[0]=(((cj1*sj2*x4128))+((cj2*sj1*x4128)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4130=IKsin(j4);
IkReal x4131=IKcos(j4);
IkReal x4132=(r21*sj5);
IkReal x4133=((1.0)*cj5*r20);
evalcond[0]=(r02*x4130);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4131)));
evalcond[2]=((((-1.0)*x4130*x4133))+((x4130*x4132)));
evalcond[3]=((((-1.0)*cj5*r10*x4130))+((r11*sj5*x4130)));
evalcond[4]=((((-1.0)*x4131*x4133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4131*x4132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4135=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4135.valid){
continue;
}
IkReal x4134=x4135.value;
cj4array[0]=(((cj1*cj2*x4134))+(((-1.0)*sj1*sj2*x4134)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4136=IKsin(j4);
IkReal x4137=IKcos(j4);
IkReal x4138=((1.0)*sj0);
IkReal x4139=((1.0)*cj5);
IkReal x4140=(sj5*x4136);
evalcond[0]=(r02*x4136);
evalcond[1]=((((-1.0)*x4138))+(((-1.0)*r02*x4137)));
evalcond[2]=(((r21*x4140))+(((-1.0)*r20*x4136*x4139)));
evalcond[3]=(((r11*x4140))+(((-1.0)*r10*x4136*x4139)));
evalcond[4]=((((-1.0)*cj2*sj1*x4138))+(((-1.0)*r10*x4137*x4139))+((r11*sj5*x4137))+(((-1.0)*cj1*sj2*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4141=IKPowWithIntegerCheck(r02,-1);
if(!x4141.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4141.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4142=IKsin(j4);
IkReal x4143=IKcos(j4);
IkReal x4144=((1.0)*cj1);
IkReal x4145=(r21*sj5);
IkReal x4146=((1.0)*cj5);
IkReal x4147=(r11*sj5);
evalcond[0]=(r02*x4142);
evalcond[1]=(((x4142*x4145))+(((-1.0)*r20*x4142*x4146)));
evalcond[2]=(((x4142*x4147))+(((-1.0)*r10*x4142*x4146)));
evalcond[3]=((((-1.0)*r20*x4143*x4146))+((x4143*x4145))+((sj1*sj2))+(((-1.0)*cj2*x4144)));
evalcond[4]=(((x4143*x4147))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4144))+(((-1.0)*r10*x4143*x4146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4148=((1.0)*sj0);
IkReal x4149=((1.0)*cj0);
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4149))+(((-1.0)*r12*x4148)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4149))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
CheckValue<IkReal> x4151=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4150.value)+(((1.5707963267949)*(x4151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4152=IKsin(j4);
IkReal x4153=IKcos(j4);
IkReal x4154=(cj5*r00);
IkReal x4155=(cj5*r10);
IkReal x4156=(r21*sj5);
IkReal x4157=((1.0)*cj2);
IkReal x4158=((1.0)*sj0);
IkReal x4159=(cj1*sj2);
IkReal x4160=(cj5*r20);
IkReal x4161=((1.0)*x4153);
IkReal x4162=((1.0)*x4152);
IkReal x4163=(sj5*x4152);
IkReal x4164=(sj5*x4153);
evalcond[0]=(((x4152*x4156))+(((-1.0)*x4160*x4162))+(((-1.0)*r22*x4161)));
evalcond[1]=(cj0+(((-1.0)*r12*x4161))+(((-1.0)*x4155*x4162))+((r11*x4163)));
evalcond[2]=(((r01*x4163))+(((-1.0)*r02*x4161))+(((-1.0)*x4154*x4162))+(((-1.0)*x4158)));
evalcond[3]=(((x4153*x4156))+(((-1.0)*x4160*x4161))+((r22*x4152))+((sj1*sj2))+(((-1.0)*cj1*x4157)));
evalcond[4]=(((r01*x4164))+((r02*x4152))+(((-1.0)*cj0*sj1*x4157))+(((-1.0)*x4154*x4161))+(((-1.0)*cj0*x4159)));
evalcond[5]=(((r12*x4152))+(((-1.0)*x4155*x4161))+(((-1.0)*sj0*sj1*x4157))+((r11*x4164))+(((-1.0)*x4158*x4159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4165=((1.0)*cj5);
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4165))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
CheckValue<IkReal> x4167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4165)))),-1);
if(!x4167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4166.value)+(((1.5707963267949)*(x4167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4168=IKsin(j4);
IkReal x4169=IKcos(j4);
IkReal x4170=(cj5*r00);
IkReal x4171=(cj5*r10);
IkReal x4172=(r21*sj5);
IkReal x4173=((1.0)*cj2);
IkReal x4174=((1.0)*sj0);
IkReal x4175=(cj1*sj2);
IkReal x4176=(cj5*r20);
IkReal x4177=((1.0)*x4169);
IkReal x4178=((1.0)*x4168);
IkReal x4179=(sj5*x4168);
IkReal x4180=(sj5*x4169);
evalcond[0]=((((-1.0)*x4176*x4178))+(((-1.0)*r22*x4177))+((x4168*x4172)));
evalcond[1]=(((r11*x4179))+(((-1.0)*x4171*x4178))+cj0+(((-1.0)*r12*x4177)));
evalcond[2]=((((-1.0)*x4174))+(((-1.0)*x4170*x4178))+((r01*x4179))+(((-1.0)*r02*x4177)));
evalcond[3]=(((r22*x4168))+(((-1.0)*cj1*x4173))+((x4169*x4172))+(((-1.0)*x4176*x4177))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4170*x4177))+(((-1.0)*cj0*x4175))+((r01*x4180))+((r02*x4168))+(((-1.0)*cj0*sj1*x4173)));
evalcond[5]=((((-1.0)*x4171*x4177))+((r11*x4180))+(((-1.0)*x4174*x4175))+(((-1.0)*sj0*sj1*x4173))+((r12*x4168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4181=((1.0)*cj5);
CheckValue<IkReal> x4182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4181))+(((-1.0)*r00*sj5)))),-1);
if(!x4182.valid){
continue;
}
CheckValue<IkReal> x4183 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4181))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4182.value)))+(x4183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4184=IKsin(j4);
IkReal x4185=IKcos(j4);
IkReal x4186=(cj5*r00);
IkReal x4187=(cj5*r10);
IkReal x4188=(r21*sj5);
IkReal x4189=((1.0)*cj2);
IkReal x4190=((1.0)*sj0);
IkReal x4191=(cj1*sj2);
IkReal x4192=(cj5*r20);
IkReal x4193=((1.0)*x4185);
IkReal x4194=((1.0)*x4184);
IkReal x4195=(sj5*x4184);
IkReal x4196=(sj5*x4185);
evalcond[0]=((((-1.0)*r22*x4193))+((x4184*x4188))+(((-1.0)*x4192*x4194)));
evalcond[1]=((((-1.0)*r12*x4193))+((r11*x4195))+cj0+(((-1.0)*x4187*x4194)));
evalcond[2]=((((-1.0)*x4190))+(((-1.0)*x4186*x4194))+(((-1.0)*r02*x4193))+((r01*x4195)));
evalcond[3]=((((-1.0)*cj1*x4189))+((sj1*sj2))+((r22*x4184))+((x4185*x4188))+(((-1.0)*x4192*x4193)));
evalcond[4]=(((r02*x4184))+(((-1.0)*cj0*sj1*x4189))+(((-1.0)*cj0*x4191))+(((-1.0)*x4186*x4193))+((r01*x4196)));
evalcond[5]=(((r12*x4184))+((r11*x4196))+(((-1.0)*x4187*x4193))+(((-1.0)*x4190*x4191))+(((-1.0)*sj0*sj1*x4189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4197=r21*r21;
IkReal x4198=cj5*cj5;
IkReal x4199=(sj1*sj2);
IkReal x4200=(r21*sj5);
IkReal x4201=(cj1*cj2);
IkReal x4202=(cj5*r20);
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal((((r22*x4199))+(((-1.0)*r22*x4201)))),IkReal((((x4199*x4200))+(((-1.0)*x4199*x4202))+((x4201*x4202))+(((-1.0)*x4200*x4201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
CheckValue<IkReal> x4204=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4197))+((x4197*x4198))+(((-1.0)*(r22*r22)))+(((-1.0)*x4198*(r20*r20)))+(((2.0)*x4200*x4202)))),-1);
if(!x4204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4203.value)+(((1.5707963267949)*(x4204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4205=IKsin(j4);
IkReal x4206=IKcos(j4);
IkReal x4207=(r21*sj5);
IkReal x4208=(cj5*r20);
IkReal x4209=((1.0)*x4206);
evalcond[0]=(((x4205*x4207))+(((-1.0)*r22*x4209))+(((-1.0)*x4205*x4208)));
evalcond[1]=(((r22*x4205))+(((-1.0)*x4208*x4209))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4206*x4207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4210=(cj5*sj4);
IkReal x4211=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4210))+((r01*x4211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4211))+((r10*x4210))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4210))+((r01*x4211))))+IKsqr(((((-1.0)*r11*x4211))+((r10*x4210))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4210))+((r01*x4211))), ((((-1.0)*r11*x4211))+((r10*x4210))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4212=IKcos(j0);
IkReal x4213=IKsin(j0);
IkReal x4214=((0.21325)*cj2);
IkReal x4215=((1.0)*sj2);
IkReal x4216=(r11*sj5);
IkReal x4217=(r00*sj5);
IkReal x4218=(cj5*r11);
IkReal x4219=((0.21325)*sj2);
IkReal x4220=((1.0)*r10);
IkReal x4221=((1.0)*cj2);
IkReal x4222=(cj5*r01);
IkReal x4223=(cj5*sj4);
IkReal x4224=((1.0)*cj4);
IkReal x4225=(r01*sj5);
IkReal x4226=(cj1*x4213);
IkReal x4227=(cj1*x4212);
IkReal x4228=(cj5*x4224);
IkReal x4229=(sj1*x4212);
IkReal x4230=(sj1*x4213);
evalcond[0]=((((-1.0)*r12*x4224))+x4212+(((-1.0)*x4220*x4223))+((sj4*x4216)));
evalcond[1]=(((sj4*x4225))+(((-1.0)*r02*x4224))+(((-1.0)*x4213))+(((-1.0)*r00*x4223)));
evalcond[2]=((((-1.0)*x4222))+(((-1.0)*x4221*x4227))+((sj2*x4229))+(((-1.0)*x4217)));
evalcond[3]=((((-1.0)*sj5*x4220))+(((-1.0)*x4221*x4226))+((sj2*x4230))+(((-1.0)*x4218)));
evalcond[4]=((((-1.0)*x4215*x4227))+(((-1.0)*x4221*x4229))+((r02*sj4))+(((-1.0)*r00*x4228))+((cj4*x4225)));
evalcond[5]=(((cj4*x4216))+(((-1.0)*x4215*x4226))+(((-1.0)*x4221*x4230))+(((-1.0)*cj4*cj5*x4220))+((r12*sj4)));
evalcond[6]=((((-0.08535)*x4222))+(((-0.11235)*x4213))+(((-1.0)*px))+(((0.24365)*x4227))+(((-1.0)*x4219*x4229))+(((-0.08535)*x4217))+((x4214*x4227)));
evalcond[7]=((((0.11235)*x4212))+(((-1.0)*py))+(((-0.08535)*r10*sj5))+(((-1.0)*x4219*x4230))+(((0.24365)*x4226))+(((-0.08535)*x4218))+((x4214*x4226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4231 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4231.valid){
continue;
}
CheckValue<IkReal> x4232=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4232.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4231.value)+(((1.5707963267949)*(x4232.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4233=IKcos(j0);
IkReal x4234=IKsin(j0);
IkReal x4235=(cj1*cj2);
IkReal x4236=((1.0)*cj5);
IkReal x4237=(sj1*sj2);
IkReal x4238=(r00*sj5);
IkReal x4239=(r10*sj5);
IkReal x4240=((0.24365)*cj1);
IkReal x4241=((0.08535)*cj5);
IkReal x4242=((0.21325)*x4234);
IkReal x4243=((0.21325)*x4233);
evalcond[0]=((((-1.0)*x4238))+(((-1.0)*x4233*x4235))+(((-1.0)*r01*x4236))+((x4233*x4237)));
evalcond[1]=((((-1.0)*x4234*x4235))+(((-1.0)*r11*x4236))+(((-1.0)*x4239))+((x4234*x4237)));
evalcond[2]=((((-1.0)*r01*x4241))+(((-0.11235)*x4234))+(((-0.08535)*x4238))+((x4235*x4243))+(((-1.0)*px))+(((-1.0)*x4237*x4243))+((x4233*x4240)));
evalcond[3]=((((-0.08535)*x4239))+((x4235*x4242))+(((0.11235)*x4233))+(((-1.0)*py))+(((-1.0)*r11*x4241))+(((-1.0)*x4237*x4242))+((x4234*x4240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4244=((1.0)*cj5);
IkReal x4245=((((-1.0)*r01*x4244))+(((-1.0)*r00*sj5)));
j4eval[0]=x4245;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4244)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4246=((1.0)*cj5);
IkReal x4247=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4246)));
j4eval[0]=x4247;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4246))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4248=((1.0)*sj0);
IkReal x4249=((1.0)*cj0);
IkReal x4250=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4250;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x4249))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4248)))))+(IKabs(((((-1.0)*r12*x4248))+(((-1.0)*r02*x4249))))));
j4eval[2]=IKsign(x4250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4251=((-1.0)*r20);
IkReal x4253 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4253)==0){
continue;
}
IkReal x4252=pow(x4253,-0.5);
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4251),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4254.value));
IkReal gconst97=(r21*x4252);
IkReal gconst98=(x4251*x4252);
CheckValue<IkReal> x4255 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4255.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4255.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4256=((-1.0)*r20);
IkReal x4257=x4252;
CheckValue<IkReal> x4259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4256),IKFAST_ATAN2_MAGTHRESH);
if(!x4259.valid){
continue;
}
IkReal x4258=((-1.0)*(x4259.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4258;
IkReal gconst96=x4258;
IkReal gconst97=(r21*x4257);
IkReal gconst98=(x4256*x4257);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4260=((-1.0)*r20);
IkReal x4261=x4252;
CheckValue<IkReal> x4263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4260),IKFAST_ATAN2_MAGTHRESH);
if(!x4263.valid){
continue;
}
IkReal x4262=((-1.0)*(x4263.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4262;
IkReal gconst96=x4262;
IkReal gconst97=(r21*x4261);
IkReal gconst98=(x4260*x4261);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4264=((-1.0)*r20);
IkReal x4265=x4252;
CheckValue<IkReal> x4267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4264),IKFAST_ATAN2_MAGTHRESH);
if(!x4267.valid){
continue;
}
IkReal x4266=((-1.0)*(x4267.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4266;
IkReal gconst96=x4266;
IkReal gconst97=(r21*x4265);
IkReal gconst98=(x4264*x4265);
IkReal x4268=((1.0)*(r22*r22));
CheckValue<IkReal> x4272=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4268))),-1);
if(!x4272.valid){
continue;
}
IkReal x4269=x4272.value;
IkReal x4270=((1.0)*x4269);
IkReal x4271=((((-1.0)*x4270*(r20*r20*r20*r20)))+(((-1.0)*x4268))+(((-1.0)*x4270*(r21*r21*r21*r21)))+(((-2.0)*x4269*(r20*r20)*(r21*r21))));
j4eval[0]=x4271;
j4eval[1]=IKsign(x4271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4273=(cj1*cj2);
IkReal x4274=(gconst98*r20);
IkReal x4275=(sj1*sj2);
IkReal x4276=(gconst97*r21);
CheckValue<IkReal> x4277 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4273))+((r22*x4275)))),IkReal(((((-1.0)*x4273*x4276))+((x4275*x4276))+(((-1.0)*x4274*x4275))+((x4273*x4274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4277.valid){
continue;
}
CheckValue<IkReal> x4278=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4274*x4274)))+(((-1.0)*(r22*r22)))+(((2.0)*x4274*x4276))+(((-1.0)*(x4276*x4276))))),-1);
if(!x4278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4277.value)+(((1.5707963267949)*(x4278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4279=IKsin(j4);
IkReal x4280=IKcos(j4);
IkReal x4281=(gconst98*r10);
IkReal x4282=(gconst97*r21);
IkReal x4283=(gconst98*r20);
IkReal x4284=((1.0)*cj2);
IkReal x4285=((1.0)*sj0);
IkReal x4286=(gconst98*r00);
IkReal x4287=(cj1*sj2);
IkReal x4288=((1.0)*x4280);
IkReal x4289=((1.0)*x4279);
IkReal x4290=(gconst97*x4279);
IkReal x4291=(gconst97*x4280);
evalcond[0]=((((-1.0)*x4283*x4289))+((x4279*x4282))+(((-1.0)*r22*x4288)));
evalcond[1]=(cj0+(((-1.0)*r12*x4288))+((r11*x4290))+(((-1.0)*x4281*x4289)));
evalcond[2]=((((-1.0)*x4285))+(((-1.0)*x4286*x4289))+((r01*x4290))+(((-1.0)*r02*x4288)));
evalcond[3]=(((x4280*x4282))+(((-1.0)*x4283*x4288))+((sj1*sj2))+(((-1.0)*cj1*x4284))+((r22*x4279)));
evalcond[4]=((((-1.0)*x4286*x4288))+((r02*x4279))+(((-1.0)*cj0*x4287))+((r01*x4291))+(((-1.0)*cj0*sj1*x4284)));
evalcond[5]=(((r12*x4279))+(((-1.0)*sj0*sj1*x4284))+(((-1.0)*x4285*x4287))+((r11*x4291))+(((-1.0)*x4281*x4288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4292=((1.0)*gconst98);
CheckValue<IkReal> x4293 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4293.valid){
continue;
}
CheckValue<IkReal> x4294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4292))+(((-1.0)*gconst97*r10)))),-1);
if(!x4294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4293.value)+(((1.5707963267949)*(x4294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4295=IKsin(j4);
IkReal x4296=IKcos(j4);
IkReal x4297=(gconst98*r10);
IkReal x4298=(gconst97*r21);
IkReal x4299=(gconst98*r20);
IkReal x4300=((1.0)*cj2);
IkReal x4301=((1.0)*sj0);
IkReal x4302=(gconst98*r00);
IkReal x4303=(cj1*sj2);
IkReal x4304=((1.0)*x4296);
IkReal x4305=((1.0)*x4295);
IkReal x4306=(gconst97*x4295);
IkReal x4307=(gconst97*x4296);
evalcond[0]=((((-1.0)*r22*x4304))+((x4295*x4298))+(((-1.0)*x4299*x4305)));
evalcond[1]=((((-1.0)*r12*x4304))+((r11*x4306))+cj0+(((-1.0)*x4297*x4305)));
evalcond[2]=(((r01*x4306))+(((-1.0)*r02*x4304))+(((-1.0)*x4301))+(((-1.0)*x4302*x4305)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4300))+((x4296*x4298))+((r22*x4295))+(((-1.0)*x4299*x4304)));
evalcond[4]=((((-1.0)*cj0*sj1*x4300))+(((-1.0)*cj0*x4303))+((r01*x4307))+(((-1.0)*x4302*x4304))+((r02*x4295)));
evalcond[5]=(((r11*x4307))+(((-1.0)*sj0*sj1*x4300))+(((-1.0)*x4297*x4304))+((r12*x4295))+(((-1.0)*x4301*x4303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4308=((1.0)*gconst98);
CheckValue<IkReal> x4309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4308))+(((-1.0)*gconst97*r00)))),-1);
if(!x4309.valid){
continue;
}
CheckValue<IkReal> x4310 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4309.value)))+(x4310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4311=IKsin(j4);
IkReal x4312=IKcos(j4);
IkReal x4313=(gconst98*r10);
IkReal x4314=(gconst97*r21);
IkReal x4315=(gconst98*r20);
IkReal x4316=((1.0)*cj2);
IkReal x4317=((1.0)*sj0);
IkReal x4318=(gconst98*r00);
IkReal x4319=(cj1*sj2);
IkReal x4320=((1.0)*x4312);
IkReal x4321=((1.0)*x4311);
IkReal x4322=(gconst97*x4311);
IkReal x4323=(gconst97*x4312);
evalcond[0]=(((x4311*x4314))+(((-1.0)*x4315*x4321))+(((-1.0)*r22*x4320)));
evalcond[1]=(cj0+(((-1.0)*x4313*x4321))+(((-1.0)*r12*x4320))+((r11*x4322)));
evalcond[2]=((((-1.0)*r02*x4320))+(((-1.0)*x4317))+((r01*x4322))+(((-1.0)*x4318*x4321)));
evalcond[3]=((((-1.0)*cj1*x4316))+(((-1.0)*x4315*x4320))+((sj1*sj2))+((r22*x4311))+((x4312*x4314)));
evalcond[4]=((((-1.0)*cj0*x4319))+(((-1.0)*cj0*sj1*x4316))+((r02*x4311))+((r01*x4323))+(((-1.0)*x4318*x4320)));
evalcond[5]=((((-1.0)*x4317*x4319))+((r12*x4311))+(((-1.0)*x4313*x4320))+(((-1.0)*sj0*sj1*x4316))+((r11*x4323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4324=((-1.0)*r21);
IkReal x4326 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4326)==0){
continue;
}
IkReal x4325=pow(x4326,-0.5);
CheckValue<IkReal> x4327 = IKatan2WithCheck(IkReal(x4324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4327.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4327.value))));
IkReal gconst100=(x4324*x4325);
IkReal gconst101=((1.0)*r20*x4325);
CheckValue<IkReal> x4328 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4328.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4328.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4329=((-1.0)*r21);
CheckValue<IkReal> x4332 = IKatan2WithCheck(IkReal(x4329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4332.valid){
continue;
}
IkReal x4330=((1.0)*(x4332.value));
IkReal x4331=x4325;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4330)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4330)));
IkReal gconst100=(x4329*x4331);
IkReal gconst101=((1.0)*r20*x4331);
IkReal x4333=r22*r22;
IkReal x4334=((1.0)*x4333);
CheckValue<IkReal> x4338=IKPowWithIntegerCheck(((-1.0)+x4333),-1);
if(!x4338.valid){
continue;
}
IkReal x4335=x4338.value;
if((((1.0)+(((-1.0)*x4334)))) < -0.00001)
continue;
IkReal x4336=IKsqrt(((1.0)+(((-1.0)*x4334))));
IkReal x4337=(cj0*x4335*x4336);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x4334*x4337))+x4337))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4339=((-1.0)*r21);
CheckValue<IkReal> x4342 = IKatan2WithCheck(IkReal(x4339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4342.valid){
continue;
}
IkReal x4340=((1.0)*(x4342.value));
IkReal x4341=x4325;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4340)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4340)));
IkReal gconst100=(x4339*x4341);
IkReal gconst101=((1.0)*r20*x4341);
IkReal x4343=r22*r22;
IkReal x4344=((1.0)*x4343);
CheckValue<IkReal> x4348=IKPowWithIntegerCheck(((-1.0)+x4343),-1);
if(!x4348.valid){
continue;
}
IkReal x4345=x4348.value;
if((((1.0)+(((-1.0)*x4344)))) < -0.00001)
continue;
IkReal x4346=IKsqrt(((1.0)+(((-1.0)*x4344))));
IkReal x4347=(sj0*x4345*x4346);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4344*x4347))+x4347))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4349=((-1.0)*r21);
CheckValue<IkReal> x4352 = IKatan2WithCheck(IkReal(x4349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4352.valid){
continue;
}
IkReal x4350=((1.0)*(x4352.value));
IkReal x4351=x4325;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4350)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4350)));
IkReal gconst100=(x4349*x4351);
IkReal gconst101=((1.0)*r20*x4351);
IkReal x4353=r22*r22;
IkReal x4354=(r12*sj0);
IkReal x4355=(cj0*r02);
CheckValue<IkReal> x4359=IKPowWithIntegerCheck(((-1.0)+x4353),-1);
if(!x4359.valid){
continue;
}
IkReal x4356=x4359.value;
if((((1.0)+(((-1.0)*x4353)))) < -0.00001)
continue;
IkReal x4357=IKsqrt(((1.0)+(((-1.0)*x4353))));
IkReal x4358=(r22*x4356*x4357);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4355))+(((-1.0)*x4354)))))+(IKabs((((x4354*x4358))+((x4355*x4358))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4360=((1.0)*sj0);
IkReal x4361=((1.0)*gconst100);
CheckValue<IkReal> x4362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4361))+(((-1.0)*gconst101*r21)))),-1);
if(!x4362.valid){
continue;
}
CheckValue<IkReal> x4363 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4360)))),IkReal(((((-1.0)*gconst100*r11*x4360))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x4361))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4362.value)))+(x4363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4364=IKsin(j4);
IkReal x4365=IKcos(j4);
IkReal x4366=(gconst101*r20);
IkReal x4367=(gconst101*r10);
IkReal x4368=((1.0)*cj2);
IkReal x4369=(gconst101*r00);
IkReal x4370=((1.0)*sj0);
IkReal x4371=(cj1*sj2);
IkReal x4372=((1.0)*x4365);
IkReal x4373=((1.0)*x4364);
IkReal x4374=(gconst100*x4364);
IkReal x4375=(gconst100*x4365);
evalcond[0]=((((-1.0)*x4366*x4373))+(((-1.0)*r22*x4372))+((r21*x4374)));
evalcond[1]=(cj0+((r11*x4374))+(((-1.0)*x4367*x4373))+(((-1.0)*r12*x4372)));
evalcond[2]=(((r01*x4374))+(((-1.0)*r02*x4372))+(((-1.0)*x4370))+(((-1.0)*x4369*x4373)));
evalcond[3]=((((-1.0)*x4366*x4372))+(((-1.0)*cj1*x4368))+((sj1*sj2))+((r22*x4364))+((r21*x4375)));
evalcond[4]=((((-1.0)*cj0*x4371))+((r01*x4375))+(((-1.0)*cj0*sj1*x4368))+(((-1.0)*x4369*x4372))+((r02*x4364)));
evalcond[5]=((((-1.0)*x4370*x4371))+((r11*x4375))+((r12*x4364))+(((-1.0)*sj0*sj1*x4368))+(((-1.0)*x4367*x4372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4376=((1.0)*gconst101);
CheckValue<IkReal> x4377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4376)))),-1);
if(!x4377.valid){
continue;
}
CheckValue<IkReal> x4378 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4376))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4377.value)))+(x4378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4379=IKsin(j4);
IkReal x4380=IKcos(j4);
IkReal x4381=(gconst101*r20);
IkReal x4382=(gconst101*r10);
IkReal x4383=((1.0)*cj2);
IkReal x4384=(gconst101*r00);
IkReal x4385=((1.0)*sj0);
IkReal x4386=(cj1*sj2);
IkReal x4387=((1.0)*x4380);
IkReal x4388=((1.0)*x4379);
IkReal x4389=(gconst100*x4379);
IkReal x4390=(gconst100*x4380);
evalcond[0]=((((-1.0)*x4381*x4388))+(((-1.0)*r22*x4387))+((r21*x4389)));
evalcond[1]=((((-1.0)*r12*x4387))+cj0+(((-1.0)*x4382*x4388))+((r11*x4389)));
evalcond[2]=((((-1.0)*r02*x4387))+(((-1.0)*x4384*x4388))+(((-1.0)*x4385))+((r01*x4389)));
evalcond[3]=(((r22*x4379))+(((-1.0)*x4381*x4387))+((sj1*sj2))+((r21*x4390))+(((-1.0)*cj1*x4383)));
evalcond[4]=(((r01*x4390))+((r02*x4379))+(((-1.0)*cj0*sj1*x4383))+(((-1.0)*x4384*x4387))+(((-1.0)*cj0*x4386)));
evalcond[5]=(((r12*x4379))+(((-1.0)*x4382*x4387))+((r11*x4390))+(((-1.0)*x4385*x4386))+(((-1.0)*sj0*sj1*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4391=((1.0)*gconst101);
CheckValue<IkReal> x4392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4391)))),-1);
if(!x4392.valid){
continue;
}
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4392.value)))+(x4393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4394=IKsin(j4);
IkReal x4395=IKcos(j4);
IkReal x4396=(gconst101*r20);
IkReal x4397=(gconst101*r10);
IkReal x4398=((1.0)*cj2);
IkReal x4399=(gconst101*r00);
IkReal x4400=((1.0)*sj0);
IkReal x4401=(cj1*sj2);
IkReal x4402=((1.0)*x4395);
IkReal x4403=((1.0)*x4394);
IkReal x4404=(gconst100*x4394);
IkReal x4405=(gconst100*x4395);
evalcond[0]=(((r21*x4404))+(((-1.0)*x4396*x4403))+(((-1.0)*r22*x4402)));
evalcond[1]=(((r11*x4404))+cj0+(((-1.0)*r12*x4402))+(((-1.0)*x4397*x4403)));
evalcond[2]=(((r01*x4404))+(((-1.0)*r02*x4402))+(((-1.0)*x4399*x4403))+(((-1.0)*x4400)));
evalcond[3]=(((r21*x4405))+((r22*x4394))+(((-1.0)*x4396*x4402))+((sj1*sj2))+(((-1.0)*cj1*x4398)));
evalcond[4]=((((-1.0)*cj0*sj1*x4398))+(((-1.0)*cj0*x4401))+((r02*x4394))+((r01*x4405))+(((-1.0)*x4399*x4402)));
evalcond[5]=((((-1.0)*sj0*sj1*x4398))+((r11*x4405))+(((-1.0)*x4400*x4401))+(((-1.0)*x4397*x4402))+((r12*x4394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4406=((-1.0)*r10);
IkReal x4408 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4408)==0){
continue;
}
IkReal x4407=pow(x4408,-0.5);
CheckValue<IkReal> x4409 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4406),IKFAST_ATAN2_MAGTHRESH);
if(!x4409.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4409.value));
IkReal gconst103=(r11*x4407);
IkReal gconst104=(x4406*x4407);
CheckValue<IkReal> x4410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4410.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4410.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4411=((-1.0)*r10);
IkReal x4412=x4407;
CheckValue<IkReal> x4414 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4411),IKFAST_ATAN2_MAGTHRESH);
if(!x4414.valid){
continue;
}
IkReal x4413=((-1.0)*(x4414.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4413;
IkReal gconst102=x4413;
IkReal gconst103=(r11*x4412);
IkReal gconst104=(x4411*x4412);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4415=((1.0)*sj0);
IkReal x4416=((1.0)*gconst103);
CheckValue<IkReal> x4417 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4415)))),IkReal(((((-1.0)*cj0*r01*x4416))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4415))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4417.valid){
continue;
}
CheckValue<IkReal> x4418=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4416)))),-1);
if(!x4418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4417.value)+(((1.5707963267949)*(x4418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4419=IKsin(j4);
IkReal x4420=IKcos(j4);
IkReal x4421=(gconst103*r11);
IkReal x4422=((1.0)*cj2);
IkReal x4423=((1.0)*sj0);
IkReal x4424=(cj1*sj2);
IkReal x4425=((1.0)*x4420);
IkReal x4426=(gconst103*x4420);
IkReal x4427=(gconst103*x4419);
IkReal x4428=((1.0)*gconst104*x4419);
evalcond[0]=((((-1.0)*r22*x4425))+(((-1.0)*r20*x4428))+((r21*x4427)));
evalcond[1]=(cj0+((x4419*x4421))+(((-1.0)*r12*x4425))+(((-1.0)*r10*x4428)));
evalcond[2]=((((-1.0)*x4423))+((r01*x4427))+(((-1.0)*r02*x4425))+(((-1.0)*r00*x4428)));
evalcond[3]=(((r22*x4419))+(((-1.0)*gconst104*r20*x4425))+((sj1*sj2))+((r21*x4426))+(((-1.0)*cj1*x4422)));
evalcond[4]=((((-1.0)*cj0*x4424))+(((-1.0)*cj0*sj1*x4422))+((r01*x4426))+((r02*x4419))+(((-1.0)*gconst104*r00*x4425)));
evalcond[5]=((((-1.0)*x4423*x4424))+((x4420*x4421))+((r12*x4419))+(((-1.0)*sj0*sj1*x4422))+(((-1.0)*gconst104*r10*x4425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4429=((1.0)*gconst104);
CheckValue<IkReal> x4430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4429))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4430.valid){
continue;
}
CheckValue<IkReal> x4431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4429))+(((-1.0)*gconst103*r00)))),-1);
if(!x4431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4430.value)+(((1.5707963267949)*(x4431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4432=IKsin(j4);
IkReal x4433=IKcos(j4);
IkReal x4434=(gconst103*r11);
IkReal x4435=((1.0)*cj2);
IkReal x4436=((1.0)*sj0);
IkReal x4437=(cj1*sj2);
IkReal x4438=((1.0)*x4433);
IkReal x4439=(gconst103*x4433);
IkReal x4440=(gconst103*x4432);
IkReal x4441=((1.0)*gconst104*x4432);
evalcond[0]=(((r21*x4440))+(((-1.0)*r22*x4438))+(((-1.0)*r20*x4441)));
evalcond[1]=(((x4432*x4434))+cj0+(((-1.0)*r12*x4438))+(((-1.0)*r10*x4441)));
evalcond[2]=((((-1.0)*r02*x4438))+((r01*x4440))+(((-1.0)*x4436))+(((-1.0)*r00*x4441)));
evalcond[3]=(((r22*x4432))+((sj1*sj2))+(((-1.0)*cj1*x4435))+(((-1.0)*gconst104*r20*x4438))+((r21*x4439)));
evalcond[4]=((((-1.0)*cj0*x4437))+(((-1.0)*cj0*sj1*x4435))+(((-1.0)*gconst104*r00*x4438))+((r02*x4432))+((r01*x4439)));
evalcond[5]=((((-1.0)*gconst104*r10*x4438))+((r12*x4432))+(((-1.0)*x4436*x4437))+((x4433*x4434))+(((-1.0)*sj0*sj1*x4435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4442=((-1.0)*r11);
IkReal x4444 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4444)==0){
continue;
}
IkReal x4443=pow(x4444,-0.5);
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(x4442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4445.value))));
IkReal gconst106=(x4442*x4443);
IkReal gconst107=((1.0)*r10*x4443);
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4446.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4447=((-1.0)*r11);
CheckValue<IkReal> x4450 = IKatan2WithCheck(IkReal(x4447),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4450.valid){
continue;
}
IkReal x4448=((1.0)*(x4450.value));
IkReal x4449=x4443;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4448)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4448)));
IkReal gconst106=(x4447*x4449);
IkReal gconst107=((1.0)*r10*x4449);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4451=((-1.0)*r11);
CheckValue<IkReal> x4454 = IKatan2WithCheck(IkReal(x4451),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4454.valid){
continue;
}
IkReal x4452=((1.0)*(x4454.value));
IkReal x4453=x4443;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4452)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4452)));
IkReal gconst106=(x4451*x4453);
IkReal gconst107=((1.0)*r10*x4453);
IkReal x4455=r12*r12;
IkReal x4456=((1.0)*sj0);
IkReal x4457=(cj0*r02);
IkReal x4458=x4443;
j4eval[0]=((IKabs(((((-1.0)*x4456*x4458))+((r12*x4457*x4458))+((sj0*x4455*x4458)))))+(IKabs(((((-1.0)*r12*x4456))+(((-1.0)*x4457))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4459=((-1.0)*r11);
CheckValue<IkReal> x4462 = IKatan2WithCheck(IkReal(x4459),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4462.valid){
continue;
}
IkReal x4460=((1.0)*(x4462.value));
IkReal x4461=x4443;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4460)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4460)));
IkReal gconst106=(x4459*x4461);
IkReal gconst107=((1.0)*r10*x4461);
IkReal x4463=r12*r12;
IkReal x4464=((1.0)+(((-1.0)*x4463)));
IkReal x4465=(r22*sj1*sj2);
IkReal x4466=(cj1*cj2*r22);
CheckValue<IkReal> x4473=IKPowWithIntegerCheck(x4464,-1);
if(!x4473.valid){
continue;
}
IkReal x4467=x4473.value;
CheckValue<IkReal> x4474=IKPowWithIntegerCheck(((-1.0)+x4463),-1);
if(!x4474.valid){
continue;
}
IkReal x4468=x4474.value;
IkReal x4469=((1.0)*x4467);
if((x4464) < -0.00001)
continue;
IkReal x4470=IKsqrt(x4464);
IkReal x4471=(r12*x4468*x4470);
IkReal x4472=((((-2.0)*r10*r11*r20*r21*x4467))+(((-1.0)*(r22*r22)))+(((-1.0)*x4469*(r10*r10)*(r20*r20)))+(((-1.0)*x4469*(r11*r11)*(r21*r21))));
j4eval[0]=x4472;
j4eval[1]=((IKabs(((((-1.0)*x4465*x4471))+((x4466*x4471)))))+(IKabs((x4465+(((-1.0)*x4466))))));
j4eval[2]=IKsign(x4472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4475=(sj1*sj2);
IkReal x4476=(gconst106*r21);
IkReal x4477=(gconst107*r20);
IkReal x4478=(cj1*cj2);
CheckValue<IkReal> x4479=IKPowWithIntegerCheck(IKsign(((((2.0)*x4476*x4477))+(((-1.0)*(x4477*x4477)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4476*x4476))))),-1);
if(!x4479.valid){
continue;
}
CheckValue<IkReal> x4480 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4478))+((r22*x4475)))),IkReal(((((-1.0)*x4475*x4477))+((x4477*x4478))+(((-1.0)*x4476*x4478))+((x4475*x4476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4479.value)))+(x4480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4481=IKsin(j4);
IkReal x4482=IKcos(j4);
IkReal x4483=(gconst107*r10);
IkReal x4484=(gconst107*r00);
IkReal x4485=((1.0)*cj2);
IkReal x4486=(gconst107*r20);
IkReal x4487=((1.0)*sj0);
IkReal x4488=(cj1*sj2);
IkReal x4489=((1.0)*x4482);
IkReal x4490=(gconst106*x4482);
IkReal x4491=(gconst106*x4481);
IkReal x4492=((1.0)*x4481);
evalcond[0]=(((r21*x4491))+(((-1.0)*x4486*x4492))+(((-1.0)*r22*x4489)));
evalcond[1]=((((-1.0)*x4483*x4492))+(((-1.0)*r12*x4489))+cj0+((r11*x4491)));
evalcond[2]=((((-1.0)*x4484*x4492))+(((-1.0)*r02*x4489))+((r01*x4491))+(((-1.0)*x4487)));
evalcond[3]=((((-1.0)*x4486*x4489))+(((-1.0)*cj1*x4485))+((sj1*sj2))+((r21*x4490))+((r22*x4481)));
evalcond[4]=((((-1.0)*cj0*x4488))+(((-1.0)*cj0*sj1*x4485))+(((-1.0)*x4484*x4489))+((r02*x4481))+((r01*x4490)));
evalcond[5]=((((-1.0)*x4487*x4488))+(((-1.0)*sj0*sj1*x4485))+((r11*x4490))+((r12*x4481))+(((-1.0)*x4483*x4489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4493=((1.0)*sj0);
IkReal x4494=((1.0)*gconst106);
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4494)))),-1);
if(!x4495.valid){
continue;
}
CheckValue<IkReal> x4496 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4493)))),IkReal(((((-1.0)*gconst106*r11*x4493))+((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4494))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4495.value)))+(x4496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4497=IKsin(j4);
IkReal x4498=IKcos(j4);
IkReal x4499=(gconst107*r10);
IkReal x4500=(gconst107*r00);
IkReal x4501=((1.0)*cj2);
IkReal x4502=(gconst107*r20);
IkReal x4503=((1.0)*sj0);
IkReal x4504=(cj1*sj2);
IkReal x4505=((1.0)*x4498);
IkReal x4506=(gconst106*x4498);
IkReal x4507=(gconst106*x4497);
IkReal x4508=((1.0)*x4497);
evalcond[0]=(((r21*x4507))+(((-1.0)*r22*x4505))+(((-1.0)*x4502*x4508)));
evalcond[1]=(cj0+((r11*x4507))+(((-1.0)*r12*x4505))+(((-1.0)*x4499*x4508)));
evalcond[2]=((((-1.0)*x4503))+(((-1.0)*r02*x4505))+(((-1.0)*x4500*x4508))+((r01*x4507)));
evalcond[3]=((((-1.0)*cj1*x4501))+((r21*x4506))+((sj1*sj2))+((r22*x4497))+(((-1.0)*x4502*x4505)));
evalcond[4]=(((r02*x4497))+(((-1.0)*cj0*x4504))+(((-1.0)*x4500*x4505))+((r01*x4506))+(((-1.0)*cj0*sj1*x4501)));
evalcond[5]=(((r12*x4497))+((r11*x4506))+(((-1.0)*x4503*x4504))+(((-1.0)*sj0*sj1*x4501))+(((-1.0)*x4499*x4505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4509=((1.0)*gconst107);
CheckValue<IkReal> x4510 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4509))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4509)))),-1);
if(!x4511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4510.value)+(((1.5707963267949)*(x4511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4512=IKsin(j4);
IkReal x4513=IKcos(j4);
IkReal x4514=(gconst107*r10);
IkReal x4515=(gconst107*r00);
IkReal x4516=((1.0)*cj2);
IkReal x4517=(gconst107*r20);
IkReal x4518=((1.0)*sj0);
IkReal x4519=(cj1*sj2);
IkReal x4520=((1.0)*x4513);
IkReal x4521=(gconst106*x4513);
IkReal x4522=(gconst106*x4512);
IkReal x4523=((1.0)*x4512);
evalcond[0]=(((r21*x4522))+(((-1.0)*r22*x4520))+(((-1.0)*x4517*x4523)));
evalcond[1]=((((-1.0)*r12*x4520))+((r11*x4522))+cj0+(((-1.0)*x4514*x4523)));
evalcond[2]=(((r01*x4522))+(((-1.0)*x4518))+(((-1.0)*r02*x4520))+(((-1.0)*x4515*x4523)));
evalcond[3]=((((-1.0)*cj1*x4516))+((r21*x4521))+((sj1*sj2))+(((-1.0)*x4517*x4520))+((r22*x4512)));
evalcond[4]=(((r02*x4512))+((r01*x4521))+(((-1.0)*cj0*x4519))+(((-1.0)*cj0*sj1*x4516))+(((-1.0)*x4515*x4520)));
evalcond[5]=(((r11*x4521))+(((-1.0)*x4518*x4519))+(((-1.0)*sj0*sj1*x4516))+(((-1.0)*x4514*x4520))+((r12*x4512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4524=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4524;
j4eval[1]=IKsign(x4524);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4525=((1.0)*cj5);
IkReal x4526=((((-1.0)*r01*x4525))+(((-1.0)*r00*sj5)));
j4eval[0]=x4526;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4525))))));
j4eval[2]=IKsign(x4526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4527=(sj1*sj2);
IkReal x4528=(cj5*r10);
IkReal x4529=(r11*sj5);
IkReal x4530=(cj1*cj2);
IkReal x4531=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4531;
j4eval[1]=((IKabs((((x4528*x4530))+((x4527*x4529))+(((-1.0)*x4527*x4528))+(((-1.0)*x4529*x4530)))))+(IKabs(((((-1.0)*r12*x4527))+((r12*x4530))))));
j4eval[2]=IKsign(x4531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4532=(sj1*sj2);
IkReal x4533=(cj5*r10);
IkReal x4534=(r11*sj5);
IkReal x4535=(cj1*cj2);
CheckValue<IkReal> x4536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4536.valid){
continue;
}
CheckValue<IkReal> x4537 = IKatan2WithCheck(IkReal(((((-1.0)*x4534*x4535))+((x4532*x4534))+((x4533*x4535))+(((-1.0)*x4532*x4533)))),IkReal((((r12*x4535))+(((-1.0)*r12*x4532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4536.value)))+(x4537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4538=IKcos(j4);
IkReal x4539=IKsin(j4);
IkReal x4540=(cj5*r00);
IkReal x4541=(cj5*r10);
IkReal x4542=(r21*sj5);
IkReal x4543=((1.0)*cj2);
IkReal x4544=(cj5*r20);
IkReal x4545=((1.0)*x4538);
IkReal x4546=((1.0)*x4539);
IkReal x4547=(sj5*x4539);
IkReal x4548=(sj5*x4538);
evalcond[0]=(((r12*x4539))+(((-1.0)*x4541*x4545))+((r11*x4548)));
evalcond[1]=((((-1.0)*r22*x4545))+(((-1.0)*x4544*x4546))+((x4539*x4542)));
evalcond[2]=((((-1.0)*r02*x4545))+((r01*x4547))+(((-1.0)*x4540*x4546)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4545))+(((-1.0)*x4541*x4546))+((r11*x4547)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4544*x4545))+((r22*x4539))+(((-1.0)*cj1*x4543))+((x4538*x4542)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x4548))+(((-1.0)*x4540*x4545))+((r02*x4539))+(((-1.0)*sj1*x4543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4549=((1.0)*cj5);
CheckValue<IkReal> x4550 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4550.valid){
continue;
}
CheckValue<IkReal> x4551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4549)))),-1);
if(!x4551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4550.value)+(((1.5707963267949)*(x4551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4552=IKcos(j4);
IkReal x4553=IKsin(j4);
IkReal x4554=(cj5*r00);
IkReal x4555=(cj5*r10);
IkReal x4556=(r21*sj5);
IkReal x4557=((1.0)*cj2);
IkReal x4558=(cj5*r20);
IkReal x4559=((1.0)*x4552);
IkReal x4560=((1.0)*x4553);
IkReal x4561=(sj5*x4553);
IkReal x4562=(sj5*x4552);
evalcond[0]=(((r11*x4562))+(((-1.0)*x4555*x4559))+((r12*x4553)));
evalcond[1]=(((x4553*x4556))+(((-1.0)*x4558*x4560))+(((-1.0)*r22*x4559)));
evalcond[2]=((((-1.0)*r02*x4559))+((r01*x4561))+(((-1.0)*x4554*x4560)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4559))+((r11*x4561))+(((-1.0)*x4555*x4560)));
evalcond[4]=(((x4552*x4556))+(((-1.0)*cj1*x4557))+((sj1*sj2))+((r22*x4553))+(((-1.0)*x4558*x4559)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x4553))+(((-1.0)*x4554*x4559))+((r01*x4562))+(((-1.0)*sj1*x4557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4563=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4563.valid){
continue;
}
CheckValue<IkReal> x4564 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4563.value)))+(x4564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4565=IKcos(j4);
IkReal x4566=IKsin(j4);
IkReal x4567=(cj5*r00);
IkReal x4568=(cj5*r10);
IkReal x4569=(r21*sj5);
IkReal x4570=((1.0)*cj2);
IkReal x4571=(cj5*r20);
IkReal x4572=((1.0)*x4565);
IkReal x4573=((1.0)*x4566);
IkReal x4574=(sj5*x4566);
IkReal x4575=(sj5*x4565);
evalcond[0]=(((r12*x4566))+((r11*x4575))+(((-1.0)*x4568*x4572)));
evalcond[1]=(((x4566*x4569))+(((-1.0)*x4571*x4573))+(((-1.0)*r22*x4572)));
evalcond[2]=((((-1.0)*x4567*x4573))+(((-1.0)*r02*x4572))+((r01*x4574)));
evalcond[3]=((1.0)+((r11*x4574))+(((-1.0)*x4568*x4573))+(((-1.0)*r12*x4572)));
evalcond[4]=(((x4565*x4569))+(((-1.0)*cj1*x4570))+((r22*x4566))+(((-1.0)*x4571*x4572))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x4570))+(((-1.0)*x4567*x4572))+((r02*x4566))+(((-1.0)*cj1*sj2))+((r01*x4575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4576=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4576;
j4eval[1]=IKsign(x4576);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4577=((1.0)*cj5);
IkReal x4578=((((-1.0)*r21*x4577))+(((-1.0)*r20*sj5)));
j4eval[0]=x4578;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4577))+((r01*sj5))))));
j4eval[2]=IKsign(x4578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4579=cj5*cj5;
IkReal x4580=r11*r11;
IkReal x4581=(r11*sj5);
IkReal x4582=(cj5*r10);
IkReal x4583=((r12*r12)+x4580+(((-1.0)*x4579*x4580))+((x4579*(r10*r10)))+(((-2.0)*x4581*x4582)));
j4eval[0]=x4583;
j4eval[1]=IKsign(x4583);
j4eval[2]=((IKabs(r12))+(IKabs((x4581+(((-1.0)*x4582))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4584=cj5*cj5;
IkReal x4585=r11*r11;
IkReal x4586=(cj5*r10);
IkReal x4587=(r11*sj5);
CheckValue<IkReal> x4588 = IKatan2WithCheck(IkReal((x4587+(((-1.0)*x4586)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4588.valid){
continue;
}
CheckValue<IkReal> x4589=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4586*x4587))+(((-1.0)*x4584*x4585))+x4585+((x4584*(r10*r10))))),-1);
if(!x4589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4588.value)+(((1.5707963267949)*(x4589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4590=IKcos(j4);
IkReal x4591=IKsin(j4);
IkReal x4592=(cj5*r00);
IkReal x4593=(cj5*r10);
IkReal x4594=(r21*sj5);
IkReal x4595=(cj5*r20);
IkReal x4596=((1.0)*x4590);
IkReal x4597=((1.0)*x4591);
IkReal x4598=(sj5*x4591);
IkReal x4599=(sj5*x4590);
evalcond[0]=((((-1.0)*x4593*x4596))+((r11*x4599))+((r12*x4591)));
evalcond[1]=((((-1.0)*r22*x4596))+(((-1.0)*x4595*x4597))+((x4591*x4594)));
evalcond[2]=((((-1.0)*x4592*x4597))+(((-1.0)*r02*x4596))+((r01*x4598)));
evalcond[3]=((-1.0)+(((-1.0)*x4593*x4597))+((r11*x4598))+(((-1.0)*r12*x4596)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4591))+(((-1.0)*x4592*x4596))+((r01*x4599)));
evalcond[5]=(((r22*x4591))+((x4590*x4594))+(((-1.0)*x4595*x4596))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4600=((1.0)*cj5);
CheckValue<IkReal> x4601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4600))+(((-1.0)*r20*sj5)))),-1);
if(!x4601.valid){
continue;
}
CheckValue<IkReal> x4602 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4601.value)))+(x4602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4603=IKcos(j4);
IkReal x4604=IKsin(j4);
IkReal x4605=(cj5*r00);
IkReal x4606=(cj5*r10);
IkReal x4607=(r21*sj5);
IkReal x4608=(cj5*r20);
IkReal x4609=((1.0)*x4603);
IkReal x4610=((1.0)*x4604);
IkReal x4611=(sj5*x4604);
IkReal x4612=(sj5*x4603);
evalcond[0]=((((-1.0)*x4606*x4609))+((r12*x4604))+((r11*x4612)));
evalcond[1]=(((x4604*x4607))+(((-1.0)*x4608*x4610))+(((-1.0)*r22*x4609)));
evalcond[2]=((((-1.0)*r02*x4609))+((r01*x4611))+(((-1.0)*x4605*x4610)));
evalcond[3]=((-1.0)+(((-1.0)*x4606*x4610))+((r11*x4611))+(((-1.0)*r12*x4609)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4612))+((r02*x4604))+(((-1.0)*x4605*x4609)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4603*x4607))+((r22*x4604))+(((-1.0)*x4608*x4609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4613 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4613.valid){
continue;
}
CheckValue<IkReal> x4614=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4613.value)+(((1.5707963267949)*(x4614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4615=IKcos(j4);
IkReal x4616=IKsin(j4);
IkReal x4617=(cj5*r00);
IkReal x4618=(cj5*r10);
IkReal x4619=(r21*sj5);
IkReal x4620=(cj5*r20);
IkReal x4621=((1.0)*x4615);
IkReal x4622=((1.0)*x4616);
IkReal x4623=(sj5*x4616);
IkReal x4624=(sj5*x4615);
evalcond[0]=(((r11*x4624))+(((-1.0)*x4618*x4621))+((r12*x4616)));
evalcond[1]=((((-1.0)*r22*x4621))+(((-1.0)*x4620*x4622))+((x4616*x4619)));
evalcond[2]=((((-1.0)*r02*x4621))+((r01*x4623))+(((-1.0)*x4617*x4622)));
evalcond[3]=((-1.0)+((r11*x4623))+(((-1.0)*x4618*x4622))+(((-1.0)*r12*x4621)));
evalcond[4]=(((cj2*sj1))+((r02*x4616))+((cj1*sj2))+((r01*x4624))+(((-1.0)*x4617*x4621)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4615*x4619))+((r22*x4616))+(((-1.0)*x4620*x4621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4625=((-1.0)*r00);
IkReal x4627 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4627)==0){
continue;
}
IkReal x4626=pow(x4627,-0.5);
CheckValue<IkReal> x4628 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4625),IKFAST_ATAN2_MAGTHRESH);
if(!x4628.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4628.value));
IkReal gconst109=(r01*x4626);
IkReal gconst110=(x4625*x4626);
CheckValue<IkReal> x4629 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4629.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4630=((-1.0)*r00);
IkReal x4631=x4626;
CheckValue<IkReal> x4633 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4630),IKFAST_ATAN2_MAGTHRESH);
if(!x4633.valid){
continue;
}
IkReal x4632=((-1.0)*(x4633.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4632;
IkReal gconst108=x4632;
IkReal gconst109=(r01*x4631);
IkReal gconst110=(x4630*x4631);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4634=((1.0)*sj0);
IkReal x4635=((1.0)*gconst109);
CheckValue<IkReal> x4636 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4634)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4635))+(((-1.0)*gconst109*r11*x4634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4636.valid){
continue;
}
CheckValue<IkReal> x4637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4635))+(((-1.0)*gconst110*r21)))),-1);
if(!x4637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4636.value)+(((1.5707963267949)*(x4637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4638=IKsin(j4);
IkReal x4639=IKcos(j4);
IkReal x4640=(gconst109*r21);
IkReal x4641=((1.0)*cj2);
IkReal x4642=((1.0)*sj0);
IkReal x4643=(cj1*sj2);
IkReal x4644=((1.0)*x4639);
IkReal x4645=(gconst109*x4638);
IkReal x4646=(gconst109*x4639);
IkReal x4647=((1.0)*gconst110*x4638);
evalcond[0]=(((x4638*x4640))+(((-1.0)*r20*x4647))+(((-1.0)*r22*x4644)));
evalcond[1]=(cj0+(((-1.0)*r10*x4647))+((r11*x4645))+(((-1.0)*r12*x4644)));
evalcond[2]=((((-1.0)*r02*x4644))+(((-1.0)*x4642))+((r01*x4645))+(((-1.0)*r00*x4647)));
evalcond[3]=((((-1.0)*cj1*x4641))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4644))+((x4639*x4640))+((r22*x4638)));
evalcond[4]=((((-1.0)*cj0*x4643))+(((-1.0)*cj0*sj1*x4641))+((r01*x4646))+((r02*x4638))+(((-1.0)*gconst110*r00*x4644)));
evalcond[5]=(((r12*x4638))+(((-1.0)*gconst110*r10*x4644))+((r11*x4646))+(((-1.0)*sj0*sj1*x4641))+(((-1.0)*x4642*x4643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4648=((1.0)*gconst110);
CheckValue<IkReal> x4649 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4649.valid){
continue;
}
CheckValue<IkReal> x4650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4648))+(((-1.0)*gconst109*r10)))),-1);
if(!x4650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4649.value)+(((1.5707963267949)*(x4650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4651=IKsin(j4);
IkReal x4652=IKcos(j4);
IkReal x4653=(gconst109*r21);
IkReal x4654=((1.0)*cj2);
IkReal x4655=((1.0)*sj0);
IkReal x4656=(cj1*sj2);
IkReal x4657=((1.0)*x4652);
IkReal x4658=(gconst109*x4651);
IkReal x4659=(gconst109*x4652);
IkReal x4660=((1.0)*gconst110*x4651);
evalcond[0]=((((-1.0)*r20*x4660))+(((-1.0)*r22*x4657))+((x4651*x4653)));
evalcond[1]=(((r11*x4658))+cj0+(((-1.0)*r10*x4660))+(((-1.0)*r12*x4657)));
evalcond[2]=((((-1.0)*x4655))+(((-1.0)*r02*x4657))+(((-1.0)*r00*x4660))+((r01*x4658)));
evalcond[3]=((((-1.0)*cj1*x4654))+((sj1*sj2))+((x4652*x4653))+((r22*x4651))+(((-1.0)*gconst110*r20*x4657)));
evalcond[4]=((((-1.0)*gconst110*r00*x4657))+(((-1.0)*cj0*x4656))+((r02*x4651))+((r01*x4659))+(((-1.0)*cj0*sj1*x4654)));
evalcond[5]=(((r12*x4651))+((r11*x4659))+(((-1.0)*x4655*x4656))+(((-1.0)*gconst110*r10*x4657))+(((-1.0)*sj0*sj1*x4654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4661=((-1.0)*r01);
IkReal x4663 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4663)==0){
continue;
}
IkReal x4662=pow(x4663,-0.5);
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal(x4661),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4664.value))));
IkReal gconst112=(x4661*x4662);
IkReal gconst113=((1.0)*r00*x4662);
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4665.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4666=((-1.0)*r01);
CheckValue<IkReal> x4669 = IKatan2WithCheck(IkReal(x4666),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4669.valid){
continue;
}
IkReal x4667=((1.0)*(x4669.value));
IkReal x4668=x4662;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4667)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4667)));
IkReal gconst112=(x4666*x4668);
IkReal gconst113=((1.0)*r00*x4668);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4670=((-1.0)*r01);
CheckValue<IkReal> x4673 = IKatan2WithCheck(IkReal(x4670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4673.valid){
continue;
}
IkReal x4671=((1.0)*(x4673.value));
IkReal x4672=x4662;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4671)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4671)));
IkReal gconst112=(x4670*x4672);
IkReal gconst113=((1.0)*r00*x4672);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4674=((-1.0)*r01);
CheckValue<IkReal> x4677 = IKatan2WithCheck(IkReal(x4674),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4677.valid){
continue;
}
IkReal x4675=((1.0)*(x4677.value));
IkReal x4676=x4662;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4675)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4675)));
IkReal gconst112=(x4674*x4676);
IkReal gconst113=((1.0)*r00*x4676);
IkReal x4678=r02*r02;
IkReal x4679=(r12*sj0);
IkReal x4680=((1.0)*cj0);
IkReal x4681=x4662;
j4eval[0]=((IKabs(((((-1.0)*x4679))+(((-1.0)*r02*x4680)))))+(IKabs((((cj0*x4678*x4681))+((r02*x4679*x4681))+(((-1.0)*x4680*x4681))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4682=((1.0)*sj0);
IkReal x4683=((1.0)*gconst112);
CheckValue<IkReal> x4684 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4682)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4683))+(((-1.0)*gconst112*r11*x4682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4684.valid){
continue;
}
CheckValue<IkReal> x4685=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4683)))),-1);
if(!x4685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4684.value)+(((1.5707963267949)*(x4685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4686=IKsin(j4);
IkReal x4687=IKcos(j4);
IkReal x4688=(gconst113*r20);
IkReal x4689=(gconst112*r21);
IkReal x4690=((1.0)*cj2);
IkReal x4691=(gconst113*r00);
IkReal x4692=(gconst113*r10);
IkReal x4693=((1.0)*sj0);
IkReal x4694=(cj1*sj2);
IkReal x4695=((1.0)*x4687);
IkReal x4696=((1.0)*x4686);
IkReal x4697=(gconst112*x4687);
IkReal x4698=(gconst112*x4686);
evalcond[0]=((((-1.0)*x4688*x4696))+(((-1.0)*r22*x4695))+((x4686*x4689)));
evalcond[1]=((((-1.0)*r12*x4695))+cj0+(((-1.0)*x4692*x4696))+((r11*x4698)));
evalcond[2]=((((-1.0)*r02*x4695))+((r01*x4698))+(((-1.0)*x4693))+(((-1.0)*x4691*x4696)));
evalcond[3]=((((-1.0)*x4688*x4695))+(((-1.0)*cj1*x4690))+((sj1*sj2))+((r22*x4686))+((x4687*x4689)));
evalcond[4]=(((r02*x4686))+(((-1.0)*cj0*sj1*x4690))+(((-1.0)*cj0*x4694))+((r01*x4697))+(((-1.0)*x4691*x4695)));
evalcond[5]=((((-1.0)*x4692*x4695))+(((-1.0)*sj0*sj1*x4690))+(((-1.0)*x4693*x4694))+((r12*x4686))+((r11*x4697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4699=((1.0)*gconst113);
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
CheckValue<IkReal> x4701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x4699)))),-1);
if(!x4701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4700.value)+(((1.5707963267949)*(x4701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4702=IKsin(j4);
IkReal x4703=IKcos(j4);
IkReal x4704=(gconst113*r20);
IkReal x4705=(gconst112*r21);
IkReal x4706=((1.0)*cj2);
IkReal x4707=(gconst113*r00);
IkReal x4708=(gconst113*r10);
IkReal x4709=((1.0)*sj0);
IkReal x4710=(cj1*sj2);
IkReal x4711=((1.0)*x4703);
IkReal x4712=((1.0)*x4702);
IkReal x4713=(gconst112*x4703);
IkReal x4714=(gconst112*x4702);
evalcond[0]=((((-1.0)*r22*x4711))+(((-1.0)*x4704*x4712))+((x4702*x4705)));
evalcond[1]=(cj0+(((-1.0)*r12*x4711))+(((-1.0)*x4708*x4712))+((r11*x4714)));
evalcond[2]=((((-1.0)*r02*x4711))+((r01*x4714))+(((-1.0)*x4707*x4712))+(((-1.0)*x4709)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4704*x4711))+(((-1.0)*cj1*x4706))+((r22*x4702))+((x4703*x4705)));
evalcond[4]=((((-1.0)*cj0*x4710))+(((-1.0)*cj0*sj1*x4706))+((r01*x4713))+(((-1.0)*x4707*x4711))+((r02*x4702)));
evalcond[5]=((((-1.0)*sj0*sj1*x4706))+(((-1.0)*x4709*x4710))+(((-1.0)*x4708*x4711))+((r11*x4713))+((r12*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4715=((1.0)*gconst113);
CheckValue<IkReal> x4716=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x4715)))),-1);
if(!x4716.valid){
continue;
}
CheckValue<IkReal> x4717 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4716.value)))+(x4717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4718=IKsin(j4);
IkReal x4719=IKcos(j4);
IkReal x4720=(gconst113*r20);
IkReal x4721=(gconst112*r21);
IkReal x4722=((1.0)*cj2);
IkReal x4723=(gconst113*r00);
IkReal x4724=(gconst113*r10);
IkReal x4725=((1.0)*sj0);
IkReal x4726=(cj1*sj2);
IkReal x4727=((1.0)*x4719);
IkReal x4728=((1.0)*x4718);
IkReal x4729=(gconst112*x4719);
IkReal x4730=(gconst112*x4718);
evalcond[0]=(((x4718*x4721))+(((-1.0)*r22*x4727))+(((-1.0)*x4720*x4728)));
evalcond[1]=(((r11*x4730))+cj0+(((-1.0)*x4724*x4728))+(((-1.0)*r12*x4727)));
evalcond[2]=((((-1.0)*x4723*x4728))+(((-1.0)*x4725))+(((-1.0)*r02*x4727))+((r01*x4730)));
evalcond[3]=(((r22*x4718))+(((-1.0)*cj1*x4722))+((sj1*sj2))+((x4719*x4721))+(((-1.0)*x4720*x4727)));
evalcond[4]=((((-1.0)*x4723*x4727))+(((-1.0)*cj0*sj1*x4722))+(((-1.0)*cj0*x4726))+((r01*x4729))+((r02*x4718)));
evalcond[5]=(((r11*x4729))+(((-1.0)*x4724*x4727))+(((-1.0)*x4725*x4726))+(((-1.0)*sj0*sj1*x4722))+((r12*x4718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4731=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4731;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4732=((1.0)*cj5);
IkReal x4733=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4732)));
j4eval[0]=x4733;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4732))))));
j4eval[2]=IKsign(x4733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4734=cj5*cj5;
IkReal x4735=r01*r01;
IkReal x4736=(cj5*r00);
IkReal x4737=(r01*sj5);
IkReal x4738=((((-1.0)*x4734*x4735))+x4735+(((-2.0)*x4736*x4737))+((x4734*(r00*r00)))+(r02*r02));
j4eval[0]=x4738;
j4eval[1]=IKsign(x4738);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4736))+x4737))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4739=cj5*cj5;
IkReal x4740=r01*r01;
IkReal x4741=(r01*sj5);
IkReal x4742=(cj5*r00);
CheckValue<IkReal> x4743=IKPowWithIntegerCheck(IKsign((((x4739*(r00*r00)))+(((-1.0)*x4739*x4740))+x4740+(((-2.0)*x4741*x4742))+(r02*r02))),-1);
if(!x4743.valid){
continue;
}
CheckValue<IkReal> x4744 = IKatan2WithCheck(IkReal((x4741+(((-1.0)*x4742)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4743.value)))+(x4744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4745=IKcos(j4);
IkReal x4746=IKsin(j4);
IkReal x4747=(cj5*r00);
IkReal x4748=(cj5*r10);
IkReal x4749=(r21*sj5);
IkReal x4750=((1.0)*cj2);
IkReal x4751=(cj5*r20);
IkReal x4752=((1.0)*x4745);
IkReal x4753=((1.0)*x4746);
IkReal x4754=(sj5*x4746);
IkReal x4755=(sj5*x4745);
evalcond[0]=(((r01*x4755))+((r02*x4746))+(((-1.0)*x4747*x4752)));
evalcond[1]=(((x4746*x4749))+(((-1.0)*r22*x4752))+(((-1.0)*x4751*x4753)));
evalcond[2]=(((r11*x4754))+(((-1.0)*x4748*x4753))+(((-1.0)*r12*x4752)));
evalcond[3]=((-1.0)+((r01*x4754))+(((-1.0)*r02*x4752))+(((-1.0)*x4747*x4753)));
evalcond[4]=((((-1.0)*cj1*x4750))+((sj1*sj2))+(((-1.0)*x4751*x4752))+((r22*x4746))+((x4745*x4749)));
evalcond[5]=(((r11*x4755))+((r12*x4746))+(((-1.0)*sj1*x4750))+(((-1.0)*x4748*x4752))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4756=((1.0)*cj5);
CheckValue<IkReal> x4757 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4756))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4757.valid){
continue;
}
CheckValue<IkReal> x4758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4756)))),-1);
if(!x4758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4757.value)+(((1.5707963267949)*(x4758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4759=IKcos(j4);
IkReal x4760=IKsin(j4);
IkReal x4761=(cj5*r00);
IkReal x4762=(cj5*r10);
IkReal x4763=(r21*sj5);
IkReal x4764=((1.0)*cj2);
IkReal x4765=(cj5*r20);
IkReal x4766=((1.0)*x4759);
IkReal x4767=((1.0)*x4760);
IkReal x4768=(sj5*x4760);
IkReal x4769=(sj5*x4759);
evalcond[0]=(((r02*x4760))+(((-1.0)*x4761*x4766))+((r01*x4769)));
evalcond[1]=((((-1.0)*r22*x4766))+(((-1.0)*x4765*x4767))+((x4760*x4763)));
evalcond[2]=((((-1.0)*x4762*x4767))+(((-1.0)*r12*x4766))+((r11*x4768)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4766))+(((-1.0)*x4761*x4767))+((r01*x4768)));
evalcond[4]=(((r22*x4760))+((x4759*x4763))+(((-1.0)*x4765*x4766))+((sj1*sj2))+(((-1.0)*cj1*x4764)));
evalcond[5]=((((-1.0)*x4762*x4766))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4764))+((r12*x4760))+((r11*x4769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4770=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4770.valid){
continue;
}
CheckValue<IkReal> x4771 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4770.value)))+(x4771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4772=IKcos(j4);
IkReal x4773=IKsin(j4);
IkReal x4774=(cj5*r00);
IkReal x4775=(cj5*r10);
IkReal x4776=(r21*sj5);
IkReal x4777=((1.0)*cj2);
IkReal x4778=(cj5*r20);
IkReal x4779=((1.0)*x4772);
IkReal x4780=((1.0)*x4773);
IkReal x4781=(sj5*x4773);
IkReal x4782=(sj5*x4772);
evalcond[0]=(((r01*x4782))+(((-1.0)*x4774*x4779))+((r02*x4773)));
evalcond[1]=((((-1.0)*r22*x4779))+((x4773*x4776))+(((-1.0)*x4778*x4780)));
evalcond[2]=((((-1.0)*r12*x4779))+((r11*x4781))+(((-1.0)*x4775*x4780)));
evalcond[3]=((-1.0)+((r01*x4781))+(((-1.0)*x4774*x4780))+(((-1.0)*r02*x4779)));
evalcond[4]=((((-1.0)*x4778*x4779))+((x4772*x4776))+(((-1.0)*cj1*x4777))+((sj1*sj2))+((r22*x4773)));
evalcond[5]=((((-1.0)*sj1*x4777))+((r12*x4773))+(((-1.0)*cj1*sj2))+((r11*x4782))+(((-1.0)*x4775*x4779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4783=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4783;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4784=((1.0)*cj5);
IkReal x4785=((((-1.0)*r21*x4784))+(((-1.0)*r20*sj5)));
j4eval[0]=x4785;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4784))))));
j4eval[2]=IKsign(x4785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4786=cj5*cj5;
IkReal x4787=r01*r01;
IkReal x4788=(r01*sj5);
IkReal x4789=(cj5*r00);
IkReal x4790=((((-1.0)*x4786*(r00*r00)))+((x4786*x4787))+(((-1.0)*(r02*r02)))+(((-1.0)*x4787))+(((2.0)*x4788*x4789)));
j4eval[0]=x4790;
j4eval[1]=IKsign(x4790);
j4eval[2]=((IKabs(r02))+(IKabs((x4788+(((-1.0)*x4789))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4791=cj5*cj5;
IkReal x4792=r01*r01;
IkReal x4793=(r01*sj5);
IkReal x4794=(cj5*r00);
CheckValue<IkReal> x4795=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x4791*x4792))+(((-1.0)*x4792))+(((-1.0)*x4791*(r00*r00)))+(((2.0)*x4793*x4794)))),-1);
if(!x4795.valid){
continue;
}
CheckValue<IkReal> x4796 = IKatan2WithCheck(IkReal((x4793+(((-1.0)*x4794)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4795.value)))+(x4796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4797=IKcos(j4);
IkReal x4798=IKsin(j4);
IkReal x4799=(cj5*r00);
IkReal x4800=(cj5*r10);
IkReal x4801=(r21*sj5);
IkReal x4802=(cj5*r20);
IkReal x4803=((1.0)*x4797);
IkReal x4804=((1.0)*x4798);
IkReal x4805=(sj5*x4798);
IkReal x4806=(sj5*x4797);
evalcond[0]=(((r01*x4806))+(((-1.0)*x4799*x4803))+((r02*x4798)));
evalcond[1]=((((-1.0)*r22*x4803))+(((-1.0)*x4802*x4804))+((x4798*x4801)));
evalcond[2]=((((-1.0)*x4800*x4804))+(((-1.0)*r12*x4803))+((r11*x4805)));
evalcond[3]=((1.0)+((r01*x4805))+(((-1.0)*x4799*x4804))+(((-1.0)*r02*x4803)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4800*x4803))+((r12*x4798))+((r11*x4806)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4797*x4801))+(((-1.0)*x4802*x4803))+((r22*x4798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4807=((1.0)*cj5);
CheckValue<IkReal> x4808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4807))+(((-1.0)*r20*sj5)))),-1);
if(!x4808.valid){
continue;
}
CheckValue<IkReal> x4809 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4808.value)))+(x4809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4810=IKcos(j4);
IkReal x4811=IKsin(j4);
IkReal x4812=(cj5*r00);
IkReal x4813=(cj5*r10);
IkReal x4814=(r21*sj5);
IkReal x4815=(cj5*r20);
IkReal x4816=((1.0)*x4810);
IkReal x4817=((1.0)*x4811);
IkReal x4818=(sj5*x4811);
IkReal x4819=(sj5*x4810);
evalcond[0]=(((r02*x4811))+(((-1.0)*x4812*x4816))+((r01*x4819)));
evalcond[1]=((((-1.0)*x4815*x4817))+((x4811*x4814))+(((-1.0)*r22*x4816)));
evalcond[2]=(((r11*x4818))+(((-1.0)*x4813*x4817))+(((-1.0)*r12*x4816)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4816))+(((-1.0)*x4812*x4817))+((r01*x4818)));
evalcond[4]=(((cj2*sj1))+((r11*x4819))+((cj1*sj2))+((r12*x4811))+(((-1.0)*x4813*x4816)));
evalcond[5]=((((-1.0)*x4815*x4816))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4810*x4814))+((r22*x4811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4820 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4820.valid){
continue;
}
CheckValue<IkReal> x4821=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4820.value)+(((1.5707963267949)*(x4821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4822=IKcos(j4);
IkReal x4823=IKsin(j4);
IkReal x4824=(cj5*r00);
IkReal x4825=(cj5*r10);
IkReal x4826=(r21*sj5);
IkReal x4827=(cj5*r20);
IkReal x4828=((1.0)*x4822);
IkReal x4829=((1.0)*x4823);
IkReal x4830=(sj5*x4823);
IkReal x4831=(sj5*x4822);
evalcond[0]=(((r01*x4831))+((r02*x4823))+(((-1.0)*x4824*x4828)));
evalcond[1]=((((-1.0)*x4827*x4829))+((x4823*x4826))+(((-1.0)*r22*x4828)));
evalcond[2]=(((r11*x4830))+(((-1.0)*x4825*x4829))+(((-1.0)*r12*x4828)));
evalcond[3]=((1.0)+((r01*x4830))+(((-1.0)*r02*x4828))+(((-1.0)*x4824*x4829)));
evalcond[4]=(((cj2*sj1))+((r11*x4831))+((cj1*sj2))+(((-1.0)*x4825*x4828))+((r12*x4823)));
evalcond[5]=((((-1.0)*x4827*x4828))+((r22*x4823))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4822*x4826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4832=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4832);
rxp1_1=(px*r21);
rxp1_2=(r11*x4832);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4833=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4833);
rxp1_1=(px*r21);
rxp1_2=(r11*x4833);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4834=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4834);
rxp1_1=(px*r21);
rxp1_2=(r11*x4834);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4837=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4837.valid){
continue;
}
IkReal x4835=x4837.value;
IkReal x4836=(sj0*x4835);
cj4array[0]=(((cj1*sj2*x4836))+((cj2*sj1*x4836)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4838=IKsin(j4);
IkReal x4839=IKcos(j4);
IkReal x4840=(r21*sj5);
IkReal x4841=((1.0)*cj5*r20);
evalcond[0]=(r02*x4838);
evalcond[1]=((((-1.0)*r02*x4839))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x4838*x4841))+((x4838*x4840)));
evalcond[3]=(((r11*sj5*x4838))+(((-1.0)*cj5*r10*x4838)));
evalcond[4]=((((-1.0)*x4839*x4841))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4839*x4840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4843=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4843.valid){
continue;
}
IkReal x4842=x4843.value;
cj4array[0]=(((cj1*cj2*x4842))+(((-1.0)*sj1*sj2*x4842)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4844=IKsin(j4);
IkReal x4845=IKcos(j4);
IkReal x4846=((1.0)*sj0);
IkReal x4847=((1.0)*cj5);
IkReal x4848=(sj5*x4844);
evalcond[0]=(r02*x4844);
evalcond[1]=((((-1.0)*x4846))+(((-1.0)*r02*x4845)));
evalcond[2]=((((-1.0)*r20*x4844*x4847))+((r21*x4848)));
evalcond[3]=(((r11*x4848))+(((-1.0)*r10*x4844*x4847)));
evalcond[4]=(((r11*sj5*x4845))+(((-1.0)*r10*x4845*x4847))+(((-1.0)*cj2*sj1*x4846))+(((-1.0)*cj1*sj2*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4849=IKPowWithIntegerCheck(r02,-1);
if(!x4849.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4849.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4850=IKsin(j4);
IkReal x4851=IKcos(j4);
IkReal x4852=((1.0)*cj1);
IkReal x4853=(r21*sj5);
IkReal x4854=((1.0)*cj5);
IkReal x4855=(r11*sj5);
evalcond[0]=(r02*x4850);
evalcond[1]=((((-1.0)*r20*x4850*x4854))+((x4850*x4853)));
evalcond[2]=((((-1.0)*r10*x4850*x4854))+((x4850*x4855)));
evalcond[3]=((((-1.0)*r20*x4851*x4854))+((sj1*sj2))+(((-1.0)*cj2*x4852))+((x4851*x4853)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4852))+(((-1.0)*r10*x4851*x4854))+((x4851*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4856=((1.0)*sj0);
IkReal x4857=((1.0)*cj0);
CheckValue<IkReal> x4858 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4856))+(((-1.0)*r02*x4857)))),IkReal(((((-1.0)*r11*sj5*x4856))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4857))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4858.valid){
continue;
}
CheckValue<IkReal> x4859=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4858.value)+(((1.5707963267949)*(x4859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4860=IKsin(j4);
IkReal x4861=IKcos(j4);
IkReal x4862=(cj5*r00);
IkReal x4863=(cj5*r10);
IkReal x4864=(r21*sj5);
IkReal x4865=((1.0)*cj2);
IkReal x4866=((1.0)*sj0);
IkReal x4867=(cj1*sj2);
IkReal x4868=(cj5*r20);
IkReal x4869=((1.0)*x4861);
IkReal x4870=((1.0)*x4860);
IkReal x4871=(sj5*x4860);
IkReal x4872=(sj5*x4861);
evalcond[0]=((((-1.0)*x4868*x4870))+(((-1.0)*r22*x4869))+((x4860*x4864)));
evalcond[1]=(cj0+(((-1.0)*r12*x4869))+(((-1.0)*x4863*x4870))+((r11*x4871)));
evalcond[2]=(((r01*x4871))+(((-1.0)*x4866))+(((-1.0)*x4862*x4870))+(((-1.0)*r02*x4869)));
evalcond[3]=(((r22*x4860))+((x4861*x4864))+((sj1*sj2))+(((-1.0)*x4868*x4869))+(((-1.0)*cj1*x4865)));
evalcond[4]=((((-1.0)*x4862*x4869))+(((-1.0)*cj0*sj1*x4865))+((r01*x4872))+((r02*x4860))+(((-1.0)*cj0*x4867)));
evalcond[5]=((((-1.0)*x4863*x4869))+((r12*x4860))+(((-1.0)*sj0*sj1*x4865))+(((-1.0)*x4866*x4867))+((r11*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4873=((1.0)*cj5);
CheckValue<IkReal> x4874 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4874.valid){
continue;
}
CheckValue<IkReal> x4875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4873)))),-1);
if(!x4875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4874.value)+(((1.5707963267949)*(x4875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4876=IKsin(j4);
IkReal x4877=IKcos(j4);
IkReal x4878=(cj5*r00);
IkReal x4879=(cj5*r10);
IkReal x4880=(r21*sj5);
IkReal x4881=((1.0)*cj2);
IkReal x4882=((1.0)*sj0);
IkReal x4883=(cj1*sj2);
IkReal x4884=(cj5*r20);
IkReal x4885=((1.0)*x4877);
IkReal x4886=((1.0)*x4876);
IkReal x4887=(sj5*x4876);
IkReal x4888=(sj5*x4877);
evalcond[0]=(((x4876*x4880))+(((-1.0)*x4884*x4886))+(((-1.0)*r22*x4885)));
evalcond[1]=(((r11*x4887))+cj0+(((-1.0)*r12*x4885))+(((-1.0)*x4879*x4886)));
evalcond[2]=((((-1.0)*x4882))+(((-1.0)*r02*x4885))+((r01*x4887))+(((-1.0)*x4878*x4886)));
evalcond[3]=((((-1.0)*cj1*x4881))+((sj1*sj2))+(((-1.0)*x4884*x4885))+((r22*x4876))+((x4877*x4880)));
evalcond[4]=((((-1.0)*cj0*x4883))+((r02*x4876))+(((-1.0)*cj0*sj1*x4881))+((r01*x4888))+(((-1.0)*x4878*x4885)));
evalcond[5]=(((r11*x4888))+(((-1.0)*x4879*x4885))+(((-1.0)*x4882*x4883))+(((-1.0)*sj0*sj1*x4881))+((r12*x4876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4889=((1.0)*cj5);
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4889)))),-1);
if(!x4890.valid){
continue;
}
CheckValue<IkReal> x4891 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4890.value)))+(x4891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4892=IKsin(j4);
IkReal x4893=IKcos(j4);
IkReal x4894=(cj5*r00);
IkReal x4895=(cj5*r10);
IkReal x4896=(r21*sj5);
IkReal x4897=((1.0)*cj2);
IkReal x4898=((1.0)*sj0);
IkReal x4899=(cj1*sj2);
IkReal x4900=(cj5*r20);
IkReal x4901=((1.0)*x4893);
IkReal x4902=((1.0)*x4892);
IkReal x4903=(sj5*x4892);
IkReal x4904=(sj5*x4893);
evalcond[0]=(((x4892*x4896))+(((-1.0)*r22*x4901))+(((-1.0)*x4900*x4902)));
evalcond[1]=((((-1.0)*r12*x4901))+cj0+(((-1.0)*x4895*x4902))+((r11*x4903)));
evalcond[2]=((((-1.0)*x4898))+(((-1.0)*x4894*x4902))+(((-1.0)*r02*x4901))+((r01*x4903)));
evalcond[3]=((((-1.0)*cj1*x4897))+((sj1*sj2))+(((-1.0)*x4900*x4901))+((r22*x4892))+((x4893*x4896)));
evalcond[4]=((((-1.0)*cj0*x4899))+((r02*x4892))+(((-1.0)*cj0*sj1*x4897))+(((-1.0)*x4894*x4901))+((r01*x4904)));
evalcond[5]=((((-1.0)*x4898*x4899))+((r12*x4892))+(((-1.0)*sj0*sj1*x4897))+(((-1.0)*x4895*x4901))+((r11*x4904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4905=((1.0)*cj5);
IkReal x4906=((1.0)*sj5);
IkReal x4907=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4907;
j0eval[1]=((IKabs(((((-1.0)*r11*x4905))+(((-1.0)*r10*x4906)))))+(IKabs(((((-1.0)*r01*x4905))+(((-1.0)*r00*x4906))))));
j0eval[2]=IKsign(x4907);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4908=r21*r21;
IkReal x4909=cj5*cj5;
IkReal x4910=(cj2*sj1);
IkReal x4911=(cj1*sj2);
IkReal x4912=(r21*sj5);
IkReal x4913=((1.0)*cj5*r20);
IkReal x4914=((((-1.0)*x4908))+(((-1.0)*(r22*r22)))+((x4908*x4909))+(((2.0)*cj5*r20*x4912))+(((-1.0)*x4909*(r20*r20))));
j4eval[0]=x4914;
j4eval[1]=((IKabs((((x4911*x4912))+(((-1.0)*x4911*x4913))+(((-1.0)*x4910*x4913))+((x4910*x4912)))))+(IKabs((((r22*x4910))+((r22*x4911))))));
j4eval[2]=IKsign(x4914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4915=cj1*cj1;
IkReal x4916=(cj2*sj2);
IkReal x4917=(cj2*sj1);
IkReal x4918=(cj1*sj1);
j0eval[0]=(x4918+x4916+(((-2.0)*x4915*x4916))+(((-1.14255568581477)*cj1*x4917))+(((-1.14255568581477)*sj2*x4915))+(((-2.0)*cj1*cj2*x4917)));
j0eval[1]=((((-1.0)*x4917))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4919=IKsin(j0);
IkReal x4920=IKcos(j0);
evalcond[0]=((((-0.11235)*x4919))+(((-1.0)*px))+(((0.4569)*x4920)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x4920))+(((0.4569)*x4919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4921=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4921;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4922=((1.0)*cj5);
IkReal x4923=((((-1.0)*r01*x4922))+(((-1.0)*r00*sj5)));
j4eval[0]=x4923;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4922)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4924=((1.0)*cj5);
IkReal x4925=((((-1.0)*r01*x4924))+(((-1.0)*r00*sj5)));
j4eval[0]=x4925;
j4eval[1]=IKsign(x4925);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4924))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4926=((1.0)*cj5);
CheckValue<IkReal> x4927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4926))+(((-1.0)*r00*sj5)))),-1);
if(!x4927.valid){
continue;
}
CheckValue<IkReal> x4928 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4926)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4927.value)))+(x4928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4929=IKcos(j4);
IkReal x4930=IKsin(j4);
IkReal x4931=((1.0)*sj0);
IkReal x4932=(cj5*r00);
IkReal x4933=(cj5*r10);
IkReal x4934=(cj5*r20);
IkReal x4935=((1.0)*x4929);
IkReal x4936=((1.0)*x4930);
IkReal x4937=(sj5*x4929);
IkReal x4938=(sj5*x4930);
evalcond[0]=((((-1.0)*x4934*x4935))+((r22*x4930))+((r21*x4937)));
evalcond[1]=((((-1.0)*x4934*x4936))+((r21*x4938))+(((-1.0)*r22*x4935)));
evalcond[2]=((((-1.0)*x4933*x4936))+cj0+(((-1.0)*r12*x4935))+((r11*x4938)));
evalcond[3]=((((-1.0)*x4932*x4935))+((r01*x4937))+((r02*x4930))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4930))+(((-1.0)*x4933*x4935))+((r11*x4937))+(((-1.0)*x4931)));
evalcond[5]=((((-1.0)*r02*x4935))+(((-1.0)*x4932*x4936))+((r01*x4938))+(((-1.0)*x4931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4939=((1.0)*cj5);
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
CheckValue<IkReal> x4941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4939))+(((-1.0)*r00*sj5)))),-1);
if(!x4941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4940.value)+(((1.5707963267949)*(x4941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4942=IKcos(j4);
IkReal x4943=IKsin(j4);
IkReal x4944=((1.0)*sj0);
IkReal x4945=(cj5*r00);
IkReal x4946=(cj5*r10);
IkReal x4947=(cj5*r20);
IkReal x4948=((1.0)*x4942);
IkReal x4949=((1.0)*x4943);
IkReal x4950=(sj5*x4942);
IkReal x4951=(sj5*x4943);
evalcond[0]=((((-1.0)*x4947*x4948))+((r21*x4950))+((r22*x4943)));
evalcond[1]=((((-1.0)*x4947*x4949))+(((-1.0)*r22*x4948))+((r21*x4951)));
evalcond[2]=((((-1.0)*x4946*x4949))+cj0+(((-1.0)*r12*x4948))+((r11*x4951)));
evalcond[3]=(((r02*x4943))+(((-1.0)*x4945*x4948))+((r01*x4950))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4946*x4948))+(((-1.0)*x4944))+((r12*x4943))+((r11*x4950)));
evalcond[5]=((((-1.0)*x4944))+(((-1.0)*x4945*x4949))+(((-1.0)*r02*x4948))+((r01*x4951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4952 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4952.valid){
continue;
}
CheckValue<IkReal> x4953=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4952.value)+(((1.5707963267949)*(x4953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4954=IKcos(j4);
IkReal x4955=IKsin(j4);
IkReal x4956=((1.0)*sj0);
IkReal x4957=(cj5*r00);
IkReal x4958=(cj5*r10);
IkReal x4959=(cj5*r20);
IkReal x4960=((1.0)*x4954);
IkReal x4961=((1.0)*x4955);
IkReal x4962=(sj5*x4954);
IkReal x4963=(sj5*x4955);
evalcond[0]=(((r22*x4955))+(((-1.0)*x4959*x4960))+((r21*x4962)));
evalcond[1]=((((-1.0)*x4959*x4961))+(((-1.0)*r22*x4960))+((r21*x4963)));
evalcond[2]=(cj0+(((-1.0)*x4958*x4961))+((r11*x4963))+(((-1.0)*r12*x4960)));
evalcond[3]=((((-1.0)*x4957*x4960))+((r02*x4955))+((r01*x4962))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4958*x4960))+((r12*x4955))+(((-1.0)*x4956))+((r11*x4962)));
evalcond[5]=((((-1.0)*x4957*x4961))+(((-1.0)*x4956))+(((-1.0)*r02*x4960))+((r01*x4963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4964=IKsin(j0);
IkReal x4965=IKcos(j0);
evalcond[0]=((((0.0304)*x4965))+(((-1.0)*px))+(((-0.11235)*x4964)));
evalcond[1]=((((0.11235)*x4965))+(((0.0304)*x4964))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4966=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4966;
j4eval[1]=IKsign(x4966);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4967=((1.0)*cj5);
IkReal x4968=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4967)));
j4eval[0]=x4968;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4967)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4969=cj5*cj5;
IkReal x4970=((1.0)*r20);
IkReal x4971=(r01*r21);
IkReal x4972=(r21*sj5);
IkReal x4973=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4972))+(((-1.0)*x4971))+((x4969*x4971))+(((-1.0)*r00*x4969*x4970)));
j4eval[0]=x4973;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4970))+((cj0*x4972))))));
j4eval[2]=IKsign(x4973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4974=cj5*cj5;
IkReal x4975=((1.0)*r20);
IkReal x4976=(r01*r21);
IkReal x4977=(r21*sj5);
CheckValue<IkReal> x4978 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4975))+((cj0*x4977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4978.valid){
continue;
}
CheckValue<IkReal> x4979=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4977))+(((-1.0)*x4976))+((x4974*x4976))+(((-1.0)*r00*x4974*x4975)))),-1);
if(!x4979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4978.value)+(((1.5707963267949)*(x4979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4980=IKcos(j4);
IkReal x4981=IKsin(j4);
IkReal x4982=(cj5*r00);
IkReal x4983=(cj5*r10);
IkReal x4984=(cj5*r20);
IkReal x4985=((1.0)*x4980);
IkReal x4986=((1.0)*x4981);
IkReal x4987=(sj5*x4980);
IkReal x4988=(sj5*x4981);
evalcond[0]=(((r22*x4981))+((r21*x4987))+(((-1.0)*x4984*x4985)));
evalcond[1]=((((-1.0)*r22*x4985))+((r21*x4988))+(((-1.0)*x4984*x4986)));
evalcond[2]=(((r01*x4987))+(((-1.0)*x4982*x4985))+cj0+((r02*x4981)));
evalcond[3]=(sj0+((r12*x4981))+((r11*x4987))+(((-1.0)*x4983*x4985)));
evalcond[4]=(cj0+((r11*x4988))+(((-1.0)*r12*x4985))+(((-1.0)*x4983*x4986)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4988))+(((-1.0)*x4982*x4986))+(((-1.0)*r02*x4985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4989=((1.0)*cj5);
CheckValue<IkReal> x4990=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4989)))),-1);
if(!x4990.valid){
continue;
}
CheckValue<IkReal> x4991 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4989)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4990.value)))+(x4991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4992=IKcos(j4);
IkReal x4993=IKsin(j4);
IkReal x4994=(cj5*r00);
IkReal x4995=(cj5*r10);
IkReal x4996=(cj5*r20);
IkReal x4997=((1.0)*x4992);
IkReal x4998=((1.0)*x4993);
IkReal x4999=(sj5*x4992);
IkReal x5000=(sj5*x4993);
evalcond[0]=(((r22*x4993))+((r21*x4999))+(((-1.0)*x4996*x4997)));
evalcond[1]=((((-1.0)*r22*x4997))+((r21*x5000))+(((-1.0)*x4996*x4998)));
evalcond[2]=(cj0+((r02*x4993))+(((-1.0)*x4994*x4997))+((r01*x4999)));
evalcond[3]=(sj0+((r11*x4999))+((r12*x4993))+(((-1.0)*x4995*x4997)));
evalcond[4]=(((r11*x5000))+cj0+(((-1.0)*r12*x4997))+(((-1.0)*x4995*x4998)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4997))+((r01*x5000))+(((-1.0)*x4994*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5001 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5001.valid){
continue;
}
CheckValue<IkReal> x5002=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5001.value)+(((1.5707963267949)*(x5002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5003=IKcos(j4);
IkReal x5004=IKsin(j4);
IkReal x5005=(cj5*r00);
IkReal x5006=(cj5*r10);
IkReal x5007=(cj5*r20);
IkReal x5008=((1.0)*x5003);
IkReal x5009=((1.0)*x5004);
IkReal x5010=(sj5*x5003);
IkReal x5011=(sj5*x5004);
evalcond[0]=((((-1.0)*x5007*x5008))+((r21*x5010))+((r22*x5004)));
evalcond[1]=((((-1.0)*x5007*x5009))+((r21*x5011))+(((-1.0)*r22*x5008)));
evalcond[2]=(cj0+((r02*x5004))+((r01*x5010))+(((-1.0)*x5005*x5008)));
evalcond[3]=(((r12*x5004))+sj0+(((-1.0)*x5006*x5008))+((r11*x5010)));
evalcond[4]=(cj0+(((-1.0)*x5006*x5009))+(((-1.0)*r12*x5008))+((r11*x5011)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5011))+(((-1.0)*x5005*x5009))+(((-1.0)*r02*x5008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5012=IKsin(j0);
IkReal x5013=IKcos(j0);
IkReal x5014=(r00*sj5);
IkReal x5015=(r10*sj5);
IkReal x5016=(cj5*r11);
IkReal x5017=(cj5*r01);
evalcond[0]=(x5014+x5017+(((-1.0)*x5013)));
evalcond[1]=(x5015+x5016+(((-1.0)*x5012)));
evalcond[2]=((((-1.0)*px))+(((-0.08535)*x5017))+(((-0.08535)*x5014))+(((-0.11235)*x5012)));
evalcond[3]=((((-1.0)*py))+(((0.11235)*x5013))+(((-0.08535)*x5016))+(((-0.08535)*x5015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5018=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5018;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5018);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5019=((1.0)*cj5);
IkReal x5020=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5019)));
j4eval[0]=x5020;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5019))+((r11*sj5))))));
j4eval[2]=IKsign(x5020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5021=cj5*cj5;
IkReal x5022=(r01*r11);
IkReal x5023=((1.0)*r00);
IkReal x5024=(r01*sj5);
IkReal x5025=(((cj5*r10*x5024))+((x5021*x5022))+(((-1.0)*r02*r12))+(((-1.0)*x5022))+(((-1.0)*r10*x5021*x5023))+((cj5*r00*r11*sj5)));
j4eval[0]=x5025;
j4eval[1]=IKsign(x5025);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5024))+(((-1.0)*cj0*cj5*x5023))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5026=cj5*cj5;
IkReal x5027=(r01*r11);
IkReal x5028=(cj5*r00);
IkReal x5029=(r01*sj5);
CheckValue<IkReal> x5030 = IKatan2WithCheck(IkReal((((cj0*x5029))+(((-1.0)*cj0*x5028)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5030.valid){
continue;
}
CheckValue<IkReal> x5031=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5029))+(((-1.0)*r02*r12))+((x5026*x5027))+((r11*sj5*x5028))+(((-1.0)*x5027))+(((-1.0)*r00*r10*x5026)))),-1);
if(!x5031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5030.value)+(((1.5707963267949)*(x5031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5032=IKcos(j4);
IkReal x5033=IKsin(j4);
IkReal x5034=(cj5*r00);
IkReal x5035=(r01*sj5);
IkReal x5036=(cj5*r10);
IkReal x5037=(cj5*r20);
IkReal x5038=((1.0)*x5032);
IkReal x5039=((1.0)*x5033);
IkReal x5040=(sj5*x5033);
IkReal x5041=(sj5*x5032);
evalcond[0]=(((r02*x5033))+((x5032*x5035))+(((-1.0)*x5034*x5038)));
evalcond[1]=(((r12*x5033))+(((-1.0)*x5036*x5038))+((r11*x5041)));
evalcond[2]=((((-1.0)*x5037*x5039))+((r21*x5040))+(((-1.0)*r22*x5038)));
evalcond[3]=((1.0)+(((-1.0)*x5037*x5038))+((r21*x5041))+((r22*x5033)));
evalcond[4]=(cj0+(((-1.0)*r12*x5038))+(((-1.0)*x5036*x5039))+((r11*x5040)));
evalcond[5]=((((-1.0)*sj0))+((x5033*x5035))+(((-1.0)*r02*x5038))+(((-1.0)*x5034*x5039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5042=((1.0)*cj5);
CheckValue<IkReal> x5043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5042)))),-1);
if(!x5043.valid){
continue;
}
CheckValue<IkReal> x5044 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5042))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5043.value)))+(x5044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5045=IKcos(j4);
IkReal x5046=IKsin(j4);
IkReal x5047=(cj5*r00);
IkReal x5048=(r01*sj5);
IkReal x5049=(cj5*r10);
IkReal x5050=(cj5*r20);
IkReal x5051=((1.0)*x5045);
IkReal x5052=((1.0)*x5046);
IkReal x5053=(sj5*x5046);
IkReal x5054=(sj5*x5045);
evalcond[0]=(((r02*x5046))+((x5045*x5048))+(((-1.0)*x5047*x5051)));
evalcond[1]=(((r11*x5054))+(((-1.0)*x5049*x5051))+((r12*x5046)));
evalcond[2]=(((r21*x5053))+(((-1.0)*r22*x5051))+(((-1.0)*x5050*x5052)));
evalcond[3]=((1.0)+((r21*x5054))+(((-1.0)*x5050*x5051))+((r22*x5046)));
evalcond[4]=(cj0+(((-1.0)*r12*x5051))+((r11*x5053))+(((-1.0)*x5049*x5052)));
evalcond[5]=((((-1.0)*sj0))+((x5046*x5048))+(((-1.0)*r02*x5051))+(((-1.0)*x5047*x5052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5055 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5055.valid){
continue;
}
CheckValue<IkReal> x5056=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5055.value)+(((1.5707963267949)*(x5056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5057=IKcos(j4);
IkReal x5058=IKsin(j4);
IkReal x5059=(cj5*r00);
IkReal x5060=(r01*sj5);
IkReal x5061=(cj5*r10);
IkReal x5062=(cj5*r20);
IkReal x5063=((1.0)*x5057);
IkReal x5064=((1.0)*x5058);
IkReal x5065=(sj5*x5058);
IkReal x5066=(sj5*x5057);
evalcond[0]=((((-1.0)*x5059*x5063))+((x5057*x5060))+((r02*x5058)));
evalcond[1]=((((-1.0)*x5061*x5063))+((r12*x5058))+((r11*x5066)));
evalcond[2]=((((-1.0)*r22*x5063))+((r21*x5065))+(((-1.0)*x5062*x5064)));
evalcond[3]=((1.0)+((r22*x5058))+((r21*x5066))+(((-1.0)*x5062*x5063)));
evalcond[4]=(cj0+(((-1.0)*x5061*x5064))+(((-1.0)*r12*x5063))+((r11*x5065)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5059*x5064))+(((-1.0)*r02*x5063))+((x5058*x5060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5067=IKcos(j0);
IkReal x5068=IKsin(j0);
evalcond[0]=((((-0.21325)*x5067))+(((-1.0)*px))+(((-0.11235)*x5068)));
evalcond[1]=((((-0.21325)*x5068))+(((0.11235)*x5067))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5069=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5069;
j4eval[1]=IKsign(x5069);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5070=((1.0)*cj5);
IkReal x5071=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5070)));
j4eval[0]=x5071;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5070))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5072=cj5*cj5;
IkReal x5073=((1.0)*r20);
IkReal x5074=(r01*r21);
IkReal x5075=(r21*sj5);
IkReal x5076=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5075))+(((-1.0)*r00*x5072*x5073))+(((-1.0)*x5074))+((x5072*x5074)));
j4eval[0]=x5076;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5075))+(((-1.0)*cj0*cj5*x5073))))));
j4eval[2]=IKsign(x5076);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5077=cj5*cj5;
IkReal x5078=((1.0)*r20);
IkReal x5079=(r01*r21);
IkReal x5080=(r21*sj5);
CheckValue<IkReal> x5081 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5078))+((cj0*x5080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5081.valid){
continue;
}
CheckValue<IkReal> x5082=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5077*x5078))+(((-1.0)*r02*r22))+((x5077*x5079))+(((-1.0)*x5079))+((cj5*r00*x5080)))),-1);
if(!x5082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5081.value)+(((1.5707963267949)*(x5082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5083=IKcos(j4);
IkReal x5084=IKsin(j4);
IkReal x5085=(cj5*r00);
IkReal x5086=(cj5*r10);
IkReal x5087=(cj5*r20);
IkReal x5088=((1.0)*x5083);
IkReal x5089=((1.0)*x5084);
IkReal x5090=(sj5*x5083);
IkReal x5091=(sj5*x5084);
evalcond[0]=((((-1.0)*x5087*x5088))+((r21*x5090))+((r22*x5084)));
evalcond[1]=((((-1.0)*x5087*x5089))+((r21*x5091))+(((-1.0)*r22*x5088)));
evalcond[2]=(cj0+(((-1.0)*x5085*x5088))+((r01*x5090))+((r02*x5084)));
evalcond[3]=(sj0+((r11*x5090))+((r12*x5084))+(((-1.0)*x5086*x5088)));
evalcond[4]=((((-1.0)*r12*x5088))+cj0+((r11*x5091))+(((-1.0)*x5086*x5089)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5085*x5089))+((r01*x5091))+(((-1.0)*r02*x5088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5092=((1.0)*cj5);
CheckValue<IkReal> x5093=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5092))+(((-1.0)*r10*sj5)))),-1);
if(!x5093.valid){
continue;
}
CheckValue<IkReal> x5094 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5092)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5093.value)))+(x5094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5095=IKcos(j4);
IkReal x5096=IKsin(j4);
IkReal x5097=(cj5*r00);
IkReal x5098=(cj5*r10);
IkReal x5099=(cj5*r20);
IkReal x5100=((1.0)*x5095);
IkReal x5101=((1.0)*x5096);
IkReal x5102=(sj5*x5095);
IkReal x5103=(sj5*x5096);
evalcond[0]=(((r22*x5096))+((r21*x5102))+(((-1.0)*x5099*x5100)));
evalcond[1]=((((-1.0)*r22*x5100))+((r21*x5103))+(((-1.0)*x5099*x5101)));
evalcond[2]=((((-1.0)*x5097*x5100))+((r01*x5102))+cj0+((r02*x5096)));
evalcond[3]=(sj0+((r12*x5096))+(((-1.0)*x5098*x5100))+((r11*x5102)));
evalcond[4]=(cj0+(((-1.0)*x5098*x5101))+((r11*x5103))+(((-1.0)*r12*x5100)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5097*x5101))+((r01*x5103))+(((-1.0)*r02*x5100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5104 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5104.valid){
continue;
}
CheckValue<IkReal> x5105=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5104.value)+(((1.5707963267949)*(x5105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5106=IKcos(j4);
IkReal x5107=IKsin(j4);
IkReal x5108=(cj5*r00);
IkReal x5109=(cj5*r10);
IkReal x5110=(cj5*r20);
IkReal x5111=((1.0)*x5106);
IkReal x5112=((1.0)*x5107);
IkReal x5113=(sj5*x5106);
IkReal x5114=(sj5*x5107);
evalcond[0]=((((-1.0)*x5110*x5111))+((r22*x5107))+((r21*x5113)));
evalcond[1]=((((-1.0)*r22*x5111))+(((-1.0)*x5110*x5112))+((r21*x5114)));
evalcond[2]=(((r01*x5113))+cj0+((r02*x5107))+(((-1.0)*x5108*x5111)));
evalcond[3]=(((r12*x5107))+sj0+(((-1.0)*x5109*x5111))+((r11*x5113)));
evalcond[4]=(cj0+(((-1.0)*x5109*x5112))+((r11*x5114))+(((-1.0)*r12*x5111)));
evalcond[5]=(((r01*x5114))+(((-1.0)*sj0))+(((-1.0)*r02*x5111))+(((-1.0)*x5108*x5112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5115=((1.0)*sj5);
IkReal x5116=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5116))+(((-1.0)*r10*x5115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5116))+(((-1.0)*r00*x5115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5116))+(((-1.0)*r10*x5115))))+IKsqr(((((-1.0)*r01*x5116))+(((-1.0)*r00*x5115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5116))+(((-1.0)*r10*x5115))), ((((-1.0)*r01*x5116))+(((-1.0)*r00*x5115))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5117=IKsin(j0);
IkReal x5118=IKcos(j0);
IkReal x5119=(r00*sj5);
IkReal x5120=(r10*sj5);
IkReal x5121=(cj5*r11);
IkReal x5122=(cj5*r01);
evalcond[0]=(x5119+x5118+x5122);
evalcond[1]=(x5117+x5120+x5121);
evalcond[2]=((((-1.0)*px))+(((-0.11235)*x5117))+(((-0.08535)*x5119))+(((-0.08535)*x5122)));
evalcond[3]=((((-1.0)*py))+(((0.11235)*x5118))+(((-0.08535)*x5120))+(((-0.08535)*x5121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5123=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5123;
j4eval[1]=IKsign(x5123);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5124=((1.0)*cj5);
IkReal x5125=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5124)));
j4eval[0]=x5125;
j4eval[1]=IKsign(x5125);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5124))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5126=cj5*cj5;
IkReal x5127=(r01*r11);
IkReal x5128=((1.0)*r00);
IkReal x5129=(r01*sj5);
IkReal x5130=((((-1.0)*r02*r12))+((x5126*x5127))+((cj5*r10*x5129))+(((-1.0)*r10*x5126*x5128))+(((-1.0)*x5127))+((cj5*r00*r11*sj5)));
j4eval[0]=x5130;
j4eval[1]=IKsign(x5130);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5129))+(((-1.0)*cj0*cj5*x5128))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5131=cj5*cj5;
IkReal x5132=(r01*r11);
IkReal x5133=(cj5*r00);
IkReal x5134=(r01*sj5);
CheckValue<IkReal> x5135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((cj5*r10*x5134))+((x5131*x5132))+(((-1.0)*r00*r10*x5131))+(((-1.0)*x5132))+((r11*sj5*x5133)))),-1);
if(!x5135.valid){
continue;
}
CheckValue<IkReal> x5136 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5133))+((cj0*x5134)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5135.value)))+(x5136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5137=IKcos(j4);
IkReal x5138=IKsin(j4);
IkReal x5139=(cj5*r00);
IkReal x5140=(r01*sj5);
IkReal x5141=(cj5*r10);
IkReal x5142=(cj5*r20);
IkReal x5143=((1.0)*x5137);
IkReal x5144=((1.0)*x5138);
IkReal x5145=(sj5*x5138);
IkReal x5146=(sj5*x5137);
evalcond[0]=(((x5137*x5140))+(((-1.0)*x5139*x5143))+((r02*x5138)));
evalcond[1]=(((r12*x5138))+(((-1.0)*x5141*x5143))+((r11*x5146)));
evalcond[2]=(((r21*x5145))+(((-1.0)*x5142*x5144))+(((-1.0)*r22*x5143)));
evalcond[3]=((-1.0)+((r21*x5146))+((r22*x5138))+(((-1.0)*x5142*x5143)));
evalcond[4]=(cj0+(((-1.0)*x5141*x5144))+(((-1.0)*r12*x5143))+((r11*x5145)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5143))+((x5138*x5140))+(((-1.0)*x5139*x5144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5147=((1.0)*cj5);
CheckValue<IkReal> x5148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5147)))),-1);
if(!x5148.valid){
continue;
}
CheckValue<IkReal> x5149 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5147)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5148.value)))+(x5149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5150=IKcos(j4);
IkReal x5151=IKsin(j4);
IkReal x5152=(cj5*r00);
IkReal x5153=(r01*sj5);
IkReal x5154=(cj5*r10);
IkReal x5155=(cj5*r20);
IkReal x5156=((1.0)*x5150);
IkReal x5157=((1.0)*x5151);
IkReal x5158=(sj5*x5151);
IkReal x5159=(sj5*x5150);
evalcond[0]=(((r02*x5151))+(((-1.0)*x5152*x5156))+((x5150*x5153)));
evalcond[1]=((((-1.0)*x5154*x5156))+((r11*x5159))+((r12*x5151)));
evalcond[2]=(((r21*x5158))+(((-1.0)*r22*x5156))+(((-1.0)*x5155*x5157)));
evalcond[3]=((-1.0)+((r21*x5159))+((r22*x5151))+(((-1.0)*x5155*x5156)));
evalcond[4]=((((-1.0)*x5154*x5157))+((r11*x5158))+cj0+(((-1.0)*r12*x5156)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5152*x5157))+((x5151*x5153))+(((-1.0)*r02*x5156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5160=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5160.valid){
continue;
}
CheckValue<IkReal> x5161 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5160.value)))+(x5161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5162=IKcos(j4);
IkReal x5163=IKsin(j4);
IkReal x5164=(cj5*r00);
IkReal x5165=(r01*sj5);
IkReal x5166=(cj5*r10);
IkReal x5167=(cj5*r20);
IkReal x5168=((1.0)*x5162);
IkReal x5169=((1.0)*x5163);
IkReal x5170=(sj5*x5163);
IkReal x5171=(sj5*x5162);
evalcond[0]=(((x5162*x5165))+(((-1.0)*x5164*x5168))+((r02*x5163)));
evalcond[1]=(((r12*x5163))+((r11*x5171))+(((-1.0)*x5166*x5168)));
evalcond[2]=((((-1.0)*r22*x5168))+(((-1.0)*x5167*x5169))+((r21*x5170)));
evalcond[3]=((-1.0)+((r22*x5163))+(((-1.0)*x5167*x5168))+((r21*x5171)));
evalcond[4]=(cj0+(((-1.0)*r12*x5168))+((r11*x5170))+(((-1.0)*x5166*x5169)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5168))+(((-1.0)*x5164*x5169))+((x5163*x5165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5172=IKcos(j0);
IkReal x5173=IKsin(j0);
evalcond[0]=((((-0.11235)*x5173))+(((0.21325)*x5172))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x5172))+(((0.21325)*x5173))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5174=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5174;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5174);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5175=((1.0)*cj5);
IkReal x5176=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5175)));
j4eval[0]=x5176;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5175)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5177=((1.0)*cj5);
IkReal x5178=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5177)));
j4eval[0]=x5178;
j4eval[1]=IKsign(x5178);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5177))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5179=((1.0)*cj5);
CheckValue<IkReal> x5180 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5179))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5180.valid){
continue;
}
CheckValue<IkReal> x5181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5179)))),-1);
if(!x5181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5180.value)+(((1.5707963267949)*(x5181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5182=IKcos(j4);
IkReal x5183=IKsin(j4);
IkReal x5184=((1.0)*sj0);
IkReal x5185=(cj5*r00);
IkReal x5186=(cj5*r10);
IkReal x5187=(cj5*r20);
IkReal x5188=((1.0)*x5182);
IkReal x5189=((1.0)*x5183);
IkReal x5190=(sj5*x5182);
IkReal x5191=(sj5*x5183);
evalcond[0]=(((r22*x5183))+((r21*x5190))+(((-1.0)*x5187*x5188)));
evalcond[1]=((((-1.0)*r22*x5188))+((r21*x5191))+(((-1.0)*x5187*x5189)));
evalcond[2]=(cj0+((r11*x5191))+(((-1.0)*r12*x5188))+(((-1.0)*x5186*x5189)));
evalcond[3]=((((-1.0)*x5185*x5188))+((r02*x5183))+((r01*x5190))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5190))+(((-1.0)*x5184))+(((-1.0)*x5186*x5188))+((r12*x5183)));
evalcond[5]=((((-1.0)*r02*x5188))+(((-1.0)*x5185*x5189))+((r01*x5191))+(((-1.0)*x5184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5192=((1.0)*cj5);
CheckValue<IkReal> x5193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5192))+(((-1.0)*r00*sj5)))),-1);
if(!x5193.valid){
continue;
}
CheckValue<IkReal> x5194 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5193.value)))+(x5194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5195=IKcos(j4);
IkReal x5196=IKsin(j4);
IkReal x5197=((1.0)*sj0);
IkReal x5198=(cj5*r00);
IkReal x5199=(cj5*r10);
IkReal x5200=(cj5*r20);
IkReal x5201=((1.0)*x5195);
IkReal x5202=((1.0)*x5196);
IkReal x5203=(sj5*x5195);
IkReal x5204=(sj5*x5196);
evalcond[0]=((((-1.0)*x5200*x5201))+((r22*x5196))+((r21*x5203)));
evalcond[1]=((((-1.0)*x5200*x5202))+(((-1.0)*r22*x5201))+((r21*x5204)));
evalcond[2]=((((-1.0)*x5199*x5202))+cj0+((r11*x5204))+(((-1.0)*r12*x5201)));
evalcond[3]=(((r01*x5203))+((r02*x5196))+(((-1.0)*x5198*x5201))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5199*x5201))+(((-1.0)*x5197))+((r11*x5203))+((r12*x5196)));
evalcond[5]=((((-1.0)*r02*x5201))+((r01*x5204))+(((-1.0)*x5197))+(((-1.0)*x5198*x5202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5205 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5205.valid){
continue;
}
CheckValue<IkReal> x5206=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5205.value)+(((1.5707963267949)*(x5206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5207=IKcos(j4);
IkReal x5208=IKsin(j4);
IkReal x5209=((1.0)*sj0);
IkReal x5210=(cj5*r00);
IkReal x5211=(cj5*r10);
IkReal x5212=(cj5*r20);
IkReal x5213=((1.0)*x5207);
IkReal x5214=((1.0)*x5208);
IkReal x5215=(sj5*x5207);
IkReal x5216=(sj5*x5208);
evalcond[0]=((((-1.0)*x5212*x5213))+((r22*x5208))+((r21*x5215)));
evalcond[1]=((((-1.0)*x5212*x5214))+(((-1.0)*r22*x5213))+((r21*x5216)));
evalcond[2]=(cj0+((r11*x5216))+(((-1.0)*x5211*x5214))+(((-1.0)*r12*x5213)));
evalcond[3]=(((r01*x5215))+((r02*x5208))+(((-1.0)*cj0))+(((-1.0)*x5210*x5213)));
evalcond[4]=((((-1.0)*x5209))+((r11*x5215))+(((-1.0)*x5211*x5213))+((r12*x5208)));
evalcond[5]=((((-1.0)*x5209))+((r01*x5216))+(((-1.0)*x5210*x5214))+(((-1.0)*r02*x5213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5217=IKcos(j0);
IkReal x5218=IKsin(j0);
evalcond[0]=((((-0.4569)*x5217))+(((-0.11235)*x5218))+(((-1.0)*px)));
evalcond[1]=((((-0.4569)*x5218))+(((-1.0)*py))+(((0.11235)*x5217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5219=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5219;
j4eval[1]=IKsign(x5219);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5220=((1.0)*cj5);
IkReal x5221=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5220)));
j4eval[0]=x5221;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5220)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5222=cj5*cj5;
IkReal x5223=((1.0)*r20);
IkReal x5224=(r01*r21);
IkReal x5225=(r21*sj5);
IkReal x5226=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5225))+((x5222*x5224))+(((-1.0)*r00*x5222*x5223))+(((-1.0)*x5224)));
j4eval[0]=x5226;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5223))+((cj0*x5225)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5227=cj5*cj5;
IkReal x5228=((1.0)*r20);
IkReal x5229=(r01*r21);
IkReal x5230=(r21*sj5);
CheckValue<IkReal> x5231=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5227*x5228))+((x5227*x5229))+(((-1.0)*x5229))+((cj5*r00*x5230)))),-1);
if(!x5231.valid){
continue;
}
CheckValue<IkReal> x5232 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5230))+(((-1.0)*cj0*cj5*x5228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5231.value)))+(x5232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5233=IKcos(j4);
IkReal x5234=IKsin(j4);
IkReal x5235=(cj5*r00);
IkReal x5236=(cj5*r10);
IkReal x5237=(cj5*r20);
IkReal x5238=((1.0)*x5233);
IkReal x5239=((1.0)*x5234);
IkReal x5240=(sj5*x5233);
IkReal x5241=(sj5*x5234);
evalcond[0]=(((r21*x5240))+(((-1.0)*x5237*x5238))+((r22*x5234)));
evalcond[1]=((((-1.0)*r22*x5238))+((r21*x5241))+(((-1.0)*x5237*x5239)));
evalcond[2]=((((-1.0)*x5235*x5238))+cj0+((r01*x5240))+((r02*x5234)));
evalcond[3]=((((-1.0)*x5236*x5238))+sj0+((r11*x5240))+((r12*x5234)));
evalcond[4]=((((-1.0)*x5236*x5239))+((r11*x5241))+cj0+(((-1.0)*r12*x5238)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5235*x5239))+(((-1.0)*r02*x5238))+((r01*x5241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5242=((1.0)*cj5);
CheckValue<IkReal> x5243=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5242)))),-1);
if(!x5243.valid){
continue;
}
CheckValue<IkReal> x5244 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5242))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5243.value)))+(x5244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5245=IKcos(j4);
IkReal x5246=IKsin(j4);
IkReal x5247=(cj5*r00);
IkReal x5248=(cj5*r10);
IkReal x5249=(cj5*r20);
IkReal x5250=((1.0)*x5245);
IkReal x5251=((1.0)*x5246);
IkReal x5252=(sj5*x5245);
IkReal x5253=(sj5*x5246);
evalcond[0]=((((-1.0)*x5249*x5250))+((r21*x5252))+((r22*x5246)));
evalcond[1]=((((-1.0)*x5249*x5251))+((r21*x5253))+(((-1.0)*r22*x5250)));
evalcond[2]=(((r01*x5252))+cj0+(((-1.0)*x5247*x5250))+((r02*x5246)));
evalcond[3]=(sj0+(((-1.0)*x5248*x5250))+((r12*x5246))+((r11*x5252)));
evalcond[4]=((((-1.0)*x5248*x5251))+cj0+(((-1.0)*r12*x5250))+((r11*x5253)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5250))+((r01*x5253))+(((-1.0)*x5247*x5251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5254 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5254.valid){
continue;
}
CheckValue<IkReal> x5255=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5254.value)+(((1.5707963267949)*(x5255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5256=IKcos(j4);
IkReal x5257=IKsin(j4);
IkReal x5258=(cj5*r00);
IkReal x5259=(cj5*r10);
IkReal x5260=(cj5*r20);
IkReal x5261=((1.0)*x5256);
IkReal x5262=((1.0)*x5257);
IkReal x5263=(sj5*x5256);
IkReal x5264=(sj5*x5257);
evalcond[0]=(((r22*x5257))+((r21*x5263))+(((-1.0)*x5260*x5261)));
evalcond[1]=(((r21*x5264))+(((-1.0)*r22*x5261))+(((-1.0)*x5260*x5262)));
evalcond[2]=((((-1.0)*x5258*x5261))+cj0+((r01*x5263))+((r02*x5257)));
evalcond[3]=(sj0+((r12*x5257))+(((-1.0)*x5259*x5261))+((r11*x5263)));
evalcond[4]=((((-1.0)*x5259*x5262))+cj0+(((-1.0)*r12*x5261))+((r11*x5264)));
evalcond[5]=((((-1.0)*x5258*x5262))+(((-1.0)*sj0))+((r01*x5264))+(((-1.0)*r02*x5261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5265=IKcos(j0);
IkReal x5266=IKsin(j0);
evalcond[0]=((((-0.11235)*x5266))+(((-1.0)*px))+(((-0.0304)*x5265)));
evalcond[1]=((((0.11235)*x5265))+(((-1.0)*py))+(((-0.0304)*x5266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5267=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5267;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5268=((1.0)*cj5);
IkReal x5269=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5268)));
j4eval[0]=x5269;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5268))))));
j4eval[2]=IKsign(x5269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5270=((1.0)*cj5);
IkReal x5271=((((-1.0)*r01*x5270))+(((-1.0)*r00*sj5)));
j4eval[0]=x5271;
j4eval[1]=IKsign(x5271);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5270))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5272=((1.0)*cj5);
CheckValue<IkReal> x5273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5272))+(((-1.0)*r00*sj5)))),-1);
if(!x5273.valid){
continue;
}
CheckValue<IkReal> x5274 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5272)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5273.value)))+(x5274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5275=IKcos(j4);
IkReal x5276=IKsin(j4);
IkReal x5277=((1.0)*sj0);
IkReal x5278=(cj5*r00);
IkReal x5279=(cj5*r10);
IkReal x5280=(cj5*r20);
IkReal x5281=((1.0)*x5275);
IkReal x5282=((1.0)*x5276);
IkReal x5283=(sj5*x5275);
IkReal x5284=(sj5*x5276);
evalcond[0]=(((r22*x5276))+((r21*x5283))+(((-1.0)*x5280*x5281)));
evalcond[1]=((((-1.0)*r22*x5281))+((r21*x5284))+(((-1.0)*x5280*x5282)));
evalcond[2]=((((-1.0)*x5279*x5282))+cj0+(((-1.0)*r12*x5281))+((r11*x5284)));
evalcond[3]=(((r02*x5276))+(((-1.0)*x5278*x5281))+((r01*x5283))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5279*x5281))+(((-1.0)*x5277))+((r11*x5283))+((r12*x5276)));
evalcond[5]=((((-1.0)*x5278*x5282))+(((-1.0)*x5277))+((r01*x5284))+(((-1.0)*r02*x5281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5285=((1.0)*cj5);
CheckValue<IkReal> x5286 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5286.valid){
continue;
}
CheckValue<IkReal> x5287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5285))+(((-1.0)*r00*sj5)))),-1);
if(!x5287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5286.value)+(((1.5707963267949)*(x5287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5288=IKcos(j4);
IkReal x5289=IKsin(j4);
IkReal x5290=((1.0)*sj0);
IkReal x5291=(cj5*r00);
IkReal x5292=(cj5*r10);
IkReal x5293=(cj5*r20);
IkReal x5294=((1.0)*x5288);
IkReal x5295=((1.0)*x5289);
IkReal x5296=(sj5*x5288);
IkReal x5297=(sj5*x5289);
evalcond[0]=(((r22*x5289))+((r21*x5296))+(((-1.0)*x5293*x5294)));
evalcond[1]=((((-1.0)*r22*x5294))+((r21*x5297))+(((-1.0)*x5293*x5295)));
evalcond[2]=(cj0+(((-1.0)*r12*x5294))+(((-1.0)*x5292*x5295))+((r11*x5297)));
evalcond[3]=(((r02*x5289))+((r01*x5296))+(((-1.0)*x5291*x5294))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5289))+(((-1.0)*x5290))+(((-1.0)*x5292*x5294))+((r11*x5296)));
evalcond[5]=((((-1.0)*x5290))+((r01*x5297))+(((-1.0)*r02*x5294))+(((-1.0)*x5291*x5295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5298 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5298.valid){
continue;
}
CheckValue<IkReal> x5299=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5298.value)+(((1.5707963267949)*(x5299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5300=IKcos(j4);
IkReal x5301=IKsin(j4);
IkReal x5302=((1.0)*sj0);
IkReal x5303=(cj5*r00);
IkReal x5304=(cj5*r10);
IkReal x5305=(cj5*r20);
IkReal x5306=((1.0)*x5300);
IkReal x5307=((1.0)*x5301);
IkReal x5308=(sj5*x5300);
IkReal x5309=(sj5*x5301);
evalcond[0]=(((r21*x5308))+(((-1.0)*x5305*x5306))+((r22*x5301)));
evalcond[1]=((((-1.0)*r22*x5306))+((r21*x5309))+(((-1.0)*x5305*x5307)));
evalcond[2]=(cj0+(((-1.0)*r12*x5306))+((r11*x5309))+(((-1.0)*x5304*x5307)));
evalcond[3]=((((-1.0)*x5303*x5306))+((r02*x5301))+((r01*x5308))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5302))+((r12*x5301))+((r11*x5308))+(((-1.0)*x5304*x5306)));
evalcond[5]=((((-1.0)*x5303*x5307))+(((-1.0)*x5302))+(((-1.0)*r02*x5306))+((r01*x5309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5310=((1.0)*sj5);
IkReal x5311=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5311))+(((-1.0)*r10*x5310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5310))+(((-1.0)*r01*x5311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5311))+(((-1.0)*r10*x5310))))+IKsqr(((((-1.0)*r00*x5310))+(((-1.0)*r01*x5311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5311))+(((-1.0)*r10*x5310))), ((((-1.0)*r00*x5310))+(((-1.0)*r01*x5311))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5312=IKsin(j0);
IkReal x5313=IKcos(j0);
IkReal x5314=(r00*sj5);
IkReal x5315=(r10*sj5);
IkReal x5316=(cj5*r11);
IkReal x5317=(cj5*r01);
evalcond[0]=(x5313+x5317+x5314);
evalcond[1]=(x5312+x5316+x5315);
evalcond[2]=((((-0.11235)*x5312))+(((-1.0)*px))+(((-0.08535)*x5317))+(((-0.08535)*x5314)));
evalcond[3]=((((-1.0)*py))+(((0.11235)*x5313))+(((-0.08535)*x5316))+(((-0.08535)*x5315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5318=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5318;
j4eval[1]=IKsign(x5318);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5319=((1.0)*cj5);
IkReal x5320=((((-1.0)*r11*x5319))+(((-1.0)*r10*sj5)));
j4eval[0]=x5320;
j4eval[1]=IKsign(x5320);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5319))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5321=cj5*cj5;
IkReal x5322=(r01*r11);
IkReal x5323=((1.0)*r00);
IkReal x5324=(r01*sj5);
IkReal x5325=((((-1.0)*x5322))+(((-1.0)*r02*r12))+((x5321*x5322))+(((-1.0)*r10*x5321*x5323))+((cj5*r10*x5324))+((cj5*r00*r11*sj5)));
j4eval[0]=x5325;
j4eval[1]=IKsign(x5325);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5324))+(((-1.0)*cj0*cj5*x5323))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5326=cj5*cj5;
IkReal x5327=(r01*r11);
IkReal x5328=(cj5*r00);
IkReal x5329=(r01*sj5);
CheckValue<IkReal> x5330 = IKatan2WithCheck(IkReal((((cj0*x5329))+(((-1.0)*cj0*x5328)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5330.valid){
continue;
}
CheckValue<IkReal> x5331=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5327))+(((-1.0)*r00*r10*x5326))+(((-1.0)*r02*r12))+((x5326*x5327))+((r11*sj5*x5328))+((cj5*r10*x5329)))),-1);
if(!x5331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5330.value)+(((1.5707963267949)*(x5331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5332=IKcos(j4);
IkReal x5333=IKsin(j4);
IkReal x5334=(cj5*r00);
IkReal x5335=(r01*sj5);
IkReal x5336=(cj5*r10);
IkReal x5337=(cj5*r20);
IkReal x5338=((1.0)*x5332);
IkReal x5339=((1.0)*x5333);
IkReal x5340=(sj5*x5333);
IkReal x5341=(sj5*x5332);
evalcond[0]=(((r02*x5333))+((x5332*x5335))+(((-1.0)*x5334*x5338)));
evalcond[1]=(((r12*x5333))+((r11*x5341))+(((-1.0)*x5336*x5338)));
evalcond[2]=((((-1.0)*r22*x5338))+((r21*x5340))+(((-1.0)*x5337*x5339)));
evalcond[3]=((-1.0)+((r22*x5333))+((r21*x5341))+(((-1.0)*x5337*x5338)));
evalcond[4]=(cj0+(((-1.0)*r12*x5338))+((r11*x5340))+(((-1.0)*x5336*x5339)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5338))+(((-1.0)*x5334*x5339))+((x5333*x5335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5342=((1.0)*cj5);
CheckValue<IkReal> x5343 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5342)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5343.valid){
continue;
}
CheckValue<IkReal> x5344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5342)))),-1);
if(!x5344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5343.value)+(((1.5707963267949)*(x5344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5345=IKcos(j4);
IkReal x5346=IKsin(j4);
IkReal x5347=(cj5*r00);
IkReal x5348=(r01*sj5);
IkReal x5349=(cj5*r10);
IkReal x5350=(cj5*r20);
IkReal x5351=((1.0)*x5345);
IkReal x5352=((1.0)*x5346);
IkReal x5353=(sj5*x5346);
IkReal x5354=(sj5*x5345);
evalcond[0]=(((r02*x5346))+((x5345*x5348))+(((-1.0)*x5347*x5351)));
evalcond[1]=(((r12*x5346))+((r11*x5354))+(((-1.0)*x5349*x5351)));
evalcond[2]=((((-1.0)*x5350*x5352))+(((-1.0)*r22*x5351))+((r21*x5353)));
evalcond[3]=((-1.0)+(((-1.0)*x5350*x5351))+((r22*x5346))+((r21*x5354)));
evalcond[4]=(cj0+((r11*x5353))+(((-1.0)*r12*x5351))+(((-1.0)*x5349*x5352)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5351))+((x5346*x5348))+(((-1.0)*x5347*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5355=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5355.valid){
continue;
}
CheckValue<IkReal> x5356 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5355.value)))+(x5356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5357=IKcos(j4);
IkReal x5358=IKsin(j4);
IkReal x5359=(cj5*r00);
IkReal x5360=(r01*sj5);
IkReal x5361=(cj5*r10);
IkReal x5362=(cj5*r20);
IkReal x5363=((1.0)*x5357);
IkReal x5364=((1.0)*x5358);
IkReal x5365=(sj5*x5358);
IkReal x5366=(sj5*x5357);
evalcond[0]=(((x5357*x5360))+(((-1.0)*x5359*x5363))+((r02*x5358)));
evalcond[1]=(((r12*x5358))+(((-1.0)*x5361*x5363))+((r11*x5366)));
evalcond[2]=((((-1.0)*r22*x5363))+((r21*x5365))+(((-1.0)*x5362*x5364)));
evalcond[3]=((-1.0)+((r22*x5358))+((r21*x5366))+(((-1.0)*x5362*x5363)));
evalcond[4]=(cj0+(((-1.0)*x5361*x5364))+(((-1.0)*r12*x5363))+((r11*x5365)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5363))+(((-1.0)*x5359*x5364))+((x5358*x5360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5367=IKcos(j0);
IkReal x5368=IKsin(j0);
evalcond[0]=((((-0.11235)*x5368))+(((-1.0)*px))+(((0.21325)*x5367)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x5367))+(((0.21325)*x5368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5369=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5369;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5370=((1.0)*cj5);
IkReal x5371=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5370)));
j4eval[0]=x5371;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5370)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5371);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5372=((1.0)*cj5);
IkReal x5373=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5372)));
j4eval[0]=x5373;
j4eval[1]=IKsign(x5373);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5372))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5374=((1.0)*cj5);
CheckValue<IkReal> x5375 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5374)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5375.valid){
continue;
}
CheckValue<IkReal> x5376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5374)))),-1);
if(!x5376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5375.value)+(((1.5707963267949)*(x5376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5377=IKcos(j4);
IkReal x5378=IKsin(j4);
IkReal x5379=((1.0)*sj0);
IkReal x5380=(cj5*r00);
IkReal x5381=(cj5*r10);
IkReal x5382=(cj5*r20);
IkReal x5383=((1.0)*x5377);
IkReal x5384=((1.0)*x5378);
IkReal x5385=(sj5*x5377);
IkReal x5386=(sj5*x5378);
evalcond[0]=((((-1.0)*x5382*x5383))+((r22*x5378))+((r21*x5385)));
evalcond[1]=((((-1.0)*x5382*x5384))+(((-1.0)*r22*x5383))+((r21*x5386)));
evalcond[2]=(cj0+((r11*x5386))+(((-1.0)*r12*x5383))+(((-1.0)*x5381*x5384)));
evalcond[3]=(((r02*x5378))+(((-1.0)*x5380*x5383))+((r01*x5385))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5379))+((r11*x5385))+((r12*x5378))+(((-1.0)*x5381*x5383)));
evalcond[5]=((((-1.0)*x5379))+(((-1.0)*r02*x5383))+(((-1.0)*x5380*x5384))+((r01*x5386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5387=((1.0)*cj5);
CheckValue<IkReal> x5388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5387)))),-1);
if(!x5388.valid){
continue;
}
CheckValue<IkReal> x5389 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5388.value)))+(x5389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5390=IKcos(j4);
IkReal x5391=IKsin(j4);
IkReal x5392=((1.0)*sj0);
IkReal x5393=(cj5*r00);
IkReal x5394=(cj5*r10);
IkReal x5395=(cj5*r20);
IkReal x5396=((1.0)*x5390);
IkReal x5397=((1.0)*x5391);
IkReal x5398=(sj5*x5390);
IkReal x5399=(sj5*x5391);
evalcond[0]=(((r22*x5391))+((r21*x5398))+(((-1.0)*x5395*x5396)));
evalcond[1]=((((-1.0)*r22*x5396))+((r21*x5399))+(((-1.0)*x5395*x5397)));
evalcond[2]=(cj0+(((-1.0)*x5394*x5397))+((r11*x5399))+(((-1.0)*r12*x5396)));
evalcond[3]=(((r02*x5391))+(((-1.0)*x5393*x5396))+((r01*x5398))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5394*x5396))+((r11*x5398))+((r12*x5391))+(((-1.0)*x5392)));
evalcond[5]=((((-1.0)*x5393*x5397))+(((-1.0)*r02*x5396))+(((-1.0)*x5392))+((r01*x5399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5400 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5400.valid){
continue;
}
CheckValue<IkReal> x5401=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5400.value)+(((1.5707963267949)*(x5401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5402=IKcos(j4);
IkReal x5403=IKsin(j4);
IkReal x5404=((1.0)*sj0);
IkReal x5405=(cj5*r00);
IkReal x5406=(cj5*r10);
IkReal x5407=(cj5*r20);
IkReal x5408=((1.0)*x5402);
IkReal x5409=((1.0)*x5403);
IkReal x5410=(sj5*x5402);
IkReal x5411=(sj5*x5403);
evalcond[0]=(((r22*x5403))+(((-1.0)*x5407*x5408))+((r21*x5410)));
evalcond[1]=((((-1.0)*x5407*x5409))+(((-1.0)*r22*x5408))+((r21*x5411)));
evalcond[2]=(((r11*x5411))+cj0+(((-1.0)*x5406*x5409))+(((-1.0)*r12*x5408)));
evalcond[3]=(((r02*x5403))+((r01*x5410))+(((-1.0)*x5405*x5408))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5403))+((r11*x5410))+(((-1.0)*x5406*x5408))+(((-1.0)*x5404)));
evalcond[5]=((((-1.0)*r02*x5408))+(((-1.0)*x5404))+((r01*x5411))+(((-1.0)*x5405*x5409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5412=IKsin(j0);
IkReal x5413=IKcos(j0);
IkReal x5414=(r00*sj5);
IkReal x5415=(r10*sj5);
IkReal x5416=(cj5*r11);
IkReal x5417=(cj5*r01);
evalcond[0]=((((-1.0)*x5413))+x5414+x5417);
evalcond[1]=((((-1.0)*x5412))+x5415+x5416);
evalcond[2]=((((-0.08535)*x5414))+(((-0.08535)*x5417))+(((-0.11235)*x5412))+(((-1.0)*px)));
evalcond[3]=((((-0.08535)*x5415))+(((-0.08535)*x5416))+(((0.11235)*x5413))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5418=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5418;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5419=((1.0)*cj5);
IkReal x5420=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5419)));
j4eval[0]=x5420;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5419))+((r11*sj5))))));
j4eval[2]=IKsign(x5420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5421=cj5*cj5;
IkReal x5422=(r01*r11);
IkReal x5423=((1.0)*r00);
IkReal x5424=(r01*sj5);
IkReal x5425=((((-1.0)*r02*r12))+((cj5*r10*x5424))+(((-1.0)*r10*x5421*x5423))+((x5421*x5422))+(((-1.0)*x5422))+((cj5*r00*r11*sj5)));
j4eval[0]=x5425;
j4eval[1]=IKsign(x5425);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5423))+((cj0*x5424))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5426=cj5*cj5;
IkReal x5427=(r01*r11);
IkReal x5428=(cj5*r00);
IkReal x5429=(r01*sj5);
CheckValue<IkReal> x5430=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5428))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5426))+((x5426*x5427))+((cj5*r10*x5429))+(((-1.0)*x5427)))),-1);
if(!x5430.valid){
continue;
}
CheckValue<IkReal> x5431 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5428))+((cj0*x5429)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5430.value)))+(x5431.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5432=IKcos(j4);
IkReal x5433=IKsin(j4);
IkReal x5434=(cj5*r00);
IkReal x5435=(r01*sj5);
IkReal x5436=(cj5*r10);
IkReal x5437=(cj5*r20);
IkReal x5438=((1.0)*x5432);
IkReal x5439=((1.0)*x5433);
IkReal x5440=(sj5*x5433);
IkReal x5441=(sj5*x5432);
evalcond[0]=(((r02*x5433))+(((-1.0)*x5434*x5438))+((x5432*x5435)));
evalcond[1]=((((-1.0)*x5436*x5438))+((r11*x5441))+((r12*x5433)));
evalcond[2]=((((-1.0)*x5437*x5439))+(((-1.0)*r22*x5438))+((r21*x5440)));
evalcond[3]=((1.0)+((r22*x5433))+(((-1.0)*x5437*x5438))+((r21*x5441)));
evalcond[4]=(cj0+(((-1.0)*r12*x5438))+(((-1.0)*x5436*x5439))+((r11*x5440)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5438))+(((-1.0)*x5434*x5439))+((x5433*x5435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5442=((1.0)*cj5);
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5442))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
CheckValue<IkReal> x5444=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5442)))),-1);
if(!x5444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5443.value)+(((1.5707963267949)*(x5444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5445=IKcos(j4);
IkReal x5446=IKsin(j4);
IkReal x5447=(cj5*r00);
IkReal x5448=(r01*sj5);
IkReal x5449=(cj5*r10);
IkReal x5450=(cj5*r20);
IkReal x5451=((1.0)*x5445);
IkReal x5452=((1.0)*x5446);
IkReal x5453=(sj5*x5446);
IkReal x5454=(sj5*x5445);
evalcond[0]=(((x5445*x5448))+(((-1.0)*x5447*x5451))+((r02*x5446)));
evalcond[1]=(((r12*x5446))+(((-1.0)*x5449*x5451))+((r11*x5454)));
evalcond[2]=((((-1.0)*x5450*x5452))+((r21*x5453))+(((-1.0)*r22*x5451)));
evalcond[3]=((1.0)+(((-1.0)*x5450*x5451))+((r21*x5454))+((r22*x5446)));
evalcond[4]=((((-1.0)*r12*x5451))+cj0+(((-1.0)*x5449*x5452))+((r11*x5453)));
evalcond[5]=((((-1.0)*sj0))+((x5446*x5448))+(((-1.0)*r02*x5451))+(((-1.0)*x5447*x5452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5455 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5455.valid){
continue;
}
CheckValue<IkReal> x5456=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5455.value)+(((1.5707963267949)*(x5456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5457=IKcos(j4);
IkReal x5458=IKsin(j4);
IkReal x5459=(cj5*r00);
IkReal x5460=(r01*sj5);
IkReal x5461=(cj5*r10);
IkReal x5462=(cj5*r20);
IkReal x5463=((1.0)*x5457);
IkReal x5464=((1.0)*x5458);
IkReal x5465=(sj5*x5458);
IkReal x5466=(sj5*x5457);
evalcond[0]=((((-1.0)*x5459*x5463))+((r02*x5458))+((x5457*x5460)));
evalcond[1]=(((r12*x5458))+((r11*x5466))+(((-1.0)*x5461*x5463)));
evalcond[2]=(((r21*x5465))+(((-1.0)*x5462*x5464))+(((-1.0)*r22*x5463)));
evalcond[3]=((1.0)+((r22*x5458))+((r21*x5466))+(((-1.0)*x5462*x5463)));
evalcond[4]=(cj0+((r11*x5465))+(((-1.0)*x5461*x5464))+(((-1.0)*r12*x5463)));
evalcond[5]=((((-1.0)*x5459*x5464))+(((-1.0)*sj0))+((x5458*x5460))+(((-1.0)*r02*x5463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5467=IKcos(j0);
IkReal x5468=IKsin(j0);
evalcond[0]=((((-0.21325)*x5467))+(((-1.0)*px))+(((-0.11235)*x5468)));
evalcond[1]=((((-0.21325)*x5468))+(((-1.0)*py))+(((0.11235)*x5467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5469=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5469;
j4eval[1]=IKsign(x5469);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5470=((1.0)*cj5);
IkReal x5471=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5470)));
j4eval[0]=x5471;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5470)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5472=cj5*cj5;
IkReal x5473=((1.0)*r20);
IkReal x5474=(r01*r21);
IkReal x5475=(r21*sj5);
IkReal x5476=(((cj5*r01*r20*sj5))+(((-1.0)*x5474))+(((-1.0)*r02*r22))+((x5472*x5474))+((cj5*r00*x5475))+(((-1.0)*r00*x5472*x5473)));
j4eval[0]=x5476;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5473))+((cj0*x5475)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5477=cj5*cj5;
IkReal x5478=((1.0)*r20);
IkReal x5479=(r01*r21);
IkReal x5480=(r21*sj5);
CheckValue<IkReal> x5481=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5479))+(((-1.0)*r02*r22))+((x5477*x5479))+((cj5*r00*x5480))+(((-1.0)*r00*x5477*x5478)))),-1);
if(!x5481.valid){
continue;
}
CheckValue<IkReal> x5482 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5480))+(((-1.0)*cj0*cj5*x5478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5481.value)))+(x5482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5483=IKcos(j4);
IkReal x5484=IKsin(j4);
IkReal x5485=(cj5*r00);
IkReal x5486=(cj5*r10);
IkReal x5487=(cj5*r20);
IkReal x5488=((1.0)*x5483);
IkReal x5489=((1.0)*x5484);
IkReal x5490=(sj5*x5483);
IkReal x5491=(sj5*x5484);
evalcond[0]=(((r21*x5490))+(((-1.0)*x5487*x5488))+((r22*x5484)));
evalcond[1]=((((-1.0)*r22*x5488))+((r21*x5491))+(((-1.0)*x5487*x5489)));
evalcond[2]=(((r01*x5490))+cj0+(((-1.0)*x5485*x5488))+((r02*x5484)));
evalcond[3]=(sj0+(((-1.0)*x5486*x5488))+((r12*x5484))+((r11*x5490)));
evalcond[4]=((((-1.0)*r12*x5488))+cj0+(((-1.0)*x5486*x5489))+((r11*x5491)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5491))+(((-1.0)*x5485*x5489))+(((-1.0)*r02*x5488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5492=((1.0)*cj5);
CheckValue<IkReal> x5493 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5492)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5493.valid){
continue;
}
CheckValue<IkReal> x5494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5492)))),-1);
if(!x5494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5493.value)+(((1.5707963267949)*(x5494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5495=IKcos(j4);
IkReal x5496=IKsin(j4);
IkReal x5497=(cj5*r00);
IkReal x5498=(cj5*r10);
IkReal x5499=(cj5*r20);
IkReal x5500=((1.0)*x5495);
IkReal x5501=((1.0)*x5496);
IkReal x5502=(sj5*x5495);
IkReal x5503=(sj5*x5496);
evalcond[0]=(((r21*x5502))+((r22*x5496))+(((-1.0)*x5499*x5500)));
evalcond[1]=((((-1.0)*r22*x5500))+((r21*x5503))+(((-1.0)*x5499*x5501)));
evalcond[2]=(cj0+(((-1.0)*x5497*x5500))+((r01*x5502))+((r02*x5496)));
evalcond[3]=(sj0+(((-1.0)*x5498*x5500))+((r12*x5496))+((r11*x5502)));
evalcond[4]=(cj0+(((-1.0)*x5498*x5501))+(((-1.0)*r12*x5500))+((r11*x5503)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5497*x5501))+(((-1.0)*r02*x5500))+((r01*x5503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5504 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5504.valid){
continue;
}
CheckValue<IkReal> x5505=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5504.value)+(((1.5707963267949)*(x5505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5506=IKcos(j4);
IkReal x5507=IKsin(j4);
IkReal x5508=(cj5*r00);
IkReal x5509=(cj5*r10);
IkReal x5510=(cj5*r20);
IkReal x5511=((1.0)*x5506);
IkReal x5512=((1.0)*x5507);
IkReal x5513=(sj5*x5506);
IkReal x5514=(sj5*x5507);
evalcond[0]=((((-1.0)*x5510*x5511))+((r21*x5513))+((r22*x5507)));
evalcond[1]=((((-1.0)*x5510*x5512))+(((-1.0)*r22*x5511))+((r21*x5514)));
evalcond[2]=(cj0+((r02*x5507))+((r01*x5513))+(((-1.0)*x5508*x5511)));
evalcond[3]=(sj0+((r12*x5507))+((r11*x5513))+(((-1.0)*x5509*x5511)));
evalcond[4]=(cj0+(((-1.0)*r12*x5511))+((r11*x5514))+(((-1.0)*x5509*x5512)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5511))+((r01*x5514))+(((-1.0)*x5508*x5512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5515=cj1*cj1;
IkReal x5516=(cj2*sj1);
IkReal x5517=(cj1*sj1);
IkReal x5518=(cj5*r01);
IkReal x5519=(cj1*sj2);
IkReal x5520=((20000.0)*py);
IkReal x5521=(r00*sj5);
IkReal x5522=((1707.0)*cj5*r11);
IkReal x5523=(sj2*x5515);
IkReal x5524=((1707.0)*r10*sj5);
CheckValue<IkReal> x5525=IKPowWithIntegerCheck(((((4265.0)*cj2*sj2))+(((-8530.0)*cj1*cj2*x5516))+(((-4873.0)*x5523))+(((4265.0)*x5517))+(((-4873.0)*cj1*x5516))+(((-8530.0)*cj2*x5523))),-1);
if(!x5525.valid){
continue;
}
CheckValue<IkReal> x5526=IKPowWithIntegerCheck(((((-1.0)*x5519))+(((-1.0)*x5516))),-1);
if(!x5526.valid){
continue;
}
if( IKabs(((x5525.value)*(((((2247.0)*x5518))+(((-1.0)*x5516*x5524))+(((-1.0)*x5516*x5520))+(((-1.0)*x5516*x5522))+(((2247.0)*x5521))+(((-1.0)*x5519*x5522))+(((-1.0)*x5519*x5520))+(((-1.0)*x5519*x5524)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5526.value)*(((((-1.0)*x5518))+(((-1.0)*x5521)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5525.value)*(((((2247.0)*x5518))+(((-1.0)*x5516*x5524))+(((-1.0)*x5516*x5520))+(((-1.0)*x5516*x5522))+(((2247.0)*x5521))+(((-1.0)*x5519*x5522))+(((-1.0)*x5519*x5520))+(((-1.0)*x5519*x5524))))))+IKsqr(((x5526.value)*(((((-1.0)*x5518))+(((-1.0)*x5521))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5525.value)*(((((2247.0)*x5518))+(((-1.0)*x5516*x5524))+(((-1.0)*x5516*x5520))+(((-1.0)*x5516*x5522))+(((2247.0)*x5521))+(((-1.0)*x5519*x5522))+(((-1.0)*x5519*x5520))+(((-1.0)*x5519*x5524))))), ((x5526.value)*(((((-1.0)*x5518))+(((-1.0)*x5521))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5527=IKcos(j0);
IkReal x5528=IKsin(j0);
IkReal x5529=((0.21325)*cj2);
IkReal x5530=(cj5*r01);
IkReal x5531=((1.0)*sj2);
IkReal x5532=(r00*sj5);
IkReal x5533=(cj5*r11);
IkReal x5534=(r10*sj5);
IkReal x5535=(cj1*x5528);
IkReal x5536=(cj1*x5527);
IkReal x5537=((0.21325)*sj1*sj2);
IkReal x5538=((1.0)*cj2*sj1);
evalcond[0]=(x5532+x5530+(((-1.0)*x5527*x5538))+(((-1.0)*x5531*x5536)));
evalcond[1]=(x5533+x5534+(((-1.0)*x5528*x5538))+(((-1.0)*x5531*x5535)));
evalcond[2]=((((-1.0)*x5527*x5537))+(((0.24365)*x5536))+(((-1.0)*px))+(((-0.11235)*x5528))+(((-0.08535)*x5532))+(((-0.08535)*x5530))+((x5529*x5536)));
evalcond[3]=((((-1.0)*x5528*x5537))+(((0.24365)*x5535))+(((0.11235)*x5527))+(((-1.0)*py))+(((-0.08535)*x5533))+(((-0.08535)*x5534))+((x5529*x5535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5539=((1.0)*cj5);
IkReal x5540=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5539)));
j4eval[0]=x5540;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5539))))));
j4eval[2]=IKsign(x5540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5541=((1.0)*cj5);
IkReal x5542=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5541)));
j4eval[0]=x5542;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5541))))));
j4eval[2]=IKsign(x5542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5543=((1.0)*sj0);
IkReal x5544=((1.0)*cj0);
IkReal x5545=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5545;
j4eval[1]=((IKabs(((((-1.0)*r02*x5544))+(((-1.0)*r12*x5543)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5543))+(((-1.0)*r01*sj5*x5544))))));
j4eval[2]=IKsign(x5545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5546=((-1.0)*r20);
IkReal x5548 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5548)==0){
continue;
}
IkReal x5547=pow(x5548,-0.5);
CheckValue<IkReal> x5549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5546),IKFAST_ATAN2_MAGTHRESH);
if(!x5549.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5549.value));
IkReal gconst115=(r21*x5547);
IkReal gconst116=(x5546*x5547);
CheckValue<IkReal> x5550 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5550.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5550.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5551=((-1.0)*r20);
IkReal x5552=x5547;
CheckValue<IkReal> x5554 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5551),IKFAST_ATAN2_MAGTHRESH);
if(!x5554.valid){
continue;
}
IkReal x5553=((-1.0)*(x5554.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5553;
IkReal gconst114=x5553;
IkReal gconst115=(r21*x5552);
IkReal gconst116=(x5551*x5552);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5555=((-1.0)*r20);
IkReal x5556=x5547;
CheckValue<IkReal> x5558 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5555),IKFAST_ATAN2_MAGTHRESH);
if(!x5558.valid){
continue;
}
IkReal x5557=((-1.0)*(x5558.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5557;
IkReal gconst114=x5557;
IkReal gconst115=(r21*x5556);
IkReal gconst116=(x5555*x5556);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5559=((-1.0)*r20);
IkReal x5560=x5547;
CheckValue<IkReal> x5562 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5559),IKFAST_ATAN2_MAGTHRESH);
if(!x5562.valid){
continue;
}
IkReal x5561=((-1.0)*(x5562.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5561;
IkReal gconst114=x5561;
IkReal gconst115=(r21*x5560);
IkReal gconst116=(x5559*x5560);
IkReal x5563=((1.0)*(r22*r22));
CheckValue<IkReal> x5567=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5563))),-1);
if(!x5567.valid){
continue;
}
IkReal x5564=x5567.value;
IkReal x5565=((1.0)*x5564);
IkReal x5566=((((-1.0)*x5565*(r21*r21*r21*r21)))+(((-1.0)*x5565*(r20*r20*r20*r20)))+(((-1.0)*x5563))+(((-2.0)*x5564*(r20*r20)*(r21*r21))));
j4eval[0]=x5566;
j4eval[1]=IKsign(x5566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5568=(cj2*sj1);
IkReal x5569=(gconst115*r21);
IkReal x5570=(cj1*sj2);
IkReal x5571=((1.0)*gconst116*r20);
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal((((r22*x5568))+((r22*x5570)))),IkReal(((((-1.0)*x5570*x5571))+((x5569*x5570))+(((-1.0)*x5568*x5571))+((x5568*x5569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
CheckValue<IkReal> x5573=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5569*x5569)))+(((-1.0)*gconst116*r20*x5571))+(((2.0)*gconst116*r20*x5569))+(((-1.0)*(r22*r22))))),-1);
if(!x5573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5572.value)+(((1.5707963267949)*(x5573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5574=IKsin(j4);
IkReal x5575=IKcos(j4);
IkReal x5576=(sj1*sj2);
IkReal x5577=((1.0)*x5575);
IkReal x5578=((1.0)*cj1*cj2);
IkReal x5579=(gconst115*x5574);
IkReal x5580=(gconst115*x5575);
IkReal x5581=((1.0)*gconst116*x5574);
evalcond[0]=((((-1.0)*r20*x5581))+((r21*x5579))+(((-1.0)*r22*x5577)));
evalcond[1]=(cj0+(((-1.0)*r12*x5577))+(((-1.0)*r10*x5581))+((r11*x5579)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5577))+(((-1.0)*r00*x5581))+((r01*x5579)));
evalcond[3]=(((cj2*sj1))+((r21*x5580))+((cj1*sj2))+((r22*x5574))+(((-1.0)*gconst116*r20*x5577)));
evalcond[4]=(((r02*x5574))+((cj0*x5576))+(((-1.0)*gconst116*r00*x5577))+(((-1.0)*cj0*x5578))+((r01*x5580)));
evalcond[5]=((((-1.0)*sj0*x5578))+((r11*x5580))+((r12*x5574))+((sj0*x5576))+(((-1.0)*gconst116*r10*x5577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5582=((1.0)*gconst116);
CheckValue<IkReal> x5583 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5583.valid){
continue;
}
CheckValue<IkReal> x5584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5582))+(((-1.0)*gconst115*r10)))),-1);
if(!x5584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5583.value)+(((1.5707963267949)*(x5584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5585=IKsin(j4);
IkReal x5586=IKcos(j4);
IkReal x5587=(sj1*sj2);
IkReal x5588=((1.0)*x5586);
IkReal x5589=((1.0)*cj1*cj2);
IkReal x5590=(gconst115*x5585);
IkReal x5591=(gconst115*x5586);
IkReal x5592=((1.0)*gconst116*x5585);
evalcond[0]=(((r21*x5590))+(((-1.0)*r20*x5592))+(((-1.0)*r22*x5588)));
evalcond[1]=((((-1.0)*r12*x5588))+cj0+((r11*x5590))+(((-1.0)*r10*x5592)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5588))+(((-1.0)*r00*x5592))+((r01*x5590)));
evalcond[3]=(((r21*x5591))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5588))+((r22*x5585)));
evalcond[4]=((((-1.0)*cj0*x5589))+((cj0*x5587))+((r02*x5585))+((r01*x5591))+(((-1.0)*gconst116*r00*x5588)));
evalcond[5]=(((sj0*x5587))+((r11*x5591))+((r12*x5585))+(((-1.0)*gconst116*r10*x5588))+(((-1.0)*sj0*x5589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5593=((1.0)*gconst116);
CheckValue<IkReal> x5594=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5593)))),-1);
if(!x5594.valid){
continue;
}
CheckValue<IkReal> x5595 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5594.value)))+(x5595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5596=IKsin(j4);
IkReal x5597=IKcos(j4);
IkReal x5598=(sj1*sj2);
IkReal x5599=((1.0)*x5597);
IkReal x5600=((1.0)*cj1*cj2);
IkReal x5601=(gconst115*x5596);
IkReal x5602=(gconst115*x5597);
IkReal x5603=((1.0)*gconst116*x5596);
evalcond[0]=(((r21*x5601))+(((-1.0)*r22*x5599))+(((-1.0)*r20*x5603)));
evalcond[1]=((((-1.0)*r10*x5603))+(((-1.0)*r12*x5599))+cj0+((r11*x5601)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5603))+(((-1.0)*r02*x5599))+((r01*x5601)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5599))+((r21*x5602))+((r22*x5596)));
evalcond[4]=((((-1.0)*cj0*x5600))+((cj0*x5598))+((r02*x5596))+((r01*x5602))+(((-1.0)*gconst116*r00*x5599)));
evalcond[5]=(((sj0*x5598))+((r12*x5596))+(((-1.0)*gconst116*r10*x5599))+(((-1.0)*sj0*x5600))+((r11*x5602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5604=((-1.0)*r21);
IkReal x5606 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5606)==0){
continue;
}
IkReal x5605=pow(x5606,-0.5);
CheckValue<IkReal> x5607 = IKatan2WithCheck(IkReal(x5604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5607.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5607.value))));
IkReal gconst118=(x5604*x5605);
IkReal gconst119=((1.0)*r20*x5605);
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5608.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5609=((-1.0)*r21);
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal(x5609),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
IkReal x5610=((1.0)*(x5612.value));
IkReal x5611=x5605;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5610)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5610)));
IkReal gconst118=(x5609*x5611);
IkReal gconst119=((1.0)*r20*x5611);
IkReal x5613=r22*r22;
IkReal x5614=((1.0)*x5613);
CheckValue<IkReal> x5618=IKPowWithIntegerCheck(((-1.0)+x5613),-1);
if(!x5618.valid){
continue;
}
IkReal x5615=x5618.value;
if((((1.0)+(((-1.0)*x5614)))) < -0.00001)
continue;
IkReal x5616=IKsqrt(((1.0)+(((-1.0)*x5614))));
IkReal x5617=(cj0*x5615*x5616);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5617+(((-1.0)*x5614*x5617))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5619=((-1.0)*r21);
CheckValue<IkReal> x5622 = IKatan2WithCheck(IkReal(x5619),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5622.valid){
continue;
}
IkReal x5620=((1.0)*(x5622.value));
IkReal x5621=x5605;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5620)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5620)));
IkReal gconst118=(x5619*x5621);
IkReal gconst119=((1.0)*r20*x5621);
IkReal x5623=r22*r22;
IkReal x5624=((1.0)*x5623);
CheckValue<IkReal> x5628=IKPowWithIntegerCheck(((-1.0)+x5623),-1);
if(!x5628.valid){
continue;
}
IkReal x5625=x5628.value;
if((((1.0)+(((-1.0)*x5624)))) < -0.00001)
continue;
IkReal x5626=IKsqrt(((1.0)+(((-1.0)*x5624))));
IkReal x5627=(sj0*x5625*x5626);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5627+(((-1.0)*x5624*x5627))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5629=((-1.0)*r21);
CheckValue<IkReal> x5632 = IKatan2WithCheck(IkReal(x5629),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5632.valid){
continue;
}
IkReal x5630=((1.0)*(x5632.value));
IkReal x5631=x5605;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5630)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5630)));
IkReal gconst118=(x5629*x5631);
IkReal gconst119=((1.0)*r20*x5631);
IkReal x5633=r22*r22;
IkReal x5634=(r12*sj0);
IkReal x5635=(cj0*r02);
CheckValue<IkReal> x5639=IKPowWithIntegerCheck(((-1.0)+x5633),-1);
if(!x5639.valid){
continue;
}
IkReal x5636=x5639.value;
if((((1.0)+(((-1.0)*x5633)))) < -0.00001)
continue;
IkReal x5637=IKsqrt(((1.0)+(((-1.0)*x5633))));
IkReal x5638=(r22*x5636*x5637);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5634*x5638))+((x5635*x5638)))))+(IKabs(((((-1.0)*x5634))+(((-1.0)*x5635))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5640=((1.0)*sj0);
IkReal x5641=((1.0)*gconst118);
CheckValue<IkReal> x5642 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5640))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5641))+(((-1.0)*gconst118*r11*x5640))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5642.valid){
continue;
}
CheckValue<IkReal> x5643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5641)))),-1);
if(!x5643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5642.value)+(((1.5707963267949)*(x5643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5644=IKsin(j4);
IkReal x5645=IKcos(j4);
IkReal x5646=(gconst118*r01);
IkReal x5647=(sj1*sj2);
IkReal x5648=(gconst119*r20);
IkReal x5649=(gconst119*r10);
IkReal x5650=(gconst119*r00);
IkReal x5651=(gconst118*r21);
IkReal x5652=(gconst118*r11);
IkReal x5653=((1.0)*x5645);
IkReal x5654=((1.0)*cj1*cj2);
IkReal x5655=((1.0)*x5644);
evalcond[0]=((((-1.0)*r22*x5653))+((x5644*x5651))+(((-1.0)*x5648*x5655)));
evalcond[1]=((((-1.0)*r12*x5653))+cj0+((x5644*x5652))+(((-1.0)*x5649*x5655)));
evalcond[2]=((((-1.0)*sj0))+((x5644*x5646))+(((-1.0)*r02*x5653))+(((-1.0)*x5650*x5655)));
evalcond[3]=(((cj2*sj1))+((x5645*x5651))+((cj1*sj2))+(((-1.0)*x5648*x5653))+((r22*x5644)));
evalcond[4]=(((cj0*x5647))+((x5645*x5646))+(((-1.0)*x5650*x5653))+(((-1.0)*cj0*x5654))+((r02*x5644)));
evalcond[5]=(((x5645*x5652))+(((-1.0)*sj0*x5654))+((sj0*x5647))+((r12*x5644))+(((-1.0)*x5649*x5653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5656=((1.0)*gconst119);
CheckValue<IkReal> x5657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5656))+(((-1.0)*gconst118*r10)))),-1);
if(!x5657.valid){
continue;
}
CheckValue<IkReal> x5658 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5657.value)))+(x5658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5659=IKsin(j4);
IkReal x5660=IKcos(j4);
IkReal x5661=(gconst118*r01);
IkReal x5662=(sj1*sj2);
IkReal x5663=(gconst119*r20);
IkReal x5664=(gconst119*r10);
IkReal x5665=(gconst119*r00);
IkReal x5666=(gconst118*r21);
IkReal x5667=(gconst118*r11);
IkReal x5668=((1.0)*x5660);
IkReal x5669=((1.0)*cj1*cj2);
IkReal x5670=((1.0)*x5659);
evalcond[0]=(((x5659*x5666))+(((-1.0)*r22*x5668))+(((-1.0)*x5663*x5670)));
evalcond[1]=((((-1.0)*x5664*x5670))+((x5659*x5667))+cj0+(((-1.0)*r12*x5668)));
evalcond[2]=(((x5659*x5661))+(((-1.0)*sj0))+(((-1.0)*r02*x5668))+(((-1.0)*x5665*x5670)));
evalcond[3]=(((x5660*x5666))+((cj2*sj1))+((cj1*sj2))+((r22*x5659))+(((-1.0)*x5663*x5668)));
evalcond[4]=(((x5660*x5661))+(((-1.0)*cj0*x5669))+(((-1.0)*x5665*x5668))+((r02*x5659))+((cj0*x5662)));
evalcond[5]=(((x5660*x5667))+((r12*x5659))+(((-1.0)*sj0*x5669))+((sj0*x5662))+(((-1.0)*x5664*x5668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5671=((1.0)*gconst119);
CheckValue<IkReal> x5672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5671))+(((-1.0)*gconst118*r00)))),-1);
if(!x5672.valid){
continue;
}
CheckValue<IkReal> x5673 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5672.value)))+(x5673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5674=IKsin(j4);
IkReal x5675=IKcos(j4);
IkReal x5676=(gconst118*r01);
IkReal x5677=(sj1*sj2);
IkReal x5678=(gconst119*r20);
IkReal x5679=(gconst119*r10);
IkReal x5680=(gconst119*r00);
IkReal x5681=(gconst118*r21);
IkReal x5682=(gconst118*r11);
IkReal x5683=((1.0)*x5675);
IkReal x5684=((1.0)*cj1*cj2);
IkReal x5685=((1.0)*x5674);
evalcond[0]=((((-1.0)*x5678*x5685))+(((-1.0)*r22*x5683))+((x5674*x5681)));
evalcond[1]=(cj0+(((-1.0)*x5679*x5685))+((x5674*x5682))+(((-1.0)*r12*x5683)));
evalcond[2]=((((-1.0)*r02*x5683))+(((-1.0)*sj0))+(((-1.0)*x5680*x5685))+((x5674*x5676)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5678*x5683))+((r22*x5674))+((x5675*x5681)));
evalcond[4]=(((r02*x5674))+((cj0*x5677))+((x5675*x5676))+(((-1.0)*cj0*x5684))+(((-1.0)*x5680*x5683)));
evalcond[5]=(((sj0*x5677))+(((-1.0)*sj0*x5684))+(((-1.0)*x5679*x5683))+((r12*x5674))+((x5675*x5682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5686=((-1.0)*r10);
IkReal x5688 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5688)==0){
continue;
}
IkReal x5687=pow(x5688,-0.5);
CheckValue<IkReal> x5689 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5686),IKFAST_ATAN2_MAGTHRESH);
if(!x5689.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5689.value));
IkReal gconst121=(r11*x5687);
IkReal gconst122=(x5686*x5687);
CheckValue<IkReal> x5690 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5690.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5690.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5691=((-1.0)*r10);
IkReal x5692=x5687;
CheckValue<IkReal> x5694 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5691),IKFAST_ATAN2_MAGTHRESH);
if(!x5694.valid){
continue;
}
IkReal x5693=((-1.0)*(x5694.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5693;
IkReal gconst120=x5693;
IkReal gconst121=(r11*x5692);
IkReal gconst122=(x5691*x5692);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5695=((1.0)*sj0);
IkReal x5696=((1.0)*gconst121);
CheckValue<IkReal> x5697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5696)))),-1);
if(!x5697.valid){
continue;
}
CheckValue<IkReal> x5698 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5695)))),IkReal(((((-1.0)*cj0*r01*x5696))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5695))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5697.value)))+(x5698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5699=IKsin(j4);
IkReal x5700=IKcos(j4);
IkReal x5701=(gconst121*r11);
IkReal x5702=(sj1*sj2);
IkReal x5703=(gconst122*r00);
IkReal x5704=(gconst122*r10);
IkReal x5705=(gconst122*r20);
IkReal x5706=((1.0)*x5700);
IkReal x5707=((1.0)*cj1*cj2);
IkReal x5708=((1.0)*x5699);
IkReal x5709=(gconst121*x5699);
IkReal x5710=(gconst121*x5700);
evalcond[0]=((((-1.0)*r22*x5706))+((r21*x5709))+(((-1.0)*x5705*x5708)));
evalcond[1]=((((-1.0)*r12*x5706))+cj0+(((-1.0)*x5704*x5708))+((x5699*x5701)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5703*x5708))+((r01*x5709))+(((-1.0)*r02*x5706)));
evalcond[3]=(((cj2*sj1))+((r22*x5699))+((cj1*sj2))+(((-1.0)*x5705*x5706))+((r21*x5710)));
evalcond[4]=(((r02*x5699))+(((-1.0)*x5703*x5706))+(((-1.0)*cj0*x5707))+((r01*x5710))+((cj0*x5702)));
evalcond[5]=(((x5700*x5701))+((sj0*x5702))+(((-1.0)*x5704*x5706))+(((-1.0)*sj0*x5707))+((r12*x5699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5711=((1.0)*gconst122);
CheckValue<IkReal> x5712 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5711))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5712.valid){
continue;
}
CheckValue<IkReal> x5713=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5711))+(((-1.0)*gconst121*r00)))),-1);
if(!x5713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5712.value)+(((1.5707963267949)*(x5713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5714=IKsin(j4);
IkReal x5715=IKcos(j4);
IkReal x5716=(gconst121*r11);
IkReal x5717=(sj1*sj2);
IkReal x5718=(gconst122*r00);
IkReal x5719=(gconst122*r10);
IkReal x5720=(gconst122*r20);
IkReal x5721=((1.0)*x5715);
IkReal x5722=((1.0)*cj1*cj2);
IkReal x5723=((1.0)*x5714);
IkReal x5724=(gconst121*x5714);
IkReal x5725=(gconst121*x5715);
evalcond[0]=(((r21*x5724))+(((-1.0)*r22*x5721))+(((-1.0)*x5720*x5723)));
evalcond[1]=(cj0+(((-1.0)*r12*x5721))+(((-1.0)*x5719*x5723))+((x5714*x5716)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5724))+(((-1.0)*r02*x5721))+(((-1.0)*x5718*x5723)));
evalcond[3]=(((cj2*sj1))+((r21*x5725))+((r22*x5714))+((cj1*sj2))+(((-1.0)*x5720*x5721)));
evalcond[4]=(((r02*x5714))+((r01*x5725))+((cj0*x5717))+(((-1.0)*cj0*x5722))+(((-1.0)*x5718*x5721)));
evalcond[5]=(((x5715*x5716))+(((-1.0)*x5719*x5721))+(((-1.0)*sj0*x5722))+((sj0*x5717))+((r12*x5714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5726=((-1.0)*r11);
IkReal x5728 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5728)==0){
continue;
}
IkReal x5727=pow(x5728,-0.5);
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal(x5726),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5729.value))));
IkReal gconst124=(x5726*x5727);
IkReal gconst125=((1.0)*r10*x5727);
CheckValue<IkReal> x5730 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5730.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5730.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5731=((-1.0)*r11);
CheckValue<IkReal> x5734 = IKatan2WithCheck(IkReal(x5731),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5734.valid){
continue;
}
IkReal x5732=((1.0)*(x5734.value));
IkReal x5733=x5727;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5732)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5732)));
IkReal gconst124=(x5731*x5733);
IkReal gconst125=((1.0)*r10*x5733);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5735=((-1.0)*r11);
CheckValue<IkReal> x5738 = IKatan2WithCheck(IkReal(x5735),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5738.valid){
continue;
}
IkReal x5736=((1.0)*(x5738.value));
IkReal x5737=x5727;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5736)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5736)));
IkReal gconst124=(x5735*x5737);
IkReal gconst125=((1.0)*r10*x5737);
IkReal x5739=r12*r12;
IkReal x5740=((1.0)*sj0);
IkReal x5741=(cj0*r02);
IkReal x5742=x5727;
j4eval[0]=((IKabs((((r12*x5741*x5742))+(((-1.0)*x5740*x5742))+((sj0*x5739*x5742)))))+(IKabs(((((-1.0)*r12*x5740))+(((-1.0)*x5741))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5743=((-1.0)*r11);
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal(x5743),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
IkReal x5744=((1.0)*(x5746.value));
IkReal x5745=x5727;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5744)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5744)));
IkReal gconst124=(x5743*x5745);
IkReal gconst125=((1.0)*r10*x5745);
IkReal x5747=r12*r12;
IkReal x5748=((1.0)+(((-1.0)*x5747)));
IkReal x5749=(cj2*r22*sj1);
IkReal x5750=(cj1*r22*sj2);
CheckValue<IkReal> x5757=IKPowWithIntegerCheck(x5748,-1);
if(!x5757.valid){
continue;
}
IkReal x5751=x5757.value;
CheckValue<IkReal> x5758=IKPowWithIntegerCheck(((-1.0)+x5747),-1);
if(!x5758.valid){
continue;
}
IkReal x5752=x5758.value;
IkReal x5753=((1.0)*x5751);
if((x5748) < -0.00001)
continue;
IkReal x5754=IKsqrt(x5748);
IkReal x5755=((1.0)*r12*x5752*x5754);
IkReal x5756=((((-1.0)*x5753*(r10*r10)*(r20*r20)))+(((-1.0)*x5753*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x5751))+(((-1.0)*(r22*r22))));
j4eval[0]=x5756;
j4eval[1]=IKsign(x5756);
j4eval[2]=((IKabs((x5749+x5750)))+(IKabs(((((-1.0)*x5749*x5755))+(((-1.0)*x5750*x5755))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5759=(gconst124*r21);
IkReal x5760=(cj1*sj2);
IkReal x5761=(cj2*sj1);
IkReal x5762=(gconst125*r20);
CheckValue<IkReal> x5763 = IKatan2WithCheck(IkReal((((r22*x5760))+((r22*x5761)))),IkReal(((((-1.0)*x5761*x5762))+(((-1.0)*x5760*x5762))+((x5759*x5761))+((x5759*x5760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5763.valid){
continue;
}
CheckValue<IkReal> x5764=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x5759*x5759)))+(((-1.0)*(x5762*x5762)))+(((2.0)*x5759*x5762)))),-1);
if(!x5764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5763.value)+(((1.5707963267949)*(x5764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5765=IKsin(j4);
IkReal x5766=IKcos(j4);
IkReal x5767=(sj1*sj2);
IkReal x5768=(gconst125*r20);
IkReal x5769=(gconst124*r01);
IkReal x5770=(gconst125*r00);
IkReal x5771=(gconst125*r10);
IkReal x5772=((1.0)*x5766);
IkReal x5773=((1.0)*cj1*cj2);
IkReal x5774=((1.0)*x5765);
IkReal x5775=(gconst124*x5765);
IkReal x5776=(gconst124*x5766);
evalcond[0]=(((r21*x5775))+(((-1.0)*r22*x5772))+(((-1.0)*x5768*x5774)));
evalcond[1]=(cj0+(((-1.0)*r12*x5772))+(((-1.0)*x5771*x5774))+((r11*x5775)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5770*x5774))+((x5765*x5769))+(((-1.0)*r02*x5772)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5765))+((r21*x5776))+(((-1.0)*x5768*x5772)));
evalcond[4]=(((x5766*x5769))+(((-1.0)*x5770*x5772))+(((-1.0)*cj0*x5773))+((cj0*x5767))+((r02*x5765)));
evalcond[5]=((((-1.0)*sj0*x5773))+(((-1.0)*x5771*x5772))+((r11*x5776))+((r12*x5765))+((sj0*x5767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5777=((1.0)*sj0);
IkReal x5778=((1.0)*cj0);
CheckValue<IkReal> x5779=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5779.valid){
continue;
}
CheckValue<IkReal> x5780 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5777))+(((-1.0)*r02*x5778)))),IkReal(((((-1.0)*gconst124*r11*x5777))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5778))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5779.value)))+(x5780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5781=IKsin(j4);
IkReal x5782=IKcos(j4);
IkReal x5783=(sj1*sj2);
IkReal x5784=(gconst125*r20);
IkReal x5785=(gconst124*r01);
IkReal x5786=(gconst125*r00);
IkReal x5787=(gconst125*r10);
IkReal x5788=((1.0)*x5782);
IkReal x5789=((1.0)*cj1*cj2);
IkReal x5790=((1.0)*x5781);
IkReal x5791=(gconst124*x5781);
IkReal x5792=(gconst124*x5782);
evalcond[0]=((((-1.0)*x5784*x5790))+((r21*x5791))+(((-1.0)*r22*x5788)));
evalcond[1]=(cj0+((r11*x5791))+(((-1.0)*r12*x5788))+(((-1.0)*x5787*x5790)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5786*x5790))+(((-1.0)*r02*x5788))+((x5781*x5785)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5784*x5788))+((cj1*sj2))+((r21*x5792))+((r22*x5781)));
evalcond[4]=(((x5782*x5785))+(((-1.0)*x5786*x5788))+(((-1.0)*cj0*x5789))+((r02*x5781))+((cj0*x5783)));
evalcond[5]=(((r12*x5781))+((r11*x5792))+(((-1.0)*x5787*x5788))+((sj0*x5783))+(((-1.0)*sj0*x5789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5793=((1.0)*gconst125);
CheckValue<IkReal> x5794 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5793))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5794.valid){
continue;
}
CheckValue<IkReal> x5795=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5793)))),-1);
if(!x5795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5794.value)+(((1.5707963267949)*(x5795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5796=IKsin(j4);
IkReal x5797=IKcos(j4);
IkReal x5798=(sj1*sj2);
IkReal x5799=(gconst125*r20);
IkReal x5800=(gconst124*r01);
IkReal x5801=(gconst125*r00);
IkReal x5802=(gconst125*r10);
IkReal x5803=((1.0)*x5797);
IkReal x5804=((1.0)*cj1*cj2);
IkReal x5805=((1.0)*x5796);
IkReal x5806=(gconst124*x5796);
IkReal x5807=(gconst124*x5797);
evalcond[0]=((((-1.0)*r22*x5803))+((r21*x5806))+(((-1.0)*x5799*x5805)));
evalcond[1]=(cj0+(((-1.0)*r12*x5803))+(((-1.0)*x5802*x5805))+((r11*x5806)));
evalcond[2]=((((-1.0)*sj0))+((x5796*x5800))+(((-1.0)*r02*x5803))+(((-1.0)*x5801*x5805)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5807))+((r22*x5796))+(((-1.0)*x5799*x5803)));
evalcond[4]=((((-1.0)*cj0*x5804))+((x5797*x5800))+((cj0*x5798))+((r02*x5796))+(((-1.0)*x5801*x5803)));
evalcond[5]=(((r12*x5796))+(((-1.0)*x5802*x5803))+((r11*x5807))+((sj0*x5798))+(((-1.0)*sj0*x5804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5808=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5808;
j4eval[1]=IKsign(x5808);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5809=((1.0)*cj5);
IkReal x5810=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5809)));
j4eval[0]=x5810;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5809))+((r21*sj5))))));
j4eval[2]=IKsign(x5810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5811=cj5*cj5;
IkReal x5812=r11*r11;
IkReal x5813=(cj5*r10);
IkReal x5814=(r11*sj5);
IkReal x5815=((((2.0)*x5813*x5814))+(((-1.0)*x5812))+(((-1.0)*x5811*(r10*r10)))+(((-1.0)*(r12*r12)))+((x5811*x5812)));
j4eval[0]=x5815;
j4eval[1]=IKsign(x5815);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5813))+x5814))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5816=cj5*cj5;
IkReal x5817=r11*r11;
IkReal x5818=(cj5*r10);
IkReal x5819=(r11*sj5);
CheckValue<IkReal> x5820 = IKatan2WithCheck(IkReal(((((-1.0)*x5818))+x5819)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5820.valid){
continue;
}
CheckValue<IkReal> x5821=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5817))+(((-1.0)*x5816*(r10*r10)))+((x5816*x5817))+(((-1.0)*(r12*r12)))+(((2.0)*x5818*x5819)))),-1);
if(!x5821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5820.value)+(((1.5707963267949)*(x5821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5822=IKcos(j4);
IkReal x5823=IKsin(j4);
IkReal x5824=(cj5*r00);
IkReal x5825=(cj5*r10);
IkReal x5826=(r21*sj5);
IkReal x5827=(cj5*r20);
IkReal x5828=((1.0)*x5822);
IkReal x5829=((1.0)*x5823);
IkReal x5830=(sj5*x5823);
IkReal x5831=(sj5*x5822);
evalcond[0]=(((r12*x5823))+((r11*x5831))+(((-1.0)*x5825*x5828)));
evalcond[1]=((((-1.0)*r22*x5828))+(((-1.0)*x5827*x5829))+((x5823*x5826)));
evalcond[2]=((((-1.0)*r02*x5828))+((r01*x5830))+(((-1.0)*x5824*x5829)));
evalcond[3]=((1.0)+((r11*x5830))+(((-1.0)*r12*x5828))+(((-1.0)*x5825*x5829)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5822*x5826))+(((-1.0)*x5827*x5828))+((r22*x5823)));
evalcond[5]=(((r02*x5823))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5831))+(((-1.0)*x5824*x5828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5832=((1.0)*cj5);
CheckValue<IkReal> x5833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5832))+(((-1.0)*r00*sj5)))),-1);
if(!x5833.valid){
continue;
}
CheckValue<IkReal> x5834 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5832))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5833.value)))+(x5834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5835=IKcos(j4);
IkReal x5836=IKsin(j4);
IkReal x5837=(cj5*r00);
IkReal x5838=(cj5*r10);
IkReal x5839=(r21*sj5);
IkReal x5840=(cj5*r20);
IkReal x5841=((1.0)*x5835);
IkReal x5842=((1.0)*x5836);
IkReal x5843=(sj5*x5836);
IkReal x5844=(sj5*x5835);
evalcond[0]=(((r11*x5844))+((r12*x5836))+(((-1.0)*x5838*x5841)));
evalcond[1]=(((x5836*x5839))+(((-1.0)*x5840*x5842))+(((-1.0)*r22*x5841)));
evalcond[2]=((((-1.0)*x5837*x5842))+(((-1.0)*r02*x5841))+((r01*x5843)));
evalcond[3]=((1.0)+((r11*x5843))+(((-1.0)*x5838*x5842))+(((-1.0)*r12*x5841)));
evalcond[4]=(((cj2*sj1))+((x5835*x5839))+((cj1*sj2))+(((-1.0)*x5840*x5841))+((r22*x5836)));
evalcond[5]=((((-1.0)*x5837*x5841))+((r02*x5836))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5845=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5845.valid){
continue;
}
CheckValue<IkReal> x5846 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5845.value)))+(x5846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5847=IKcos(j4);
IkReal x5848=IKsin(j4);
IkReal x5849=(cj5*r00);
IkReal x5850=(cj5*r10);
IkReal x5851=(r21*sj5);
IkReal x5852=(cj5*r20);
IkReal x5853=((1.0)*x5847);
IkReal x5854=((1.0)*x5848);
IkReal x5855=(sj5*x5848);
IkReal x5856=(sj5*x5847);
evalcond[0]=(((r11*x5856))+((r12*x5848))+(((-1.0)*x5850*x5853)));
evalcond[1]=(((x5848*x5851))+(((-1.0)*r22*x5853))+(((-1.0)*x5852*x5854)));
evalcond[2]=((((-1.0)*x5849*x5854))+((r01*x5855))+(((-1.0)*r02*x5853)));
evalcond[3]=((1.0)+((r11*x5855))+(((-1.0)*r12*x5853))+(((-1.0)*x5850*x5854)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5847*x5851))+(((-1.0)*x5852*x5853))+((r22*x5848)));
evalcond[5]=((((-1.0)*x5849*x5853))+((r01*x5856))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5857=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5857;
j4eval[1]=IKsign(x5857);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5858=((1.0)*cj5);
IkReal x5859=((((-1.0)*r21*x5858))+(((-1.0)*r20*sj5)));
j4eval[0]=x5859;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5858))))));
j4eval[2]=IKsign(x5859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5860=cj5*cj5;
IkReal x5861=r11*r11;
IkReal x5862=(r11*sj5);
IkReal x5863=(cj5*r10);
IkReal x5864=((r12*r12)+(((-1.0)*x5860*x5861))+((x5860*(r10*r10)))+x5861+(((-2.0)*x5862*x5863)));
j4eval[0]=x5864;
j4eval[1]=IKsign(x5864);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5863))+x5862))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5865=cj5*cj5;
IkReal x5866=r11*r11;
IkReal x5867=(cj5*r10);
IkReal x5868=(r11*sj5);
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(((((-1.0)*x5867))+x5868)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
CheckValue<IkReal> x5870=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5865*x5866))+(r12*r12)+(((-2.0)*x5867*x5868))+((x5865*(r10*r10)))+x5866)),-1);
if(!x5870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5869.value)+(((1.5707963267949)*(x5870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5871=IKcos(j4);
IkReal x5872=IKsin(j4);
IkReal x5873=(cj5*r00);
IkReal x5874=(cj5*r10);
IkReal x5875=(r21*sj5);
IkReal x5876=(cj5*r20);
IkReal x5877=((1.0)*x5871);
IkReal x5878=((1.0)*x5872);
IkReal x5879=(sj5*x5872);
IkReal x5880=(sj5*x5871);
evalcond[0]=(((r11*x5880))+(((-1.0)*x5874*x5877))+((r12*x5872)));
evalcond[1]=((((-1.0)*r22*x5877))+((x5872*x5875))+(((-1.0)*x5876*x5878)));
evalcond[2]=((((-1.0)*r02*x5877))+(((-1.0)*x5873*x5878))+((r01*x5879)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5877))+(((-1.0)*x5874*x5878))+((r11*x5879)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5872))+((x5871*x5875))+(((-1.0)*x5876*x5877)));
evalcond[5]=(((r01*x5880))+(((-1.0)*sj1*sj2))+(((-1.0)*x5873*x5877))+((r02*x5872))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5881=((1.0)*cj5);
CheckValue<IkReal> x5882=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5881))+(((-1.0)*r20*sj5)))),-1);
if(!x5882.valid){
continue;
}
CheckValue<IkReal> x5883 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5882.value)))+(x5883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5884=IKcos(j4);
IkReal x5885=IKsin(j4);
IkReal x5886=(cj5*r00);
IkReal x5887=(cj5*r10);
IkReal x5888=(r21*sj5);
IkReal x5889=(cj5*r20);
IkReal x5890=((1.0)*x5884);
IkReal x5891=((1.0)*x5885);
IkReal x5892=(sj5*x5885);
IkReal x5893=(sj5*x5884);
evalcond[0]=(((r12*x5885))+(((-1.0)*x5887*x5890))+((r11*x5893)));
evalcond[1]=((((-1.0)*x5889*x5891))+(((-1.0)*r22*x5890))+((x5885*x5888)));
evalcond[2]=((((-1.0)*x5886*x5891))+(((-1.0)*r02*x5890))+((r01*x5892)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5890))+(((-1.0)*x5887*x5891))+((r11*x5892)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5889*x5890))+((cj1*sj2))+((x5884*x5888))+((r22*x5885)));
evalcond[5]=((((-1.0)*x5886*x5890))+(((-1.0)*sj1*sj2))+((r01*x5893))+((cj1*cj2))+((r02*x5885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5894 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5894.valid){
continue;
}
CheckValue<IkReal> x5895=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5894.value)+(((1.5707963267949)*(x5895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5896=IKcos(j4);
IkReal x5897=IKsin(j4);
IkReal x5898=(cj5*r00);
IkReal x5899=(cj5*r10);
IkReal x5900=(r21*sj5);
IkReal x5901=(cj5*r20);
IkReal x5902=((1.0)*x5896);
IkReal x5903=((1.0)*x5897);
IkReal x5904=(sj5*x5897);
IkReal x5905=(sj5*x5896);
evalcond[0]=(((r12*x5897))+(((-1.0)*x5899*x5902))+((r11*x5905)));
evalcond[1]=(((x5897*x5900))+(((-1.0)*r22*x5902))+(((-1.0)*x5901*x5903)));
evalcond[2]=((((-1.0)*x5898*x5903))+(((-1.0)*r02*x5902))+((r01*x5904)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5902))+(((-1.0)*x5899*x5903))+((r11*x5904)));
evalcond[4]=(((r22*x5897))+((cj2*sj1))+((cj1*sj2))+((x5896*x5900))+(((-1.0)*x5901*x5902)));
evalcond[5]=((((-1.0)*x5898*x5902))+(((-1.0)*sj1*sj2))+((r02*x5897))+((cj1*cj2))+((r01*x5905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5906=((-1.0)*r00);
IkReal x5908 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5908)==0){
continue;
}
IkReal x5907=pow(x5908,-0.5);
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5906),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5909.value));
IkReal gconst127=(r01*x5907);
IkReal gconst128=(x5906*x5907);
CheckValue<IkReal> x5910 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5910.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5911=((-1.0)*r00);
IkReal x5912=x5907;
CheckValue<IkReal> x5914 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5911),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
IkReal x5913=((-1.0)*(x5914.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5913;
IkReal gconst126=x5913;
IkReal gconst127=(r01*x5912);
IkReal gconst128=(x5911*x5912);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5915=((1.0)*sj0);
IkReal x5916=((1.0)*gconst127);
CheckValue<IkReal> x5917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5916))+(((-1.0)*gconst128*r21)))),-1);
if(!x5917.valid){
continue;
}
CheckValue<IkReal> x5918 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5915))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5916))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5917.value)))+(x5918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5919=IKsin(j4);
IkReal x5920=IKcos(j4);
IkReal x5921=(gconst127*r01);
IkReal x5922=(sj1*sj2);
IkReal x5923=(gconst128*r10);
IkReal x5924=(gconst128*r00);
IkReal x5925=(gconst128*r20);
IkReal x5926=((1.0)*x5920);
IkReal x5927=((1.0)*cj1*cj2);
IkReal x5928=((1.0)*x5919);
IkReal x5929=(gconst127*x5920);
IkReal x5930=(gconst127*x5919);
evalcond[0]=((((-1.0)*r22*x5926))+(((-1.0)*x5925*x5928))+((r21*x5930)));
evalcond[1]=(cj0+((r11*x5930))+(((-1.0)*r12*x5926))+(((-1.0)*x5923*x5928)));
evalcond[2]=((((-1.0)*sj0))+((x5919*x5921))+(((-1.0)*r02*x5926))+(((-1.0)*x5924*x5928)));
evalcond[3]=(((cj2*sj1))+((r22*x5919))+(((-1.0)*x5925*x5926))+((cj1*sj2))+((r21*x5929)));
evalcond[4]=(((x5920*x5921))+((r02*x5919))+(((-1.0)*x5924*x5926))+((cj0*x5922))+(((-1.0)*cj0*x5927)));
evalcond[5]=(((r12*x5919))+(((-1.0)*sj0*x5927))+((r11*x5929))+(((-1.0)*x5923*x5926))+((sj0*x5922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5931=((1.0)*gconst128);
CheckValue<IkReal> x5932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5931))+(((-1.0)*gconst127*r10)))),-1);
if(!x5932.valid){
continue;
}
CheckValue<IkReal> x5933 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5932.value)))+(x5933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5934=IKsin(j4);
IkReal x5935=IKcos(j4);
IkReal x5936=(gconst127*r01);
IkReal x5937=(sj1*sj2);
IkReal x5938=(gconst128*r10);
IkReal x5939=(gconst128*r00);
IkReal x5940=(gconst128*r20);
IkReal x5941=((1.0)*x5935);
IkReal x5942=((1.0)*cj1*cj2);
IkReal x5943=((1.0)*x5934);
IkReal x5944=(gconst127*x5935);
IkReal x5945=(gconst127*x5934);
evalcond[0]=((((-1.0)*r22*x5941))+((r21*x5945))+(((-1.0)*x5940*x5943)));
evalcond[1]=(cj0+(((-1.0)*r12*x5941))+(((-1.0)*x5938*x5943))+((r11*x5945)));
evalcond[2]=((((-1.0)*sj0))+((x5934*x5936))+(((-1.0)*x5939*x5943))+(((-1.0)*r02*x5941)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5934))+((r21*x5944))+(((-1.0)*x5940*x5941)));
evalcond[4]=((((-1.0)*cj0*x5942))+(((-1.0)*x5939*x5941))+((cj0*x5937))+((x5935*x5936))+((r02*x5934)));
evalcond[5]=((((-1.0)*sj0*x5942))+(((-1.0)*x5938*x5941))+((r12*x5934))+((sj0*x5937))+((r11*x5944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5946=((-1.0)*r01);
IkReal x5948 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5948)==0){
continue;
}
IkReal x5947=pow(x5948,-0.5);
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal(x5946),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5949.value))));
IkReal gconst130=(x5946*x5947);
IkReal gconst131=((1.0)*r00*x5947);
CheckValue<IkReal> x5950 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5950.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5950.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5951=((-1.0)*r01);
CheckValue<IkReal> x5954 = IKatan2WithCheck(IkReal(x5951),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5954.valid){
continue;
}
IkReal x5952=((1.0)*(x5954.value));
IkReal x5953=x5947;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5952)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5952)));
IkReal gconst130=(x5951*x5953);
IkReal gconst131=((1.0)*r00*x5953);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5955=((-1.0)*r01);
CheckValue<IkReal> x5958 = IKatan2WithCheck(IkReal(x5955),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5958.valid){
continue;
}
IkReal x5956=((1.0)*(x5958.value));
IkReal x5957=x5947;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5956)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5956)));
IkReal gconst130=(x5955*x5957);
IkReal gconst131=((1.0)*r00*x5957);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5959=((-1.0)*r01);
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal(x5959),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
IkReal x5960=((1.0)*(x5962.value));
IkReal x5961=x5947;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5960)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5960)));
IkReal gconst130=(x5959*x5961);
IkReal gconst131=((1.0)*r00*x5961);
IkReal x5963=r02*r02;
IkReal x5964=(r12*sj0);
IkReal x5965=((1.0)*cj0);
IkReal x5966=x5947;
j4eval[0]=((IKabs((((r02*x5964*x5966))+((cj0*x5963*x5966))+(((-1.0)*x5965*x5966)))))+(IKabs(((((-1.0)*x5964))+(((-1.0)*r02*x5965))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5967=((1.0)*sj0);
IkReal x5968=((1.0)*gconst130);
CheckValue<IkReal> x5969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5968))+(((-1.0)*gconst131*r21)))),-1);
if(!x5969.valid){
continue;
}
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5967)))),IkReal(((((-1.0)*gconst130*r11*x5967))+(((-1.0)*cj0*r01*x5968))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5969.value)))+(x5970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5971=IKsin(j4);
IkReal x5972=IKcos(j4);
IkReal x5973=(gconst131*r10);
IkReal x5974=(sj1*sj2);
IkReal x5975=(gconst131*r20);
IkReal x5976=(gconst131*r00);
IkReal x5977=((1.0)*x5972);
IkReal x5978=((1.0)*cj1*cj2);
IkReal x5979=(gconst130*x5971);
IkReal x5980=((1.0)*x5971);
IkReal x5981=(gconst130*x5972);
evalcond[0]=((((-1.0)*r22*x5977))+(((-1.0)*x5975*x5980))+((r21*x5979)));
evalcond[1]=(cj0+(((-1.0)*r12*x5977))+(((-1.0)*x5973*x5980))+((r11*x5979)));
evalcond[2]=((((-1.0)*r02*x5977))+(((-1.0)*sj0))+((r01*x5979))+(((-1.0)*x5976*x5980)));
evalcond[3]=(((cj2*sj1))+((r21*x5981))+((cj1*sj2))+((r22*x5971))+(((-1.0)*x5975*x5977)));
evalcond[4]=(((cj0*x5974))+(((-1.0)*cj0*x5978))+(((-1.0)*x5976*x5977))+((r02*x5971))+((r01*x5981)));
evalcond[5]=(((r11*x5981))+(((-1.0)*sj0*x5978))+((r12*x5971))+((sj0*x5974))+(((-1.0)*x5973*x5977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5982=((1.0)*gconst131);
CheckValue<IkReal> x5983=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5982))+(((-1.0)*gconst130*r10)))),-1);
if(!x5983.valid){
continue;
}
CheckValue<IkReal> x5984 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5982))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5983.value)))+(x5984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5985=IKsin(j4);
IkReal x5986=IKcos(j4);
IkReal x5987=(gconst131*r10);
IkReal x5988=(sj1*sj2);
IkReal x5989=(gconst131*r20);
IkReal x5990=(gconst131*r00);
IkReal x5991=((1.0)*x5986);
IkReal x5992=((1.0)*cj1*cj2);
IkReal x5993=(gconst130*x5985);
IkReal x5994=((1.0)*x5985);
IkReal x5995=(gconst130*x5986);
evalcond[0]=(((r21*x5993))+(((-1.0)*r22*x5991))+(((-1.0)*x5989*x5994)));
evalcond[1]=((((-1.0)*r12*x5991))+cj0+(((-1.0)*x5987*x5994))+((r11*x5993)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5991))+(((-1.0)*x5990*x5994))+((r01*x5993)));
evalcond[3]=(((r21*x5995))+((cj2*sj1))+((cj1*sj2))+((r22*x5985))+(((-1.0)*x5989*x5991)));
evalcond[4]=(((r02*x5985))+(((-1.0)*x5990*x5991))+(((-1.0)*cj0*x5992))+((cj0*x5988))+((r01*x5995)));
evalcond[5]=(((r12*x5985))+(((-1.0)*x5987*x5991))+((r11*x5995))+((sj0*x5988))+(((-1.0)*sj0*x5992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5996=((1.0)*gconst131);
CheckValue<IkReal> x5997 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5997.valid){
continue;
}
CheckValue<IkReal> x5998=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5996)))),-1);
if(!x5998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5997.value)+(((1.5707963267949)*(x5998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5999=IKsin(j4);
IkReal x6000=IKcos(j4);
IkReal x6001=(gconst131*r10);
IkReal x6002=(sj1*sj2);
IkReal x6003=(gconst131*r20);
IkReal x6004=(gconst131*r00);
IkReal x6005=((1.0)*x6000);
IkReal x6006=((1.0)*cj1*cj2);
IkReal x6007=(gconst130*x5999);
IkReal x6008=((1.0)*x5999);
IkReal x6009=(gconst130*x6000);
evalcond[0]=(((r21*x6007))+(((-1.0)*r22*x6005))+(((-1.0)*x6003*x6008)));
evalcond[1]=(cj0+((r11*x6007))+(((-1.0)*r12*x6005))+(((-1.0)*x6001*x6008)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6004*x6008))+((r01*x6007))+(((-1.0)*r02*x6005)));
evalcond[3]=(((r21*x6009))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6003*x6005))+((r22*x5999)));
evalcond[4]=(((cj0*x6002))+((r02*x5999))+(((-1.0)*cj0*x6006))+(((-1.0)*x6004*x6005))+((r01*x6009)));
evalcond[5]=(((r12*x5999))+(((-1.0)*sj0*x6006))+((r11*x6009))+((sj0*x6002))+(((-1.0)*x6001*x6005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6010=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6010;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6010);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6011=((1.0)*cj5);
IkReal x6012=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6011)));
j4eval[0]=x6012;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6011)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6013=cj5*cj5;
IkReal x6014=r01*r01;
IkReal x6015=(cj5*r00);
IkReal x6016=(r01*sj5);
IkReal x6017=(x6014+((x6013*(r00*r00)))+(((-1.0)*x6013*x6014))+(r02*r02)+(((-2.0)*x6015*x6016)));
j4eval[0]=x6017;
j4eval[1]=IKsign(x6017);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6015))+x6016))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6018=cj5*cj5;
IkReal x6019=r01*r01;
IkReal x6020=(r01*sj5);
IkReal x6021=(cj5*r00);
CheckValue<IkReal> x6022 = IKatan2WithCheck(IkReal((x6020+(((-1.0)*x6021)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6022.valid){
continue;
}
CheckValue<IkReal> x6023=IKPowWithIntegerCheck(IKsign((x6019+(((-2.0)*x6020*x6021))+(((-1.0)*x6018*x6019))+(r02*r02)+((x6018*(r00*r00))))),-1);
if(!x6023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6022.value)+(((1.5707963267949)*(x6023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6024=IKcos(j4);
IkReal x6025=IKsin(j4);
IkReal x6026=(cj5*r00);
IkReal x6027=(cj5*r10);
IkReal x6028=(r21*sj5);
IkReal x6029=(cj5*r20);
IkReal x6030=((1.0)*x6024);
IkReal x6031=((1.0)*x6025);
IkReal x6032=(sj5*x6025);
IkReal x6033=(sj5*x6024);
evalcond[0]=(((r02*x6025))+(((-1.0)*x6026*x6030))+((r01*x6033)));
evalcond[1]=((((-1.0)*x6029*x6031))+((x6025*x6028))+(((-1.0)*r22*x6030)));
evalcond[2]=(((r11*x6032))+(((-1.0)*r12*x6030))+(((-1.0)*x6027*x6031)));
evalcond[3]=((-1.0)+(((-1.0)*x6026*x6031))+((r01*x6032))+(((-1.0)*r02*x6030)));
evalcond[4]=((((-1.0)*x6029*x6030))+((cj2*sj1))+((cj1*sj2))+((x6024*x6028))+((r22*x6025)));
evalcond[5]=(((r11*x6033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6027*x6030))+((r12*x6025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6034=((1.0)*cj5);
CheckValue<IkReal> x6035=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6034)))),-1);
if(!x6035.valid){
continue;
}
CheckValue<IkReal> x6036 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6035.value)))+(x6036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6037=IKcos(j4);
IkReal x6038=IKsin(j4);
IkReal x6039=(cj5*r00);
IkReal x6040=(cj5*r10);
IkReal x6041=(r21*sj5);
IkReal x6042=(cj5*r20);
IkReal x6043=((1.0)*x6037);
IkReal x6044=((1.0)*x6038);
IkReal x6045=(sj5*x6038);
IkReal x6046=(sj5*x6037);
evalcond[0]=((((-1.0)*x6039*x6043))+((r02*x6038))+((r01*x6046)));
evalcond[1]=((((-1.0)*x6042*x6044))+((x6038*x6041))+(((-1.0)*r22*x6043)));
evalcond[2]=(((r11*x6045))+(((-1.0)*x6040*x6044))+(((-1.0)*r12*x6043)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6043))+(((-1.0)*x6039*x6044))+((r01*x6045)));
evalcond[4]=(((r22*x6038))+((cj2*sj1))+((x6037*x6041))+((cj1*sj2))+(((-1.0)*x6042*x6043)));
evalcond[5]=(((r11*x6046))+((r12*x6038))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6040*x6043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6047=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6047.valid){
continue;
}
CheckValue<IkReal> x6048 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6047.value)))+(x6048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6049=IKcos(j4);
IkReal x6050=IKsin(j4);
IkReal x6051=(cj5*r00);
IkReal x6052=(cj5*r10);
IkReal x6053=(r21*sj5);
IkReal x6054=(cj5*r20);
IkReal x6055=((1.0)*x6049);
IkReal x6056=((1.0)*x6050);
IkReal x6057=(sj5*x6050);
IkReal x6058=(sj5*x6049);
evalcond[0]=(((r01*x6058))+(((-1.0)*x6051*x6055))+((r02*x6050)));
evalcond[1]=((((-1.0)*x6054*x6056))+(((-1.0)*r22*x6055))+((x6050*x6053)));
evalcond[2]=((((-1.0)*x6052*x6056))+(((-1.0)*r12*x6055))+((r11*x6057)));
evalcond[3]=((-1.0)+((r01*x6057))+(((-1.0)*x6051*x6056))+(((-1.0)*r02*x6055)));
evalcond[4]=(((cj2*sj1))+((r22*x6050))+((cj1*sj2))+(((-1.0)*x6054*x6055))+((x6049*x6053)));
evalcond[5]=(((r12*x6050))+(((-1.0)*x6052*x6055))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6059=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6059;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6060=((1.0)*cj5);
IkReal x6061=((((-1.0)*r21*x6060))+(((-1.0)*r20*sj5)));
j4eval[0]=x6061;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6060))+((r11*sj5))))));
j4eval[2]=IKsign(x6061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6062=(r01*sj5);
IkReal x6063=(cj1*sj2);
IkReal x6064=(cj2*sj1);
IkReal x6065=((1.0)*r02);
IkReal x6066=((1.0)*cj5*r00);
IkReal x6067=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6067;
j4eval[1]=((IKabs(((((-1.0)*x6064*x6066))+((x6062*x6063))+((x6062*x6064))+(((-1.0)*x6063*x6066)))))+(IKabs(((((-1.0)*x6064*x6065))+(((-1.0)*x6063*x6065))))));
j4eval[2]=IKsign(x6067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6068=(r01*sj5);
IkReal x6069=(cj1*sj2);
IkReal x6070=(cj2*sj1);
IkReal x6071=((1.0)*r02);
IkReal x6072=((1.0)*cj5*r00);
CheckValue<IkReal> x6073 = IKatan2WithCheck(IkReal((((x6068*x6070))+(((-1.0)*x6070*x6072))+(((-1.0)*x6069*x6072))+((x6068*x6069)))),IkReal(((((-1.0)*x6070*x6071))+(((-1.0)*x6069*x6071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6073.valid){
continue;
}
CheckValue<IkReal> x6074=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6073.value)+(((1.5707963267949)*(x6074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6075=IKcos(j4);
IkReal x6076=IKsin(j4);
IkReal x6077=(cj5*r00);
IkReal x6078=(cj5*r10);
IkReal x6079=(r21*sj5);
IkReal x6080=(cj5*r20);
IkReal x6081=((1.0)*x6075);
IkReal x6082=((1.0)*x6076);
IkReal x6083=(sj5*x6076);
IkReal x6084=(sj5*x6075);
evalcond[0]=(((r01*x6084))+(((-1.0)*x6077*x6081))+((r02*x6076)));
evalcond[1]=(((x6076*x6079))+(((-1.0)*x6080*x6082))+(((-1.0)*r22*x6081)));
evalcond[2]=((((-1.0)*r12*x6081))+(((-1.0)*x6078*x6082))+((r11*x6083)));
evalcond[3]=((1.0)+((r01*x6083))+(((-1.0)*r02*x6081))+(((-1.0)*x6077*x6082)));
evalcond[4]=(((cj2*sj1))+((x6075*x6079))+(((-1.0)*x6080*x6081))+((cj1*sj2))+((r22*x6076)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6078*x6081))+((cj1*cj2))+((r11*x6084))+((r12*x6076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6085=((1.0)*cj5);
CheckValue<IkReal> x6086 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6086.valid){
continue;
}
CheckValue<IkReal> x6087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6085))+(((-1.0)*r20*sj5)))),-1);
if(!x6087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6086.value)+(((1.5707963267949)*(x6087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6088=IKcos(j4);
IkReal x6089=IKsin(j4);
IkReal x6090=(cj5*r00);
IkReal x6091=(cj5*r10);
IkReal x6092=(r21*sj5);
IkReal x6093=(cj5*r20);
IkReal x6094=((1.0)*x6088);
IkReal x6095=((1.0)*x6089);
IkReal x6096=(sj5*x6089);
IkReal x6097=(sj5*x6088);
evalcond[0]=(((r01*x6097))+(((-1.0)*x6090*x6094))+((r02*x6089)));
evalcond[1]=((((-1.0)*r22*x6094))+((x6089*x6092))+(((-1.0)*x6093*x6095)));
evalcond[2]=((((-1.0)*x6091*x6095))+((r11*x6096))+(((-1.0)*r12*x6094)));
evalcond[3]=((1.0)+((r01*x6096))+(((-1.0)*x6090*x6095))+(((-1.0)*r02*x6094)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6088*x6092))+(((-1.0)*x6093*x6094))+((r22*x6089)));
evalcond[5]=((((-1.0)*x6091*x6094))+(((-1.0)*sj1*sj2))+((r12*x6089))+((r11*x6097))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6098 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6098.valid){
continue;
}
CheckValue<IkReal> x6099=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6098.value)+(((1.5707963267949)*(x6099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6100=IKcos(j4);
IkReal x6101=IKsin(j4);
IkReal x6102=(cj5*r00);
IkReal x6103=(cj5*r10);
IkReal x6104=(r21*sj5);
IkReal x6105=(cj5*r20);
IkReal x6106=((1.0)*x6100);
IkReal x6107=((1.0)*x6101);
IkReal x6108=(sj5*x6101);
IkReal x6109=(sj5*x6100);
evalcond[0]=((((-1.0)*x6102*x6106))+((r02*x6101))+((r01*x6109)));
evalcond[1]=((((-1.0)*x6105*x6107))+((x6101*x6104))+(((-1.0)*r22*x6106)));
evalcond[2]=(((r11*x6108))+(((-1.0)*x6103*x6107))+(((-1.0)*r12*x6106)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6106))+(((-1.0)*x6102*x6107))+((r01*x6108)));
evalcond[4]=((((-1.0)*x6105*x6106))+((cj2*sj1))+((r22*x6101))+((x6100*x6104))+((cj1*sj2)));
evalcond[5]=(((r11*x6109))+(((-1.0)*x6103*x6106))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x6101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6110=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6110);
rxp1_1=(px*r21);
rxp1_2=(r11*x6110);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6111=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6111);
rxp1_1=(px*r21);
rxp1_2=(r11*x6111);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6112=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6112);
rxp1_1=(px*r21);
rxp1_2=(r11*x6112);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6115=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6115.valid){
continue;
}
IkReal x6113=x6115.value;
IkReal x6114=(sj0*x6113);
cj4array[0]=(((cj1*cj2*x6114))+(((-1.0)*sj1*sj2*x6114)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6116=IKsin(j4);
IkReal x6117=IKcos(j4);
IkReal x6118=(r21*sj5);
IkReal x6119=((1.0)*cj5*r20);
evalcond[0]=(r02*x6116);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6117)));
evalcond[2]=(((x6116*x6118))+(((-1.0)*x6116*x6119)));
evalcond[3]=(((r11*sj5*x6116))+(((-1.0)*cj5*r10*x6116)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6117*x6118))+(((-1.0)*x6117*x6119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6122=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6122.valid){
continue;
}
IkReal x6120=x6122.value;
IkReal x6121=((1.0)*x6120);
cj4array[0]=((((-1.0)*cj2*sj1*x6121))+(((-1.0)*cj1*sj2*x6121)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6123=IKsin(j4);
IkReal x6124=IKcos(j4);
IkReal x6125=((1.0)*sj0);
IkReal x6126=((1.0)*cj5);
IkReal x6127=(sj5*x6123);
evalcond[0]=(r02*x6123);
evalcond[1]=((((-1.0)*x6125))+(((-1.0)*r02*x6124)));
evalcond[2]=(((r21*x6127))+(((-1.0)*r20*x6123*x6126)));
evalcond[3]=((((-1.0)*r10*x6123*x6126))+((r11*x6127)));
evalcond[4]=((((-1.0)*cj1*cj2*x6125))+(((-1.0)*r10*x6124*x6126))+((r11*sj5*x6124))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6128=IKPowWithIntegerCheck(r02,-1);
if(!x6128.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6128.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6129=IKsin(j4);
IkReal x6130=IKcos(j4);
IkReal x6131=(r21*sj5);
IkReal x6132=((1.0)*cj5);
IkReal x6133=(r11*sj5);
evalcond[0]=(r02*x6129);
evalcond[1]=(((x6129*x6131))+(((-1.0)*r20*x6129*x6132)));
evalcond[2]=(((x6129*x6133))+(((-1.0)*r10*x6129*x6132)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6130*x6131))+(((-1.0)*r20*x6130*x6132)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6130*x6133))+(((-1.0)*r10*x6130*x6132))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6134=((1.0)*sj0);
IkReal x6135=((1.0)*cj0);
CheckValue<IkReal> x6136 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6134))+(((-1.0)*r02*x6135)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6135))+(((-1.0)*r11*sj5*x6134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6136.valid){
continue;
}
CheckValue<IkReal> x6137=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6136.value)+(((1.5707963267949)*(x6137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6138=IKsin(j4);
IkReal x6139=IKcos(j4);
IkReal x6140=(cj5*r00);
IkReal x6141=(cj5*r10);
IkReal x6142=(r21*sj5);
IkReal x6143=(sj1*sj2);
IkReal x6144=(cj5*r20);
IkReal x6145=((1.0)*x6139);
IkReal x6146=((1.0)*cj1*cj2);
IkReal x6147=((1.0)*x6138);
IkReal x6148=(sj5*x6138);
IkReal x6149=(sj5*x6139);
evalcond[0]=((((-1.0)*x6144*x6147))+((x6138*x6142))+(((-1.0)*r22*x6145)));
evalcond[1]=(cj0+((r11*x6148))+(((-1.0)*x6141*x6147))+(((-1.0)*r12*x6145)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6145))+((r01*x6148))+(((-1.0)*x6140*x6147)));
evalcond[3]=(((x6139*x6142))+(((-1.0)*x6144*x6145))+((cj2*sj1))+((r22*x6138))+((cj1*sj2)));
evalcond[4]=(((r01*x6149))+((r02*x6138))+(((-1.0)*x6140*x6145))+((cj0*x6143))+(((-1.0)*cj0*x6146)));
evalcond[5]=(((sj0*x6143))+(((-1.0)*sj0*x6146))+((r11*x6149))+(((-1.0)*x6141*x6145))+((r12*x6138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6150=((1.0)*cj5);
CheckValue<IkReal> x6151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6150)))),-1);
if(!x6151.valid){
continue;
}
CheckValue<IkReal> x6152 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6150))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6151.value)))+(x6152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6153=IKsin(j4);
IkReal x6154=IKcos(j4);
IkReal x6155=(cj5*r00);
IkReal x6156=(cj5*r10);
IkReal x6157=(r21*sj5);
IkReal x6158=(sj1*sj2);
IkReal x6159=(cj5*r20);
IkReal x6160=((1.0)*x6154);
IkReal x6161=((1.0)*cj1*cj2);
IkReal x6162=((1.0)*x6153);
IkReal x6163=(sj5*x6153);
IkReal x6164=(sj5*x6154);
evalcond[0]=(((x6153*x6157))+(((-1.0)*x6159*x6162))+(((-1.0)*r22*x6160)));
evalcond[1]=(cj0+(((-1.0)*x6156*x6162))+(((-1.0)*r12*x6160))+((r11*x6163)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6155*x6162))+((r01*x6163))+(((-1.0)*r02*x6160)));
evalcond[3]=(((r22*x6153))+((cj2*sj1))+((x6154*x6157))+((cj1*sj2))+(((-1.0)*x6159*x6160)));
evalcond[4]=((((-1.0)*cj0*x6161))+((cj0*x6158))+(((-1.0)*x6155*x6160))+((r02*x6153))+((r01*x6164)));
evalcond[5]=(((r12*x6153))+(((-1.0)*sj0*x6161))+((sj0*x6158))+(((-1.0)*x6156*x6160))+((r11*x6164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6165=((1.0)*cj5);
CheckValue<IkReal> x6166 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6166.valid){
continue;
}
CheckValue<IkReal> x6167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6165)))),-1);
if(!x6167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6166.value)+(((1.5707963267949)*(x6167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6168=IKsin(j4);
IkReal x6169=IKcos(j4);
IkReal x6170=(cj5*r00);
IkReal x6171=(cj5*r10);
IkReal x6172=(r21*sj5);
IkReal x6173=(sj1*sj2);
IkReal x6174=(cj5*r20);
IkReal x6175=((1.0)*x6169);
IkReal x6176=((1.0)*cj1*cj2);
IkReal x6177=((1.0)*x6168);
IkReal x6178=(sj5*x6168);
IkReal x6179=(sj5*x6169);
evalcond[0]=((((-1.0)*x6174*x6177))+((x6168*x6172))+(((-1.0)*r22*x6175)));
evalcond[1]=(cj0+((r11*x6178))+(((-1.0)*r12*x6175))+(((-1.0)*x6171*x6177)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6170*x6177))+((r01*x6178))+(((-1.0)*r02*x6175)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6174*x6175))+((x6169*x6172))+((r22*x6168)));
evalcond[4]=((((-1.0)*cj0*x6176))+((r02*x6168))+(((-1.0)*x6170*x6175))+((r01*x6179))+((cj0*x6173)));
evalcond[5]=((((-1.0)*sj0*x6176))+((r12*x6168))+((r11*x6179))+((sj0*x6173))+(((-1.0)*x6171*x6175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6180=r21*r21;
IkReal x6181=cj5*cj5;
IkReal x6182=(cj2*sj1);
IkReal x6183=(cj1*sj2);
IkReal x6184=(r21*sj5);
IkReal x6185=((1.0)*cj5*r20);
CheckValue<IkReal> x6186 = IKatan2WithCheck(IkReal((((r22*x6183))+((r22*x6182)))),IkReal(((((-1.0)*x6182*x6185))+((x6183*x6184))+(((-1.0)*x6183*x6185))+((x6182*x6184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6186.valid){
continue;
}
CheckValue<IkReal> x6187=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6180))+(((2.0)*cj5*r20*x6184))+(((-1.0)*x6181*(r20*r20)))+(((-1.0)*(r22*r22)))+((x6180*x6181)))),-1);
if(!x6187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6186.value)+(((1.5707963267949)*(x6187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6188=IKsin(j4);
IkReal x6189=IKcos(j4);
IkReal x6190=(r21*sj5);
IkReal x6191=(cj5*r20);
IkReal x6192=((1.0)*x6189);
evalcond[0]=(((x6188*x6190))+(((-1.0)*x6188*x6191))+(((-1.0)*r22*x6192)));
evalcond[1]=(((cj2*sj1))+((r22*x6188))+((cj1*sj2))+(((-1.0)*x6191*x6192))+((x6189*x6190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6193=(cj5*sj4);
IkReal x6194=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6194))+(((-1.0)*r00*x6193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6193))+(((-1.0)*r11*x6194))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6194))+(((-1.0)*r00*x6193))))+IKsqr((((r10*x6193))+(((-1.0)*r11*x6194))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6194))+(((-1.0)*r00*x6193))), (((r10*x6193))+(((-1.0)*r11*x6194))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6195=IKcos(j0);
IkReal x6196=IKsin(j0);
IkReal x6197=((0.21325)*cj2);
IkReal x6198=(cj5*r01);
IkReal x6199=((1.0)*sj2);
IkReal x6200=(r11*sj5);
IkReal x6201=((0.21325)*sj2);
IkReal x6202=(r00*sj5);
IkReal x6203=(cj5*r11);
IkReal x6204=((1.0)*cj2);
IkReal x6205=((1.0)*cj4);
IkReal x6206=(r01*sj5);
IkReal x6207=(r10*sj5);
IkReal x6208=(cj1*x6196);
IkReal x6209=(cj1*x6195);
IkReal x6210=(cj5*x6205);
IkReal x6211=(sj1*x6195);
IkReal x6212=((1.0)*cj5*sj4);
IkReal x6213=(sj1*x6196);
evalcond[0]=(x6195+(((-1.0)*r12*x6205))+((sj4*x6200))+(((-1.0)*r10*x6212)));
evalcond[1]=((((-1.0)*r02*x6205))+(((-1.0)*r00*x6212))+(((-1.0)*x6196))+((sj4*x6206)));
evalcond[2]=(x6202+(((-1.0)*x6199*x6209))+x6198+(((-1.0)*x6204*x6211)));
evalcond[3]=(x6207+x6203+(((-1.0)*x6199*x6208))+(((-1.0)*x6204*x6213)));
evalcond[4]=((((-1.0)*r00*x6210))+((r02*sj4))+(((-1.0)*x6204*x6209))+((cj4*x6206))+((sj2*x6211)));
evalcond[5]=(((r12*sj4))+(((-1.0)*x6204*x6208))+((cj4*x6200))+((sj2*x6213))+(((-1.0)*r10*x6210)));
evalcond[6]=((((-0.08535)*x6202))+(((-0.08535)*x6198))+(((-0.11235)*x6196))+(((-1.0)*px))+(((0.24365)*x6209))+((x6197*x6209))+(((-1.0)*x6201*x6211)));
evalcond[7]=((((-0.08535)*x6207))+(((-0.08535)*x6203))+(((-1.0)*py))+(((0.24365)*x6208))+((x6197*x6208))+(((-1.0)*x6201*x6213))+(((0.11235)*x6195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6214=((1.0)*cj5);
IkReal x6215=((1.0)*sj5);
CheckValue<IkReal> x6216 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6214))+(((-1.0)*r10*x6215)))),IkReal(((((-1.0)*r00*x6215))+(((-1.0)*r01*x6214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6216.valid){
continue;
}
CheckValue<IkReal> x6217=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6217.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6216.value)+(((1.5707963267949)*(x6217.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6218=IKcos(j0);
IkReal x6219=IKsin(j0);
IkReal x6220=((0.21325)*cj2);
IkReal x6221=(cj5*r01);
IkReal x6222=((1.0)*sj2);
IkReal x6223=(r00*sj5);
IkReal x6224=(cj5*r11);
IkReal x6225=(r10*sj5);
IkReal x6226=(cj1*x6219);
IkReal x6227=(cj1*x6218);
IkReal x6228=((0.21325)*sj1*sj2);
IkReal x6229=((1.0)*cj2*sj1);
evalcond[0]=(x6223+x6221+(((-1.0)*x6222*x6227))+(((-1.0)*x6218*x6229)));
evalcond[1]=(x6224+x6225+(((-1.0)*x6222*x6226))+(((-1.0)*x6219*x6229)));
evalcond[2]=((((0.24365)*x6227))+(((-0.11235)*x6219))+(((-0.08535)*x6223))+(((-0.08535)*x6221))+(((-1.0)*px))+(((-1.0)*x6218*x6228))+((x6220*x6227)));
evalcond[3]=((((0.24365)*x6226))+(((-0.08535)*x6224))+(((-0.08535)*x6225))+(((-1.0)*x6219*x6228))+(((-1.0)*py))+((x6220*x6226))+(((0.11235)*x6218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6230=((1.0)*cj5);
IkReal x6231=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6230)));
j4eval[0]=x6231;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6230)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6232=((1.0)*cj5);
IkReal x6233=((((-1.0)*r11*x6232))+(((-1.0)*r10*sj5)));
j4eval[0]=x6233;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6232))))));
j4eval[2]=IKsign(x6233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6234=((1.0)*sj0);
IkReal x6235=((1.0)*cj0);
IkReal x6236=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6236;
j4eval[1]=((IKabs(((((-1.0)*r12*x6234))+(((-1.0)*r02*x6235)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6235))+(((-1.0)*r11*sj5*x6234))))));
j4eval[2]=IKsign(x6236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6237=((-1.0)*r20);
IkReal x6239 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6239)==0){
continue;
}
IkReal x6238=pow(x6239,-0.5);
CheckValue<IkReal> x6240 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6237),IKFAST_ATAN2_MAGTHRESH);
if(!x6240.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6240.value));
IkReal gconst115=(r21*x6238);
IkReal gconst116=(x6237*x6238);
CheckValue<IkReal> x6241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6241.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6241.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6242=((-1.0)*r20);
IkReal x6243=x6238;
CheckValue<IkReal> x6245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6242),IKFAST_ATAN2_MAGTHRESH);
if(!x6245.valid){
continue;
}
IkReal x6244=((-1.0)*(x6245.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6244;
IkReal gconst114=x6244;
IkReal gconst115=(r21*x6243);
IkReal gconst116=(x6242*x6243);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6246=((-1.0)*r20);
IkReal x6247=x6238;
CheckValue<IkReal> x6249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6246),IKFAST_ATAN2_MAGTHRESH);
if(!x6249.valid){
continue;
}
IkReal x6248=((-1.0)*(x6249.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6248;
IkReal gconst114=x6248;
IkReal gconst115=(r21*x6247);
IkReal gconst116=(x6246*x6247);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6250=((-1.0)*r20);
IkReal x6251=x6238;
CheckValue<IkReal> x6253 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6250),IKFAST_ATAN2_MAGTHRESH);
if(!x6253.valid){
continue;
}
IkReal x6252=((-1.0)*(x6253.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6252;
IkReal gconst114=x6252;
IkReal gconst115=(r21*x6251);
IkReal gconst116=(x6250*x6251);
IkReal x6254=((1.0)*(r22*r22));
CheckValue<IkReal> x6258=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6254))),-1);
if(!x6258.valid){
continue;
}
IkReal x6255=x6258.value;
IkReal x6256=((1.0)*x6255);
IkReal x6257=((((-2.0)*x6255*(r20*r20)*(r21*r21)))+(((-1.0)*x6254))+(((-1.0)*x6256*(r21*r21*r21*r21)))+(((-1.0)*x6256*(r20*r20*r20*r20))));
j4eval[0]=x6257;
j4eval[1]=IKsign(x6257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6259=(cj2*sj1);
IkReal x6260=(gconst115*r21);
IkReal x6261=(cj1*sj2);
IkReal x6262=((1.0)*gconst116*r20);
CheckValue<IkReal> x6263=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x6260))+(((-1.0)*(x6260*x6260)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst116*r20*x6262)))),-1);
if(!x6263.valid){
continue;
}
CheckValue<IkReal> x6264 = IKatan2WithCheck(IkReal((((r22*x6259))+((r22*x6261)))),IkReal(((((-1.0)*x6261*x6262))+((x6260*x6261))+((x6259*x6260))+(((-1.0)*x6259*x6262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6263.value)))+(x6264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6265=IKsin(j4);
IkReal x6266=IKcos(j4);
IkReal x6267=(sj1*sj2);
IkReal x6268=((1.0)*x6266);
IkReal x6269=((1.0)*cj1*cj2);
IkReal x6270=(gconst115*x6265);
IkReal x6271=(gconst115*x6266);
IkReal x6272=((1.0)*gconst116*x6265);
evalcond[0]=((((-1.0)*r20*x6272))+((r21*x6270))+(((-1.0)*r22*x6268)));
evalcond[1]=((((-1.0)*r10*x6272))+cj0+((r11*x6270))+(((-1.0)*r12*x6268)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6268))+((r01*x6270))+(((-1.0)*r00*x6272)));
evalcond[3]=(((cj2*sj1))+((r22*x6265))+((cj1*sj2))+((r21*x6271))+(((-1.0)*gconst116*r20*x6268)));
evalcond[4]=(((r01*x6271))+(((-1.0)*gconst116*r00*x6268))+(((-1.0)*cj0*x6269))+((r02*x6265))+((cj0*x6267)));
evalcond[5]=((((-1.0)*gconst116*r10*x6268))+((sj0*x6267))+((r12*x6265))+((r11*x6271))+(((-1.0)*sj0*x6269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6273=((1.0)*gconst116);
CheckValue<IkReal> x6274=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6273)))),-1);
if(!x6274.valid){
continue;
}
CheckValue<IkReal> x6275 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6274.value)))+(x6275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6276=IKsin(j4);
IkReal x6277=IKcos(j4);
IkReal x6278=(sj1*sj2);
IkReal x6279=((1.0)*x6277);
IkReal x6280=((1.0)*cj1*cj2);
IkReal x6281=(gconst115*x6276);
IkReal x6282=(gconst115*x6277);
IkReal x6283=((1.0)*gconst116*x6276);
evalcond[0]=((((-1.0)*r20*x6283))+(((-1.0)*r22*x6279))+((r21*x6281)));
evalcond[1]=(cj0+(((-1.0)*r10*x6283))+((r11*x6281))+(((-1.0)*r12*x6279)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6279))+(((-1.0)*r00*x6283))+((r01*x6281)));
evalcond[3]=(((r22*x6276))+((cj2*sj1))+((cj1*sj2))+((r21*x6282))+(((-1.0)*gconst116*r20*x6279)));
evalcond[4]=(((r02*x6276))+(((-1.0)*gconst116*r00*x6279))+(((-1.0)*cj0*x6280))+((r01*x6282))+((cj0*x6278)));
evalcond[5]=(((r12*x6276))+(((-1.0)*gconst116*r10*x6279))+((sj0*x6278))+((r11*x6282))+(((-1.0)*sj0*x6280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6284=((1.0)*gconst116);
CheckValue<IkReal> x6285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6285.valid){
continue;
}
CheckValue<IkReal> x6286=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6284)))),-1);
if(!x6286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6285.value)+(((1.5707963267949)*(x6286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6287=IKsin(j4);
IkReal x6288=IKcos(j4);
IkReal x6289=(sj1*sj2);
IkReal x6290=((1.0)*x6288);
IkReal x6291=((1.0)*cj1*cj2);
IkReal x6292=(gconst115*x6287);
IkReal x6293=(gconst115*x6288);
IkReal x6294=((1.0)*gconst116*x6287);
evalcond[0]=((((-1.0)*r20*x6294))+(((-1.0)*r22*x6290))+((r21*x6292)));
evalcond[1]=(cj0+((r11*x6292))+(((-1.0)*r10*x6294))+(((-1.0)*r12*x6290)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6294))+((r01*x6292))+(((-1.0)*r02*x6290)));
evalcond[3]=(((cj2*sj1))+((r22*x6287))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6290))+((r21*x6293)));
evalcond[4]=(((r01*x6293))+(((-1.0)*gconst116*r00*x6290))+((cj0*x6289))+((r02*x6287))+(((-1.0)*cj0*x6291)));
evalcond[5]=(((r11*x6293))+((r12*x6287))+((sj0*x6289))+(((-1.0)*gconst116*r10*x6290))+(((-1.0)*sj0*x6291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6295=((-1.0)*r21);
IkReal x6297 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6297)==0){
continue;
}
IkReal x6296=pow(x6297,-0.5);
CheckValue<IkReal> x6298 = IKatan2WithCheck(IkReal(x6295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6298.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6298.value))));
IkReal gconst118=(x6295*x6296);
IkReal gconst119=((1.0)*r20*x6296);
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6299.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6300=((-1.0)*r21);
CheckValue<IkReal> x6303 = IKatan2WithCheck(IkReal(x6300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6303.valid){
continue;
}
IkReal x6301=((1.0)*(x6303.value));
IkReal x6302=x6296;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6301)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6301)));
IkReal gconst118=(x6300*x6302);
IkReal gconst119=((1.0)*r20*x6302);
IkReal x6304=r22*r22;
IkReal x6305=((1.0)*x6304);
CheckValue<IkReal> x6309=IKPowWithIntegerCheck(((-1.0)+x6304),-1);
if(!x6309.valid){
continue;
}
IkReal x6306=x6309.value;
if((((1.0)+(((-1.0)*x6305)))) < -0.00001)
continue;
IkReal x6307=IKsqrt(((1.0)+(((-1.0)*x6305))));
IkReal x6308=(cj0*x6306*x6307);
j4eval[0]=((IKabs(((((-1.0)*x6305*x6308))+x6308)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6310=((-1.0)*r21);
CheckValue<IkReal> x6313 = IKatan2WithCheck(IkReal(x6310),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6313.valid){
continue;
}
IkReal x6311=((1.0)*(x6313.value));
IkReal x6312=x6296;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6311)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6311)));
IkReal gconst118=(x6310*x6312);
IkReal gconst119=((1.0)*r20*x6312);
IkReal x6314=r22*r22;
IkReal x6315=((1.0)*x6314);
CheckValue<IkReal> x6319=IKPowWithIntegerCheck(((-1.0)+x6314),-1);
if(!x6319.valid){
continue;
}
IkReal x6316=x6319.value;
if((((1.0)+(((-1.0)*x6315)))) < -0.00001)
continue;
IkReal x6317=IKsqrt(((1.0)+(((-1.0)*x6315))));
IkReal x6318=(sj0*x6316*x6317);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6318+(((-1.0)*x6315*x6318))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6320=((-1.0)*r21);
CheckValue<IkReal> x6323 = IKatan2WithCheck(IkReal(x6320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6323.valid){
continue;
}
IkReal x6321=((1.0)*(x6323.value));
IkReal x6322=x6296;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6321)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6321)));
IkReal gconst118=(x6320*x6322);
IkReal gconst119=((1.0)*r20*x6322);
IkReal x6324=r22*r22;
IkReal x6325=(r12*sj0);
IkReal x6326=(cj0*r02);
CheckValue<IkReal> x6330=IKPowWithIntegerCheck(((-1.0)+x6324),-1);
if(!x6330.valid){
continue;
}
IkReal x6327=x6330.value;
if((((1.0)+(((-1.0)*x6324)))) < -0.00001)
continue;
IkReal x6328=IKsqrt(((1.0)+(((-1.0)*x6324))));
IkReal x6329=(r22*x6327*x6328);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6326*x6329))+((x6325*x6329)))))+(IKabs(((((-1.0)*x6326))+(((-1.0)*x6325))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6331=((1.0)*sj0);
IkReal x6332=((1.0)*gconst118);
CheckValue<IkReal> x6333=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6332)))),-1);
if(!x6333.valid){
continue;
}
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6331))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6331))+(((-1.0)*cj0*r01*x6332))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6333.value)))+(x6334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6335=IKsin(j4);
IkReal x6336=IKcos(j4);
IkReal x6337=(gconst118*r01);
IkReal x6338=(sj1*sj2);
IkReal x6339=(gconst119*r20);
IkReal x6340=(gconst119*r10);
IkReal x6341=(gconst119*r00);
IkReal x6342=(gconst118*r21);
IkReal x6343=(gconst118*r11);
IkReal x6344=((1.0)*x6336);
IkReal x6345=((1.0)*cj1*cj2);
IkReal x6346=((1.0)*x6335);
evalcond[0]=((((-1.0)*r22*x6344))+(((-1.0)*x6339*x6346))+((x6335*x6342)));
evalcond[1]=((((-1.0)*x6340*x6346))+cj0+((x6335*x6343))+(((-1.0)*r12*x6344)));
evalcond[2]=((((-1.0)*x6341*x6346))+(((-1.0)*sj0))+((x6335*x6337))+(((-1.0)*r02*x6344)));
evalcond[3]=(((cj2*sj1))+((r22*x6335))+(((-1.0)*x6339*x6344))+((cj1*sj2))+((x6336*x6342)));
evalcond[4]=((((-1.0)*x6341*x6344))+((r02*x6335))+(((-1.0)*cj0*x6345))+((x6336*x6337))+((cj0*x6338)));
evalcond[5]=((((-1.0)*x6340*x6344))+((r12*x6335))+((sj0*x6338))+((x6336*x6343))+(((-1.0)*sj0*x6345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6347=((1.0)*gconst119);
CheckValue<IkReal> x6348 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6348.valid){
continue;
}
CheckValue<IkReal> x6349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6347))+(((-1.0)*gconst118*r10)))),-1);
if(!x6349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6348.value)+(((1.5707963267949)*(x6349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6350=IKsin(j4);
IkReal x6351=IKcos(j4);
IkReal x6352=(gconst118*r01);
IkReal x6353=(sj1*sj2);
IkReal x6354=(gconst119*r20);
IkReal x6355=(gconst119*r10);
IkReal x6356=(gconst119*r00);
IkReal x6357=(gconst118*r21);
IkReal x6358=(gconst118*r11);
IkReal x6359=((1.0)*x6351);
IkReal x6360=((1.0)*cj1*cj2);
IkReal x6361=((1.0)*x6350);
evalcond[0]=((((-1.0)*r22*x6359))+((x6350*x6357))+(((-1.0)*x6354*x6361)));
evalcond[1]=(cj0+(((-1.0)*r12*x6359))+((x6350*x6358))+(((-1.0)*x6355*x6361)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6359))+(((-1.0)*x6356*x6361))+((x6350*x6352)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6354*x6359))+((cj1*sj2))+((r22*x6350))+((x6351*x6357)));
evalcond[4]=((((-1.0)*x6356*x6359))+((r02*x6350))+(((-1.0)*cj0*x6360))+((x6351*x6352))+((cj0*x6353)));
evalcond[5]=((((-1.0)*x6355*x6359))+(((-1.0)*sj0*x6360))+((r12*x6350))+((sj0*x6353))+((x6351*x6358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6362=((1.0)*gconst119);
CheckValue<IkReal> x6363 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6363.valid){
continue;
}
CheckValue<IkReal> x6364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6362)))),-1);
if(!x6364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6363.value)+(((1.5707963267949)*(x6364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6365=IKsin(j4);
IkReal x6366=IKcos(j4);
IkReal x6367=(gconst118*r01);
IkReal x6368=(sj1*sj2);
IkReal x6369=(gconst119*r20);
IkReal x6370=(gconst119*r10);
IkReal x6371=(gconst119*r00);
IkReal x6372=(gconst118*r21);
IkReal x6373=(gconst118*r11);
IkReal x6374=((1.0)*x6366);
IkReal x6375=((1.0)*cj1*cj2);
IkReal x6376=((1.0)*x6365);
evalcond[0]=(((x6365*x6372))+(((-1.0)*r22*x6374))+(((-1.0)*x6369*x6376)));
evalcond[1]=(cj0+(((-1.0)*x6370*x6376))+((x6365*x6373))+(((-1.0)*r12*x6374)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6374))+((x6365*x6367))+(((-1.0)*x6371*x6376)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6366*x6372))+((r22*x6365))+(((-1.0)*x6369*x6374)));
evalcond[4]=(((x6366*x6367))+(((-1.0)*x6371*x6374))+((cj0*x6368))+((r02*x6365))+(((-1.0)*cj0*x6375)));
evalcond[5]=((((-1.0)*sj0*x6375))+((r12*x6365))+((sj0*x6368))+((x6366*x6373))+(((-1.0)*x6370*x6374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6377=((-1.0)*r10);
IkReal x6379 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6379)==0){
continue;
}
IkReal x6378=pow(x6379,-0.5);
CheckValue<IkReal> x6380 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6377),IKFAST_ATAN2_MAGTHRESH);
if(!x6380.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6380.value));
IkReal gconst121=(r11*x6378);
IkReal gconst122=(x6377*x6378);
CheckValue<IkReal> x6381 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6381.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6381.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6382=((-1.0)*r10);
IkReal x6383=x6378;
CheckValue<IkReal> x6385 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6382),IKFAST_ATAN2_MAGTHRESH);
if(!x6385.valid){
continue;
}
IkReal x6384=((-1.0)*(x6385.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6384;
IkReal gconst120=x6384;
IkReal gconst121=(r11*x6383);
IkReal gconst122=(x6382*x6383);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6386=((1.0)*sj0);
IkReal x6387=((1.0)*gconst121);
CheckValue<IkReal> x6388 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6386))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x6386))+(((-1.0)*cj0*r01*x6387))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6388.valid){
continue;
}
CheckValue<IkReal> x6389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6387))+(((-1.0)*gconst122*r21)))),-1);
if(!x6389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6388.value)+(((1.5707963267949)*(x6389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6390=IKsin(j4);
IkReal x6391=IKcos(j4);
IkReal x6392=(gconst121*r11);
IkReal x6393=(sj1*sj2);
IkReal x6394=(gconst122*r00);
IkReal x6395=(gconst122*r10);
IkReal x6396=(gconst122*r20);
IkReal x6397=((1.0)*x6391);
IkReal x6398=((1.0)*cj1*cj2);
IkReal x6399=((1.0)*x6390);
IkReal x6400=(gconst121*x6390);
IkReal x6401=(gconst121*x6391);
evalcond[0]=(((r21*x6400))+(((-1.0)*r22*x6397))+(((-1.0)*x6396*x6399)));
evalcond[1]=((((-1.0)*x6395*x6399))+((x6390*x6392))+cj0+(((-1.0)*r12*x6397)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6400))+(((-1.0)*r02*x6397))+(((-1.0)*x6394*x6399)));
evalcond[3]=(((cj2*sj1))+((r21*x6401))+((cj1*sj2))+(((-1.0)*x6396*x6397))+((r22*x6390)));
evalcond[4]=(((cj0*x6393))+((r01*x6401))+(((-1.0)*cj0*x6398))+(((-1.0)*x6394*x6397))+((r02*x6390)));
evalcond[5]=((((-1.0)*sj0*x6398))+(((-1.0)*x6395*x6397))+((x6391*x6392))+((r12*x6390))+((sj0*x6393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6402=((1.0)*gconst122);
CheckValue<IkReal> x6403 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6402))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6403.valid){
continue;
}
CheckValue<IkReal> x6404=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6402)))),-1);
if(!x6404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6403.value)+(((1.5707963267949)*(x6404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6405=IKsin(j4);
IkReal x6406=IKcos(j4);
IkReal x6407=(gconst121*r11);
IkReal x6408=(sj1*sj2);
IkReal x6409=(gconst122*r00);
IkReal x6410=(gconst122*r10);
IkReal x6411=(gconst122*r20);
IkReal x6412=((1.0)*x6406);
IkReal x6413=((1.0)*cj1*cj2);
IkReal x6414=((1.0)*x6405);
IkReal x6415=(gconst121*x6405);
IkReal x6416=(gconst121*x6406);
evalcond[0]=(((r21*x6415))+(((-1.0)*r22*x6412))+(((-1.0)*x6411*x6414)));
evalcond[1]=(cj0+((x6405*x6407))+(((-1.0)*x6410*x6414))+(((-1.0)*r12*x6412)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6415))+(((-1.0)*r02*x6412))+(((-1.0)*x6409*x6414)));
evalcond[3]=(((cj2*sj1))+((r21*x6416))+((cj1*sj2))+((r22*x6405))+(((-1.0)*x6411*x6412)));
evalcond[4]=(((r02*x6405))+((r01*x6416))+((cj0*x6408))+(((-1.0)*x6409*x6412))+(((-1.0)*cj0*x6413)));
evalcond[5]=(((sj0*x6408))+((x6406*x6407))+((r12*x6405))+(((-1.0)*sj0*x6413))+(((-1.0)*x6410*x6412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6417=((-1.0)*r11);
IkReal x6419 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6419)==0){
continue;
}
IkReal x6418=pow(x6419,-0.5);
CheckValue<IkReal> x6420 = IKatan2WithCheck(IkReal(x6417),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6420.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6420.value))));
IkReal gconst124=(x6417*x6418);
IkReal gconst125=((1.0)*r10*x6418);
CheckValue<IkReal> x6421 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6421.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6421.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6422=((-1.0)*r11);
CheckValue<IkReal> x6425 = IKatan2WithCheck(IkReal(x6422),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6425.valid){
continue;
}
IkReal x6423=((1.0)*(x6425.value));
IkReal x6424=x6418;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6423)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6423)));
IkReal gconst124=(x6422*x6424);
IkReal gconst125=((1.0)*r10*x6424);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6426=((-1.0)*r11);
CheckValue<IkReal> x6429 = IKatan2WithCheck(IkReal(x6426),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6429.valid){
continue;
}
IkReal x6427=((1.0)*(x6429.value));
IkReal x6428=x6418;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6427)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6427)));
IkReal gconst124=(x6426*x6428);
IkReal gconst125=((1.0)*r10*x6428);
IkReal x6430=r12*r12;
IkReal x6431=((1.0)*sj0);
IkReal x6432=(cj0*r02);
IkReal x6433=x6418;
j4eval[0]=((IKabs(((((-1.0)*x6431*x6433))+((r12*x6432*x6433))+((sj0*x6430*x6433)))))+(IKabs(((((-1.0)*r12*x6431))+(((-1.0)*x6432))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6434=((-1.0)*r11);
CheckValue<IkReal> x6437 = IKatan2WithCheck(IkReal(x6434),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6437.valid){
continue;
}
IkReal x6435=((1.0)*(x6437.value));
IkReal x6436=x6418;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6435)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6435)));
IkReal gconst124=(x6434*x6436);
IkReal gconst125=((1.0)*r10*x6436);
IkReal x6438=r12*r12;
IkReal x6439=((1.0)+(((-1.0)*x6438)));
IkReal x6440=(cj2*r22*sj1);
IkReal x6441=(cj1*r22*sj2);
CheckValue<IkReal> x6448=IKPowWithIntegerCheck(x6439,-1);
if(!x6448.valid){
continue;
}
IkReal x6442=x6448.value;
CheckValue<IkReal> x6449=IKPowWithIntegerCheck(((-1.0)+x6438),-1);
if(!x6449.valid){
continue;
}
IkReal x6443=x6449.value;
IkReal x6444=((1.0)*x6442);
if((x6439) < -0.00001)
continue;
IkReal x6445=IKsqrt(x6439);
IkReal x6446=((1.0)*r12*x6443*x6445);
IkReal x6447=((((-2.0)*r10*r11*r20*r21*x6442))+(((-1.0)*x6444*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6444*(r10*r10)*(r20*r20))));
j4eval[0]=x6447;
j4eval[1]=IKsign(x6447);
j4eval[2]=((IKabs(((((-1.0)*x6440*x6446))+(((-1.0)*x6441*x6446)))))+(IKabs((x6440+x6441))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6450=(gconst124*r21);
IkReal x6451=(cj1*sj2);
IkReal x6452=(cj2*sj1);
IkReal x6453=(gconst125*r20);
CheckValue<IkReal> x6454 = IKatan2WithCheck(IkReal((((r22*x6451))+((r22*x6452)))),IkReal((((x6450*x6452))+((x6450*x6451))+(((-1.0)*x6452*x6453))+(((-1.0)*x6451*x6453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6454.valid){
continue;
}
CheckValue<IkReal> x6455=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6450*x6450)))+(((2.0)*x6450*x6453))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6453*x6453))))),-1);
if(!x6455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6454.value)+(((1.5707963267949)*(x6455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6456=IKsin(j4);
IkReal x6457=IKcos(j4);
IkReal x6458=(sj1*sj2);
IkReal x6459=(gconst125*r20);
IkReal x6460=(gconst124*r01);
IkReal x6461=(gconst125*r00);
IkReal x6462=(gconst125*r10);
IkReal x6463=((1.0)*x6457);
IkReal x6464=((1.0)*cj1*cj2);
IkReal x6465=((1.0)*x6456);
IkReal x6466=(gconst124*x6456);
IkReal x6467=(gconst124*x6457);
evalcond[0]=(((r21*x6466))+(((-1.0)*r22*x6463))+(((-1.0)*x6459*x6465)));
evalcond[1]=(cj0+(((-1.0)*r12*x6463))+((r11*x6466))+(((-1.0)*x6462*x6465)));
evalcond[2]=((((-1.0)*sj0))+((x6456*x6460))+(((-1.0)*r02*x6463))+(((-1.0)*x6461*x6465)));
evalcond[3]=(((cj2*sj1))+((r21*x6467))+((cj1*sj2))+((r22*x6456))+(((-1.0)*x6459*x6463)));
evalcond[4]=(((cj0*x6458))+((x6457*x6460))+(((-1.0)*x6461*x6463))+((r02*x6456))+(((-1.0)*cj0*x6464)));
evalcond[5]=(((sj0*x6458))+((r11*x6467))+(((-1.0)*sj0*x6464))+(((-1.0)*x6462*x6463))+((r12*x6456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6468=((1.0)*sj0);
IkReal x6469=((1.0)*cj0);
CheckValue<IkReal> x6470 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6469))+(((-1.0)*r12*x6468)))),IkReal((((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x6469))+(((-1.0)*gconst124*r11*x6468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6470.valid){
continue;
}
CheckValue<IkReal> x6471=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6470.value)+(((1.5707963267949)*(x6471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6472=IKsin(j4);
IkReal x6473=IKcos(j4);
IkReal x6474=(sj1*sj2);
IkReal x6475=(gconst125*r20);
IkReal x6476=(gconst124*r01);
IkReal x6477=(gconst125*r00);
IkReal x6478=(gconst125*r10);
IkReal x6479=((1.0)*x6473);
IkReal x6480=((1.0)*cj1*cj2);
IkReal x6481=((1.0)*x6472);
IkReal x6482=(gconst124*x6472);
IkReal x6483=(gconst124*x6473);
evalcond[0]=(((r21*x6482))+(((-1.0)*r22*x6479))+(((-1.0)*x6475*x6481)));
evalcond[1]=((((-1.0)*r12*x6479))+(((-1.0)*x6478*x6481))+((r11*x6482))+cj0);
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6477*x6481))+((x6472*x6476))+(((-1.0)*r02*x6479)));
evalcond[3]=(((r22*x6472))+((r21*x6483))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6475*x6479)));
evalcond[4]=(((x6473*x6476))+((r02*x6472))+(((-1.0)*cj0*x6480))+(((-1.0)*x6477*x6479))+((cj0*x6474)));
evalcond[5]=(((r11*x6483))+(((-1.0)*x6478*x6479))+(((-1.0)*sj0*x6480))+((r12*x6472))+((sj0*x6474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6484=((1.0)*gconst125);
CheckValue<IkReal> x6485=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6484)))),-1);
if(!x6485.valid){
continue;
}
CheckValue<IkReal> x6486 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x6484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6485.value)))+(x6486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6487=IKsin(j4);
IkReal x6488=IKcos(j4);
IkReal x6489=(sj1*sj2);
IkReal x6490=(gconst125*r20);
IkReal x6491=(gconst124*r01);
IkReal x6492=(gconst125*r00);
IkReal x6493=(gconst125*r10);
IkReal x6494=((1.0)*x6488);
IkReal x6495=((1.0)*cj1*cj2);
IkReal x6496=((1.0)*x6487);
IkReal x6497=(gconst124*x6487);
IkReal x6498=(gconst124*x6488);
evalcond[0]=((((-1.0)*r22*x6494))+(((-1.0)*x6490*x6496))+((r21*x6497)));
evalcond[1]=(cj0+((r11*x6497))+(((-1.0)*r12*x6494))+(((-1.0)*x6493*x6496)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6494))+((x6487*x6491))+(((-1.0)*x6492*x6496)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6490*x6494))+((r22*x6487))+((r21*x6498)));
evalcond[4]=(((cj0*x6489))+((r02*x6487))+(((-1.0)*cj0*x6495))+(((-1.0)*x6492*x6494))+((x6488*x6491)));
evalcond[5]=(((r11*x6498))+(((-1.0)*sj0*x6495))+((r12*x6487))+(((-1.0)*x6493*x6494))+((sj0*x6489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6499=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6499;
j4eval[1]=IKsign(x6499);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6500=((1.0)*cj5);
IkReal x6501=((((-1.0)*r01*x6500))+(((-1.0)*r00*sj5)));
j4eval[0]=x6501;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6500))))));
j4eval[2]=IKsign(x6501);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6502=cj5*cj5;
IkReal x6503=r11*r11;
IkReal x6504=(cj5*r10);
IkReal x6505=(r11*sj5);
IkReal x6506=(((x6502*x6503))+(((-1.0)*x6502*(r10*r10)))+(((2.0)*x6504*x6505))+(((-1.0)*x6503))+(((-1.0)*(r12*r12))));
j4eval[0]=x6506;
j4eval[1]=IKsign(x6506);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6504))+x6505))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6507=cj5*cj5;
IkReal x6508=r11*r11;
IkReal x6509=(cj5*r10);
IkReal x6510=(r11*sj5);
CheckValue<IkReal> x6511 = IKatan2WithCheck(IkReal(((((-1.0)*x6509))+x6510)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6511.valid){
continue;
}
CheckValue<IkReal> x6512=IKPowWithIntegerCheck(IKsign((((x6507*x6508))+(((-1.0)*x6507*(r10*r10)))+(((2.0)*x6509*x6510))+(((-1.0)*x6508))+(((-1.0)*(r12*r12))))),-1);
if(!x6512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6511.value)+(((1.5707963267949)*(x6512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6513=IKcos(j4);
IkReal x6514=IKsin(j4);
IkReal x6515=(cj5*r00);
IkReal x6516=(cj5*r10);
IkReal x6517=(r21*sj5);
IkReal x6518=(cj5*r20);
IkReal x6519=((1.0)*x6513);
IkReal x6520=((1.0)*x6514);
IkReal x6521=(sj5*x6514);
IkReal x6522=(sj5*x6513);
evalcond[0]=((((-1.0)*x6516*x6519))+((r12*x6514))+((r11*x6522)));
evalcond[1]=(((x6514*x6517))+(((-1.0)*r22*x6519))+(((-1.0)*x6518*x6520)));
evalcond[2]=((((-1.0)*r02*x6519))+(((-1.0)*x6515*x6520))+((r01*x6521)));
evalcond[3]=((1.0)+(((-1.0)*x6516*x6520))+(((-1.0)*r12*x6519))+((r11*x6521)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6518*x6519))+((x6513*x6517))+((cj1*sj2))+((r22*x6514)));
evalcond[5]=((((-1.0)*x6515*x6519))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6514))+((r01*x6522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6523=((1.0)*cj5);
CheckValue<IkReal> x6524 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6524.valid){
continue;
}
CheckValue<IkReal> x6525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6523)))),-1);
if(!x6525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6524.value)+(((1.5707963267949)*(x6525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6526=IKcos(j4);
IkReal x6527=IKsin(j4);
IkReal x6528=(cj5*r00);
IkReal x6529=(cj5*r10);
IkReal x6530=(r21*sj5);
IkReal x6531=(cj5*r20);
IkReal x6532=((1.0)*x6526);
IkReal x6533=((1.0)*x6527);
IkReal x6534=(sj5*x6527);
IkReal x6535=(sj5*x6526);
evalcond[0]=((((-1.0)*x6529*x6532))+((r12*x6527))+((r11*x6535)));
evalcond[1]=(((x6527*x6530))+(((-1.0)*r22*x6532))+(((-1.0)*x6531*x6533)));
evalcond[2]=((((-1.0)*r02*x6532))+((r01*x6534))+(((-1.0)*x6528*x6533)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6532))+(((-1.0)*x6529*x6533))+((r11*x6534)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6527))+((x6526*x6530))+(((-1.0)*x6531*x6532)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6527))+((r01*x6535))+(((-1.0)*x6528*x6532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6536=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6536.valid){
continue;
}
CheckValue<IkReal> x6537 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6536.value)))+(x6537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6538=IKcos(j4);
IkReal x6539=IKsin(j4);
IkReal x6540=(cj5*r00);
IkReal x6541=(cj5*r10);
IkReal x6542=(r21*sj5);
IkReal x6543=(cj5*r20);
IkReal x6544=((1.0)*x6538);
IkReal x6545=((1.0)*x6539);
IkReal x6546=(sj5*x6539);
IkReal x6547=(sj5*x6538);
evalcond[0]=((((-1.0)*x6541*x6544))+((r11*x6547))+((r12*x6539)));
evalcond[1]=(((x6539*x6542))+(((-1.0)*r22*x6544))+(((-1.0)*x6543*x6545)));
evalcond[2]=((((-1.0)*x6540*x6545))+(((-1.0)*r02*x6544))+((r01*x6546)));
evalcond[3]=((1.0)+(((-1.0)*x6541*x6545))+(((-1.0)*r12*x6544))+((r11*x6546)));
evalcond[4]=(((cj2*sj1))+((x6538*x6542))+((cj1*sj2))+((r22*x6539))+(((-1.0)*x6543*x6544)));
evalcond[5]=(((r02*x6539))+(((-1.0)*x6540*x6544))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6548=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6548;
j4eval[1]=IKsign(x6548);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6549=((1.0)*cj5);
IkReal x6550=((((-1.0)*r21*x6549))+(((-1.0)*r20*sj5)));
j4eval[0]=x6550;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6549))+((r01*sj5))))));
j4eval[2]=IKsign(x6550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6551=cj5*cj5;
IkReal x6552=r11*r11;
IkReal x6553=(r11*sj5);
IkReal x6554=(cj5*r10);
IkReal x6555=((r12*r12)+(((-1.0)*x6551*x6552))+x6552+((x6551*(r10*r10)))+(((-2.0)*x6553*x6554)));
j4eval[0]=x6555;
j4eval[1]=IKsign(x6555);
j4eval[2]=((IKabs(r12))+(IKabs((x6553+(((-1.0)*x6554))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6556=cj5*cj5;
IkReal x6557=r11*r11;
IkReal x6558=(cj5*r10);
IkReal x6559=(r11*sj5);
CheckValue<IkReal> x6560 = IKatan2WithCheck(IkReal((x6559+(((-1.0)*x6558)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6560.valid){
continue;
}
CheckValue<IkReal> x6561=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6556*x6557))+x6557+(((-2.0)*x6558*x6559))+((x6556*(r10*r10))))),-1);
if(!x6561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6560.value)+(((1.5707963267949)*(x6561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6562=IKcos(j4);
IkReal x6563=IKsin(j4);
IkReal x6564=(cj5*r00);
IkReal x6565=(cj5*r10);
IkReal x6566=(r21*sj5);
IkReal x6567=(cj5*r20);
IkReal x6568=((1.0)*x6562);
IkReal x6569=((1.0)*x6563);
IkReal x6570=(sj5*x6563);
IkReal x6571=(sj5*x6562);
evalcond[0]=((((-1.0)*x6565*x6568))+((r12*x6563))+((r11*x6571)));
evalcond[1]=(((x6563*x6566))+(((-1.0)*x6567*x6569))+(((-1.0)*r22*x6568)));
evalcond[2]=(((r01*x6570))+(((-1.0)*r02*x6568))+(((-1.0)*x6564*x6569)));
evalcond[3]=((-1.0)+(((-1.0)*x6565*x6569))+((r11*x6570))+(((-1.0)*r12*x6568)));
evalcond[4]=(((cj2*sj1))+((r22*x6563))+(((-1.0)*x6567*x6568))+((x6562*x6566))+((cj1*sj2)));
evalcond[5]=(((r01*x6571))+(((-1.0)*sj1*sj2))+((r02*x6563))+((cj1*cj2))+(((-1.0)*x6564*x6568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6572=((1.0)*cj5);
CheckValue<IkReal> x6573 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6573.valid){
continue;
}
CheckValue<IkReal> x6574=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6572))+(((-1.0)*r20*sj5)))),-1);
if(!x6574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6573.value)+(((1.5707963267949)*(x6574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6575=IKcos(j4);
IkReal x6576=IKsin(j4);
IkReal x6577=(cj5*r00);
IkReal x6578=(cj5*r10);
IkReal x6579=(r21*sj5);
IkReal x6580=(cj5*r20);
IkReal x6581=((1.0)*x6575);
IkReal x6582=((1.0)*x6576);
IkReal x6583=(sj5*x6576);
IkReal x6584=(sj5*x6575);
evalcond[0]=(((r11*x6584))+((r12*x6576))+(((-1.0)*x6578*x6581)));
evalcond[1]=((((-1.0)*r22*x6581))+((x6576*x6579))+(((-1.0)*x6580*x6582)));
evalcond[2]=((((-1.0)*r02*x6581))+((r01*x6583))+(((-1.0)*x6577*x6582)));
evalcond[3]=((-1.0)+((r11*x6583))+(((-1.0)*r12*x6581))+(((-1.0)*x6578*x6582)));
evalcond[4]=(((r22*x6576))+((cj2*sj1))+((cj1*sj2))+((x6575*x6579))+(((-1.0)*x6580*x6581)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x6584))+(((-1.0)*x6577*x6581))+((cj1*cj2))+((r02*x6576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6585 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6585.valid){
continue;
}
CheckValue<IkReal> x6586=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6585.value)+(((1.5707963267949)*(x6586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6587=IKcos(j4);
IkReal x6588=IKsin(j4);
IkReal x6589=(cj5*r00);
IkReal x6590=(cj5*r10);
IkReal x6591=(r21*sj5);
IkReal x6592=(cj5*r20);
IkReal x6593=((1.0)*x6587);
IkReal x6594=((1.0)*x6588);
IkReal x6595=(sj5*x6588);
IkReal x6596=(sj5*x6587);
evalcond[0]=(((r11*x6596))+(((-1.0)*x6590*x6593))+((r12*x6588)));
evalcond[1]=(((x6588*x6591))+(((-1.0)*x6592*x6594))+(((-1.0)*r22*x6593)));
evalcond[2]=((((-1.0)*x6589*x6594))+(((-1.0)*r02*x6593))+((r01*x6595)));
evalcond[3]=((-1.0)+((r11*x6595))+(((-1.0)*r12*x6593))+(((-1.0)*x6590*x6594)));
evalcond[4]=(((cj2*sj1))+((r22*x6588))+((cj1*sj2))+(((-1.0)*x6592*x6593))+((x6587*x6591)));
evalcond[5]=(((r02*x6588))+(((-1.0)*x6589*x6593))+(((-1.0)*sj1*sj2))+((r01*x6596))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6597=((-1.0)*r00);
IkReal x6599 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6599)==0){
continue;
}
IkReal x6598=pow(x6599,-0.5);
CheckValue<IkReal> x6600 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6597),IKFAST_ATAN2_MAGTHRESH);
if(!x6600.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6600.value));
IkReal gconst127=(r01*x6598);
IkReal gconst128=(x6597*x6598);
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6601.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6602=((-1.0)*r00);
IkReal x6603=x6598;
CheckValue<IkReal> x6605 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6602),IKFAST_ATAN2_MAGTHRESH);
if(!x6605.valid){
continue;
}
IkReal x6604=((-1.0)*(x6605.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6604;
IkReal gconst126=x6604;
IkReal gconst127=(r01*x6603);
IkReal gconst128=(x6602*x6603);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6606=((1.0)*sj0);
IkReal x6607=((1.0)*gconst127);
CheckValue<IkReal> x6608 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6606)))),IkReal((((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6606))+(((-1.0)*cj0*r01*x6607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6608.valid){
continue;
}
CheckValue<IkReal> x6609=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6607)))),-1);
if(!x6609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6608.value)+(((1.5707963267949)*(x6609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6610=IKsin(j4);
IkReal x6611=IKcos(j4);
IkReal x6612=(gconst127*r01);
IkReal x6613=(sj1*sj2);
IkReal x6614=(gconst128*r10);
IkReal x6615=(gconst128*r00);
IkReal x6616=(gconst128*r20);
IkReal x6617=((1.0)*x6611);
IkReal x6618=((1.0)*cj1*cj2);
IkReal x6619=((1.0)*x6610);
IkReal x6620=(gconst127*x6611);
IkReal x6621=(gconst127*x6610);
evalcond[0]=((((-1.0)*r22*x6617))+(((-1.0)*x6616*x6619))+((r21*x6621)));
evalcond[1]=((((-1.0)*r12*x6617))+cj0+(((-1.0)*x6614*x6619))+((r11*x6621)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6617))+((x6610*x6612))+(((-1.0)*x6615*x6619)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6616*x6617))+((r22*x6610))+((r21*x6620)));
evalcond[4]=(((r02*x6610))+((x6611*x6612))+(((-1.0)*cj0*x6618))+((cj0*x6613))+(((-1.0)*x6615*x6617)));
evalcond[5]=((((-1.0)*x6614*x6617))+((r12*x6610))+(((-1.0)*sj0*x6618))+((r11*x6620))+((sj0*x6613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6622=((1.0)*gconst128);
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
CheckValue<IkReal> x6624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6622))+(((-1.0)*gconst127*r10)))),-1);
if(!x6624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6623.value)+(((1.5707963267949)*(x6624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6625=IKsin(j4);
IkReal x6626=IKcos(j4);
IkReal x6627=(gconst127*r01);
IkReal x6628=(sj1*sj2);
IkReal x6629=(gconst128*r10);
IkReal x6630=(gconst128*r00);
IkReal x6631=(gconst128*r20);
IkReal x6632=((1.0)*x6626);
IkReal x6633=((1.0)*cj1*cj2);
IkReal x6634=((1.0)*x6625);
IkReal x6635=(gconst127*x6626);
IkReal x6636=(gconst127*x6625);
evalcond[0]=((((-1.0)*r22*x6632))+((r21*x6636))+(((-1.0)*x6631*x6634)));
evalcond[1]=(cj0+((r11*x6636))+(((-1.0)*x6629*x6634))+(((-1.0)*r12*x6632)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6630*x6634))+(((-1.0)*r02*x6632))+((x6625*x6627)));
evalcond[3]=(((cj2*sj1))+((r21*x6635))+((cj1*sj2))+((r22*x6625))+(((-1.0)*x6631*x6632)));
evalcond[4]=(((r02*x6625))+((x6626*x6627))+(((-1.0)*x6630*x6632))+((cj0*x6628))+(((-1.0)*cj0*x6633)));
evalcond[5]=(((r12*x6625))+((r11*x6635))+(((-1.0)*x6629*x6632))+((sj0*x6628))+(((-1.0)*sj0*x6633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6637=((-1.0)*r01);
IkReal x6639 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6639)==0){
continue;
}
IkReal x6638=pow(x6639,-0.5);
CheckValue<IkReal> x6640 = IKatan2WithCheck(IkReal(x6637),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6640.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6640.value))));
IkReal gconst130=(x6637*x6638);
IkReal gconst131=((1.0)*r00*x6638);
CheckValue<IkReal> x6641 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6641.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6641.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6642=((-1.0)*r01);
CheckValue<IkReal> x6645 = IKatan2WithCheck(IkReal(x6642),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6645.valid){
continue;
}
IkReal x6643=((1.0)*(x6645.value));
IkReal x6644=x6638;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6643)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6643)));
IkReal gconst130=(x6642*x6644);
IkReal gconst131=((1.0)*r00*x6644);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6646=((-1.0)*r01);
CheckValue<IkReal> x6649 = IKatan2WithCheck(IkReal(x6646),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6649.valid){
continue;
}
IkReal x6647=((1.0)*(x6649.value));
IkReal x6648=x6638;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6647)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6647)));
IkReal gconst130=(x6646*x6648);
IkReal gconst131=((1.0)*r00*x6648);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6650=((-1.0)*r01);
CheckValue<IkReal> x6653 = IKatan2WithCheck(IkReal(x6650),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6653.valid){
continue;
}
IkReal x6651=((1.0)*(x6653.value));
IkReal x6652=x6638;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6651)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6651)));
IkReal gconst130=(x6650*x6652);
IkReal gconst131=((1.0)*r00*x6652);
IkReal x6654=r02*r02;
IkReal x6655=(r12*sj0);
IkReal x6656=((1.0)*cj0);
IkReal x6657=x6638;
j4eval[0]=((IKabs(((((-1.0)*x6655))+(((-1.0)*r02*x6656)))))+(IKabs((((r02*x6655*x6657))+((cj0*x6654*x6657))+(((-1.0)*x6656*x6657))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6658=((1.0)*sj0);
IkReal x6659=((1.0)*gconst130);
CheckValue<IkReal> x6660 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6658))+(((-1.0)*cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6659))+((cj0*gconst131*r00))+(((-1.0)*gconst130*r11*x6658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6660.valid){
continue;
}
CheckValue<IkReal> x6661=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6659))+(((-1.0)*gconst131*r21)))),-1);
if(!x6661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6660.value)+(((1.5707963267949)*(x6661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6662=IKsin(j4);
IkReal x6663=IKcos(j4);
IkReal x6664=(gconst131*r10);
IkReal x6665=(sj1*sj2);
IkReal x6666=(gconst131*r20);
IkReal x6667=(gconst131*r00);
IkReal x6668=((1.0)*x6663);
IkReal x6669=((1.0)*cj1*cj2);
IkReal x6670=(gconst130*x6662);
IkReal x6671=((1.0)*x6662);
IkReal x6672=(gconst130*x6663);
evalcond[0]=((((-1.0)*r22*x6668))+((r21*x6670))+(((-1.0)*x6666*x6671)));
evalcond[1]=(((r11*x6670))+cj0+(((-1.0)*r12*x6668))+(((-1.0)*x6664*x6671)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6670))+(((-1.0)*r02*x6668))+(((-1.0)*x6667*x6671)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6662))+(((-1.0)*x6666*x6668))+((r21*x6672)));
evalcond[4]=((((-1.0)*x6667*x6668))+((r02*x6662))+((r01*x6672))+(((-1.0)*cj0*x6669))+((cj0*x6665)));
evalcond[5]=((((-1.0)*x6664*x6668))+((r11*x6672))+((r12*x6662))+(((-1.0)*sj0*x6669))+((sj0*x6665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6673=((1.0)*gconst131);
CheckValue<IkReal> x6674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6673))+(((-1.0)*gconst130*r10)))),-1);
if(!x6674.valid){
continue;
}
CheckValue<IkReal> x6675 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6674.value)))+(x6675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6676=IKsin(j4);
IkReal x6677=IKcos(j4);
IkReal x6678=(gconst131*r10);
IkReal x6679=(sj1*sj2);
IkReal x6680=(gconst131*r20);
IkReal x6681=(gconst131*r00);
IkReal x6682=((1.0)*x6677);
IkReal x6683=((1.0)*cj1*cj2);
IkReal x6684=(gconst130*x6676);
IkReal x6685=((1.0)*x6676);
IkReal x6686=(gconst130*x6677);
evalcond[0]=((((-1.0)*x6680*x6685))+((r21*x6684))+(((-1.0)*r22*x6682)));
evalcond[1]=(cj0+(((-1.0)*x6678*x6685))+((r11*x6684))+(((-1.0)*r12*x6682)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6681*x6685))+(((-1.0)*r02*x6682))+((r01*x6684)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6680*x6682))+((cj1*sj2))+((r21*x6686))+((r22*x6676)));
evalcond[4]=(((cj0*x6679))+(((-1.0)*x6681*x6682))+((r02*x6676))+(((-1.0)*cj0*x6683))+((r01*x6686)));
evalcond[5]=((((-1.0)*sj0*x6683))+(((-1.0)*x6678*x6682))+((r11*x6686))+((r12*x6676))+((sj0*x6679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6687=((1.0)*gconst131);
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
CheckValue<IkReal> x6689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6687))+(((-1.0)*gconst130*r00)))),-1);
if(!x6689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6688.value)+(((1.5707963267949)*(x6689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6690=IKsin(j4);
IkReal x6691=IKcos(j4);
IkReal x6692=(gconst131*r10);
IkReal x6693=(sj1*sj2);
IkReal x6694=(gconst131*r20);
IkReal x6695=(gconst131*r00);
IkReal x6696=((1.0)*x6691);
IkReal x6697=((1.0)*cj1*cj2);
IkReal x6698=(gconst130*x6690);
IkReal x6699=((1.0)*x6690);
IkReal x6700=(gconst130*x6691);
evalcond[0]=((((-1.0)*x6694*x6699))+((r21*x6698))+(((-1.0)*r22*x6696)));
evalcond[1]=(((r11*x6698))+cj0+(((-1.0)*r12*x6696))+(((-1.0)*x6692*x6699)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6696))+((r01*x6698))+(((-1.0)*x6695*x6699)));
evalcond[3]=((((-1.0)*x6694*x6696))+((cj2*sj1))+((r21*x6700))+((r22*x6690))+((cj1*sj2)));
evalcond[4]=(((cj0*x6693))+((r01*x6700))+(((-1.0)*cj0*x6697))+(((-1.0)*x6695*x6696))+((r02*x6690)));
evalcond[5]=(((r12*x6690))+(((-1.0)*sj0*x6697))+((sj0*x6693))+((r11*x6700))+(((-1.0)*x6692*x6696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6701=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6701;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6702=((1.0)*cj5);
IkReal x6703=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6702)));
j4eval[0]=x6703;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6702))))));
j4eval[2]=IKsign(x6703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6704=cj5*cj5;
IkReal x6705=r01*r01;
IkReal x6706=(cj5*r00);
IkReal x6707=(r01*sj5);
IkReal x6708=((((-1.0)*x6704*x6705))+x6705+(((-2.0)*x6706*x6707))+((x6704*(r00*r00)))+(r02*r02));
j4eval[0]=x6708;
j4eval[1]=IKsign(x6708);
j4eval[2]=((IKabs(r02))+(IKabs((x6707+(((-1.0)*x6706))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6709=cj5*cj5;
IkReal x6710=r01*r01;
IkReal x6711=(r01*sj5);
IkReal x6712=(cj5*r00);
CheckValue<IkReal> x6713=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6711*x6712))+(((-1.0)*x6709*x6710))+((x6709*(r00*r00)))+x6710+(r02*r02))),-1);
if(!x6713.valid){
continue;
}
CheckValue<IkReal> x6714 = IKatan2WithCheck(IkReal(((((-1.0)*x6712))+x6711)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6713.value)))+(x6714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6715=IKcos(j4);
IkReal x6716=IKsin(j4);
IkReal x6717=(cj5*r00);
IkReal x6718=(cj5*r10);
IkReal x6719=(r21*sj5);
IkReal x6720=(cj5*r20);
IkReal x6721=((1.0)*x6715);
IkReal x6722=((1.0)*x6716);
IkReal x6723=(sj5*x6716);
IkReal x6724=(sj5*x6715);
evalcond[0]=(((r02*x6716))+(((-1.0)*x6717*x6721))+((r01*x6724)));
evalcond[1]=((((-1.0)*r22*x6721))+((x6716*x6719))+(((-1.0)*x6720*x6722)));
evalcond[2]=(((r11*x6723))+(((-1.0)*x6718*x6722))+(((-1.0)*r12*x6721)));
evalcond[3]=((-1.0)+(((-1.0)*x6717*x6722))+(((-1.0)*r02*x6721))+((r01*x6723)));
evalcond[4]=(((cj2*sj1))+((x6715*x6719))+((cj1*sj2))+((r22*x6716))+(((-1.0)*x6720*x6721)));
evalcond[5]=(((r11*x6724))+(((-1.0)*x6718*x6721))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6725=((1.0)*cj5);
CheckValue<IkReal> x6726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6725)))),-1);
if(!x6726.valid){
continue;
}
CheckValue<IkReal> x6727 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6725))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6726.value)))+(x6727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6728=IKcos(j4);
IkReal x6729=IKsin(j4);
IkReal x6730=(cj5*r00);
IkReal x6731=(cj5*r10);
IkReal x6732=(r21*sj5);
IkReal x6733=(cj5*r20);
IkReal x6734=((1.0)*x6728);
IkReal x6735=((1.0)*x6729);
IkReal x6736=(sj5*x6729);
IkReal x6737=(sj5*x6728);
evalcond[0]=((((-1.0)*x6730*x6734))+((r02*x6729))+((r01*x6737)));
evalcond[1]=((((-1.0)*r22*x6734))+((x6729*x6732))+(((-1.0)*x6733*x6735)));
evalcond[2]=((((-1.0)*r12*x6734))+((r11*x6736))+(((-1.0)*x6731*x6735)));
evalcond[3]=((-1.0)+(((-1.0)*x6730*x6735))+(((-1.0)*r02*x6734))+((r01*x6736)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6733*x6734))+((r22*x6729))+((x6728*x6732)));
evalcond[5]=(((r12*x6729))+((r11*x6737))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6731*x6734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6738=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6738.valid){
continue;
}
CheckValue<IkReal> x6739 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6738.value)))+(x6739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6740=IKcos(j4);
IkReal x6741=IKsin(j4);
IkReal x6742=(cj5*r00);
IkReal x6743=(cj5*r10);
IkReal x6744=(r21*sj5);
IkReal x6745=(cj5*r20);
IkReal x6746=((1.0)*x6740);
IkReal x6747=((1.0)*x6741);
IkReal x6748=(sj5*x6741);
IkReal x6749=(sj5*x6740);
evalcond[0]=(((r02*x6741))+(((-1.0)*x6742*x6746))+((r01*x6749)));
evalcond[1]=((((-1.0)*r22*x6746))+((x6741*x6744))+(((-1.0)*x6745*x6747)));
evalcond[2]=((((-1.0)*r12*x6746))+((r11*x6748))+(((-1.0)*x6743*x6747)));
evalcond[3]=((-1.0)+(((-1.0)*x6742*x6747))+(((-1.0)*r02*x6746))+((r01*x6748)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6745*x6746))+((r22*x6741))+((x6740*x6744)));
evalcond[5]=(((r11*x6749))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6741))+(((-1.0)*x6743*x6746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6750=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6750;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6750);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6751=((1.0)*cj5);
IkReal x6752=((((-1.0)*r21*x6751))+(((-1.0)*r20*sj5)));
j4eval[0]=x6752;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6751))))));
j4eval[2]=IKsign(x6752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6753=(r01*sj5);
IkReal x6754=(cj1*sj2);
IkReal x6755=(cj2*sj1);
IkReal x6756=((1.0)*r02);
IkReal x6757=((1.0)*cj5*r00);
IkReal x6758=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6758;
j4eval[1]=((IKabs(((((-1.0)*x6755*x6757))+((x6753*x6755))+((x6753*x6754))+(((-1.0)*x6754*x6757)))))+(IKabs(((((-1.0)*x6755*x6756))+(((-1.0)*x6754*x6756))))));
j4eval[2]=IKsign(x6758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6759=(r01*sj5);
IkReal x6760=(cj1*sj2);
IkReal x6761=(cj2*sj1);
IkReal x6762=((1.0)*r02);
IkReal x6763=((1.0)*cj5*r00);
CheckValue<IkReal> x6764 = IKatan2WithCheck(IkReal(((((-1.0)*x6760*x6763))+((x6759*x6761))+((x6759*x6760))+(((-1.0)*x6761*x6763)))),IkReal(((((-1.0)*x6760*x6762))+(((-1.0)*x6761*x6762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6764.valid){
continue;
}
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6764.value)+(((1.5707963267949)*(x6765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6766=IKcos(j4);
IkReal x6767=IKsin(j4);
IkReal x6768=(cj5*r00);
IkReal x6769=(cj5*r10);
IkReal x6770=(r21*sj5);
IkReal x6771=(cj5*r20);
IkReal x6772=((1.0)*x6766);
IkReal x6773=((1.0)*x6767);
IkReal x6774=(sj5*x6767);
IkReal x6775=(sj5*x6766);
evalcond[0]=((((-1.0)*x6768*x6772))+((r02*x6767))+((r01*x6775)));
evalcond[1]=((((-1.0)*r22*x6772))+(((-1.0)*x6771*x6773))+((x6767*x6770)));
evalcond[2]=(((r11*x6774))+(((-1.0)*x6769*x6773))+(((-1.0)*r12*x6772)));
evalcond[3]=((1.0)+(((-1.0)*x6768*x6773))+(((-1.0)*r02*x6772))+((r01*x6774)));
evalcond[4]=(((cj2*sj1))+((r22*x6767))+((cj1*sj2))+((x6766*x6770))+(((-1.0)*x6771*x6772)));
evalcond[5]=(((r11*x6775))+((r12*x6767))+(((-1.0)*x6769*x6772))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6776=((1.0)*cj5);
CheckValue<IkReal> x6777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6776))+(((-1.0)*r20*sj5)))),-1);
if(!x6777.valid){
continue;
}
CheckValue<IkReal> x6778 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6777.value)))+(x6778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6779=IKcos(j4);
IkReal x6780=IKsin(j4);
IkReal x6781=(cj5*r00);
IkReal x6782=(cj5*r10);
IkReal x6783=(r21*sj5);
IkReal x6784=(cj5*r20);
IkReal x6785=((1.0)*x6779);
IkReal x6786=((1.0)*x6780);
IkReal x6787=(sj5*x6780);
IkReal x6788=(sj5*x6779);
evalcond[0]=(((r02*x6780))+(((-1.0)*x6781*x6785))+((r01*x6788)));
evalcond[1]=((((-1.0)*x6784*x6786))+(((-1.0)*r22*x6785))+((x6780*x6783)));
evalcond[2]=((((-1.0)*x6782*x6786))+((r11*x6787))+(((-1.0)*r12*x6785)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6785))+(((-1.0)*x6781*x6786))+((r01*x6787)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6784*x6785))+((cj1*sj2))+((r22*x6780))+((x6779*x6783)));
evalcond[5]=((((-1.0)*x6782*x6785))+((r12*x6780))+((r11*x6788))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6789 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6789.valid){
continue;
}
CheckValue<IkReal> x6790=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6789.value)+(((1.5707963267949)*(x6790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6791=IKcos(j4);
IkReal x6792=IKsin(j4);
IkReal x6793=(cj5*r00);
IkReal x6794=(cj5*r10);
IkReal x6795=(r21*sj5);
IkReal x6796=(cj5*r20);
IkReal x6797=((1.0)*x6791);
IkReal x6798=((1.0)*x6792);
IkReal x6799=(sj5*x6792);
IkReal x6800=(sj5*x6791);
evalcond[0]=(((r02*x6792))+(((-1.0)*x6793*x6797))+((r01*x6800)));
evalcond[1]=(((x6792*x6795))+(((-1.0)*r22*x6797))+(((-1.0)*x6796*x6798)));
evalcond[2]=(((r11*x6799))+(((-1.0)*x6794*x6798))+(((-1.0)*r12*x6797)));
evalcond[3]=((1.0)+(((-1.0)*x6793*x6798))+((r01*x6799))+(((-1.0)*r02*x6797)));
evalcond[4]=(((cj2*sj1))+((r22*x6792))+((cj1*sj2))+((x6791*x6795))+(((-1.0)*x6796*x6797)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6800))+((r12*x6792))+((cj1*cj2))+(((-1.0)*x6794*x6797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6801=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6801);
rxp1_1=(px*r21);
rxp1_2=(r11*x6801);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6802=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6802);
rxp1_1=(px*r21);
rxp1_2=(r11*x6802);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6803=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6803);
rxp1_1=(px*r21);
rxp1_2=(r11*x6803);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6806=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6806.valid){
continue;
}
IkReal x6804=x6806.value;
IkReal x6805=(sj0*x6804);
cj4array[0]=(((cj1*cj2*x6805))+(((-1.0)*sj1*sj2*x6805)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6807=IKsin(j4);
IkReal x6808=IKcos(j4);
IkReal x6809=(r21*sj5);
IkReal x6810=((1.0)*cj5*r20);
evalcond[0]=(r02*x6807);
evalcond[1]=((((-1.0)*r02*x6808))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x6807*x6810))+((x6807*x6809)));
evalcond[3]=(((r11*sj5*x6807))+(((-1.0)*cj5*r10*x6807)));
evalcond[4]=(((cj2*sj1))+((x6808*x6809))+((cj1*sj2))+(((-1.0)*x6808*x6810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6813=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6813.valid){
continue;
}
IkReal x6811=x6813.value;
IkReal x6812=((1.0)*x6811);
cj4array[0]=((((-1.0)*cj1*sj2*x6812))+(((-1.0)*cj2*sj1*x6812)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6814=IKsin(j4);
IkReal x6815=IKcos(j4);
IkReal x6816=((1.0)*sj0);
IkReal x6817=((1.0)*cj5);
IkReal x6818=(sj5*x6814);
evalcond[0]=(r02*x6814);
evalcond[1]=((((-1.0)*r02*x6815))+(((-1.0)*x6816)));
evalcond[2]=((((-1.0)*r20*x6814*x6817))+((r21*x6818)));
evalcond[3]=(((r11*x6818))+(((-1.0)*r10*x6814*x6817)));
evalcond[4]=(((r11*sj5*x6815))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6816))+(((-1.0)*r10*x6815*x6817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6819=IKPowWithIntegerCheck(r02,-1);
if(!x6819.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6819.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6820=IKsin(j4);
IkReal x6821=IKcos(j4);
IkReal x6822=(r21*sj5);
IkReal x6823=((1.0)*cj5);
IkReal x6824=(r11*sj5);
evalcond[0]=(r02*x6820);
evalcond[1]=((((-1.0)*r20*x6820*x6823))+((x6820*x6822)));
evalcond[2]=(((x6820*x6824))+(((-1.0)*r10*x6820*x6823)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6821*x6823))+((x6821*x6822)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6821*x6823))+((sj0*sj1*sj2))+((x6821*x6824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6825=((1.0)*sj0);
IkReal x6826=((1.0)*cj0);
CheckValue<IkReal> x6827 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6826))+(((-1.0)*r12*x6825)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6825))+(((-1.0)*r01*sj5*x6826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6827.valid){
continue;
}
CheckValue<IkReal> x6828=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6827.value)+(((1.5707963267949)*(x6828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6829=IKsin(j4);
IkReal x6830=IKcos(j4);
IkReal x6831=(cj5*r00);
IkReal x6832=(cj5*r10);
IkReal x6833=(r21*sj5);
IkReal x6834=(sj1*sj2);
IkReal x6835=(cj5*r20);
IkReal x6836=((1.0)*x6830);
IkReal x6837=((1.0)*cj1*cj2);
IkReal x6838=((1.0)*x6829);
IkReal x6839=(sj5*x6829);
IkReal x6840=(sj5*x6830);
evalcond[0]=((((-1.0)*r22*x6836))+((x6829*x6833))+(((-1.0)*x6835*x6838)));
evalcond[1]=(cj0+(((-1.0)*r12*x6836))+((r11*x6839))+(((-1.0)*x6832*x6838)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6836))+((r01*x6839))+(((-1.0)*x6831*x6838)));
evalcond[3]=(((cj2*sj1))+((r22*x6829))+((cj1*sj2))+((x6830*x6833))+(((-1.0)*x6835*x6836)));
evalcond[4]=(((r02*x6829))+(((-1.0)*cj0*x6837))+((r01*x6840))+(((-1.0)*x6831*x6836))+((cj0*x6834)));
evalcond[5]=((((-1.0)*sj0*x6837))+((r11*x6840))+((sj0*x6834))+((r12*x6829))+(((-1.0)*x6832*x6836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6841=((1.0)*cj5);
CheckValue<IkReal> x6842 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6841))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6842.valid){
continue;
}
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6841)))),-1);
if(!x6843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6842.value)+(((1.5707963267949)*(x6843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6844=IKsin(j4);
IkReal x6845=IKcos(j4);
IkReal x6846=(cj5*r00);
IkReal x6847=(cj5*r10);
IkReal x6848=(r21*sj5);
IkReal x6849=(sj1*sj2);
IkReal x6850=(cj5*r20);
IkReal x6851=((1.0)*x6845);
IkReal x6852=((1.0)*cj1*cj2);
IkReal x6853=((1.0)*x6844);
IkReal x6854=(sj5*x6844);
IkReal x6855=(sj5*x6845);
evalcond[0]=((((-1.0)*r22*x6851))+(((-1.0)*x6850*x6853))+((x6844*x6848)));
evalcond[1]=(cj0+(((-1.0)*x6847*x6853))+(((-1.0)*r12*x6851))+((r11*x6854)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6851))+(((-1.0)*x6846*x6853))+((r01*x6854)));
evalcond[3]=(((cj2*sj1))+((r22*x6844))+((cj1*sj2))+(((-1.0)*x6850*x6851))+((x6845*x6848)));
evalcond[4]=(((cj0*x6849))+(((-1.0)*x6846*x6851))+((r01*x6855))+(((-1.0)*cj0*x6852))+((r02*x6844)));
evalcond[5]=(((r12*x6844))+(((-1.0)*x6847*x6851))+((r11*x6855))+((sj0*x6849))+(((-1.0)*sj0*x6852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6856=((1.0)*cj5);
CheckValue<IkReal> x6857 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6856))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6857.valid){
continue;
}
CheckValue<IkReal> x6858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6856)))),-1);
if(!x6858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6857.value)+(((1.5707963267949)*(x6858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6859=IKsin(j4);
IkReal x6860=IKcos(j4);
IkReal x6861=(cj5*r00);
IkReal x6862=(cj5*r10);
IkReal x6863=(r21*sj5);
IkReal x6864=(sj1*sj2);
IkReal x6865=(cj5*r20);
IkReal x6866=((1.0)*x6860);
IkReal x6867=((1.0)*cj1*cj2);
IkReal x6868=((1.0)*x6859);
IkReal x6869=(sj5*x6859);
IkReal x6870=(sj5*x6860);
evalcond[0]=((((-1.0)*x6865*x6868))+(((-1.0)*r22*x6866))+((x6859*x6863)));
evalcond[1]=(((r11*x6869))+cj0+(((-1.0)*x6862*x6868))+(((-1.0)*r12*x6866)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6861*x6868))+(((-1.0)*r02*x6866))+((r01*x6869)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6865*x6866))+((r22*x6859))+((cj1*sj2))+((x6860*x6863)));
evalcond[4]=(((r02*x6859))+((cj0*x6864))+(((-1.0)*x6861*x6866))+((r01*x6870))+(((-1.0)*cj0*x6867)));
evalcond[5]=(((sj0*x6864))+((r11*x6870))+(((-1.0)*x6862*x6866))+((r12*x6859))+(((-1.0)*sj0*x6867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6871=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6871;
j0eval[1]=IKsign(x6871);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6872=cj5*cj5;
IkReal x6873=r21*r21;
IkReal x6874=(cj2*sj1);
IkReal x6875=(cj1*sj2);
IkReal x6876=(r21*sj5);
IkReal x6877=((1.0)*cj5*r20);
IkReal x6878=((((-1.0)*x6872*x6873))+(r22*r22)+((x6872*(r20*r20)))+x6873+(((-2.0)*cj5*r20*x6876)));
j4eval[0]=x6878;
j4eval[1]=IKsign(x6878);
j4eval[2]=((IKabs(((((-1.0)*x6875*x6877))+(((-1.0)*x6874*x6877))+((x6875*x6876))+((x6874*x6876)))))+(IKabs((((r22*x6875))+((r22*x6874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6879=cj1*cj1;
IkReal x6880=(cj2*sj2);
IkReal x6881=(cj2*sj1);
IkReal x6882=(cj1*sj1);
j0eval[0]=(x6882+x6880+(((-2.0)*cj1*cj2*x6881))+(((-2.0)*x6879*x6880))+(((-1.14255568581477)*cj1*x6881))+(((-1.14255568581477)*sj2*x6879)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6881)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6883=IKsin(j0);
IkReal x6884=IKcos(j0);
evalcond[0]=((((0.4569)*x6884))+(((-0.11235)*x6883))+(((-1.0)*px)));
evalcond[1]=((((0.4569)*x6883))+(((0.11235)*x6884))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6885=((1.0)*cj5);
IkReal x6886=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6885)));
j4eval[0]=x6886;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6885))))));
j4eval[2]=IKsign(x6886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6887=((1.0)*cj5);
IkReal x6888=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6887)));
j4eval[0]=x6888;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6887)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6889=cj5*cj5;
IkReal x6890=((1.0)*sj5);
IkReal x6891=(cj5*r20);
IkReal x6892=(r11*r21);
IkReal x6893=((((-1.0)*cj5*r10*r21*x6890))+(((-1.0)*r11*x6890*x6891))+((r10*r20*x6889))+((r12*r22))+(((-1.0)*x6889*x6892))+x6892);
j4eval[0]=x6893;
j4eval[1]=IKsign(x6893);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6890))+((cj0*x6891))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6894=cj5*cj5;
IkReal x6895=((1.0)*sj5);
IkReal x6896=(cj5*r20);
IkReal x6897=(r11*r21);
CheckValue<IkReal> x6898=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6895))+((r10*r20*x6894))+((r12*r22))+(((-1.0)*x6894*x6897))+x6897+(((-1.0)*r11*x6895*x6896)))),-1);
if(!x6898.valid){
continue;
}
CheckValue<IkReal> x6899 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6895))+((cj0*x6896)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6898.value)))+(x6899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6900=IKsin(j4);
IkReal x6901=IKcos(j4);
IkReal x6902=((1.0)*sj0);
IkReal x6903=(cj5*r00);
IkReal x6904=(r11*sj5);
IkReal x6905=(cj5*r10);
IkReal x6906=(r21*sj5);
IkReal x6907=(cj5*r20);
IkReal x6908=(r01*sj5);
IkReal x6909=((1.0)*x6901);
IkReal x6910=((1.0)*x6900);
evalcond[0]=((((-1.0)*r22*x6909))+(((-1.0)*x6907*x6910))+((x6900*x6906)));
evalcond[1]=((((-1.0)*r22*x6910))+(((-1.0)*x6906*x6909))+((x6901*x6907)));
evalcond[2]=(cj0+(((-1.0)*r12*x6909))+((x6900*x6904))+(((-1.0)*x6905*x6910)));
evalcond[3]=((((-1.0)*r02*x6909))+(((-1.0)*x6903*x6910))+((x6900*x6908))+(((-1.0)*x6902)));
evalcond[4]=(((x6901*x6903))+(((-1.0)*x6908*x6909))+(((-1.0)*r02*x6910))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6904*x6909))+(((-1.0)*x6902))+(((-1.0)*r12*x6910))+((x6901*x6905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6911=((1.0)*cj5);
CheckValue<IkReal> x6912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6911)))),-1);
if(!x6912.valid){
continue;
}
CheckValue<IkReal> x6913 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6911))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6912.value)))+(x6913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6914=IKsin(j4);
IkReal x6915=IKcos(j4);
IkReal x6916=((1.0)*sj0);
IkReal x6917=(cj5*r00);
IkReal x6918=(r11*sj5);
IkReal x6919=(cj5*r10);
IkReal x6920=(r21*sj5);
IkReal x6921=(cj5*r20);
IkReal x6922=(r01*sj5);
IkReal x6923=((1.0)*x6915);
IkReal x6924=((1.0)*x6914);
evalcond[0]=((((-1.0)*r22*x6923))+(((-1.0)*x6921*x6924))+((x6914*x6920)));
evalcond[1]=(((x6915*x6921))+(((-1.0)*r22*x6924))+(((-1.0)*x6920*x6923)));
evalcond[2]=(cj0+(((-1.0)*x6919*x6924))+((x6914*x6918))+(((-1.0)*r12*x6923)));
evalcond[3]=((((-1.0)*r02*x6923))+(((-1.0)*x6916))+(((-1.0)*x6917*x6924))+((x6914*x6922)));
evalcond[4]=((((-1.0)*r02*x6924))+((x6915*x6917))+(((-1.0)*x6922*x6923))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6916))+((x6915*x6919))+(((-1.0)*r12*x6924))+(((-1.0)*x6918*x6923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6925=((1.0)*cj5);
CheckValue<IkReal> x6926=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6925)))),-1);
if(!x6926.valid){
continue;
}
CheckValue<IkReal> x6927 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6926.value)))+(x6927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6928=IKsin(j4);
IkReal x6929=IKcos(j4);
IkReal x6930=((1.0)*sj0);
IkReal x6931=(cj5*r00);
IkReal x6932=(r11*sj5);
IkReal x6933=(cj5*r10);
IkReal x6934=(r21*sj5);
IkReal x6935=(cj5*r20);
IkReal x6936=(r01*sj5);
IkReal x6937=((1.0)*x6929);
IkReal x6938=((1.0)*x6928);
evalcond[0]=((((-1.0)*r22*x6937))+(((-1.0)*x6935*x6938))+((x6928*x6934)));
evalcond[1]=((((-1.0)*r22*x6938))+(((-1.0)*x6934*x6937))+((x6929*x6935)));
evalcond[2]=(cj0+(((-1.0)*r12*x6937))+((x6928*x6932))+(((-1.0)*x6933*x6938)));
evalcond[3]=((((-1.0)*r02*x6937))+((x6928*x6936))+(((-1.0)*x6930))+(((-1.0)*x6931*x6938)));
evalcond[4]=((((-1.0)*r02*x6938))+((x6929*x6931))+(((-1.0)*x6936*x6937))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6932*x6937))+(((-1.0)*r12*x6938))+((x6929*x6933))+(((-1.0)*x6930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6939=IKsin(j0);
IkReal x6940=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x6939))+(((0.0304)*x6940)));
evalcond[1]=((((-1.0)*py))+(((0.0304)*x6939))+(((0.11235)*x6940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6941=((1.0)*cj5);
IkReal x6942=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6941)));
j4eval[0]=x6942;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6941)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6943=cj5*cj5;
IkReal x6944=((1.0)*r21);
IkReal x6945=(cj5*sj5);
IkReal x6946=((1.0)*r20);
IkReal x6947=((((-1.0)*r01*x6943*x6944))+((r00*r20*x6943))+((r01*r21))+(((-1.0)*r01*x6945*x6946))+((r02*r22))+(((-1.0)*r00*x6944*x6945)));
j4eval[0]=x6947;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6946)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6948=cj5*cj5;
IkReal x6949=(r21*sj5);
IkReal x6950=(r11*r21);
IkReal x6951=((1.0)*cj5*r20);
IkReal x6952=((((-1.0)*cj5*r10*x6949))+((r12*r22))+(((-1.0)*r11*sj5*x6951))+x6950+(((-1.0)*x6948*x6950))+((r10*r20*x6948)));
j4eval[0]=x6952;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6951))+((sj0*x6949))))));
j4eval[2]=IKsign(x6952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6953=cj5*cj5;
IkReal x6954=(r21*sj5);
IkReal x6955=(r11*r21);
IkReal x6956=((1.0)*cj5*r20);
CheckValue<IkReal> x6957=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6954))+((r12*r22))+(((-1.0)*x6953*x6955))+(((-1.0)*r11*sj5*x6956))+x6955+((r10*r20*x6953)))),-1);
if(!x6957.valid){
continue;
}
CheckValue<IkReal> x6958 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6956))+((sj0*x6954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6957.value)))+(x6958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6959=IKsin(j4);
IkReal x6960=IKcos(j4);
IkReal x6961=(r11*sj5);
IkReal x6962=(cj5*r00);
IkReal x6963=(cj5*r10);
IkReal x6964=(r21*sj5);
IkReal x6965=(cj5*r20);
IkReal x6966=(r01*sj5);
IkReal x6967=((1.0)*x6960);
IkReal x6968=((1.0)*x6959);
evalcond[0]=((((-1.0)*x6965*x6968))+((x6959*x6964))+(((-1.0)*r22*x6967)));
evalcond[1]=((((-1.0)*x6964*x6967))+(((-1.0)*r22*x6968))+((x6960*x6965)));
evalcond[2]=(cj0+(((-1.0)*r12*x6967))+((x6959*x6961))+(((-1.0)*x6963*x6968)));
evalcond[3]=((((-1.0)*r02*x6968))+cj0+(((-1.0)*x6966*x6967))+((x6960*x6962)));
evalcond[4]=(sj0+(((-1.0)*x6961*x6967))+(((-1.0)*r12*x6968))+((x6960*x6963)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6967))+((x6959*x6966))+(((-1.0)*x6962*x6968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6969=cj5*cj5;
IkReal x6970=((1.0)*r21);
IkReal x6971=(cj5*sj5);
IkReal x6972=((1.0)*r20);
CheckValue<IkReal> x6973 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6973.valid){
continue;
}
CheckValue<IkReal> x6974=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x6969))+(((-1.0)*r01*x6969*x6970))+((r02*r22))+(((-1.0)*r00*x6970*x6971))+(((-1.0)*r01*x6971*x6972)))),-1);
if(!x6974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6973.value)+(((1.5707963267949)*(x6974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6975=IKsin(j4);
IkReal x6976=IKcos(j4);
IkReal x6977=(r11*sj5);
IkReal x6978=(cj5*r00);
IkReal x6979=(cj5*r10);
IkReal x6980=(r21*sj5);
IkReal x6981=(cj5*r20);
IkReal x6982=(r01*sj5);
IkReal x6983=((1.0)*x6976);
IkReal x6984=((1.0)*x6975);
evalcond[0]=((((-1.0)*r22*x6983))+(((-1.0)*x6981*x6984))+((x6975*x6980)));
evalcond[1]=((((-1.0)*r22*x6984))+((x6976*x6981))+(((-1.0)*x6980*x6983)));
evalcond[2]=(((x6975*x6977))+cj0+(((-1.0)*r12*x6983))+(((-1.0)*x6979*x6984)));
evalcond[3]=(cj0+(((-1.0)*x6982*x6983))+((x6976*x6978))+(((-1.0)*r02*x6984)));
evalcond[4]=(sj0+(((-1.0)*r12*x6984))+(((-1.0)*x6977*x6983))+((x6976*x6979)));
evalcond[5]=((((-1.0)*x6978*x6984))+(((-1.0)*sj0))+((x6975*x6982))+(((-1.0)*r02*x6983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6985=((1.0)*cj5);
CheckValue<IkReal> x6986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6985)))),-1);
if(!x6986.valid){
continue;
}
CheckValue<IkReal> x6987 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6985))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6986.value)))+(x6987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6988=IKsin(j4);
IkReal x6989=IKcos(j4);
IkReal x6990=(r11*sj5);
IkReal x6991=(cj5*r00);
IkReal x6992=(cj5*r10);
IkReal x6993=(r21*sj5);
IkReal x6994=(cj5*r20);
IkReal x6995=(r01*sj5);
IkReal x6996=((1.0)*x6989);
IkReal x6997=((1.0)*x6988);
evalcond[0]=((((-1.0)*r22*x6996))+(((-1.0)*x6994*x6997))+((x6988*x6993)));
evalcond[1]=((((-1.0)*x6993*x6996))+(((-1.0)*r22*x6997))+((x6989*x6994)));
evalcond[2]=((((-1.0)*r12*x6996))+cj0+(((-1.0)*x6992*x6997))+((x6988*x6990)));
evalcond[3]=(cj0+(((-1.0)*x6995*x6996))+((x6989*x6991))+(((-1.0)*r02*x6997)));
evalcond[4]=((((-1.0)*r12*x6997))+sj0+((x6989*x6992))+(((-1.0)*x6990*x6996)));
evalcond[5]=((((-1.0)*sj0))+((x6988*x6995))+(((-1.0)*r02*x6996))+(((-1.0)*x6991*x6997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6998=((1.0)*sj5);
IkReal x6999=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x6999))+(((-1.0)*r10*x6998)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6998))+(((-1.0)*r01*x6999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6999))+(((-1.0)*r10*x6998))))+IKsqr(((((-1.0)*r00*x6998))+(((-1.0)*r01*x6999))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x6999))+(((-1.0)*r10*x6998))), ((((-1.0)*r00*x6998))+(((-1.0)*r01*x6999))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7000=IKsin(j0);
IkReal x7001=IKcos(j0);
IkReal x7002=((1.0)*cj5);
IkReal x7003=((0.08535)*sj5);
IkReal x7004=((0.08535)*cj5);
IkReal x7005=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7001))+(((-1.0)*r00*x7005))+(((-1.0)*r01*x7002)));
evalcond[1]=((((-1.0)*x7000))+(((-1.0)*r11*x7002))+(((-1.0)*r10*x7005)));
evalcond[2]=((((-0.11235)*x7000))+(((-1.0)*r00*x7003))+(((-1.0)*px))+(((-1.0)*r01*x7004)));
evalcond[3]=((((-1.0)*r11*x7004))+(((-1.0)*r10*x7003))+(((-1.0)*py))+(((0.11235)*x7001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7006=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7006;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7007=((1.0)*cj5);
IkReal x7008=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7007)));
j4eval[0]=x7008;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7007)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7009=cj5*cj5;
IkReal x7010=r21*r21;
IkReal x7011=(r21*sj5);
IkReal x7012=(cj5*r20);
IkReal x7013=(x7010+(((-1.0)*x7009*x7010))+(r22*r22)+((x7009*(r20*r20)))+(((-2.0)*x7011*x7012)));
j4eval[0]=x7013;
j4eval[1]=IKsign(x7013);
j4eval[2]=((IKabs(r22))+(IKabs((x7011+(((-1.0)*x7012))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7014=cj5*cj5;
IkReal x7015=r21*r21;
IkReal x7016=(r21*sj5);
IkReal x7017=(cj5*r20);
CheckValue<IkReal> x7018 = IKatan2WithCheck(IkReal(r22),IkReal((x7016+(((-1.0)*x7017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7018.valid){
continue;
}
CheckValue<IkReal> x7019=IKPowWithIntegerCheck(IKsign((x7015+(r22*r22)+((x7014*(r20*r20)))+(((-1.0)*x7014*x7015))+(((-2.0)*x7016*x7017)))),-1);
if(!x7019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7018.value)+(((1.5707963267949)*(x7019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7020=IKsin(j4);
IkReal x7021=IKcos(j4);
IkReal x7022=(r11*sj5);
IkReal x7023=(r21*sj5);
IkReal x7024=(cj5*r00);
IkReal x7025=(cj5*r20);
IkReal x7026=(r01*sj5);
IkReal x7027=(cj5*r10);
IkReal x7028=((1.0)*x7021);
IkReal x7029=((1.0)*x7020);
evalcond[0]=((((-1.0)*x7025*x7029))+(((-1.0)*r22*x7028))+((x7020*x7023)));
evalcond[1]=((((-1.0)*r02*x7029))+(((-1.0)*x7026*x7028))+((x7021*x7024)));
evalcond[2]=((((-1.0)*r12*x7029))+(((-1.0)*x7022*x7028))+((x7021*x7027)));
evalcond[3]=((((-1.0)*r12*x7028))+((x7020*x7022))+cj0+(((-1.0)*x7027*x7029)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7029))+((x7021*x7025))+(((-1.0)*x7023*x7028)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7024*x7029))+((x7020*x7026))+(((-1.0)*r02*x7028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7030=((1.0)*cj5);
CheckValue<IkReal> x7031 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7031.valid){
continue;
}
CheckValue<IkReal> x7032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7030))+(((-1.0)*r00*sj5)))),-1);
if(!x7032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7031.value)+(((1.5707963267949)*(x7032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7033=IKsin(j4);
IkReal x7034=IKcos(j4);
IkReal x7035=(r11*sj5);
IkReal x7036=(r21*sj5);
IkReal x7037=(cj5*r00);
IkReal x7038=(cj5*r20);
IkReal x7039=(r01*sj5);
IkReal x7040=(cj5*r10);
IkReal x7041=((1.0)*x7034);
IkReal x7042=((1.0)*x7033);
evalcond[0]=((((-1.0)*r22*x7041))+((x7033*x7036))+(((-1.0)*x7038*x7042)));
evalcond[1]=((((-1.0)*r02*x7042))+((x7034*x7037))+(((-1.0)*x7039*x7041)));
evalcond[2]=((((-1.0)*r12*x7042))+(((-1.0)*x7035*x7041))+((x7034*x7040)));
evalcond[3]=(cj0+(((-1.0)*r12*x7041))+(((-1.0)*x7040*x7042))+((x7033*x7035)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7042))+(((-1.0)*x7036*x7041))+((x7034*x7038)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7041))+(((-1.0)*x7037*x7042))+((x7033*x7039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7043 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7043.valid){
continue;
}
CheckValue<IkReal> x7044=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7043.value)+(((1.5707963267949)*(x7044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7045=IKsin(j4);
IkReal x7046=IKcos(j4);
IkReal x7047=(r11*sj5);
IkReal x7048=(r21*sj5);
IkReal x7049=(cj5*r00);
IkReal x7050=(cj5*r20);
IkReal x7051=(r01*sj5);
IkReal x7052=(cj5*r10);
IkReal x7053=((1.0)*x7046);
IkReal x7054=((1.0)*x7045);
evalcond[0]=((((-1.0)*r22*x7053))+((x7045*x7048))+(((-1.0)*x7050*x7054)));
evalcond[1]=(((x7046*x7049))+(((-1.0)*x7051*x7053))+(((-1.0)*r02*x7054)));
evalcond[2]=((((-1.0)*x7047*x7053))+((x7046*x7052))+(((-1.0)*r12*x7054)));
evalcond[3]=(cj0+((x7045*x7047))+(((-1.0)*x7052*x7054))+(((-1.0)*r12*x7053)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7054))+(((-1.0)*x7048*x7053))+((x7046*x7050)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7049*x7054))+((x7045*x7051))+(((-1.0)*r02*x7053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7055=IKcos(j0);
IkReal x7056=IKsin(j0);
evalcond[0]=((((-0.21325)*x7055))+(((-1.0)*px))+(((-0.11235)*x7056)));
evalcond[1]=((((-0.21325)*x7056))+(((-1.0)*py))+(((0.11235)*x7055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7057=((1.0)*cj5);
IkReal x7058=((((-1.0)*r01*x7057))+(((-1.0)*r00*sj5)));
j4eval[0]=x7058;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7057))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7059=cj5*cj5;
IkReal x7060=((1.0)*r21);
IkReal x7061=(cj5*sj5);
IkReal x7062=((1.0)*r20);
IkReal x7063=(((r00*r20*x7059))+(((-1.0)*r01*x7059*x7060))+(((-1.0)*r01*x7061*x7062))+((r01*r21))+(((-1.0)*r00*x7060*x7061))+((r02*r22)));
j4eval[0]=x7063;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7062))))));
j4eval[2]=IKsign(x7063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7064=cj5*cj5;
IkReal x7065=(r21*sj5);
IkReal x7066=(r11*r21);
IkReal x7067=((1.0)*cj5*r20);
IkReal x7068=(x7066+(((-1.0)*x7064*x7066))+((r12*r22))+(((-1.0)*r11*sj5*x7067))+(((-1.0)*cj5*r10*x7065))+((r10*r20*x7064)));
j4eval[0]=x7068;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7067))+((sj0*x7065))))));
j4eval[2]=IKsign(x7068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7069=cj5*cj5;
IkReal x7070=(r21*sj5);
IkReal x7071=(r11*r21);
IkReal x7072=((1.0)*cj5*r20);
CheckValue<IkReal> x7073 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7072))+((sj0*x7070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7073.valid){
continue;
}
CheckValue<IkReal> x7074=IKPowWithIntegerCheck(IKsign((x7071+((r12*r22))+(((-1.0)*cj5*r10*x7070))+(((-1.0)*x7069*x7071))+(((-1.0)*r11*sj5*x7072))+((r10*r20*x7069)))),-1);
if(!x7074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7073.value)+(((1.5707963267949)*(x7074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7075=IKsin(j4);
IkReal x7076=IKcos(j4);
IkReal x7077=(r11*sj5);
IkReal x7078=(cj5*r00);
IkReal x7079=(cj5*r10);
IkReal x7080=(r21*sj5);
IkReal x7081=(cj5*r20);
IkReal x7082=(r01*sj5);
IkReal x7083=((1.0)*x7076);
IkReal x7084=((1.0)*x7075);
evalcond[0]=(((x7075*x7080))+(((-1.0)*r22*x7083))+(((-1.0)*x7081*x7084)));
evalcond[1]=(((x7076*x7081))+(((-1.0)*r22*x7084))+(((-1.0)*x7080*x7083)));
evalcond[2]=(cj0+(((-1.0)*x7079*x7084))+(((-1.0)*r12*x7083))+((x7075*x7077)));
evalcond[3]=(cj0+(((-1.0)*x7082*x7083))+((x7076*x7078))+(((-1.0)*r02*x7084)));
evalcond[4]=(sj0+(((-1.0)*r12*x7084))+((x7076*x7079))+(((-1.0)*x7077*x7083)));
evalcond[5]=((((-1.0)*sj0))+((x7075*x7082))+(((-1.0)*r02*x7083))+(((-1.0)*x7078*x7084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7085=cj5*cj5;
IkReal x7086=((1.0)*r21);
IkReal x7087=(cj5*sj5);
IkReal x7088=((1.0)*r20);
CheckValue<IkReal> x7089 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7089.valid){
continue;
}
CheckValue<IkReal> x7090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7085*x7086))+((r01*r21))+(((-1.0)*r00*x7086*x7087))+((r00*r20*x7085))+((r02*r22))+(((-1.0)*r01*x7087*x7088)))),-1);
if(!x7090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7089.value)+(((1.5707963267949)*(x7090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7091=IKsin(j4);
IkReal x7092=IKcos(j4);
IkReal x7093=(r11*sj5);
IkReal x7094=(cj5*r00);
IkReal x7095=(cj5*r10);
IkReal x7096=(r21*sj5);
IkReal x7097=(cj5*r20);
IkReal x7098=(r01*sj5);
IkReal x7099=((1.0)*x7092);
IkReal x7100=((1.0)*x7091);
evalcond[0]=((((-1.0)*r22*x7099))+((x7091*x7096))+(((-1.0)*x7097*x7100)));
evalcond[1]=(((x7092*x7097))+(((-1.0)*x7096*x7099))+(((-1.0)*r22*x7100)));
evalcond[2]=(cj0+(((-1.0)*r12*x7099))+(((-1.0)*x7095*x7100))+((x7091*x7093)));
evalcond[3]=(((x7092*x7094))+cj0+(((-1.0)*x7098*x7099))+(((-1.0)*r02*x7100)));
evalcond[4]=((((-1.0)*x7093*x7099))+sj0+((x7092*x7095))+(((-1.0)*r12*x7100)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7094*x7100))+((x7091*x7098))+(((-1.0)*r02*x7099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7101=((1.0)*cj5);
CheckValue<IkReal> x7102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7101)))),-1);
if(!x7102.valid){
continue;
}
CheckValue<IkReal> x7103 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7102.value)))+(x7103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7104=IKsin(j4);
IkReal x7105=IKcos(j4);
IkReal x7106=(r11*sj5);
IkReal x7107=(cj5*r00);
IkReal x7108=(cj5*r10);
IkReal x7109=(r21*sj5);
IkReal x7110=(cj5*r20);
IkReal x7111=(r01*sj5);
IkReal x7112=((1.0)*x7105);
IkReal x7113=((1.0)*x7104);
evalcond[0]=((((-1.0)*x7110*x7113))+(((-1.0)*r22*x7112))+((x7104*x7109)));
evalcond[1]=((((-1.0)*r22*x7113))+(((-1.0)*x7109*x7112))+((x7105*x7110)));
evalcond[2]=(cj0+(((-1.0)*r12*x7112))+((x7104*x7106))+(((-1.0)*x7108*x7113)));
evalcond[3]=(cj0+(((-1.0)*x7111*x7112))+(((-1.0)*r02*x7113))+((x7105*x7107)));
evalcond[4]=(sj0+(((-1.0)*r12*x7113))+((x7105*x7108))+(((-1.0)*x7106*x7112)));
evalcond[5]=((((-1.0)*x7107*x7113))+(((-1.0)*sj0))+(((-1.0)*r02*x7112))+((x7104*x7111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7114=IKsin(j0);
IkReal x7115=IKcos(j0);
IkReal x7116=((1.0)*cj5);
IkReal x7117=((0.08535)*sj5);
IkReal x7118=((0.08535)*cj5);
IkReal x7119=((1.0)*sj5);
evalcond[0]=(x7115+(((-1.0)*r01*x7116))+(((-1.0)*r00*x7119)));
evalcond[1]=(x7114+(((-1.0)*r11*x7116))+(((-1.0)*r10*x7119)));
evalcond[2]=((((-0.11235)*x7114))+(((-1.0)*px))+(((-1.0)*r01*x7118))+(((-1.0)*r00*x7117)));
evalcond[3]=((((-1.0)*r11*x7118))+(((-1.0)*r10*x7117))+(((0.11235)*x7115))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7120=((1.0)*sj5);
IkReal x7121=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7120)));
j4eval[0]=x7121;
j4eval[1]=IKsign(x7121);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7120))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7122=((1.0)*cj5);
IkReal x7123=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7122)));
j4eval[0]=x7123;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7122))))));
j4eval[2]=IKsign(x7123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7124=r21*r21;
IkReal x7125=cj5*cj5;
IkReal x7126=(r21*sj5);
IkReal x7127=(cj5*r20);
IkReal x7128=((((-1.0)*x7125*(r20*r20)))+(((-1.0)*x7124))+(((-1.0)*(r22*r22)))+((x7124*x7125))+(((2.0)*x7126*x7127)));
j4eval[0]=x7128;
j4eval[1]=((IKabs((x7126+(((-1.0)*x7127)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7129=r21*r21;
IkReal x7130=cj5*cj5;
IkReal x7131=(r21*sj5);
IkReal x7132=(cj5*r20);
CheckValue<IkReal> x7133 = IKatan2WithCheck(IkReal(r22),IkReal((x7131+(((-1.0)*x7132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7133.valid){
continue;
}
CheckValue<IkReal> x7134=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7129))+(((-1.0)*(r22*r22)))+(((2.0)*x7131*x7132))+((x7129*x7130))+(((-1.0)*x7130*(r20*r20))))),-1);
if(!x7134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7133.value)+(((1.5707963267949)*(x7134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7135=IKsin(j4);
IkReal x7136=IKcos(j4);
IkReal x7137=(r11*sj5);
IkReal x7138=(r21*sj5);
IkReal x7139=(cj5*r00);
IkReal x7140=(cj5*r20);
IkReal x7141=(r01*sj5);
IkReal x7142=(cj5*r10);
IkReal x7143=((1.0)*x7136);
IkReal x7144=((1.0)*x7135);
evalcond[0]=((((-1.0)*r22*x7143))+((x7135*x7138))+(((-1.0)*x7140*x7144)));
evalcond[1]=((((-1.0)*x7141*x7143))+(((-1.0)*r02*x7144))+((x7136*x7139)));
evalcond[2]=(((x7136*x7142))+(((-1.0)*x7137*x7143))+(((-1.0)*r12*x7144)));
evalcond[3]=((((-1.0)*x7142*x7144))+cj0+((x7135*x7137))+(((-1.0)*r12*x7143)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7144))+(((-1.0)*x7138*x7143))+((x7136*x7140)));
evalcond[5]=((((-1.0)*sj0))+((x7135*x7141))+(((-1.0)*x7139*x7144))+(((-1.0)*r02*x7143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7145=((1.0)*cj5);
CheckValue<IkReal> x7146 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7146.valid){
continue;
}
CheckValue<IkReal> x7147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7145)))),-1);
if(!x7147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7146.value)+(((1.5707963267949)*(x7147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7148=IKsin(j4);
IkReal x7149=IKcos(j4);
IkReal x7150=(r11*sj5);
IkReal x7151=(r21*sj5);
IkReal x7152=(cj5*r00);
IkReal x7153=(cj5*r20);
IkReal x7154=(r01*sj5);
IkReal x7155=(cj5*r10);
IkReal x7156=((1.0)*x7149);
IkReal x7157=((1.0)*x7148);
evalcond[0]=((((-1.0)*x7153*x7157))+(((-1.0)*r22*x7156))+((x7148*x7151)));
evalcond[1]=(((x7149*x7152))+(((-1.0)*x7154*x7156))+(((-1.0)*r02*x7157)));
evalcond[2]=(((x7149*x7155))+(((-1.0)*r12*x7157))+(((-1.0)*x7150*x7156)));
evalcond[3]=((((-1.0)*r12*x7156))+cj0+(((-1.0)*x7155*x7157))+((x7148*x7150)));
evalcond[4]=((-1.0)+((x7149*x7153))+(((-1.0)*x7151*x7156))+(((-1.0)*r22*x7157)));
evalcond[5]=((((-1.0)*x7152*x7157))+(((-1.0)*sj0))+((x7148*x7154))+(((-1.0)*r02*x7156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7158=((1.0)*sj5);
CheckValue<IkReal> x7159 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7158))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7159.valid){
continue;
}
CheckValue<IkReal> x7160=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7158)))),-1);
if(!x7160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7159.value)+(((1.5707963267949)*(x7160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7161=IKsin(j4);
IkReal x7162=IKcos(j4);
IkReal x7163=(r11*sj5);
IkReal x7164=(r21*sj5);
IkReal x7165=(cj5*r00);
IkReal x7166=(cj5*r20);
IkReal x7167=(r01*sj5);
IkReal x7168=(cj5*r10);
IkReal x7169=((1.0)*x7162);
IkReal x7170=((1.0)*x7161);
evalcond[0]=((((-1.0)*r22*x7169))+((x7161*x7164))+(((-1.0)*x7166*x7170)));
evalcond[1]=(((x7162*x7165))+(((-1.0)*r02*x7170))+(((-1.0)*x7167*x7169)));
evalcond[2]=(((x7162*x7168))+(((-1.0)*x7163*x7169))+(((-1.0)*r12*x7170)));
evalcond[3]=((((-1.0)*x7168*x7170))+cj0+((x7161*x7163))+(((-1.0)*r12*x7169)));
evalcond[4]=((-1.0)+((x7162*x7166))+(((-1.0)*x7164*x7169))+(((-1.0)*r22*x7170)));
evalcond[5]=((((-1.0)*r02*x7169))+(((-1.0)*sj0))+((x7161*x7167))+(((-1.0)*x7165*x7170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7171=IKcos(j0);
IkReal x7172=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x7172))+(((0.21325)*x7171)));
evalcond[1]=((((0.11235)*x7171))+(((-1.0)*py))+(((0.21325)*x7172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7173=((1.0)*cj5);
IkReal x7174=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7173)));
j4eval[0]=x7174;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7173))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7174);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7175=((1.0)*cj5);
IkReal x7176=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7175)));
j4eval[0]=x7176;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7175))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7177=cj5*cj5;
IkReal x7178=((1.0)*sj5);
IkReal x7179=(cj5*r20);
IkReal x7180=(r11*r21);
IkReal x7181=(x7180+(((-1.0)*x7177*x7180))+(((-1.0)*r11*x7178*x7179))+(((-1.0)*cj5*r10*r21*x7178))+((r12*r22))+((r10*r20*x7177)));
j4eval[0]=x7181;
j4eval[1]=IKsign(x7181);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7178))+((cj0*x7179)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7182=cj5*cj5;
IkReal x7183=((1.0)*sj5);
IkReal x7184=(cj5*r20);
IkReal x7185=(r11*r21);
CheckValue<IkReal> x7186=IKPowWithIntegerCheck(IKsign((x7185+(((-1.0)*r11*x7183*x7184))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7183))+(((-1.0)*x7182*x7185))+((r10*r20*x7182)))),-1);
if(!x7186.valid){
continue;
}
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7183))+((cj0*x7184)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7186.value)))+(x7187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7188=IKsin(j4);
IkReal x7189=IKcos(j4);
IkReal x7190=((1.0)*sj0);
IkReal x7191=(cj5*r00);
IkReal x7192=(r11*sj5);
IkReal x7193=(cj5*r10);
IkReal x7194=(r21*sj5);
IkReal x7195=(cj5*r20);
IkReal x7196=(r01*sj5);
IkReal x7197=((1.0)*x7189);
IkReal x7198=((1.0)*x7188);
evalcond[0]=((((-1.0)*x7195*x7198))+(((-1.0)*r22*x7197))+((x7188*x7194)));
evalcond[1]=(((x7189*x7195))+(((-1.0)*x7194*x7197))+(((-1.0)*r22*x7198)));
evalcond[2]=(cj0+(((-1.0)*x7193*x7198))+(((-1.0)*r12*x7197))+((x7188*x7192)));
evalcond[3]=((((-1.0)*x7190))+(((-1.0)*x7191*x7198))+((x7188*x7196))+(((-1.0)*r02*x7197)));
evalcond[4]=((((-1.0)*x7196*x7197))+((x7189*x7191))+(((-1.0)*r02*x7198))+(((-1.0)*cj0)));
evalcond[5]=(((x7189*x7193))+(((-1.0)*x7190))+(((-1.0)*r12*x7198))+(((-1.0)*x7192*x7197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7199=((1.0)*cj5);
CheckValue<IkReal> x7200 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7200.valid){
continue;
}
CheckValue<IkReal> x7201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7199)))),-1);
if(!x7201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7200.value)+(((1.5707963267949)*(x7201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7202=IKsin(j4);
IkReal x7203=IKcos(j4);
IkReal x7204=((1.0)*sj0);
IkReal x7205=(cj5*r00);
IkReal x7206=(r11*sj5);
IkReal x7207=(cj5*r10);
IkReal x7208=(r21*sj5);
IkReal x7209=(cj5*r20);
IkReal x7210=(r01*sj5);
IkReal x7211=((1.0)*x7203);
IkReal x7212=((1.0)*x7202);
evalcond[0]=(((x7202*x7208))+(((-1.0)*x7209*x7212))+(((-1.0)*r22*x7211)));
evalcond[1]=(((x7203*x7209))+(((-1.0)*x7208*x7211))+(((-1.0)*r22*x7212)));
evalcond[2]=(cj0+((x7202*x7206))+(((-1.0)*r12*x7211))+(((-1.0)*x7207*x7212)));
evalcond[3]=((((-1.0)*x7205*x7212))+(((-1.0)*r02*x7211))+((x7202*x7210))+(((-1.0)*x7204)));
evalcond[4]=(((x7203*x7205))+(((-1.0)*r02*x7212))+(((-1.0)*x7210*x7211))+(((-1.0)*cj0)));
evalcond[5]=(((x7203*x7207))+(((-1.0)*x7206*x7211))+(((-1.0)*r12*x7212))+(((-1.0)*x7204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7213=((1.0)*cj5);
CheckValue<IkReal> x7214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7213))+(((-1.0)*r00*sj5)))),-1);
if(!x7214.valid){
continue;
}
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7214.value)))+(x7215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7216=IKsin(j4);
IkReal x7217=IKcos(j4);
IkReal x7218=((1.0)*sj0);
IkReal x7219=(cj5*r00);
IkReal x7220=(r11*sj5);
IkReal x7221=(cj5*r10);
IkReal x7222=(r21*sj5);
IkReal x7223=(cj5*r20);
IkReal x7224=(r01*sj5);
IkReal x7225=((1.0)*x7217);
IkReal x7226=((1.0)*x7216);
evalcond[0]=(((x7216*x7222))+(((-1.0)*r22*x7225))+(((-1.0)*x7223*x7226)));
evalcond[1]=((((-1.0)*x7222*x7225))+((x7217*x7223))+(((-1.0)*r22*x7226)));
evalcond[2]=(cj0+(((-1.0)*x7221*x7226))+((x7216*x7220))+(((-1.0)*r12*x7225)));
evalcond[3]=((((-1.0)*r02*x7225))+((x7216*x7224))+(((-1.0)*x7218))+(((-1.0)*x7219*x7226)));
evalcond[4]=((((-1.0)*r02*x7226))+(((-1.0)*x7224*x7225))+(((-1.0)*cj0))+((x7217*x7219)));
evalcond[5]=((((-1.0)*x7218))+(((-1.0)*r12*x7226))+(((-1.0)*x7220*x7225))+((x7217*x7221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7227=IKcos(j0);
IkReal x7228=IKsin(j0);
evalcond[0]=((((-0.11235)*x7228))+(((-1.0)*px))+(((-0.4569)*x7227)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x7227))+(((-0.4569)*x7228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7229=((1.0)*cj5);
IkReal x7230=((((-1.0)*r01*x7229))+(((-1.0)*r00*sj5)));
j4eval[0]=x7230;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7229)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7231=cj5*cj5;
IkReal x7232=((1.0)*r21);
IkReal x7233=(cj5*sj5);
IkReal x7234=((1.0)*r20);
IkReal x7235=((((-1.0)*r00*x7232*x7233))+(((-1.0)*r01*x7231*x7232))+((r01*r21))+((r02*r22))+((r00*r20*x7231))+(((-1.0)*r01*x7233*x7234)));
j4eval[0]=x7235;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7234)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7235);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7236=cj5*cj5;
IkReal x7237=(r21*sj5);
IkReal x7238=(r11*r21);
IkReal x7239=((1.0)*cj5*r20);
IkReal x7240=((((-1.0)*r11*sj5*x7239))+(((-1.0)*cj5*r10*x7237))+((r10*r20*x7236))+x7238+(((-1.0)*x7236*x7238))+((r12*r22)));
j4eval[0]=x7240;
j4eval[1]=((IKabs(((((-1.0)*sj0*x7239))+((sj0*x7237)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7240);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7241=cj5*cj5;
IkReal x7242=(r21*sj5);
IkReal x7243=(r11*r21);
IkReal x7244=((1.0)*cj5*r20);
CheckValue<IkReal> x7245=IKPowWithIntegerCheck(IKsign((x7243+(((-1.0)*r11*sj5*x7244))+(((-1.0)*x7241*x7243))+((r12*r22))+((r10*r20*x7241))+(((-1.0)*cj5*r10*x7242)))),-1);
if(!x7245.valid){
continue;
}
CheckValue<IkReal> x7246 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7242))+(((-1.0)*sj0*x7244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7245.value)))+(x7246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7247=IKsin(j4);
IkReal x7248=IKcos(j4);
IkReal x7249=(r11*sj5);
IkReal x7250=(cj5*r00);
IkReal x7251=(cj5*r10);
IkReal x7252=(r21*sj5);
IkReal x7253=(cj5*r20);
IkReal x7254=(r01*sj5);
IkReal x7255=((1.0)*x7248);
IkReal x7256=((1.0)*x7247);
evalcond[0]=((((-1.0)*r22*x7255))+((x7247*x7252))+(((-1.0)*x7253*x7256)));
evalcond[1]=((((-1.0)*x7252*x7255))+(((-1.0)*r22*x7256))+((x7248*x7253)));
evalcond[2]=((((-1.0)*x7251*x7256))+cj0+(((-1.0)*r12*x7255))+((x7247*x7249)));
evalcond[3]=(cj0+(((-1.0)*r02*x7256))+((x7248*x7250))+(((-1.0)*x7254*x7255)));
evalcond[4]=(sj0+(((-1.0)*r12*x7256))+(((-1.0)*x7249*x7255))+((x7248*x7251)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7255))+((x7247*x7254))+(((-1.0)*x7250*x7256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7257=cj5*cj5;
IkReal x7258=((1.0)*r21);
IkReal x7259=(cj5*sj5);
IkReal x7260=((1.0)*r20);
CheckValue<IkReal> x7261 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7261.valid){
continue;
}
CheckValue<IkReal> x7262=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7259*x7260))+(((-1.0)*r00*x7258*x7259))+((r01*r21))+(((-1.0)*r01*x7257*x7258))+((r02*r22))+((r00*r20*x7257)))),-1);
if(!x7262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7261.value)+(((1.5707963267949)*(x7262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7263=IKsin(j4);
IkReal x7264=IKcos(j4);
IkReal x7265=(r11*sj5);
IkReal x7266=(cj5*r00);
IkReal x7267=(cj5*r10);
IkReal x7268=(r21*sj5);
IkReal x7269=(cj5*r20);
IkReal x7270=(r01*sj5);
IkReal x7271=((1.0)*x7264);
IkReal x7272=((1.0)*x7263);
evalcond[0]=(((x7263*x7268))+(((-1.0)*r22*x7271))+(((-1.0)*x7269*x7272)));
evalcond[1]=((((-1.0)*r22*x7272))+((x7264*x7269))+(((-1.0)*x7268*x7271)));
evalcond[2]=((((-1.0)*x7267*x7272))+((x7263*x7265))+cj0+(((-1.0)*r12*x7271)));
evalcond[3]=(cj0+((x7264*x7266))+(((-1.0)*r02*x7272))+(((-1.0)*x7270*x7271)));
evalcond[4]=(sj0+(((-1.0)*x7265*x7271))+(((-1.0)*r12*x7272))+((x7264*x7267)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7266*x7272))+((x7263*x7270))+(((-1.0)*r02*x7271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7273=((1.0)*cj5);
CheckValue<IkReal> x7274 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7274.valid){
continue;
}
CheckValue<IkReal> x7275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7273)))),-1);
if(!x7275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7274.value)+(((1.5707963267949)*(x7275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7276=IKsin(j4);
IkReal x7277=IKcos(j4);
IkReal x7278=(r11*sj5);
IkReal x7279=(cj5*r00);
IkReal x7280=(cj5*r10);
IkReal x7281=(r21*sj5);
IkReal x7282=(cj5*r20);
IkReal x7283=(r01*sj5);
IkReal x7284=((1.0)*x7277);
IkReal x7285=((1.0)*x7276);
evalcond[0]=((((-1.0)*x7282*x7285))+((x7276*x7281))+(((-1.0)*r22*x7284)));
evalcond[1]=(((x7277*x7282))+(((-1.0)*x7281*x7284))+(((-1.0)*r22*x7285)));
evalcond[2]=(cj0+((x7276*x7278))+(((-1.0)*r12*x7284))+(((-1.0)*x7280*x7285)));
evalcond[3]=(cj0+((x7277*x7279))+(((-1.0)*x7283*x7284))+(((-1.0)*r02*x7285)));
evalcond[4]=(sj0+((x7277*x7280))+(((-1.0)*x7278*x7284))+(((-1.0)*r12*x7285)));
evalcond[5]=((((-1.0)*sj0))+((x7276*x7283))+(((-1.0)*r02*x7284))+(((-1.0)*x7279*x7285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7286=IKcos(j0);
IkReal x7287=IKsin(j0);
evalcond[0]=((((-0.0304)*x7286))+(((-1.0)*px))+(((-0.11235)*x7287)));
evalcond[1]=((((-0.0304)*x7287))+(((0.11235)*x7286))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7288=((1.0)*cj5);
IkReal x7289=((((-1.0)*r01*x7288))+(((-1.0)*r00*sj5)));
j4eval[0]=x7289;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7288))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7290=((1.0)*cj5);
IkReal x7291=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7290)));
j4eval[0]=x7291;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7290))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7292=cj5*cj5;
IkReal x7293=((1.0)*sj5);
IkReal x7294=(cj5*r20);
IkReal x7295=(r11*r21);
IkReal x7296=(x7295+(((-1.0)*cj5*r10*r21*x7293))+((r10*r20*x7292))+((r12*r22))+(((-1.0)*x7292*x7295))+(((-1.0)*r11*x7293*x7294)));
j4eval[0]=x7296;
j4eval[1]=IKsign(x7296);
j4eval[2]=((IKabs((((cj0*x7294))+(((-1.0)*cj0*r21*x7293)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7297=cj5*cj5;
IkReal x7298=((1.0)*sj5);
IkReal x7299=(cj5*r20);
IkReal x7300=(r11*r21);
CheckValue<IkReal> x7301=IKPowWithIntegerCheck(IKsign((x7300+(((-1.0)*cj5*r10*r21*x7298))+(((-1.0)*r11*x7298*x7299))+((r10*r20*x7297))+((r12*r22))+(((-1.0)*x7297*x7300)))),-1);
if(!x7301.valid){
continue;
}
CheckValue<IkReal> x7302 = IKatan2WithCheck(IkReal((((cj0*x7299))+(((-1.0)*cj0*r21*x7298)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7301.value)))+(x7302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7303=IKsin(j4);
IkReal x7304=IKcos(j4);
IkReal x7305=((1.0)*sj0);
IkReal x7306=(cj5*r00);
IkReal x7307=(r11*sj5);
IkReal x7308=(cj5*r10);
IkReal x7309=(r21*sj5);
IkReal x7310=(cj5*r20);
IkReal x7311=(r01*sj5);
IkReal x7312=((1.0)*x7304);
IkReal x7313=((1.0)*x7303);
evalcond[0]=(((x7303*x7309))+(((-1.0)*r22*x7312))+(((-1.0)*x7310*x7313)));
evalcond[1]=((((-1.0)*x7309*x7312))+((x7304*x7310))+(((-1.0)*r22*x7313)));
evalcond[2]=(cj0+((x7303*x7307))+(((-1.0)*r12*x7312))+(((-1.0)*x7308*x7313)));
evalcond[3]=(((x7303*x7311))+(((-1.0)*x7305))+(((-1.0)*x7306*x7313))+(((-1.0)*r02*x7312)));
evalcond[4]=((((-1.0)*x7311*x7312))+((x7304*x7306))+(((-1.0)*cj0))+(((-1.0)*r02*x7313)));
evalcond[5]=(((x7304*x7308))+(((-1.0)*r12*x7313))+(((-1.0)*x7305))+(((-1.0)*x7307*x7312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7314=((1.0)*cj5);
CheckValue<IkReal> x7315=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7314)))),-1);
if(!x7315.valid){
continue;
}
CheckValue<IkReal> x7316 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7314))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7315.value)))+(x7316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7317=IKsin(j4);
IkReal x7318=IKcos(j4);
IkReal x7319=((1.0)*sj0);
IkReal x7320=(cj5*r00);
IkReal x7321=(r11*sj5);
IkReal x7322=(cj5*r10);
IkReal x7323=(r21*sj5);
IkReal x7324=(cj5*r20);
IkReal x7325=(r01*sj5);
IkReal x7326=((1.0)*x7318);
IkReal x7327=((1.0)*x7317);
evalcond[0]=((((-1.0)*x7324*x7327))+(((-1.0)*r22*x7326))+((x7317*x7323)));
evalcond[1]=((((-1.0)*r22*x7327))+(((-1.0)*x7323*x7326))+((x7318*x7324)));
evalcond[2]=(cj0+(((-1.0)*x7322*x7327))+(((-1.0)*r12*x7326))+((x7317*x7321)));
evalcond[3]=((((-1.0)*x7319))+((x7317*x7325))+(((-1.0)*r02*x7326))+(((-1.0)*x7320*x7327)));
evalcond[4]=((((-1.0)*x7325*x7326))+((x7318*x7320))+(((-1.0)*cj0))+(((-1.0)*r02*x7327)));
evalcond[5]=((((-1.0)*x7321*x7326))+(((-1.0)*x7319))+(((-1.0)*r12*x7327))+((x7318*x7322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7328=((1.0)*cj5);
CheckValue<IkReal> x7329 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7329.valid){
continue;
}
CheckValue<IkReal> x7330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7328)))),-1);
if(!x7330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7329.value)+(((1.5707963267949)*(x7330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7331=IKsin(j4);
IkReal x7332=IKcos(j4);
IkReal x7333=((1.0)*sj0);
IkReal x7334=(cj5*r00);
IkReal x7335=(r11*sj5);
IkReal x7336=(cj5*r10);
IkReal x7337=(r21*sj5);
IkReal x7338=(cj5*r20);
IkReal x7339=(r01*sj5);
IkReal x7340=((1.0)*x7332);
IkReal x7341=((1.0)*x7331);
evalcond[0]=((((-1.0)*r22*x7340))+((x7331*x7337))+(((-1.0)*x7338*x7341)));
evalcond[1]=((((-1.0)*r22*x7341))+(((-1.0)*x7337*x7340))+((x7332*x7338)));
evalcond[2]=(cj0+(((-1.0)*r12*x7340))+((x7331*x7335))+(((-1.0)*x7336*x7341)));
evalcond[3]=((((-1.0)*x7334*x7341))+(((-1.0)*r02*x7340))+((x7331*x7339))+(((-1.0)*x7333)));
evalcond[4]=(((x7332*x7334))+(((-1.0)*r02*x7341))+(((-1.0)*cj0))+(((-1.0)*x7339*x7340)));
evalcond[5]=((((-1.0)*r12*x7341))+((x7332*x7336))+(((-1.0)*x7333))+(((-1.0)*x7335*x7340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7342=IKsin(j0);
IkReal x7343=IKcos(j0);
IkReal x7344=((1.0)*cj5);
IkReal x7345=((0.08535)*sj5);
IkReal x7346=((0.08535)*cj5);
IkReal x7347=((1.0)*sj5);
evalcond[0]=(x7343+(((-1.0)*r00*x7347))+(((-1.0)*r01*x7344)));
evalcond[1]=(x7342+(((-1.0)*r10*x7347))+(((-1.0)*r11*x7344)));
evalcond[2]=((((-1.0)*r00*x7345))+(((-1.0)*r01*x7346))+(((-0.11235)*x7342))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r10*x7345))+(((0.11235)*x7343))+(((-1.0)*r11*x7346))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7348=((1.0)*sj5);
IkReal x7349=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7348)));
j4eval[0]=x7349;
j4eval[1]=IKsign(x7349);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7348))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7350=((1.0)*cj5);
IkReal x7351=((((-1.0)*r01*x7350))+(((-1.0)*r00*sj5)));
j4eval[0]=x7351;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7350)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7352=r21*r21;
IkReal x7353=cj5*cj5;
IkReal x7354=(r21*sj5);
IkReal x7355=(cj5*r20);
IkReal x7356=((((-1.0)*x7353*(r20*r20)))+((x7352*x7353))+(((-1.0)*(r22*r22)))+(((2.0)*x7354*x7355))+(((-1.0)*x7352)));
j4eval[0]=x7356;
j4eval[1]=((IKabs((x7354+(((-1.0)*x7355)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7357=r21*r21;
IkReal x7358=cj5*cj5;
IkReal x7359=(r21*sj5);
IkReal x7360=(cj5*r20);
CheckValue<IkReal> x7361 = IKatan2WithCheck(IkReal(r22),IkReal((x7359+(((-1.0)*x7360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7361.valid){
continue;
}
CheckValue<IkReal> x7362=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x7359*x7360))+(((-1.0)*x7358*(r20*r20)))+(((-1.0)*x7357))+((x7357*x7358)))),-1);
if(!x7362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7361.value)+(((1.5707963267949)*(x7362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7363=IKsin(j4);
IkReal x7364=IKcos(j4);
IkReal x7365=(r11*sj5);
IkReal x7366=(r21*sj5);
IkReal x7367=(cj5*r00);
IkReal x7368=(cj5*r20);
IkReal x7369=(r01*sj5);
IkReal x7370=(cj5*r10);
IkReal x7371=((1.0)*x7364);
IkReal x7372=((1.0)*x7363);
evalcond[0]=(((x7363*x7366))+(((-1.0)*r22*x7371))+(((-1.0)*x7368*x7372)));
evalcond[1]=(((x7364*x7367))+(((-1.0)*r02*x7372))+(((-1.0)*x7369*x7371)));
evalcond[2]=(((x7364*x7370))+(((-1.0)*r12*x7372))+(((-1.0)*x7365*x7371)));
evalcond[3]=(cj0+((x7363*x7365))+(((-1.0)*r12*x7371))+(((-1.0)*x7370*x7372)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7372))+((x7364*x7368))+(((-1.0)*x7366*x7371)));
evalcond[5]=((((-1.0)*sj0))+((x7363*x7369))+(((-1.0)*r02*x7371))+(((-1.0)*x7367*x7372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7373=((1.0)*cj5);
CheckValue<IkReal> x7374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7373))+(((-1.0)*r00*sj5)))),-1);
if(!x7374.valid){
continue;
}
CheckValue<IkReal> x7375 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7374.value)))+(x7375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7376=IKsin(j4);
IkReal x7377=IKcos(j4);
IkReal x7378=(r11*sj5);
IkReal x7379=(r21*sj5);
IkReal x7380=(cj5*r00);
IkReal x7381=(cj5*r20);
IkReal x7382=(r01*sj5);
IkReal x7383=(cj5*r10);
IkReal x7384=((1.0)*x7377);
IkReal x7385=((1.0)*x7376);
evalcond[0]=((((-1.0)*r22*x7384))+(((-1.0)*x7381*x7385))+((x7376*x7379)));
evalcond[1]=((((-1.0)*r02*x7385))+((x7377*x7380))+(((-1.0)*x7382*x7384)));
evalcond[2]=((((-1.0)*x7378*x7384))+(((-1.0)*r12*x7385))+((x7377*x7383)));
evalcond[3]=(cj0+((x7376*x7378))+(((-1.0)*x7383*x7385))+(((-1.0)*r12*x7384)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7385))+(((-1.0)*x7379*x7384))+((x7377*x7381)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7384))+(((-1.0)*x7380*x7385))+((x7376*x7382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7386=((1.0)*sj5);
CheckValue<IkReal> x7387=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7386)))),-1);
if(!x7387.valid){
continue;
}
CheckValue<IkReal> x7388 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7386))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7387.value)))+(x7388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7389=IKsin(j4);
IkReal x7390=IKcos(j4);
IkReal x7391=(r11*sj5);
IkReal x7392=(r21*sj5);
IkReal x7393=(cj5*r00);
IkReal x7394=(cj5*r20);
IkReal x7395=(r01*sj5);
IkReal x7396=(cj5*r10);
IkReal x7397=((1.0)*x7390);
IkReal x7398=((1.0)*x7389);
evalcond[0]=(((x7389*x7392))+(((-1.0)*r22*x7397))+(((-1.0)*x7394*x7398)));
evalcond[1]=((((-1.0)*r02*x7398))+(((-1.0)*x7395*x7397))+((x7390*x7393)));
evalcond[2]=((((-1.0)*r12*x7398))+((x7390*x7396))+(((-1.0)*x7391*x7397)));
evalcond[3]=(((x7389*x7391))+(((-1.0)*r12*x7397))+cj0+(((-1.0)*x7396*x7398)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7398))+(((-1.0)*x7392*x7397))+((x7390*x7394)));
evalcond[5]=(((x7389*x7395))+(((-1.0)*sj0))+(((-1.0)*x7393*x7398))+(((-1.0)*r02*x7397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7399=IKcos(j0);
IkReal x7400=IKsin(j0);
evalcond[0]=((((-0.11235)*x7400))+(((0.21325)*x7399))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x7399))+(((-1.0)*py))+(((0.21325)*x7400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7401=((1.0)*cj5);
IkReal x7402=((((-1.0)*r01*x7401))+(((-1.0)*r00*sj5)));
j4eval[0]=x7402;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7401)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7403=((1.0)*cj5);
IkReal x7404=((((-1.0)*r11*x7403))+(((-1.0)*r10*sj5)));
j4eval[0]=x7404;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7403))))));
j4eval[2]=IKsign(x7404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7405=cj5*cj5;
IkReal x7406=((1.0)*sj5);
IkReal x7407=(cj5*r20);
IkReal x7408=(r11*r21);
IkReal x7409=((((-1.0)*r11*x7406*x7407))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7406))+(((-1.0)*x7405*x7408))+x7408+((r10*r20*x7405)));
j4eval[0]=x7409;
j4eval[1]=IKsign(x7409);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7406))+((cj0*x7407)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7410=cj5*cj5;
IkReal x7411=((1.0)*sj5);
IkReal x7412=(cj5*r20);
IkReal x7413=(r11*r21);
CheckValue<IkReal> x7414 = IKatan2WithCheck(IkReal((((cj0*x7412))+(((-1.0)*cj0*r21*x7411)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7414.valid){
continue;
}
CheckValue<IkReal> x7415=IKPowWithIntegerCheck(IKsign((((r10*r20*x7410))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7411))+x7413+(((-1.0)*x7410*x7413))+(((-1.0)*r11*x7411*x7412)))),-1);
if(!x7415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7414.value)+(((1.5707963267949)*(x7415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7416=IKsin(j4);
IkReal x7417=IKcos(j4);
IkReal x7418=((1.0)*sj0);
IkReal x7419=(cj5*r00);
IkReal x7420=(r11*sj5);
IkReal x7421=(cj5*r10);
IkReal x7422=(r21*sj5);
IkReal x7423=(cj5*r20);
IkReal x7424=(r01*sj5);
IkReal x7425=((1.0)*x7417);
IkReal x7426=((1.0)*x7416);
evalcond[0]=((((-1.0)*r22*x7425))+(((-1.0)*x7423*x7426))+((x7416*x7422)));
evalcond[1]=((((-1.0)*x7422*x7425))+(((-1.0)*r22*x7426))+((x7417*x7423)));
evalcond[2]=((((-1.0)*x7421*x7426))+cj0+(((-1.0)*r12*x7425))+((x7416*x7420)));
evalcond[3]=((((-1.0)*r02*x7425))+(((-1.0)*x7418))+(((-1.0)*x7419*x7426))+((x7416*x7424)));
evalcond[4]=((((-1.0)*r02*x7426))+(((-1.0)*x7424*x7425))+((x7417*x7419))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7426))+(((-1.0)*x7418))+((x7417*x7421))+(((-1.0)*x7420*x7425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7427=((1.0)*cj5);
CheckValue<IkReal> x7428 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7427))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7428.valid){
continue;
}
CheckValue<IkReal> x7429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7427)))),-1);
if(!x7429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7428.value)+(((1.5707963267949)*(x7429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7430=IKsin(j4);
IkReal x7431=IKcos(j4);
IkReal x7432=((1.0)*sj0);
IkReal x7433=(cj5*r00);
IkReal x7434=(r11*sj5);
IkReal x7435=(cj5*r10);
IkReal x7436=(r21*sj5);
IkReal x7437=(cj5*r20);
IkReal x7438=(r01*sj5);
IkReal x7439=((1.0)*x7431);
IkReal x7440=((1.0)*x7430);
evalcond[0]=((((-1.0)*x7437*x7440))+(((-1.0)*r22*x7439))+((x7430*x7436)));
evalcond[1]=(((x7431*x7437))+(((-1.0)*x7436*x7439))+(((-1.0)*r22*x7440)));
evalcond[2]=((((-1.0)*x7435*x7440))+cj0+(((-1.0)*r12*x7439))+((x7430*x7434)));
evalcond[3]=((((-1.0)*r02*x7439))+(((-1.0)*x7433*x7440))+(((-1.0)*x7432))+((x7430*x7438)));
evalcond[4]=((((-1.0)*x7438*x7439))+(((-1.0)*r02*x7440))+((x7431*x7433))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7434*x7439))+(((-1.0)*x7432))+((x7431*x7435))+(((-1.0)*r12*x7440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7441=((1.0)*cj5);
CheckValue<IkReal> x7442 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7442.valid){
continue;
}
CheckValue<IkReal> x7443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7441))+(((-1.0)*r00*sj5)))),-1);
if(!x7443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7442.value)+(((1.5707963267949)*(x7443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7444=IKsin(j4);
IkReal x7445=IKcos(j4);
IkReal x7446=((1.0)*sj0);
IkReal x7447=(cj5*r00);
IkReal x7448=(r11*sj5);
IkReal x7449=(cj5*r10);
IkReal x7450=(r21*sj5);
IkReal x7451=(cj5*r20);
IkReal x7452=(r01*sj5);
IkReal x7453=((1.0)*x7445);
IkReal x7454=((1.0)*x7444);
evalcond[0]=(((x7444*x7450))+(((-1.0)*x7451*x7454))+(((-1.0)*r22*x7453)));
evalcond[1]=((((-1.0)*x7450*x7453))+((x7445*x7451))+(((-1.0)*r22*x7454)));
evalcond[2]=(cj0+((x7444*x7448))+(((-1.0)*x7449*x7454))+(((-1.0)*r12*x7453)));
evalcond[3]=((((-1.0)*x7446))+((x7444*x7452))+(((-1.0)*x7447*x7454))+(((-1.0)*r02*x7453)));
evalcond[4]=(((x7445*x7447))+(((-1.0)*x7452*x7453))+(((-1.0)*r02*x7454))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7446))+((x7445*x7449))+(((-1.0)*r12*x7454))+(((-1.0)*x7448*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7455=((1.0)*sj5);
IkReal x7456=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7455))+(((-1.0)*r11*x7456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7455))+(((-1.0)*r01*x7456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7455))+(((-1.0)*r11*x7456))))+IKsqr(((((-1.0)*r00*x7455))+(((-1.0)*r01*x7456))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7455))+(((-1.0)*r11*x7456))), ((((-1.0)*r00*x7455))+(((-1.0)*r01*x7456))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7457=IKsin(j0);
IkReal x7458=IKcos(j0);
IkReal x7459=((1.0)*cj5);
IkReal x7460=((0.08535)*sj5);
IkReal x7461=((0.08535)*cj5);
IkReal x7462=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7458))+(((-1.0)*r01*x7459))+(((-1.0)*r00*x7462)));
evalcond[1]=((((-1.0)*x7457))+(((-1.0)*r10*x7462))+(((-1.0)*r11*x7459)));
evalcond[2]=((((-0.11235)*x7457))+(((-1.0)*px))+(((-1.0)*r00*x7460))+(((-1.0)*r01*x7461)));
evalcond[3]=((((0.11235)*x7458))+(((-1.0)*r10*x7460))+(((-1.0)*r11*x7461))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7463=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7463;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7464=((1.0)*cj5);
IkReal x7465=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7464)));
j4eval[0]=x7465;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7464)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7466=cj5*cj5;
IkReal x7467=r21*r21;
IkReal x7468=(r21*sj5);
IkReal x7469=(cj5*r20);
IkReal x7470=((r22*r22)+((x7466*(r20*r20)))+(((-1.0)*x7466*x7467))+x7467+(((-2.0)*x7468*x7469)));
j4eval[0]=x7470;
j4eval[1]=IKsign(x7470);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7469))+x7468))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7471=cj5*cj5;
IkReal x7472=r21*r21;
IkReal x7473=(r21*sj5);
IkReal x7474=(cj5*r20);
CheckValue<IkReal> x7475=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7473*x7474))+((x7471*(r20*r20)))+(((-1.0)*x7471*x7472))+x7472)),-1);
if(!x7475.valid){
continue;
}
CheckValue<IkReal> x7476 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7474))+x7473)),IKFAST_ATAN2_MAGTHRESH);
if(!x7476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7475.value)))+(x7476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7477=IKsin(j4);
IkReal x7478=IKcos(j4);
IkReal x7479=(r11*sj5);
IkReal x7480=(r21*sj5);
IkReal x7481=(cj5*r00);
IkReal x7482=(cj5*r20);
IkReal x7483=(r01*sj5);
IkReal x7484=(cj5*r10);
IkReal x7485=((1.0)*x7478);
IkReal x7486=((1.0)*x7477);
evalcond[0]=((((-1.0)*x7482*x7486))+((x7477*x7480))+(((-1.0)*r22*x7485)));
evalcond[1]=(((x7478*x7481))+(((-1.0)*r02*x7486))+(((-1.0)*x7483*x7485)));
evalcond[2]=(((x7478*x7484))+(((-1.0)*x7479*x7485))+(((-1.0)*r12*x7486)));
evalcond[3]=(cj0+(((-1.0)*r12*x7485))+(((-1.0)*x7484*x7486))+((x7477*x7479)));
evalcond[4]=((1.0)+((x7478*x7482))+(((-1.0)*x7480*x7485))+(((-1.0)*r22*x7486)));
evalcond[5]=((((-1.0)*sj0))+((x7477*x7483))+(((-1.0)*x7481*x7486))+(((-1.0)*r02*x7485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7487=((1.0)*cj5);
CheckValue<IkReal> x7488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7487)))),-1);
if(!x7488.valid){
continue;
}
CheckValue<IkReal> x7489 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7488.value)))+(x7489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7490=IKsin(j4);
IkReal x7491=IKcos(j4);
IkReal x7492=(r11*sj5);
IkReal x7493=(r21*sj5);
IkReal x7494=(cj5*r00);
IkReal x7495=(cj5*r20);
IkReal x7496=(r01*sj5);
IkReal x7497=(cj5*r10);
IkReal x7498=((1.0)*x7491);
IkReal x7499=((1.0)*x7490);
evalcond[0]=(((x7490*x7493))+(((-1.0)*x7495*x7499))+(((-1.0)*r22*x7498)));
evalcond[1]=(((x7491*x7494))+(((-1.0)*x7496*x7498))+(((-1.0)*r02*x7499)));
evalcond[2]=(((x7491*x7497))+(((-1.0)*r12*x7499))+(((-1.0)*x7492*x7498)));
evalcond[3]=(cj0+((x7490*x7492))+(((-1.0)*x7497*x7499))+(((-1.0)*r12*x7498)));
evalcond[4]=((1.0)+((x7491*x7495))+(((-1.0)*r22*x7499))+(((-1.0)*x7493*x7498)));
evalcond[5]=((((-1.0)*sj0))+((x7490*x7496))+(((-1.0)*x7494*x7499))+(((-1.0)*r02*x7498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7500 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7500.valid){
continue;
}
CheckValue<IkReal> x7501=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7500.value)+(((1.5707963267949)*(x7501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7502=IKsin(j4);
IkReal x7503=IKcos(j4);
IkReal x7504=(r11*sj5);
IkReal x7505=(r21*sj5);
IkReal x7506=(cj5*r00);
IkReal x7507=(cj5*r20);
IkReal x7508=(r01*sj5);
IkReal x7509=(cj5*r10);
IkReal x7510=((1.0)*x7503);
IkReal x7511=((1.0)*x7502);
evalcond[0]=((((-1.0)*x7507*x7511))+((x7502*x7505))+(((-1.0)*r22*x7510)));
evalcond[1]=(((x7503*x7506))+(((-1.0)*x7508*x7510))+(((-1.0)*r02*x7511)));
evalcond[2]=(((x7503*x7509))+(((-1.0)*r12*x7511))+(((-1.0)*x7504*x7510)));
evalcond[3]=(cj0+(((-1.0)*x7509*x7511))+((x7502*x7504))+(((-1.0)*r12*x7510)));
evalcond[4]=((1.0)+((x7503*x7507))+(((-1.0)*x7505*x7510))+(((-1.0)*r22*x7511)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7510))+(((-1.0)*x7506*x7511))+((x7502*x7508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7512=IKcos(j0);
IkReal x7513=IKsin(j0);
evalcond[0]=((((-0.11235)*x7513))+(((-0.21325)*x7512))+(((-1.0)*px)));
evalcond[1]=((((-0.21325)*x7513))+(((-1.0)*py))+(((0.11235)*x7512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7514=((1.0)*cj5);
IkReal x7515=((((-1.0)*r01*x7514))+(((-1.0)*r00*sj5)));
j4eval[0]=x7515;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7514))))));
j4eval[2]=IKsign(x7515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7516=cj5*cj5;
IkReal x7517=((1.0)*r21);
IkReal x7518=(cj5*sj5);
IkReal x7519=((1.0)*r20);
IkReal x7520=(((r00*r20*x7516))+((r01*r21))+(((-1.0)*r00*x7517*x7518))+((r02*r22))+(((-1.0)*r01*x7516*x7517))+(((-1.0)*r01*x7518*x7519)));
j4eval[0]=x7520;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7519)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7521=cj5*cj5;
IkReal x7522=(r21*sj5);
IkReal x7523=(r11*r21);
IkReal x7524=((1.0)*cj5*r20);
IkReal x7525=((((-1.0)*x7521*x7523))+((r12*r22))+(((-1.0)*cj5*r10*x7522))+(((-1.0)*r11*sj5*x7524))+((r10*r20*x7521))+x7523);
j4eval[0]=x7525;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7522))+(((-1.0)*sj0*x7524))))));
j4eval[2]=IKsign(x7525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7526=cj5*cj5;
IkReal x7527=(r21*sj5);
IkReal x7528=(r11*r21);
IkReal x7529=((1.0)*cj5*r20);
CheckValue<IkReal> x7530 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7527))+(((-1.0)*sj0*x7529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7530.valid){
continue;
}
CheckValue<IkReal> x7531=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7526*x7528))+((r12*r22))+(((-1.0)*cj5*r10*x7527))+(((-1.0)*r11*sj5*x7529))+((r10*r20*x7526))+x7528)),-1);
if(!x7531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7530.value)+(((1.5707963267949)*(x7531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7532=IKsin(j4);
IkReal x7533=IKcos(j4);
IkReal x7534=(r11*sj5);
IkReal x7535=(cj5*r00);
IkReal x7536=(cj5*r10);
IkReal x7537=(r21*sj5);
IkReal x7538=(cj5*r20);
IkReal x7539=(r01*sj5);
IkReal x7540=((1.0)*x7533);
IkReal x7541=((1.0)*x7532);
evalcond[0]=((((-1.0)*x7538*x7541))+(((-1.0)*r22*x7540))+((x7532*x7537)));
evalcond[1]=(((x7533*x7538))+(((-1.0)*x7537*x7540))+(((-1.0)*r22*x7541)));
evalcond[2]=(cj0+(((-1.0)*r12*x7540))+((x7532*x7534))+(((-1.0)*x7536*x7541)));
evalcond[3]=(((x7533*x7535))+cj0+(((-1.0)*x7539*x7540))+(((-1.0)*r02*x7541)));
evalcond[4]=(sj0+((x7533*x7536))+(((-1.0)*x7534*x7540))+(((-1.0)*r12*x7541)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7535*x7541))+((x7532*x7539))+(((-1.0)*r02*x7540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7542=cj5*cj5;
IkReal x7543=((1.0)*r21);
IkReal x7544=(cj5*sj5);
IkReal x7545=((1.0)*r20);
CheckValue<IkReal> x7546 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7546.valid){
continue;
}
CheckValue<IkReal> x7547=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7544*x7545))+((r00*r20*x7542))+(((-1.0)*r00*x7543*x7544))+((r01*r21))+(((-1.0)*r01*x7542*x7543))+((r02*r22)))),-1);
if(!x7547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7546.value)+(((1.5707963267949)*(x7547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7548=IKsin(j4);
IkReal x7549=IKcos(j4);
IkReal x7550=(r11*sj5);
IkReal x7551=(cj5*r00);
IkReal x7552=(cj5*r10);
IkReal x7553=(r21*sj5);
IkReal x7554=(cj5*r20);
IkReal x7555=(r01*sj5);
IkReal x7556=((1.0)*x7549);
IkReal x7557=((1.0)*x7548);
evalcond[0]=(((x7548*x7553))+(((-1.0)*x7554*x7557))+(((-1.0)*r22*x7556)));
evalcond[1]=(((x7549*x7554))+(((-1.0)*r22*x7557))+(((-1.0)*x7553*x7556)));
evalcond[2]=(((x7548*x7550))+cj0+(((-1.0)*r12*x7556))+(((-1.0)*x7552*x7557)));
evalcond[3]=((((-1.0)*x7555*x7556))+cj0+((x7549*x7551))+(((-1.0)*r02*x7557)));
evalcond[4]=(sj0+(((-1.0)*x7550*x7556))+((x7549*x7552))+(((-1.0)*r12*x7557)));
evalcond[5]=(((x7548*x7555))+(((-1.0)*sj0))+(((-1.0)*x7551*x7557))+(((-1.0)*r02*x7556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7558=((1.0)*cj5);
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
CheckValue<IkReal> x7560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7558)))),-1);
if(!x7560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7559.value)+(((1.5707963267949)*(x7560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7561=IKsin(j4);
IkReal x7562=IKcos(j4);
IkReal x7563=(r11*sj5);
IkReal x7564=(cj5*r00);
IkReal x7565=(cj5*r10);
IkReal x7566=(r21*sj5);
IkReal x7567=(cj5*r20);
IkReal x7568=(r01*sj5);
IkReal x7569=((1.0)*x7562);
IkReal x7570=((1.0)*x7561);
evalcond[0]=((((-1.0)*x7567*x7570))+(((-1.0)*r22*x7569))+((x7561*x7566)));
evalcond[1]=((((-1.0)*x7566*x7569))+((x7562*x7567))+(((-1.0)*r22*x7570)));
evalcond[2]=(cj0+(((-1.0)*x7565*x7570))+(((-1.0)*r12*x7569))+((x7561*x7563)));
evalcond[3]=((((-1.0)*x7568*x7569))+cj0+((x7562*x7564))+(((-1.0)*r02*x7570)));
evalcond[4]=(sj0+(((-1.0)*x7563*x7569))+((x7562*x7565))+(((-1.0)*r12*x7570)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7569))+((x7561*x7568))+(((-1.0)*x7564*x7570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7571=cj1*cj1;
IkReal x7572=(cj2*sj1);
IkReal x7573=(cj1*sj1);
IkReal x7574=(cj1*sj2);
IkReal x7575=((20000.0)*py);
IkReal x7576=(r00*sj5);
IkReal x7577=(cj5*r01);
IkReal x7578=((1707.0)*cj5*r11);
IkReal x7579=(sj2*x7571);
IkReal x7580=((1707.0)*r10*sj5);
CheckValue<IkReal> x7581=IKPowWithIntegerCheck(((((-4873.0)*x7579))+(((4265.0)*x7573))+(((4265.0)*cj2*sj2))+(((-4873.0)*cj1*x7572))+(((-8530.0)*cj1*cj2*x7572))+(((-8530.0)*cj2*x7579))),-1);
if(!x7581.valid){
continue;
}
CheckValue<IkReal> x7582=IKPowWithIntegerCheck(((((-1.0)*x7572))+(((-1.0)*x7574))),-1);
if(!x7582.valid){
continue;
}
if( IKabs(((x7581.value)*(((((-1.0)*x7572*x7580))+(((-1.0)*x7574*x7578))+(((-1.0)*x7574*x7575))+(((-1.0)*x7574*x7580))+(((-1.0)*x7572*x7578))+(((-1.0)*x7572*x7575))+(((-2247.0)*x7577))+(((-2247.0)*x7576)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7582.value)*((x7577+x7576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7581.value)*(((((-1.0)*x7572*x7580))+(((-1.0)*x7574*x7578))+(((-1.0)*x7574*x7575))+(((-1.0)*x7574*x7580))+(((-1.0)*x7572*x7578))+(((-1.0)*x7572*x7575))+(((-2247.0)*x7577))+(((-2247.0)*x7576))))))+IKsqr(((x7582.value)*((x7577+x7576))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7581.value)*(((((-1.0)*x7572*x7580))+(((-1.0)*x7574*x7578))+(((-1.0)*x7574*x7575))+(((-1.0)*x7574*x7580))+(((-1.0)*x7572*x7578))+(((-1.0)*x7572*x7575))+(((-2247.0)*x7577))+(((-2247.0)*x7576))))), ((x7582.value)*((x7577+x7576))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7583=IKcos(j0);
IkReal x7584=IKsin(j0);
IkReal x7585=((0.21325)*cj2);
IkReal x7586=((1.0)*sj2);
IkReal x7587=(r00*sj5);
IkReal x7588=((1.0)*cj5);
IkReal x7589=(r10*sj5);
IkReal x7590=((0.08535)*cj5);
IkReal x7591=(cj1*x7584);
IkReal x7592=(cj1*x7583);
IkReal x7593=((0.21325)*sj1*sj2);
IkReal x7594=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*r01*x7588))+(((-1.0)*x7587))+(((-1.0)*x7586*x7592))+(((-1.0)*x7583*x7594)));
evalcond[1]=((((-1.0)*x7589))+(((-1.0)*x7586*x7591))+(((-1.0)*r11*x7588))+(((-1.0)*x7584*x7594)));
evalcond[2]=((((-0.11235)*x7584))+((x7585*x7592))+(((-1.0)*px))+(((-0.08535)*x7587))+(((-1.0)*x7583*x7593))+(((0.24365)*x7592))+(((-1.0)*r01*x7590)));
evalcond[3]=(((x7585*x7591))+(((-1.0)*r11*x7590))+(((-1.0)*py))+(((-0.08535)*x7589))+(((0.24365)*x7591))+(((0.11235)*x7583))+(((-1.0)*x7584*x7593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7595=((1.0)*cj5);
IkReal x7596=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7595)));
j4eval[0]=x7596;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7595)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7597=((1.0)*cj5);
IkReal x7598=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7597)));
j4eval[0]=x7598;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7597))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7599=((1.0)*sj0);
IkReal x7600=((1.0)*cj0);
IkReal x7601=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7601;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7600))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7599)))))+(IKabs(((((-1.0)*r12*x7599))+(((-1.0)*r02*x7600))))));
j4eval[2]=IKsign(x7601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7602=((-1.0)*r20);
IkReal x7604 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7604)==0){
continue;
}
IkReal x7603=pow(x7604,-0.5);
CheckValue<IkReal> x7605 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7602),IKFAST_ATAN2_MAGTHRESH);
if(!x7605.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7605.value));
IkReal gconst133=(r21*x7603);
IkReal gconst134=(x7602*x7603);
CheckValue<IkReal> x7606 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7606.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7606.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7607=((-1.0)*r20);
IkReal x7608=x7603;
CheckValue<IkReal> x7610 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7607),IKFAST_ATAN2_MAGTHRESH);
if(!x7610.valid){
continue;
}
IkReal x7609=((-1.0)*(x7610.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7609;
IkReal gconst132=x7609;
IkReal gconst133=(r21*x7608);
IkReal gconst134=(x7607*x7608);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7611=((-1.0)*r20);
IkReal x7612=x7603;
CheckValue<IkReal> x7614 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7611),IKFAST_ATAN2_MAGTHRESH);
if(!x7614.valid){
continue;
}
IkReal x7613=((-1.0)*(x7614.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7613;
IkReal gconst132=x7613;
IkReal gconst133=(r21*x7612);
IkReal gconst134=(x7611*x7612);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7615=((-1.0)*r20);
IkReal x7616=x7603;
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7615),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
IkReal x7617=((-1.0)*(x7618.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7617;
IkReal gconst132=x7617;
IkReal gconst133=(r21*x7616);
IkReal gconst134=(x7615*x7616);
IkReal x7619=r22*r22;
CheckValue<IkReal> x7622=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7619))),-1);
if(!x7622.valid){
continue;
}
IkReal x7620=x7622.value;
IkReal x7621=((((2.0)*x7620*(r20*r20)*(r21*r21)))+((x7620*(r20*r20*r20*r20)))+((x7620*(r21*r21*r21*r21)))+x7619);
j4eval[0]=x7621;
j4eval[1]=IKsign(x7621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7623=(gconst133*r21);
IkReal x7624=(cj1*sj2);
IkReal x7625=(gconst134*r20);
IkReal x7626=(cj2*sj1);
CheckValue<IkReal> x7627 = IKatan2WithCheck(IkReal((((r22*x7624))+((r22*x7626)))),IkReal(((((-1.0)*x7625*x7626))+(((-1.0)*x7624*x7625))+((x7623*x7626))+((x7623*x7624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7627.valid){
continue;
}
CheckValue<IkReal> x7628=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7625*x7625)+(x7623*x7623)+(((-2.0)*x7623*x7625)))),-1);
if(!x7628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7627.value)+(((1.5707963267949)*(x7628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7629=IKsin(j4);
IkReal x7630=IKcos(j4);
IkReal x7631=(sj1*sj2);
IkReal x7632=(gconst133*r11);
IkReal x7633=(gconst133*r21);
IkReal x7634=(gconst133*r01);
IkReal x7635=((1.0)*x7630);
IkReal x7636=(gconst134*x7630);
IkReal x7637=((1.0)*x7629);
IkReal x7638=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7635))+((x7629*x7633))+(((-1.0)*gconst134*r20*x7637)));
evalcond[1]=((((-1.0)*gconst134*r10*x7637))+cj0+((x7629*x7632))+(((-1.0)*r12*x7635)));
evalcond[2]=((((-1.0)*sj0))+((x7629*x7634))+(((-1.0)*r02*x7635))+(((-1.0)*gconst134*r00*x7637)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7637))+((cj1*sj2))+(((-1.0)*x7633*x7635))+((r20*x7636)));
evalcond[4]=((((-1.0)*cj0*x7638))+((r00*x7636))+(((-1.0)*x7634*x7635))+(((-1.0)*r02*x7637))+((cj0*x7631)));
evalcond[5]=(((r10*x7636))+(((-1.0)*x7632*x7635))+((sj0*x7631))+(((-1.0)*r12*x7637))+(((-1.0)*sj0*x7638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7639=((1.0)*gconst134);
CheckValue<IkReal> x7640 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x7639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7640.valid){
continue;
}
CheckValue<IkReal> x7641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7639)))),-1);
if(!x7641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7640.value)+(((1.5707963267949)*(x7641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7642=IKsin(j4);
IkReal x7643=IKcos(j4);
IkReal x7644=(sj1*sj2);
IkReal x7645=(gconst133*r11);
IkReal x7646=(gconst133*r21);
IkReal x7647=(gconst133*r01);
IkReal x7648=((1.0)*x7643);
IkReal x7649=(gconst134*x7643);
IkReal x7650=((1.0)*x7642);
IkReal x7651=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7648))+((x7642*x7646))+(((-1.0)*gconst134*r20*x7650)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7650))+((x7642*x7645))+(((-1.0)*r12*x7648)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7648))+(((-1.0)*gconst134*r00*x7650))+((x7642*x7647)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7650))+((cj1*sj2))+((r20*x7649))+(((-1.0)*x7646*x7648)));
evalcond[4]=((((-1.0)*r02*x7650))+(((-1.0)*cj0*x7651))+((r00*x7649))+((cj0*x7644))+(((-1.0)*x7647*x7648)));
evalcond[5]=(((sj0*x7644))+(((-1.0)*sj0*x7651))+(((-1.0)*x7645*x7648))+((r10*x7649))+(((-1.0)*r12*x7650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7652=((1.0)*gconst134);
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7652))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
CheckValue<IkReal> x7654=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7652)))),-1);
if(!x7654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7653.value)+(((1.5707963267949)*(x7654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7655=IKsin(j4);
IkReal x7656=IKcos(j4);
IkReal x7657=(sj1*sj2);
IkReal x7658=(gconst133*r11);
IkReal x7659=(gconst133*r21);
IkReal x7660=(gconst133*r01);
IkReal x7661=((1.0)*x7656);
IkReal x7662=(gconst134*x7656);
IkReal x7663=((1.0)*x7655);
IkReal x7664=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7663))+(((-1.0)*r22*x7661))+((x7655*x7659)));
evalcond[1]=((((-1.0)*gconst134*r10*x7663))+(((-1.0)*r12*x7661))+cj0+((x7655*x7658)));
evalcond[2]=((((-1.0)*sj0))+((x7655*x7660))+(((-1.0)*r02*x7661))+(((-1.0)*gconst134*r00*x7663)));
evalcond[3]=(((cj2*sj1))+((r20*x7662))+((cj1*sj2))+(((-1.0)*r22*x7663))+(((-1.0)*x7659*x7661)));
evalcond[4]=((((-1.0)*cj0*x7664))+((r00*x7662))+(((-1.0)*r02*x7663))+((cj0*x7657))+(((-1.0)*x7660*x7661)));
evalcond[5]=((((-1.0)*r12*x7663))+((r10*x7662))+(((-1.0)*x7658*x7661))+(((-1.0)*sj0*x7664))+((sj0*x7657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7665=((-1.0)*r21);
IkReal x7667 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7667)==0){
continue;
}
IkReal x7666=pow(x7667,-0.5);
CheckValue<IkReal> x7668 = IKatan2WithCheck(IkReal(x7665),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7668.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7668.value))));
IkReal gconst136=(x7665*x7666);
IkReal gconst137=((1.0)*r20*x7666);
CheckValue<IkReal> x7669 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7670=((-1.0)*r21);
CheckValue<IkReal> x7673 = IKatan2WithCheck(IkReal(x7670),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7673.valid){
continue;
}
IkReal x7671=((1.0)*(x7673.value));
IkReal x7672=x7666;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7671)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7671)));
IkReal gconst136=(x7670*x7672);
IkReal gconst137=((1.0)*r20*x7672);
IkReal x7674=r22*r22;
IkReal x7675=((1.0)*x7674);
CheckValue<IkReal> x7679=IKPowWithIntegerCheck(((-1.0)+x7674),-1);
if(!x7679.valid){
continue;
}
IkReal x7676=x7679.value;
if((((1.0)+(((-1.0)*x7675)))) < -0.00001)
continue;
IkReal x7677=IKsqrt(((1.0)+(((-1.0)*x7675))));
IkReal x7678=(cj0*x7676*x7677);
j4eval[0]=((IKabs(((((-1.0)*x7675*x7678))+x7678)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7680=((-1.0)*r21);
CheckValue<IkReal> x7683 = IKatan2WithCheck(IkReal(x7680),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7683.valid){
continue;
}
IkReal x7681=((1.0)*(x7683.value));
IkReal x7682=x7666;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7681)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7681)));
IkReal gconst136=(x7680*x7682);
IkReal gconst137=((1.0)*r20*x7682);
IkReal x7684=r22*r22;
IkReal x7685=((1.0)*x7684);
CheckValue<IkReal> x7689=IKPowWithIntegerCheck(((-1.0)+x7684),-1);
if(!x7689.valid){
continue;
}
IkReal x7686=x7689.value;
if((((1.0)+(((-1.0)*x7685)))) < -0.00001)
continue;
IkReal x7687=IKsqrt(((1.0)+(((-1.0)*x7685))));
IkReal x7688=(sj0*x7686*x7687);
j4eval[0]=((IKabs(((((-1.0)*x7685*x7688))+x7688)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7690=((-1.0)*r21);
CheckValue<IkReal> x7693 = IKatan2WithCheck(IkReal(x7690),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7693.valid){
continue;
}
IkReal x7691=((1.0)*(x7693.value));
IkReal x7692=x7666;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7691)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7691)));
IkReal gconst136=(x7690*x7692);
IkReal gconst137=((1.0)*r20*x7692);
IkReal x7694=r22*r22;
IkReal x7695=(r12*sj0);
IkReal x7696=(cj0*r02);
CheckValue<IkReal> x7700=IKPowWithIntegerCheck(((-1.0)+x7694),-1);
if(!x7700.valid){
continue;
}
IkReal x7697=x7700.value;
if((((1.0)+(((-1.0)*x7694)))) < -0.00001)
continue;
IkReal x7698=IKsqrt(((1.0)+(((-1.0)*x7694))));
IkReal x7699=(r22*x7697*x7698);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7695))+(((-1.0)*x7696)))))+(IKabs((((x7695*x7699))+((x7696*x7699))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7701=((1.0)*sj0);
IkReal x7702=((1.0)*cj0);
CheckValue<IkReal> x7703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7703.valid){
continue;
}
CheckValue<IkReal> x7704 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7701))+(((-1.0)*r02*x7702)))),IkReal(((((-1.0)*gconst136*r01*x7702))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7701))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7703.value)))+(x7704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7705=IKsin(j4);
IkReal x7706=IKcos(j4);
IkReal x7707=(gconst136*r01);
IkReal x7708=(gconst137*r10);
IkReal x7709=(sj1*sj2);
IkReal x7710=(gconst137*r20);
IkReal x7711=(gconst136*r11);
IkReal x7712=(gconst136*r21);
IkReal x7713=(gconst137*r00);
IkReal x7714=((1.0)*x7706);
IkReal x7715=((1.0)*cj1*cj2);
IkReal x7716=((1.0)*x7705);
evalcond[0]=(((x7705*x7712))+(((-1.0)*r22*x7714))+(((-1.0)*x7710*x7716)));
evalcond[1]=((((-1.0)*x7708*x7716))+((x7705*x7711))+cj0+(((-1.0)*r12*x7714)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7714))+(((-1.0)*x7713*x7716))+((x7705*x7707)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7716))+((cj1*sj2))+((x7706*x7710))+(((-1.0)*x7712*x7714)));
evalcond[4]=((((-1.0)*cj0*x7715))+(((-1.0)*x7707*x7714))+((cj0*x7709))+((x7706*x7713))+(((-1.0)*r02*x7716)));
evalcond[5]=((((-1.0)*x7711*x7714))+(((-1.0)*r12*x7716))+((sj0*x7709))+((x7706*x7708))+(((-1.0)*sj0*x7715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7717=((1.0)*gconst137);
CheckValue<IkReal> x7718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7717))+(((-1.0)*gconst136*r10)))),-1);
if(!x7718.valid){
continue;
}
CheckValue<IkReal> x7719 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7717))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7718.value)))+(x7719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7720=IKsin(j4);
IkReal x7721=IKcos(j4);
IkReal x7722=(gconst136*r01);
IkReal x7723=(gconst137*r10);
IkReal x7724=(sj1*sj2);
IkReal x7725=(gconst137*r20);
IkReal x7726=(gconst136*r11);
IkReal x7727=(gconst136*r21);
IkReal x7728=(gconst137*r00);
IkReal x7729=((1.0)*x7721);
IkReal x7730=((1.0)*cj1*cj2);
IkReal x7731=((1.0)*x7720);
evalcond[0]=(((x7720*x7727))+(((-1.0)*x7725*x7731))+(((-1.0)*r22*x7729)));
evalcond[1]=((((-1.0)*x7723*x7731))+cj0+((x7720*x7726))+(((-1.0)*r12*x7729)));
evalcond[2]=((((-1.0)*x7728*x7731))+(((-1.0)*sj0))+((x7720*x7722))+(((-1.0)*r02*x7729)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7731))+(((-1.0)*x7727*x7729))+((x7721*x7725)));
evalcond[4]=((((-1.0)*cj0*x7730))+((x7721*x7728))+((cj0*x7724))+(((-1.0)*r02*x7731))+(((-1.0)*x7722*x7729)));
evalcond[5]=(((sj0*x7724))+(((-1.0)*x7726*x7729))+(((-1.0)*r12*x7731))+((x7721*x7723))+(((-1.0)*sj0*x7730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7732=((1.0)*gconst137);
CheckValue<IkReal> x7733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7732))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7733.valid){
continue;
}
CheckValue<IkReal> x7734=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7732)))),-1);
if(!x7734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7733.value)+(((1.5707963267949)*(x7734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7735=IKsin(j4);
IkReal x7736=IKcos(j4);
IkReal x7737=(gconst136*r01);
IkReal x7738=(gconst137*r10);
IkReal x7739=(sj1*sj2);
IkReal x7740=(gconst137*r20);
IkReal x7741=(gconst136*r11);
IkReal x7742=(gconst136*r21);
IkReal x7743=(gconst137*r00);
IkReal x7744=((1.0)*x7736);
IkReal x7745=((1.0)*cj1*cj2);
IkReal x7746=((1.0)*x7735);
evalcond[0]=((((-1.0)*r22*x7744))+(((-1.0)*x7740*x7746))+((x7735*x7742)));
evalcond[1]=(cj0+(((-1.0)*r12*x7744))+(((-1.0)*x7738*x7746))+((x7735*x7741)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7744))+(((-1.0)*x7743*x7746))+((x7735*x7737)));
evalcond[3]=((((-1.0)*x7742*x7744))+((cj2*sj1))+(((-1.0)*r22*x7746))+((cj1*sj2))+((x7736*x7740)));
evalcond[4]=((((-1.0)*r02*x7746))+((cj0*x7739))+(((-1.0)*x7737*x7744))+(((-1.0)*cj0*x7745))+((x7736*x7743)));
evalcond[5]=((((-1.0)*x7741*x7744))+((x7736*x7738))+(((-1.0)*r12*x7746))+((sj0*x7739))+(((-1.0)*sj0*x7745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7747=((-1.0)*r10);
IkReal x7749 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7749)==0){
continue;
}
IkReal x7748=pow(x7749,-0.5);
CheckValue<IkReal> x7750 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7747),IKFAST_ATAN2_MAGTHRESH);
if(!x7750.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7750.value));
IkReal gconst139=(r11*x7748);
IkReal gconst140=(x7747*x7748);
CheckValue<IkReal> x7751 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7751.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7751.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7752=((-1.0)*r10);
IkReal x7753=x7748;
CheckValue<IkReal> x7755 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7752),IKFAST_ATAN2_MAGTHRESH);
if(!x7755.valid){
continue;
}
IkReal x7754=((-1.0)*(x7755.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7754;
IkReal gconst138=x7754;
IkReal gconst139=(r11*x7753);
IkReal gconst140=(x7752*x7753);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7756=((1.0)*sj0);
IkReal x7757=((1.0)*gconst139);
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7756)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7756))+(((-1.0)*cj0*r01*x7757))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
CheckValue<IkReal> x7759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7757)))),-1);
if(!x7759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7758.value)+(((1.5707963267949)*(x7759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7760=IKsin(j4);
IkReal x7761=IKcos(j4);
IkReal x7762=(gconst140*r00);
IkReal x7763=(sj1*sj2);
IkReal x7764=(gconst139*r11);
IkReal x7765=(gconst139*r01);
IkReal x7766=(gconst139*r21);
IkReal x7767=((1.0)*x7761);
IkReal x7768=((1.0)*x7760);
IkReal x7769=((1.0)*cj1*cj2);
IkReal x7770=(gconst140*x7761);
evalcond[0]=(((x7760*x7766))+(((-1.0)*r22*x7767))+(((-1.0)*gconst140*r20*x7768)));
evalcond[1]=(((x7760*x7764))+cj0+(((-1.0)*r12*x7767))+(((-1.0)*gconst140*r10*x7768)));
evalcond[2]=((((-1.0)*sj0))+((x7760*x7765))+(((-1.0)*r02*x7767))+(((-1.0)*x7762*x7768)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7766*x7767))+(((-1.0)*r22*x7768))+((cj1*sj2))+((r20*x7770)));
evalcond[4]=((((-1.0)*r02*x7768))+(((-1.0)*cj0*x7769))+((cj0*x7763))+((x7761*x7762))+(((-1.0)*x7765*x7767)));
evalcond[5]=((((-1.0)*x7764*x7767))+((sj0*x7763))+(((-1.0)*sj0*x7769))+(((-1.0)*r12*x7768))+((r10*x7770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7771=((1.0)*gconst140);
CheckValue<IkReal> x7772 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7772.valid){
continue;
}
CheckValue<IkReal> x7773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7771))+(((-1.0)*gconst139*r00)))),-1);
if(!x7773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7772.value)+(((1.5707963267949)*(x7773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7774=IKsin(j4);
IkReal x7775=IKcos(j4);
IkReal x7776=(gconst140*r00);
IkReal x7777=(sj1*sj2);
IkReal x7778=(gconst139*r11);
IkReal x7779=(gconst139*r01);
IkReal x7780=(gconst139*r21);
IkReal x7781=((1.0)*x7775);
IkReal x7782=((1.0)*x7774);
IkReal x7783=((1.0)*cj1*cj2);
IkReal x7784=(gconst140*x7775);
evalcond[0]=((((-1.0)*gconst140*r20*x7782))+((x7774*x7780))+(((-1.0)*r22*x7781)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x7782))+((x7774*x7778))+(((-1.0)*r12*x7781)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7781))+((x7774*x7779))+(((-1.0)*x7776*x7782)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7782))+((r20*x7784))+(((-1.0)*x7780*x7781)));
evalcond[4]=((((-1.0)*x7779*x7781))+((cj0*x7777))+(((-1.0)*r02*x7782))+((x7775*x7776))+(((-1.0)*cj0*x7783)));
evalcond[5]=(((sj0*x7777))+((r10*x7784))+(((-1.0)*sj0*x7783))+(((-1.0)*r12*x7782))+(((-1.0)*x7778*x7781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7785=((-1.0)*r11);
IkReal x7787 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7787)==0){
continue;
}
IkReal x7786=pow(x7787,-0.5);
CheckValue<IkReal> x7788 = IKatan2WithCheck(IkReal(x7785),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7788.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7788.value))));
IkReal gconst142=(x7785*x7786);
IkReal gconst143=((1.0)*r10*x7786);
CheckValue<IkReal> x7789 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7789.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7789.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7790=((-1.0)*r11);
CheckValue<IkReal> x7793 = IKatan2WithCheck(IkReal(x7790),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7793.valid){
continue;
}
IkReal x7791=((1.0)*(x7793.value));
IkReal x7792=x7786;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7791)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7791)));
IkReal gconst142=(x7790*x7792);
IkReal gconst143=((1.0)*r10*x7792);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7794=((-1.0)*r11);
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal(x7794),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
IkReal x7795=((1.0)*(x7797.value));
IkReal x7796=x7786;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7795)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7795)));
IkReal gconst142=(x7794*x7796);
IkReal gconst143=((1.0)*r10*x7796);
IkReal x7798=r12*r12;
IkReal x7799=((1.0)*sj0);
IkReal x7800=(cj0*r02);
IkReal x7801=x7786;
j4eval[0]=((IKabs((((r12*x7800*x7801))+(((-1.0)*x7799*x7801))+((sj0*x7798*x7801)))))+(IKabs(((((-1.0)*x7800))+(((-1.0)*r12*x7799))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7802=((-1.0)*r11);
CheckValue<IkReal> x7805 = IKatan2WithCheck(IkReal(x7802),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7805.valid){
continue;
}
IkReal x7803=((1.0)*(x7805.value));
IkReal x7804=x7786;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7803)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7803)));
IkReal gconst142=(x7802*x7804);
IkReal gconst143=((1.0)*r10*x7804);
IkReal x7806=r12*r12;
IkReal x7807=(cj1*r22*sj2);
IkReal x7808=(cj2*r22*sj1);
CheckValue<IkReal> x7812=IKPowWithIntegerCheck(((-1.0)+x7806),-1);
if(!x7812.valid){
continue;
}
IkReal x7809=x7812.value;
if((((1.0)+(((-1.0)*x7806)))) < -0.00001)
continue;
IkReal x7810=IKsqrt(((1.0)+(((-1.0)*x7806))));
IkReal x7811=((1.0)*r12*x7809*x7810);
j4eval[0]=((IKabs((x7807+x7808)))+(IKabs(((((-1.0)*x7807*x7811))+(((-1.0)*x7808*x7811))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7813=(gconst142*r21);
IkReal x7814=(cj1*sj2);
IkReal x7815=(cj2*sj1);
IkReal x7816=(gconst143*r20);
CheckValue<IkReal> x7817=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7813*x7816))+(r22*r22)+(x7813*x7813)+(x7816*x7816))),-1);
if(!x7817.valid){
continue;
}
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal((((r22*x7814))+((r22*x7815)))),IkReal((((x7813*x7815))+((x7813*x7814))+(((-1.0)*x7815*x7816))+(((-1.0)*x7814*x7816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7817.value)))+(x7818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7819=IKsin(j4);
IkReal x7820=IKcos(j4);
IkReal x7821=(sj1*sj2);
IkReal x7822=(gconst143*r20);
IkReal x7823=((1.0)*x7820);
IkReal x7824=((1.0)*cj1*cj2);
IkReal x7825=((1.0)*x7819);
IkReal x7826=(gconst142*x7819);
IkReal x7827=(gconst143*x7820);
evalcond[0]=(((r21*x7826))+(((-1.0)*x7822*x7825))+(((-1.0)*r22*x7823)));
evalcond[1]=(cj0+((r11*x7826))+(((-1.0)*r12*x7823))+(((-1.0)*gconst143*r10*x7825)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7823))+((r01*x7826))+(((-1.0)*gconst143*r00*x7825)));
evalcond[3]=(((cj2*sj1))+((x7820*x7822))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7823))+(((-1.0)*r22*x7825)));
evalcond[4]=((((-1.0)*gconst142*r01*x7823))+(((-1.0)*r02*x7825))+((r00*x7827))+((cj0*x7821))+(((-1.0)*cj0*x7824)));
evalcond[5]=(((r10*x7827))+(((-1.0)*gconst142*r11*x7823))+((sj0*x7821))+(((-1.0)*sj0*x7824))+(((-1.0)*r12*x7825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7828=((1.0)*sj0);
IkReal x7829=((1.0)*gconst142);
CheckValue<IkReal> x7830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7829))+(((-1.0)*gconst143*r21)))),-1);
if(!x7830.valid){
continue;
}
CheckValue<IkReal> x7831 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7828)))),IkReal(((((-1.0)*gconst142*r11*x7828))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7829))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7830.value)))+(x7831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7832=IKsin(j4);
IkReal x7833=IKcos(j4);
IkReal x7834=(sj1*sj2);
IkReal x7835=(gconst143*r20);
IkReal x7836=((1.0)*x7833);
IkReal x7837=((1.0)*cj1*cj2);
IkReal x7838=((1.0)*x7832);
IkReal x7839=(gconst142*x7832);
IkReal x7840=(gconst143*x7833);
evalcond[0]=(((r21*x7839))+(((-1.0)*r22*x7836))+(((-1.0)*x7835*x7838)));
evalcond[1]=((((-1.0)*gconst143*r10*x7838))+cj0+(((-1.0)*r12*x7836))+((r11*x7839)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7838))+(((-1.0)*r02*x7836))+((r01*x7839)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7838))+((cj1*sj2))+((x7833*x7835))+(((-1.0)*gconst142*r21*x7836)));
evalcond[4]=((((-1.0)*cj0*x7837))+(((-1.0)*gconst142*r01*x7836))+((cj0*x7834))+((r00*x7840))+(((-1.0)*r02*x7838)));
evalcond[5]=(((r10*x7840))+(((-1.0)*r12*x7838))+(((-1.0)*sj0*x7837))+((sj0*x7834))+(((-1.0)*gconst142*r11*x7836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7841=((1.0)*gconst143);
CheckValue<IkReal> x7842 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7841))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7842.valid){
continue;
}
CheckValue<IkReal> x7843=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7841)))),-1);
if(!x7843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7842.value)+(((1.5707963267949)*(x7843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7844=IKsin(j4);
IkReal x7845=IKcos(j4);
IkReal x7846=(sj1*sj2);
IkReal x7847=(gconst143*r20);
IkReal x7848=((1.0)*x7845);
IkReal x7849=((1.0)*cj1*cj2);
IkReal x7850=((1.0)*x7844);
IkReal x7851=(gconst142*x7844);
IkReal x7852=(gconst143*x7845);
evalcond[0]=((((-1.0)*x7847*x7850))+(((-1.0)*r22*x7848))+((r21*x7851)));
evalcond[1]=(((r11*x7851))+cj0+(((-1.0)*gconst143*r10*x7850))+(((-1.0)*r12*x7848)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7848))+((r01*x7851))+(((-1.0)*gconst143*r00*x7850)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7845*x7847))+(((-1.0)*gconst142*r21*x7848))+(((-1.0)*r22*x7850)));
evalcond[4]=((((-1.0)*cj0*x7849))+(((-1.0)*gconst142*r01*x7848))+((cj0*x7846))+((r00*x7852))+(((-1.0)*r02*x7850)));
evalcond[5]=((((-1.0)*gconst142*r11*x7848))+((r10*x7852))+(((-1.0)*sj0*x7849))+(((-1.0)*r12*x7850))+((sj0*x7846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7853=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7853;
j4eval[1]=IKsign(x7853);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7854=((1.0)*cj5);
IkReal x7855=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7854)));
j4eval[0]=x7855;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7854))))));
j4eval[2]=IKsign(x7855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7856=cj5*cj5;
IkReal x7857=r11*r11;
IkReal x7858=(r11*sj5);
IkReal x7859=(cj5*r10);
IkReal x7860=((r12*r12)+(((-2.0)*x7858*x7859))+(((-1.0)*x7856*x7857))+x7857+((x7856*(r10*r10))));
j4eval[0]=x7860;
j4eval[1]=IKsign(x7860);
j4eval[2]=((IKabs((x7859+(((-1.0)*x7858)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7861=cj5*cj5;
IkReal x7862=r11*r11;
IkReal x7863=(cj5*r10);
IkReal x7864=(r11*sj5);
CheckValue<IkReal> x7865=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7861*(r10*r10)))+(((-1.0)*x7861*x7862))+x7862+(((-2.0)*x7863*x7864)))),-1);
if(!x7865.valid){
continue;
}
CheckValue<IkReal> x7866 = IKatan2WithCheck(IkReal((x7863+(((-1.0)*x7864)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7865.value)))+(x7866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7867=IKsin(j4);
IkReal x7868=IKcos(j4);
IkReal x7869=(cj5*r10);
IkReal x7870=(r01*sj5);
IkReal x7871=(cj5*r00);
IkReal x7872=(cj5*r20);
IkReal x7873=((1.0)*x7868);
IkReal x7874=((1.0)*x7867);
IkReal x7875=(sj5*x7867);
evalcond[0]=((((-1.0)*r22*x7873))+(((-1.0)*x7872*x7874))+((r21*x7875)));
evalcond[1]=((((-1.0)*x7871*x7874))+(((-1.0)*r02*x7873))+((x7867*x7870)));
evalcond[2]=((((-1.0)*r11*sj5*x7873))+(((-1.0)*r12*x7874))+((x7868*x7869)));
evalcond[3]=((1.0)+((r11*x7875))+(((-1.0)*r12*x7873))+(((-1.0)*x7869*x7874)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7874))+((cj1*sj2))+((x7868*x7872))+(((-1.0)*r21*sj5*x7873)));
evalcond[5]=((((-1.0)*x7870*x7873))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7874))+((x7868*x7871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7876=((1.0)*cj5);
CheckValue<IkReal> x7877 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7877.valid){
continue;
}
CheckValue<IkReal> x7878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7876))+(((-1.0)*r00*sj5)))),-1);
if(!x7878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7877.value)+(((1.5707963267949)*(x7878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7879=IKsin(j4);
IkReal x7880=IKcos(j4);
IkReal x7881=(cj5*r10);
IkReal x7882=(r01*sj5);
IkReal x7883=(cj5*r00);
IkReal x7884=(cj5*r20);
IkReal x7885=((1.0)*x7880);
IkReal x7886=((1.0)*x7879);
IkReal x7887=(sj5*x7879);
evalcond[0]=((((-1.0)*r22*x7885))+(((-1.0)*x7884*x7886))+((r21*x7887)));
evalcond[1]=((((-1.0)*r02*x7885))+((x7879*x7882))+(((-1.0)*x7883*x7886)));
evalcond[2]=(((x7880*x7881))+(((-1.0)*r11*sj5*x7885))+(((-1.0)*r12*x7886)));
evalcond[3]=((1.0)+((r11*x7887))+(((-1.0)*r12*x7885))+(((-1.0)*x7881*x7886)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7886))+((cj1*sj2))+((x7880*x7884))+(((-1.0)*r21*sj5*x7885)));
evalcond[5]=((((-1.0)*x7882*x7885))+(((-1.0)*r02*x7886))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7880*x7883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7888=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7888.valid){
continue;
}
CheckValue<IkReal> x7889 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7888.value)))+(x7889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7890=IKsin(j4);
IkReal x7891=IKcos(j4);
IkReal x7892=(cj5*r10);
IkReal x7893=(r01*sj5);
IkReal x7894=(cj5*r00);
IkReal x7895=(cj5*r20);
IkReal x7896=((1.0)*x7891);
IkReal x7897=((1.0)*x7890);
IkReal x7898=(sj5*x7890);
evalcond[0]=((((-1.0)*x7895*x7897))+((r21*x7898))+(((-1.0)*r22*x7896)));
evalcond[1]=((((-1.0)*x7894*x7897))+((x7890*x7893))+(((-1.0)*r02*x7896)));
evalcond[2]=((((-1.0)*r11*sj5*x7896))+(((-1.0)*r12*x7897))+((x7891*x7892)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7896))+(((-1.0)*x7892*x7897))+((r11*x7898)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7896))+(((-1.0)*r22*x7897))+((x7891*x7895)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7891*x7894))+(((-1.0)*x7893*x7896))+(((-1.0)*r02*x7897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7899=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7899;
j4eval[1]=IKsign(x7899);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7900=((1.0)*cj5);
IkReal x7901=((((-1.0)*r21*x7900))+(((-1.0)*r20*sj5)));
j4eval[0]=x7901;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7900))))));
j4eval[2]=IKsign(x7901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7902=cj5*cj5;
IkReal x7903=r11*r11;
IkReal x7904=(cj5*r10);
IkReal x7905=(r11*sj5);
IkReal x7906=((((-1.0)*x7903))+(((-1.0)*x7902*(r10*r10)))+(((-1.0)*(r12*r12)))+((x7902*x7903))+(((2.0)*x7904*x7905)));
j4eval[0]=x7906;
j4eval[1]=((IKabs(((((-1.0)*x7905))+x7904)))+(IKabs(r12)));
j4eval[2]=IKsign(x7906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7907=cj5*cj5;
IkReal x7908=r11*r11;
IkReal x7909=(cj5*r10);
IkReal x7910=(r11*sj5);
CheckValue<IkReal> x7911 = IKatan2WithCheck(IkReal(((((-1.0)*x7910))+x7909)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7911.valid){
continue;
}
CheckValue<IkReal> x7912=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7908))+(((-1.0)*x7907*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x7909*x7910))+((x7907*x7908)))),-1);
if(!x7912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7911.value)+(((1.5707963267949)*(x7912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7913=IKsin(j4);
IkReal x7914=IKcos(j4);
IkReal x7915=(cj5*r10);
IkReal x7916=(r01*sj5);
IkReal x7917=(cj5*r00);
IkReal x7918=(cj5*r20);
IkReal x7919=((1.0)*x7914);
IkReal x7920=((1.0)*x7913);
IkReal x7921=(sj5*x7913);
evalcond[0]=((((-1.0)*r22*x7919))+((r21*x7921))+(((-1.0)*x7918*x7920)));
evalcond[1]=(((x7913*x7916))+(((-1.0)*r02*x7919))+(((-1.0)*x7917*x7920)));
evalcond[2]=((((-1.0)*r11*sj5*x7919))+(((-1.0)*r12*x7920))+((x7914*x7915)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7919))+((r11*x7921))+(((-1.0)*x7915*x7920)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7920))+(((-1.0)*r21*sj5*x7919))+((x7914*x7918)));
evalcond[5]=((((-1.0)*r02*x7920))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x7914*x7917))+(((-1.0)*x7916*x7919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7922=((1.0)*cj5);
CheckValue<IkReal> x7923 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7923.valid){
continue;
}
CheckValue<IkReal> x7924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7922))+(((-1.0)*r20*sj5)))),-1);
if(!x7924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7923.value)+(((1.5707963267949)*(x7924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7925=IKsin(j4);
IkReal x7926=IKcos(j4);
IkReal x7927=(cj5*r10);
IkReal x7928=(r01*sj5);
IkReal x7929=(cj5*r00);
IkReal x7930=(cj5*r20);
IkReal x7931=((1.0)*x7926);
IkReal x7932=((1.0)*x7925);
IkReal x7933=(sj5*x7925);
evalcond[0]=(((r21*x7933))+(((-1.0)*r22*x7931))+(((-1.0)*x7930*x7932)));
evalcond[1]=((((-1.0)*r02*x7931))+(((-1.0)*x7929*x7932))+((x7925*x7928)));
evalcond[2]=((((-1.0)*r11*sj5*x7931))+((x7926*x7927))+(((-1.0)*r12*x7932)));
evalcond[3]=((-1.0)+(((-1.0)*x7927*x7932))+(((-1.0)*r12*x7931))+((r11*x7933)));
evalcond[4]=(((cj2*sj1))+((x7926*x7930))+(((-1.0)*r22*x7932))+(((-1.0)*r21*sj5*x7931))+((cj1*sj2)));
evalcond[5]=(((x7926*x7929))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7932))+(((-1.0)*x7928*x7931))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7934 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7934.valid){
continue;
}
CheckValue<IkReal> x7935=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7934.value)+(((1.5707963267949)*(x7935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7936=IKsin(j4);
IkReal x7937=IKcos(j4);
IkReal x7938=(cj5*r10);
IkReal x7939=(r01*sj5);
IkReal x7940=(cj5*r00);
IkReal x7941=(cj5*r20);
IkReal x7942=((1.0)*x7937);
IkReal x7943=((1.0)*x7936);
IkReal x7944=(sj5*x7936);
evalcond[0]=((((-1.0)*x7941*x7943))+((r21*x7944))+(((-1.0)*r22*x7942)));
evalcond[1]=((((-1.0)*x7940*x7943))+(((-1.0)*r02*x7942))+((x7936*x7939)));
evalcond[2]=((((-1.0)*r11*sj5*x7942))+(((-1.0)*r12*x7943))+((x7937*x7938)));
evalcond[3]=((-1.0)+(((-1.0)*x7938*x7943))+((r11*x7944))+(((-1.0)*r12*x7942)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7943))+(((-1.0)*r21*sj5*x7942))+((cj1*sj2))+((x7937*x7941)));
evalcond[5]=((((-1.0)*x7939*x7942))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7943))+((cj1*cj2))+((x7937*x7940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7945=((-1.0)*r00);
IkReal x7947 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7947)==0){
continue;
}
IkReal x7946=pow(x7947,-0.5);
CheckValue<IkReal> x7948 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7945),IKFAST_ATAN2_MAGTHRESH);
if(!x7948.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7948.value));
IkReal gconst145=(r01*x7946);
IkReal gconst146=(x7945*x7946);
CheckValue<IkReal> x7949 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7949.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7949.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7950=((-1.0)*r00);
IkReal x7951=x7946;
CheckValue<IkReal> x7953 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7950),IKFAST_ATAN2_MAGTHRESH);
if(!x7953.valid){
continue;
}
IkReal x7952=((-1.0)*(x7953.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7952;
IkReal gconst144=x7952;
IkReal gconst145=(r01*x7951);
IkReal gconst146=(x7950*x7951);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7954=((1.0)*sj0);
IkReal x7955=((1.0)*gconst145);
CheckValue<IkReal> x7956 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7954)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7954))+(((-1.0)*cj0*r01*x7955))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7956.valid){
continue;
}
CheckValue<IkReal> x7957=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7955)))),-1);
if(!x7957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7956.value)+(((1.5707963267949)*(x7957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7958=IKsin(j4);
IkReal x7959=IKcos(j4);
IkReal x7960=(gconst146*r10);
IkReal x7961=(sj1*sj2);
IkReal x7962=(gconst146*r20);
IkReal x7963=(gconst146*r00);
IkReal x7964=((1.0)*x7959);
IkReal x7965=((1.0)*x7958);
IkReal x7966=(gconst145*x7958);
IkReal x7967=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7966))+(((-1.0)*r22*x7964))+(((-1.0)*x7962*x7965)));
evalcond[1]=(((r11*x7966))+(((-1.0)*x7960*x7965))+cj0+(((-1.0)*r12*x7964)));
evalcond[2]=((((-1.0)*x7963*x7965))+(((-1.0)*sj0))+((r01*x7966))+(((-1.0)*r02*x7964)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7965))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7964))+((x7959*x7962)));
evalcond[4]=((((-1.0)*gconst145*r01*x7964))+((cj0*x7961))+(((-1.0)*cj0*x7967))+(((-1.0)*r02*x7965))+((x7959*x7963)));
evalcond[5]=((((-1.0)*sj0*x7967))+(((-1.0)*r12*x7965))+((sj0*x7961))+((x7959*x7960))+(((-1.0)*gconst145*r11*x7964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7968=((1.0)*gconst146);
CheckValue<IkReal> x7969 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7968))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7969.valid){
continue;
}
CheckValue<IkReal> x7970=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7968)))),-1);
if(!x7970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7969.value)+(((1.5707963267949)*(x7970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7971=IKsin(j4);
IkReal x7972=IKcos(j4);
IkReal x7973=(gconst146*r10);
IkReal x7974=(sj1*sj2);
IkReal x7975=(gconst146*r20);
IkReal x7976=(gconst146*r00);
IkReal x7977=((1.0)*x7972);
IkReal x7978=((1.0)*x7971);
IkReal x7979=(gconst145*x7971);
IkReal x7980=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7977))+(((-1.0)*x7975*x7978))+((r21*x7979)));
evalcond[1]=(cj0+((r11*x7979))+(((-1.0)*x7973*x7978))+(((-1.0)*r12*x7977)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7979))+(((-1.0)*r02*x7977))+(((-1.0)*x7976*x7978)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7978))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7977))+((x7972*x7975)));
evalcond[4]=((((-1.0)*gconst145*r01*x7977))+((cj0*x7974))+(((-1.0)*r02*x7978))+((x7972*x7976))+(((-1.0)*cj0*x7980)));
evalcond[5]=(((x7972*x7973))+(((-1.0)*sj0*x7980))+(((-1.0)*r12*x7978))+((sj0*x7974))+(((-1.0)*gconst145*r11*x7977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7981=((-1.0)*r01);
IkReal x7983 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7983)==0){
continue;
}
IkReal x7982=pow(x7983,-0.5);
CheckValue<IkReal> x7984 = IKatan2WithCheck(IkReal(x7981),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7984.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7984.value))));
IkReal gconst148=(x7981*x7982);
IkReal gconst149=((1.0)*r00*x7982);
CheckValue<IkReal> x7985 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7985.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7985.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7986=((-1.0)*r01);
CheckValue<IkReal> x7989 = IKatan2WithCheck(IkReal(x7986),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7989.valid){
continue;
}
IkReal x7987=((1.0)*(x7989.value));
IkReal x7988=x7982;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7987)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7987)));
IkReal gconst148=(x7986*x7988);
IkReal gconst149=((1.0)*r00*x7988);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7990=((-1.0)*r01);
CheckValue<IkReal> x7993 = IKatan2WithCheck(IkReal(x7990),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7993.valid){
continue;
}
IkReal x7991=((1.0)*(x7993.value));
IkReal x7992=x7982;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7991)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7991)));
IkReal gconst148=(x7990*x7992);
IkReal gconst149=((1.0)*r00*x7992);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7994=((-1.0)*r01);
CheckValue<IkReal> x7997 = IKatan2WithCheck(IkReal(x7994),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7997.valid){
continue;
}
IkReal x7995=((1.0)*(x7997.value));
IkReal x7996=x7982;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7995)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7995)));
IkReal gconst148=(x7994*x7996);
IkReal gconst149=((1.0)*r00*x7996);
IkReal x7998=r02*r02;
IkReal x7999=(r12*sj0);
IkReal x8000=((1.0)*cj0);
IkReal x8001=x7982;
j4eval[0]=((IKabs((((r02*x7999*x8001))+((cj0*x7998*x8001))+(((-1.0)*x8000*x8001)))))+(IKabs(((((-1.0)*x7999))+(((-1.0)*r02*x8000))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8002=((1.0)*sj0);
IkReal x8003=((1.0)*gconst148);
CheckValue<IkReal> x8004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8003))+(((-1.0)*gconst149*r21)))),-1);
if(!x8004.valid){
continue;
}
CheckValue<IkReal> x8005 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8002))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8002))+(((-1.0)*cj0*r01*x8003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8004.value)))+(x8005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8006=IKsin(j4);
IkReal x8007=IKcos(j4);
IkReal x8008=(gconst148*r11);
IkReal x8009=(sj1*sj2);
IkReal x8010=((1.0)*x8007);
IkReal x8011=(gconst149*x8007);
IkReal x8012=(gconst148*x8006);
IkReal x8013=((1.0)*cj1*cj2);
IkReal x8014=((1.0)*x8006);
evalcond[0]=((((-1.0)*r22*x8010))+(((-1.0)*gconst149*r20*x8014))+((r21*x8012)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8014))+(((-1.0)*r12*x8010))+((x8006*x8008)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8010))+((r01*x8012))+(((-1.0)*gconst149*r00*x8014)));
evalcond[3]=((((-1.0)*r22*x8014))+((cj2*sj1))+(((-1.0)*gconst148*r21*x8010))+((cj1*sj2))+((r20*x8011)));
evalcond[4]=((((-1.0)*r02*x8014))+((cj0*x8009))+((r00*x8011))+(((-1.0)*cj0*x8013))+(((-1.0)*gconst148*r01*x8010)));
evalcond[5]=(((sj0*x8009))+(((-1.0)*x8008*x8010))+((r10*x8011))+(((-1.0)*sj0*x8013))+(((-1.0)*r12*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8015=((1.0)*gconst149);
CheckValue<IkReal> x8016 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8015))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8016.valid){
continue;
}
CheckValue<IkReal> x8017=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8015)))),-1);
if(!x8017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8016.value)+(((1.5707963267949)*(x8017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8018=IKsin(j4);
IkReal x8019=IKcos(j4);
IkReal x8020=(gconst148*r11);
IkReal x8021=(sj1*sj2);
IkReal x8022=((1.0)*x8019);
IkReal x8023=(gconst149*x8019);
IkReal x8024=(gconst148*x8018);
IkReal x8025=((1.0)*cj1*cj2);
IkReal x8026=((1.0)*x8018);
evalcond[0]=((((-1.0)*gconst149*r20*x8026))+((r21*x8024))+(((-1.0)*r22*x8022)));
evalcond[1]=(((x8018*x8020))+(((-1.0)*r12*x8022))+cj0+(((-1.0)*gconst149*r10*x8026)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8022))+(((-1.0)*gconst149*r00*x8026))+((r01*x8024)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8022))+((cj1*sj2))+((r20*x8023))+(((-1.0)*r22*x8026)));
evalcond[4]=((((-1.0)*gconst148*r01*x8022))+(((-1.0)*r02*x8026))+((cj0*x8021))+((r00*x8023))+(((-1.0)*cj0*x8025)));
evalcond[5]=(((r10*x8023))+(((-1.0)*r12*x8026))+(((-1.0)*sj0*x8025))+((sj0*x8021))+(((-1.0)*x8020*x8022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8027=((1.0)*gconst149);
CheckValue<IkReal> x8028=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8027)))),-1);
if(!x8028.valid){
continue;
}
CheckValue<IkReal> x8029 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8028.value)))+(x8029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8030=IKsin(j4);
IkReal x8031=IKcos(j4);
IkReal x8032=(gconst148*r11);
IkReal x8033=(sj1*sj2);
IkReal x8034=((1.0)*x8031);
IkReal x8035=(gconst149*x8031);
IkReal x8036=(gconst148*x8030);
IkReal x8037=((1.0)*cj1*cj2);
IkReal x8038=((1.0)*x8030);
evalcond[0]=((((-1.0)*gconst149*r20*x8038))+((r21*x8036))+(((-1.0)*r22*x8034)));
evalcond[1]=(cj0+(((-1.0)*r12*x8034))+(((-1.0)*gconst149*r10*x8038))+((x8030*x8032)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8034))+(((-1.0)*gconst149*r00*x8038))+((r01*x8036)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8034))+((cj1*sj2))+((r20*x8035))+(((-1.0)*r22*x8038)));
evalcond[4]=((((-1.0)*gconst148*r01*x8034))+((cj0*x8033))+(((-1.0)*r02*x8038))+(((-1.0)*cj0*x8037))+((r00*x8035)));
evalcond[5]=((((-1.0)*sj0*x8037))+((r10*x8035))+(((-1.0)*r12*x8038))+((sj0*x8033))+(((-1.0)*x8032*x8034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8039=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8039;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8040=((1.0)*cj5);
IkReal x8041=((((-1.0)*r11*x8040))+(((-1.0)*r10*sj5)));
j4eval[0]=x8041;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8040))))));
j4eval[2]=IKsign(x8041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8042=cj5*cj5;
IkReal x8043=r01*r01;
IkReal x8044=(r01*sj5);
IkReal x8045=(cj5*r00);
IkReal x8046=((((-1.0)*x8043))+(((2.0)*x8044*x8045))+(((-1.0)*x8042*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8042*x8043)));
j4eval[0]=x8046;
j4eval[1]=IKsign(x8046);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8044))+x8045))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8047=cj5*cj5;
IkReal x8048=r01*r01;
IkReal x8049=(r01*sj5);
IkReal x8050=(cj5*r00);
CheckValue<IkReal> x8051=IKPowWithIntegerCheck(IKsign((((x8047*x8048))+(((-1.0)*x8048))+(((2.0)*x8049*x8050))+(((-1.0)*(r02*r02)))+(((-1.0)*x8047*(r00*r00))))),-1);
if(!x8051.valid){
continue;
}
CheckValue<IkReal> x8052 = IKatan2WithCheck(IkReal(((((-1.0)*x8049))+x8050)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8051.value)))+(x8052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8053=IKsin(j4);
IkReal x8054=IKcos(j4);
IkReal x8055=(cj5*r10);
IkReal x8056=(r01*sj5);
IkReal x8057=(cj5*r00);
IkReal x8058=(cj5*r20);
IkReal x8059=((1.0)*x8054);
IkReal x8060=((1.0)*x8053);
IkReal x8061=(sj5*x8053);
evalcond[0]=(((r21*x8061))+(((-1.0)*r22*x8059))+(((-1.0)*x8058*x8060)));
evalcond[1]=((((-1.0)*r12*x8059))+(((-1.0)*x8055*x8060))+((r11*x8061)));
evalcond[2]=(((x8054*x8057))+(((-1.0)*x8056*x8059))+(((-1.0)*r02*x8060)));
evalcond[3]=((-1.0)+(((-1.0)*x8057*x8060))+(((-1.0)*r02*x8059))+((x8053*x8056)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8059))+((x8054*x8058))+(((-1.0)*r22*x8060)));
evalcond[5]=(((x8054*x8055))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8060))+(((-1.0)*r11*sj5*x8059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8062=((1.0)*cj5);
CheckValue<IkReal> x8063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8062)))),-1);
if(!x8063.valid){
continue;
}
CheckValue<IkReal> x8064 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8063.value)))+(x8064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8065=IKsin(j4);
IkReal x8066=IKcos(j4);
IkReal x8067=(cj5*r10);
IkReal x8068=(r01*sj5);
IkReal x8069=(cj5*r00);
IkReal x8070=(cj5*r20);
IkReal x8071=((1.0)*x8066);
IkReal x8072=((1.0)*x8065);
IkReal x8073=(sj5*x8065);
evalcond[0]=((((-1.0)*x8070*x8072))+((r21*x8073))+(((-1.0)*r22*x8071)));
evalcond[1]=((((-1.0)*x8067*x8072))+((r11*x8073))+(((-1.0)*r12*x8071)));
evalcond[2]=((((-1.0)*r02*x8072))+(((-1.0)*x8068*x8071))+((x8066*x8069)));
evalcond[3]=((-1.0)+((x8065*x8068))+(((-1.0)*r02*x8071))+(((-1.0)*x8069*x8072)));
evalcond[4]=(((cj2*sj1))+((x8066*x8070))+((cj1*sj2))+(((-1.0)*r21*sj5*x8071))+(((-1.0)*r22*x8072)));
evalcond[5]=((((-1.0)*r11*sj5*x8071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8066*x8067))+(((-1.0)*r12*x8072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8074=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8074.valid){
continue;
}
CheckValue<IkReal> x8075 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8074.value)))+(x8075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8076=IKsin(j4);
IkReal x8077=IKcos(j4);
IkReal x8078=(cj5*r10);
IkReal x8079=(r01*sj5);
IkReal x8080=(cj5*r00);
IkReal x8081=(cj5*r20);
IkReal x8082=((1.0)*x8077);
IkReal x8083=((1.0)*x8076);
IkReal x8084=(sj5*x8076);
evalcond[0]=(((r21*x8084))+(((-1.0)*r22*x8082))+(((-1.0)*x8081*x8083)));
evalcond[1]=((((-1.0)*x8078*x8083))+((r11*x8084))+(((-1.0)*r12*x8082)));
evalcond[2]=((((-1.0)*r02*x8083))+(((-1.0)*x8079*x8082))+((x8077*x8080)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8082))+(((-1.0)*x8080*x8083))+((x8076*x8079)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8082))+((cj1*sj2))+((x8077*x8081))+(((-1.0)*r22*x8083)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8082))+((x8077*x8078))+(((-1.0)*r12*x8083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8085=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8085;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8086=((1.0)*cj5);
IkReal x8087=((((-1.0)*r21*x8086))+(((-1.0)*r20*sj5)));
j4eval[0]=x8087;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8086))))));
j4eval[2]=IKsign(x8087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8088=cj5*cj5;
IkReal x8089=r01*r01;
IkReal x8090=(cj5*r00);
IkReal x8091=(r01*sj5);
IkReal x8092=(((x8088*(r00*r00)))+(((-1.0)*x8088*x8089))+x8089+(r02*r02)+(((-2.0)*x8090*x8091)));
j4eval[0]=x8092;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8091))+x8090))));
j4eval[2]=IKsign(x8092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8093=cj5*cj5;
IkReal x8094=r01*r01;
IkReal x8095=(r01*sj5);
IkReal x8096=(cj5*r00);
CheckValue<IkReal> x8097=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8093*x8094))+((x8093*(r00*r00)))+(((-2.0)*x8095*x8096))+x8094+(r02*r02))),-1);
if(!x8097.valid){
continue;
}
CheckValue<IkReal> x8098 = IKatan2WithCheck(IkReal(((((-1.0)*x8095))+x8096)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8097.value)))+(x8098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8099=IKsin(j4);
IkReal x8100=IKcos(j4);
IkReal x8101=(cj5*r10);
IkReal x8102=(r01*sj5);
IkReal x8103=(cj5*r00);
IkReal x8104=(cj5*r20);
IkReal x8105=((1.0)*x8100);
IkReal x8106=((1.0)*x8099);
IkReal x8107=(sj5*x8099);
evalcond[0]=((((-1.0)*x8104*x8106))+(((-1.0)*r22*x8105))+((r21*x8107)));
evalcond[1]=(((r11*x8107))+(((-1.0)*x8101*x8106))+(((-1.0)*r12*x8105)));
evalcond[2]=(((x8100*x8103))+(((-1.0)*x8102*x8105))+(((-1.0)*r02*x8106)));
evalcond[3]=((1.0)+(((-1.0)*x8103*x8106))+(((-1.0)*r02*x8105))+((x8099*x8102)));
evalcond[4]=((((-1.0)*r21*sj5*x8105))+((cj2*sj1))+((x8100*x8104))+((cj1*sj2))+(((-1.0)*r22*x8106)));
evalcond[5]=(((x8100*x8101))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8105))+(((-1.0)*r12*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8108=((1.0)*cj5);
CheckValue<IkReal> x8109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8108))+(((-1.0)*r20*sj5)))),-1);
if(!x8109.valid){
continue;
}
CheckValue<IkReal> x8110 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8109.value)))+(x8110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8111=IKsin(j4);
IkReal x8112=IKcos(j4);
IkReal x8113=(cj5*r10);
IkReal x8114=(r01*sj5);
IkReal x8115=(cj5*r00);
IkReal x8116=(cj5*r20);
IkReal x8117=((1.0)*x8112);
IkReal x8118=((1.0)*x8111);
IkReal x8119=(sj5*x8111);
evalcond[0]=((((-1.0)*x8116*x8118))+((r21*x8119))+(((-1.0)*r22*x8117)));
evalcond[1]=((((-1.0)*x8113*x8118))+(((-1.0)*r12*x8117))+((r11*x8119)));
evalcond[2]=(((x8112*x8115))+(((-1.0)*x8114*x8117))+(((-1.0)*r02*x8118)));
evalcond[3]=((1.0)+(((-1.0)*x8115*x8118))+((x8111*x8114))+(((-1.0)*r02*x8117)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8117))+((x8112*x8116))+((cj1*sj2))+(((-1.0)*r22*x8118)));
evalcond[5]=((((-1.0)*r11*sj5*x8117))+((x8112*x8113))+(((-1.0)*r12*x8118))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8120 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8120.valid){
continue;
}
CheckValue<IkReal> x8121=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8120.value)+(((1.5707963267949)*(x8121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8122=IKsin(j4);
IkReal x8123=IKcos(j4);
IkReal x8124=(cj5*r10);
IkReal x8125=(r01*sj5);
IkReal x8126=(cj5*r00);
IkReal x8127=(cj5*r20);
IkReal x8128=((1.0)*x8123);
IkReal x8129=((1.0)*x8122);
IkReal x8130=(sj5*x8122);
evalcond[0]=(((r21*x8130))+(((-1.0)*r22*x8128))+(((-1.0)*x8127*x8129)));
evalcond[1]=((((-1.0)*r12*x8128))+((r11*x8130))+(((-1.0)*x8124*x8129)));
evalcond[2]=((((-1.0)*x8125*x8128))+((x8123*x8126))+(((-1.0)*r02*x8129)));
evalcond[3]=((1.0)+((x8122*x8125))+(((-1.0)*r02*x8128))+(((-1.0)*x8126*x8129)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8128))+((cj1*sj2))+((x8123*x8127))+(((-1.0)*r22*x8129)));
evalcond[5]=((((-1.0)*r11*sj5*x8128))+(((-1.0)*r12*x8129))+(((-1.0)*sj1*sj2))+((x8123*x8124))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8131=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8131);
rxp1_1=(px*r21);
rxp1_2=(r11*x8131);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8132=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8132);
rxp1_1=(px*r21);
rxp1_2=(r11*x8132);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8133=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8133);
rxp1_1=(px*r21);
rxp1_2=(r11*x8133);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8136=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8136.valid){
continue;
}
IkReal x8134=x8136.value;
IkReal x8135=(sj0*x8134);
cj4array[0]=((((-1.0)*sj1*sj2*x8135))+((cj1*cj2*x8135)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8137=IKsin(j4);
IkReal x8138=IKcos(j4);
IkReal x8139=(r21*sj5);
IkReal x8140=(cj5*r20);
IkReal x8141=((1.0)*x8137);
IkReal x8142=((1.0)*x8138);
evalcond[0]=((-1.0)*r02*x8137);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8142)));
evalcond[2]=((((-1.0)*x8140*x8141))+((x8137*x8139)));
evalcond[3]=(((r11*sj5*x8137))+(((-1.0)*cj5*r10*x8141)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8139*x8142))+((x8138*x8140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8145=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8145.valid){
continue;
}
IkReal x8143=x8145.value;
IkReal x8144=((1.0)*x8143);
cj4array[0]=((((-1.0)*cj2*sj1*x8144))+(((-1.0)*cj1*sj2*x8144)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8146=IKsin(j4);
IkReal x8147=IKcos(j4);
IkReal x8148=(r11*sj5);
IkReal x8149=((1.0)*sj0);
IkReal x8150=((1.0)*x8147);
IkReal x8151=((1.0)*cj5*x8146);
evalcond[0]=((-1.0)*r02*x8146);
evalcond[1]=((((-1.0)*r02*x8150))+(((-1.0)*x8149)));
evalcond[2]=(((r21*sj5*x8146))+(((-1.0)*r20*x8151)));
evalcond[3]=((((-1.0)*r10*x8151))+((x8146*x8148)));
evalcond[4]=((((-1.0)*x8148*x8150))+((cj5*r10*x8147))+(((-1.0)*cj1*cj2*x8149))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8152=IKPowWithIntegerCheck(r02,-1);
if(!x8152.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8152.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8153=IKsin(j4);
IkReal x8154=IKcos(j4);
IkReal x8155=(cj5*x8154);
IkReal x8156=(sj5*x8153);
IkReal x8157=((1.0)*sj5*x8154);
IkReal x8158=((1.0)*cj5*x8153);
evalcond[0]=((-1.0)*r02*x8153);
evalcond[1]=(((r21*x8156))+(((-1.0)*r20*x8158)));
evalcond[2]=((((-1.0)*r10*x8158))+((r11*x8156)));
evalcond[3]=(((cj2*sj1))+((r20*x8155))+((cj1*sj2))+(((-1.0)*r21*x8157)));
evalcond[4]=(((r10*x8155))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8159=((1.0)*sj0);
IkReal x8160=((1.0)*cj0);
CheckValue<IkReal> x8161 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8160))+(((-1.0)*r12*x8159)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8160))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8161.valid){
continue;
}
CheckValue<IkReal> x8162=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8161.value)+(((1.5707963267949)*(x8162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8163=IKsin(j4);
IkReal x8164=IKcos(j4);
IkReal x8165=(cj5*r10);
IkReal x8166=(sj1*sj2);
IkReal x8167=(r01*sj5);
IkReal x8168=(cj5*r00);
IkReal x8169=(cj5*r20);
IkReal x8170=((1.0)*x8164);
IkReal x8171=((1.0)*cj1*cj2);
IkReal x8172=((1.0)*x8163);
IkReal x8173=(sj5*x8163);
evalcond[0]=((((-1.0)*x8169*x8172))+(((-1.0)*r22*x8170))+((r21*x8173)));
evalcond[1]=((((-1.0)*r12*x8170))+cj0+((r11*x8173))+(((-1.0)*x8165*x8172)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8168*x8172))+((x8163*x8167))+(((-1.0)*r02*x8170)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8164*x8169))+(((-1.0)*r22*x8172))+(((-1.0)*r21*sj5*x8170)));
evalcond[4]=(((cj0*x8166))+((x8164*x8168))+(((-1.0)*cj0*x8171))+(((-1.0)*r02*x8172))+(((-1.0)*x8167*x8170)));
evalcond[5]=((((-1.0)*sj0*x8171))+(((-1.0)*r12*x8172))+((x8164*x8165))+((sj0*x8166))+(((-1.0)*r11*sj5*x8170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8174=((1.0)*cj5);
CheckValue<IkReal> x8175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8174))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8175.valid){
continue;
}
CheckValue<IkReal> x8176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8174))+(((-1.0)*r10*sj5)))),-1);
if(!x8176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8175.value)+(((1.5707963267949)*(x8176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8177=IKsin(j4);
IkReal x8178=IKcos(j4);
IkReal x8179=(cj5*r10);
IkReal x8180=(sj1*sj2);
IkReal x8181=(r01*sj5);
IkReal x8182=(cj5*r00);
IkReal x8183=(cj5*r20);
IkReal x8184=((1.0)*x8178);
IkReal x8185=((1.0)*cj1*cj2);
IkReal x8186=((1.0)*x8177);
IkReal x8187=(sj5*x8177);
evalcond[0]=((((-1.0)*r22*x8184))+((r21*x8187))+(((-1.0)*x8183*x8186)));
evalcond[1]=(((r11*x8187))+(((-1.0)*x8179*x8186))+cj0+(((-1.0)*r12*x8184)));
evalcond[2]=((((-1.0)*r02*x8184))+(((-1.0)*sj0))+((x8177*x8181))+(((-1.0)*x8182*x8186)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8186))+((cj1*sj2))+((x8178*x8183))+(((-1.0)*r21*sj5*x8184)));
evalcond[4]=((((-1.0)*r02*x8186))+((x8178*x8182))+(((-1.0)*cj0*x8185))+((cj0*x8180))+(((-1.0)*x8181*x8184)));
evalcond[5]=(((sj0*x8180))+(((-1.0)*r12*x8186))+(((-1.0)*sj0*x8185))+(((-1.0)*r11*sj5*x8184))+((x8178*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8188=((1.0)*cj5);
CheckValue<IkReal> x8189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8188))+(((-1.0)*r00*sj5)))),-1);
if(!x8189.valid){
continue;
}
CheckValue<IkReal> x8190 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8189.value)))+(x8190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8191=IKsin(j4);
IkReal x8192=IKcos(j4);
IkReal x8193=(cj5*r10);
IkReal x8194=(sj1*sj2);
IkReal x8195=(r01*sj5);
IkReal x8196=(cj5*r00);
IkReal x8197=(cj5*r20);
IkReal x8198=((1.0)*x8192);
IkReal x8199=((1.0)*cj1*cj2);
IkReal x8200=((1.0)*x8191);
IkReal x8201=(sj5*x8191);
evalcond[0]=((((-1.0)*r22*x8198))+((r21*x8201))+(((-1.0)*x8197*x8200)));
evalcond[1]=(((r11*x8201))+cj0+(((-1.0)*x8193*x8200))+(((-1.0)*r12*x8198)));
evalcond[2]=((((-1.0)*r02*x8198))+(((-1.0)*sj0))+(((-1.0)*x8196*x8200))+((x8191*x8195)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8198))+(((-1.0)*r22*x8200))+((x8192*x8197)));
evalcond[4]=((((-1.0)*r02*x8200))+(((-1.0)*x8195*x8198))+((x8192*x8196))+(((-1.0)*cj0*x8199))+((cj0*x8194)));
evalcond[5]=(((sj0*x8194))+(((-1.0)*r12*x8200))+(((-1.0)*sj0*x8199))+(((-1.0)*r11*sj5*x8198))+((x8192*x8193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8202=cj5*cj5;
IkReal x8203=r21*r21;
IkReal x8204=(cj2*sj1);
IkReal x8205=(cj1*sj2);
IkReal x8206=(r21*sj5);
IkReal x8207=((1.0)*cj5*r20);
CheckValue<IkReal> x8208 = IKatan2WithCheck(IkReal((((r22*x8204))+((r22*x8205)))),IkReal(((((-1.0)*x8205*x8207))+((x8204*x8206))+(((-1.0)*x8204*x8207))+((x8205*x8206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8208.valid){
continue;
}
CheckValue<IkReal> x8209=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x8206))+(r22*r22)+(((-1.0)*x8202*x8203))+((x8202*(r20*r20)))+x8203)),-1);
if(!x8209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8208.value)+(((1.5707963267949)*(x8209.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8210=IKsin(j4);
IkReal x8211=IKcos(j4);
IkReal x8212=(r21*sj5);
IkReal x8213=(cj5*r20);
IkReal x8214=((1.0)*x8211);
IkReal x8215=((1.0)*x8210);
evalcond[0]=(((x8210*x8212))+(((-1.0)*r22*x8214))+(((-1.0)*x8213*x8215)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x8211*x8213))+(((-1.0)*r22*x8215))+(((-1.0)*x8212*x8214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8216=(cj5*sj4);
IkReal x8217=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8217))+(((-1.0)*r00*x8216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8217))+((r10*x8216))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8217))+(((-1.0)*r00*x8216))))+IKsqr(((((-1.0)*r11*x8217))+((r10*x8216))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8217))+(((-1.0)*r00*x8216))), ((((-1.0)*r11*x8217))+((r10*x8216))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8218=IKcos(j0);
IkReal x8219=IKsin(j0);
IkReal x8220=(cj4*cj5);
IkReal x8221=((0.21325)*cj2);
IkReal x8222=((1.0)*sj2);
IkReal x8223=(r11*sj5);
IkReal x8224=(r00*sj5);
IkReal x8225=(cj5*r11);
IkReal x8226=((1.0)*sj4);
IkReal x8227=((1.0)*sj5);
IkReal x8228=((1.0)*cj2);
IkReal x8229=(cj5*r01);
IkReal x8230=((1.0)*cj4);
IkReal x8231=((0.21325)*sj2);
IkReal x8232=(cj1*x8219);
IkReal x8233=(cj1*x8218);
IkReal x8234=(sj1*x8218);
IkReal x8235=(sj1*x8219);
evalcond[0]=((((-1.0)*cj5*r10*x8226))+(((-1.0)*r12*x8230))+((sj4*x8223))+x8218);
evalcond[1]=((((-1.0)*r02*x8230))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8226))+(((-1.0)*x8219)));
evalcond[2]=((((-1.0)*x8228*x8234))+(((-1.0)*x8222*x8233))+(((-1.0)*x8229))+(((-1.0)*x8224)));
evalcond[3]=((((-1.0)*x8228*x8235))+(((-1.0)*x8222*x8232))+(((-1.0)*x8225))+(((-1.0)*r10*x8227)));
evalcond[4]=((((-1.0)*x8228*x8233))+((sj2*x8234))+(((-1.0)*r02*x8226))+((r00*x8220))+(((-1.0)*cj4*r01*x8227)));
evalcond[5]=((((-1.0)*x8228*x8232))+((sj2*x8235))+(((-1.0)*r12*x8226))+((r10*x8220))+(((-1.0)*x8223*x8230)));
evalcond[6]=((((-0.11235)*x8219))+(((0.24365)*x8233))+(((-1.0)*px))+((x8221*x8233))+(((-1.0)*x8231*x8234))+(((-0.08535)*x8224))+(((-0.08535)*x8229)));
evalcond[7]=((((0.24365)*x8232))+(((0.11235)*x8218))+(((-1.0)*py))+((x8221*x8232))+(((-0.08535)*r10*sj5))+(((-1.0)*x8231*x8235))+(((-0.08535)*x8225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8236 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8236.valid){
continue;
}
CheckValue<IkReal> x8237=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8237.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8236.value)+(((1.5707963267949)*(x8237.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8238=IKcos(j0);
IkReal x8239=IKsin(j0);
IkReal x8240=((0.21325)*cj2);
IkReal x8241=((1.0)*sj2);
IkReal x8242=(r00*sj5);
IkReal x8243=((1.0)*cj5);
IkReal x8244=(r10*sj5);
IkReal x8245=((0.08535)*cj5);
IkReal x8246=(cj1*x8239);
IkReal x8247=(cj1*x8238);
IkReal x8248=((0.21325)*sj1*sj2);
IkReal x8249=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x8241*x8247))+(((-1.0)*x8238*x8249))+(((-1.0)*r01*x8243))+(((-1.0)*x8242)));
evalcond[1]=((((-1.0)*x8241*x8246))+(((-1.0)*x8239*x8249))+(((-1.0)*r11*x8243))+(((-1.0)*x8244)));
evalcond[2]=(((x8240*x8247))+(((-0.08535)*x8242))+(((0.24365)*x8247))+(((-0.11235)*x8239))+(((-1.0)*x8238*x8248))+(((-1.0)*px))+(((-1.0)*r01*x8245)));
evalcond[3]=(((x8240*x8246))+(((-0.08535)*x8244))+(((0.24365)*x8246))+(((-1.0)*x8239*x8248))+(((0.11235)*x8238))+(((-1.0)*py))+(((-1.0)*r11*x8245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8250=((1.0)*cj5);
IkReal x8251=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8250)));
j4eval[0]=x8251;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8250))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8252=((1.0)*cj5);
IkReal x8253=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8252)));
j4eval[0]=x8253;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8252))))));
j4eval[2]=IKsign(x8253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8254=((1.0)*sj0);
IkReal x8255=((1.0)*cj0);
IkReal x8256=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8256;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8254))+(((-1.0)*r01*sj5*x8255)))))+(IKabs(((((-1.0)*r12*x8254))+(((-1.0)*r02*x8255))))));
j4eval[2]=IKsign(x8256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8257=((-1.0)*r20);
IkReal x8259 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8259)==0){
continue;
}
IkReal x8258=pow(x8259,-0.5);
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8257),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8260.value));
IkReal gconst133=(r21*x8258);
IkReal gconst134=(x8257*x8258);
CheckValue<IkReal> x8261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8261.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8261.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8262=((-1.0)*r20);
IkReal x8263=x8258;
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8262),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
IkReal x8264=((-1.0)*(x8265.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8264;
IkReal gconst132=x8264;
IkReal gconst133=(r21*x8263);
IkReal gconst134=(x8262*x8263);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8266=((-1.0)*r20);
IkReal x8267=x8258;
CheckValue<IkReal> x8269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8266),IKFAST_ATAN2_MAGTHRESH);
if(!x8269.valid){
continue;
}
IkReal x8268=((-1.0)*(x8269.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8268;
IkReal gconst132=x8268;
IkReal gconst133=(r21*x8267);
IkReal gconst134=(x8266*x8267);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8270=((-1.0)*r20);
IkReal x8271=x8258;
CheckValue<IkReal> x8273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8270),IKFAST_ATAN2_MAGTHRESH);
if(!x8273.valid){
continue;
}
IkReal x8272=((-1.0)*(x8273.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8272;
IkReal gconst132=x8272;
IkReal gconst133=(r21*x8271);
IkReal gconst134=(x8270*x8271);
IkReal x8274=r22*r22;
CheckValue<IkReal> x8277=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8274))),-1);
if(!x8277.valid){
continue;
}
IkReal x8275=x8277.value;
IkReal x8276=((((2.0)*x8275*(r20*r20)*(r21*r21)))+((x8275*(r20*r20*r20*r20)))+((x8275*(r21*r21*r21*r21)))+x8274);
j4eval[0]=x8276;
j4eval[1]=IKsign(x8276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8278=(gconst133*r21);
IkReal x8279=(cj1*sj2);
IkReal x8280=(gconst134*r20);
IkReal x8281=(cj2*sj1);
CheckValue<IkReal> x8282=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8278*x8280))+(x8280*x8280)+(r22*r22)+(x8278*x8278))),-1);
if(!x8282.valid){
continue;
}
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal((((r22*x8279))+((r22*x8281)))),IkReal((((x8278*x8279))+(((-1.0)*x8280*x8281))+(((-1.0)*x8279*x8280))+((x8278*x8281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8282.value)))+(x8283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8284=IKsin(j4);
IkReal x8285=IKcos(j4);
IkReal x8286=(sj1*sj2);
IkReal x8287=(gconst133*r11);
IkReal x8288=(gconst133*r21);
IkReal x8289=(gconst133*r01);
IkReal x8290=((1.0)*x8285);
IkReal x8291=(gconst134*x8285);
IkReal x8292=((1.0)*x8284);
IkReal x8293=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8292))+(((-1.0)*r22*x8290))+((x8284*x8288)));
evalcond[1]=((((-1.0)*r12*x8290))+cj0+(((-1.0)*gconst134*r10*x8292))+((x8284*x8287)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8292))+((x8284*x8289))+(((-1.0)*r02*x8290)));
evalcond[3]=(((cj2*sj1))+((r20*x8291))+((cj1*sj2))+(((-1.0)*r22*x8292))+(((-1.0)*x8288*x8290)));
evalcond[4]=(((r00*x8291))+(((-1.0)*cj0*x8293))+((cj0*x8286))+(((-1.0)*x8289*x8290))+(((-1.0)*r02*x8292)));
evalcond[5]=((((-1.0)*r12*x8292))+((r10*x8291))+((sj0*x8286))+(((-1.0)*x8287*x8290))+(((-1.0)*sj0*x8293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8294=((1.0)*gconst134);
CheckValue<IkReal> x8295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8294))+(((-1.0)*gconst133*r10)))),-1);
if(!x8295.valid){
continue;
}
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8294))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8295.value)))+(x8296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8297=IKsin(j4);
IkReal x8298=IKcos(j4);
IkReal x8299=(sj1*sj2);
IkReal x8300=(gconst133*r11);
IkReal x8301=(gconst133*r21);
IkReal x8302=(gconst133*r01);
IkReal x8303=((1.0)*x8298);
IkReal x8304=(gconst134*x8298);
IkReal x8305=((1.0)*x8297);
IkReal x8306=((1.0)*cj1*cj2);
evalcond[0]=(((x8297*x8301))+(((-1.0)*r22*x8303))+(((-1.0)*gconst134*r20*x8305)));
evalcond[1]=(((x8297*x8300))+cj0+(((-1.0)*r12*x8303))+(((-1.0)*gconst134*r10*x8305)));
evalcond[2]=((((-1.0)*gconst134*r00*x8305))+((x8297*x8302))+(((-1.0)*sj0))+(((-1.0)*r02*x8303)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8305))+((cj1*sj2))+(((-1.0)*x8301*x8303))+((r20*x8304)));
evalcond[4]=(((r00*x8304))+(((-1.0)*x8302*x8303))+((cj0*x8299))+(((-1.0)*r02*x8305))+(((-1.0)*cj0*x8306)));
evalcond[5]=((((-1.0)*r12*x8305))+((r10*x8304))+((sj0*x8299))+(((-1.0)*x8300*x8303))+(((-1.0)*sj0*x8306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8307=((1.0)*gconst134);
CheckValue<IkReal> x8308=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8307)))),-1);
if(!x8308.valid){
continue;
}
CheckValue<IkReal> x8309 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8307))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8308.value)))+(x8309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8310=IKsin(j4);
IkReal x8311=IKcos(j4);
IkReal x8312=(sj1*sj2);
IkReal x8313=(gconst133*r11);
IkReal x8314=(gconst133*r21);
IkReal x8315=(gconst133*r01);
IkReal x8316=((1.0)*x8311);
IkReal x8317=(gconst134*x8311);
IkReal x8318=((1.0)*x8310);
IkReal x8319=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8316))+((x8310*x8314))+(((-1.0)*gconst134*r20*x8318)));
evalcond[1]=((((-1.0)*gconst134*r10*x8318))+cj0+((x8310*x8313))+(((-1.0)*r12*x8316)));
evalcond[2]=((((-1.0)*sj0))+((x8310*x8315))+(((-1.0)*r02*x8316))+(((-1.0)*gconst134*r00*x8318)));
evalcond[3]=(((cj2*sj1))+((r20*x8317))+((cj1*sj2))+(((-1.0)*r22*x8318))+(((-1.0)*x8314*x8316)));
evalcond[4]=(((r00*x8317))+(((-1.0)*r02*x8318))+((cj0*x8312))+(((-1.0)*x8315*x8316))+(((-1.0)*cj0*x8319)));
evalcond[5]=((((-1.0)*x8313*x8316))+(((-1.0)*sj0*x8319))+((r10*x8317))+((sj0*x8312))+(((-1.0)*r12*x8318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8320=((-1.0)*r21);
IkReal x8322 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8322)==0){
continue;
}
IkReal x8321=pow(x8322,-0.5);
CheckValue<IkReal> x8323 = IKatan2WithCheck(IkReal(x8320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8323.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8323.value))));
IkReal gconst136=(x8320*x8321);
IkReal gconst137=((1.0)*r20*x8321);
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8324.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8325=((-1.0)*r21);
CheckValue<IkReal> x8328 = IKatan2WithCheck(IkReal(x8325),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8328.valid){
continue;
}
IkReal x8326=((1.0)*(x8328.value));
IkReal x8327=x8321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8326)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8326)));
IkReal gconst136=(x8325*x8327);
IkReal gconst137=((1.0)*r20*x8327);
IkReal x8329=r22*r22;
IkReal x8330=((1.0)*x8329);
CheckValue<IkReal> x8334=IKPowWithIntegerCheck(((-1.0)+x8329),-1);
if(!x8334.valid){
continue;
}
IkReal x8331=x8334.value;
if((((1.0)+(((-1.0)*x8330)))) < -0.00001)
continue;
IkReal x8332=IKsqrt(((1.0)+(((-1.0)*x8330))));
IkReal x8333=(cj0*x8331*x8332);
j4eval[0]=((IKabs((x8333+(((-1.0)*x8330*x8333)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8335=((-1.0)*r21);
CheckValue<IkReal> x8338 = IKatan2WithCheck(IkReal(x8335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8338.valid){
continue;
}
IkReal x8336=((1.0)*(x8338.value));
IkReal x8337=x8321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8336)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8336)));
IkReal gconst136=(x8335*x8337);
IkReal gconst137=((1.0)*r20*x8337);
IkReal x8339=r22*r22;
IkReal x8340=((1.0)*x8339);
CheckValue<IkReal> x8344=IKPowWithIntegerCheck(((-1.0)+x8339),-1);
if(!x8344.valid){
continue;
}
IkReal x8341=x8344.value;
if((((1.0)+(((-1.0)*x8340)))) < -0.00001)
continue;
IkReal x8342=IKsqrt(((1.0)+(((-1.0)*x8340))));
IkReal x8343=(sj0*x8341*x8342);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8343+(((-1.0)*x8340*x8343))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8345=((-1.0)*r21);
CheckValue<IkReal> x8348 = IKatan2WithCheck(IkReal(x8345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8348.valid){
continue;
}
IkReal x8346=((1.0)*(x8348.value));
IkReal x8347=x8321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8346)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8346)));
IkReal gconst136=(x8345*x8347);
IkReal gconst137=((1.0)*r20*x8347);
IkReal x8349=r22*r22;
IkReal x8350=(r12*sj0);
IkReal x8351=(cj0*r02);
CheckValue<IkReal> x8355=IKPowWithIntegerCheck(((-1.0)+x8349),-1);
if(!x8355.valid){
continue;
}
IkReal x8352=x8355.value;
if((((1.0)+(((-1.0)*x8349)))) < -0.00001)
continue;
IkReal x8353=IKsqrt(((1.0)+(((-1.0)*x8349))));
IkReal x8354=(r22*x8352*x8353);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8350))+(((-1.0)*x8351)))))+(IKabs((((x8350*x8354))+((x8351*x8354))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8356=((1.0)*sj0);
IkReal x8357=((1.0)*cj0);
CheckValue<IkReal> x8358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8358.valid){
continue;
}
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8357))+(((-1.0)*r12*x8356)))),IkReal(((((-1.0)*gconst136*r11*x8356))+((gconst137*r10*sj0))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8358.value)))+(x8359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8360=IKsin(j4);
IkReal x8361=IKcos(j4);
IkReal x8362=(gconst136*r01);
IkReal x8363=(gconst137*r10);
IkReal x8364=(sj1*sj2);
IkReal x8365=(gconst137*r20);
IkReal x8366=(gconst136*r11);
IkReal x8367=(gconst136*r21);
IkReal x8368=(gconst137*r00);
IkReal x8369=((1.0)*x8361);
IkReal x8370=((1.0)*cj1*cj2);
IkReal x8371=((1.0)*x8360);
evalcond[0]=((((-1.0)*x8365*x8371))+(((-1.0)*r22*x8369))+((x8360*x8367)));
evalcond[1]=(cj0+(((-1.0)*r12*x8369))+((x8360*x8366))+(((-1.0)*x8363*x8371)));
evalcond[2]=((((-1.0)*x8368*x8371))+(((-1.0)*sj0))+(((-1.0)*r02*x8369))+((x8360*x8362)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8361*x8365))+(((-1.0)*r22*x8371))+(((-1.0)*x8367*x8369)));
evalcond[4]=((((-1.0)*x8362*x8369))+(((-1.0)*r02*x8371))+((x8361*x8368))+(((-1.0)*cj0*x8370))+((cj0*x8364)));
evalcond[5]=((((-1.0)*r12*x8371))+((x8361*x8363))+(((-1.0)*x8366*x8369))+((sj0*x8364))+(((-1.0)*sj0*x8370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8372=((1.0)*gconst137);
CheckValue<IkReal> x8373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8372)))),-1);
if(!x8373.valid){
continue;
}
CheckValue<IkReal> x8374 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8373.value)))+(x8374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8375=IKsin(j4);
IkReal x8376=IKcos(j4);
IkReal x8377=(gconst136*r01);
IkReal x8378=(gconst137*r10);
IkReal x8379=(sj1*sj2);
IkReal x8380=(gconst137*r20);
IkReal x8381=(gconst136*r11);
IkReal x8382=(gconst136*r21);
IkReal x8383=(gconst137*r00);
IkReal x8384=((1.0)*x8376);
IkReal x8385=((1.0)*cj1*cj2);
IkReal x8386=((1.0)*x8375);
evalcond[0]=((((-1.0)*x8380*x8386))+((x8375*x8382))+(((-1.0)*r22*x8384)));
evalcond[1]=(cj0+((x8375*x8381))+(((-1.0)*x8378*x8386))+(((-1.0)*r12*x8384)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8384))+(((-1.0)*x8383*x8386))+((x8375*x8377)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8382*x8384))+((cj1*sj2))+((x8376*x8380))+(((-1.0)*r22*x8386)));
evalcond[4]=((((-1.0)*r02*x8386))+((cj0*x8379))+(((-1.0)*cj0*x8385))+((x8376*x8383))+(((-1.0)*x8377*x8384)));
evalcond[5]=((((-1.0)*sj0*x8385))+(((-1.0)*x8381*x8384))+((sj0*x8379))+((x8376*x8378))+(((-1.0)*r12*x8386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8387=((1.0)*gconst137);
CheckValue<IkReal> x8388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8387)))),-1);
if(!x8388.valid){
continue;
}
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8388.value)))+(x8389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8390=IKsin(j4);
IkReal x8391=IKcos(j4);
IkReal x8392=(gconst136*r01);
IkReal x8393=(gconst137*r10);
IkReal x8394=(sj1*sj2);
IkReal x8395=(gconst137*r20);
IkReal x8396=(gconst136*r11);
IkReal x8397=(gconst136*r21);
IkReal x8398=(gconst137*r00);
IkReal x8399=((1.0)*x8391);
IkReal x8400=((1.0)*cj1*cj2);
IkReal x8401=((1.0)*x8390);
evalcond[0]=((((-1.0)*x8395*x8401))+((x8390*x8397))+(((-1.0)*r22*x8399)));
evalcond[1]=(cj0+(((-1.0)*x8393*x8401))+((x8390*x8396))+(((-1.0)*r12*x8399)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8399))+((x8390*x8392))+(((-1.0)*x8398*x8401)));
evalcond[3]=(((cj2*sj1))+((x8391*x8395))+((cj1*sj2))+(((-1.0)*r22*x8401))+(((-1.0)*x8397*x8399)));
evalcond[4]=((((-1.0)*cj0*x8400))+((x8391*x8398))+(((-1.0)*r02*x8401))+(((-1.0)*x8392*x8399))+((cj0*x8394)));
evalcond[5]=(((x8391*x8393))+(((-1.0)*sj0*x8400))+((sj0*x8394))+(((-1.0)*r12*x8401))+(((-1.0)*x8396*x8399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8402=((-1.0)*r10);
IkReal x8404 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8404)==0){
continue;
}
IkReal x8403=pow(x8404,-0.5);
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8402),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8405.value));
IkReal gconst139=(r11*x8403);
IkReal gconst140=(x8402*x8403);
CheckValue<IkReal> x8406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8406.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8406.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8407=((-1.0)*r10);
IkReal x8408=x8403;
CheckValue<IkReal> x8410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8407),IKFAST_ATAN2_MAGTHRESH);
if(!x8410.valid){
continue;
}
IkReal x8409=((-1.0)*(x8410.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8409;
IkReal gconst138=x8409;
IkReal gconst139=(r11*x8408);
IkReal gconst140=(x8407*x8408);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8411=((1.0)*sj0);
IkReal x8412=((1.0)*gconst139);
CheckValue<IkReal> x8413 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8411))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x8411))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8412))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8413.valid){
continue;
}
CheckValue<IkReal> x8414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8412)))),-1);
if(!x8414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8413.value)+(((1.5707963267949)*(x8414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8415=IKsin(j4);
IkReal x8416=IKcos(j4);
IkReal x8417=(gconst140*r00);
IkReal x8418=(sj1*sj2);
IkReal x8419=(gconst139*r11);
IkReal x8420=(gconst139*r01);
IkReal x8421=(gconst139*r21);
IkReal x8422=((1.0)*x8416);
IkReal x8423=((1.0)*x8415);
IkReal x8424=((1.0)*cj1*cj2);
IkReal x8425=(gconst140*x8416);
evalcond[0]=(((x8415*x8421))+(((-1.0)*r22*x8422))+(((-1.0)*gconst140*r20*x8423)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8423))+(((-1.0)*r12*x8422))+((x8415*x8419)));
evalcond[2]=((((-1.0)*sj0))+((x8415*x8420))+(((-1.0)*x8417*x8423))+(((-1.0)*r02*x8422)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8425))+(((-1.0)*x8421*x8422))+(((-1.0)*r22*x8423)));
evalcond[4]=((((-1.0)*cj0*x8424))+(((-1.0)*x8420*x8422))+(((-1.0)*r02*x8423))+((cj0*x8418))+((x8416*x8417)));
evalcond[5]=(((r10*x8425))+(((-1.0)*sj0*x8424))+((sj0*x8418))+(((-1.0)*x8419*x8422))+(((-1.0)*r12*x8423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8426=((1.0)*gconst140);
CheckValue<IkReal> x8427 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8427.valid){
continue;
}
CheckValue<IkReal> x8428=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8426)))),-1);
if(!x8428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8427.value)+(((1.5707963267949)*(x8428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8429=IKsin(j4);
IkReal x8430=IKcos(j4);
IkReal x8431=(gconst140*r00);
IkReal x8432=(sj1*sj2);
IkReal x8433=(gconst139*r11);
IkReal x8434=(gconst139*r01);
IkReal x8435=(gconst139*r21);
IkReal x8436=((1.0)*x8430);
IkReal x8437=((1.0)*x8429);
IkReal x8438=((1.0)*cj1*cj2);
IkReal x8439=(gconst140*x8430);
evalcond[0]=(((x8429*x8435))+(((-1.0)*gconst140*r20*x8437))+(((-1.0)*r22*x8436)));
evalcond[1]=(cj0+((x8429*x8433))+(((-1.0)*r12*x8436))+(((-1.0)*gconst140*r10*x8437)));
evalcond[2]=((((-1.0)*sj0))+((x8429*x8434))+(((-1.0)*x8431*x8437))+(((-1.0)*r02*x8436)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8435*x8436))+((cj1*sj2))+(((-1.0)*r22*x8437))+((r20*x8439)));
evalcond[4]=((((-1.0)*x8434*x8436))+(((-1.0)*r02*x8437))+(((-1.0)*cj0*x8438))+((cj0*x8432))+((x8430*x8431)));
evalcond[5]=((((-1.0)*sj0*x8438))+(((-1.0)*r12*x8437))+((sj0*x8432))+((r10*x8439))+(((-1.0)*x8433*x8436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8440=((-1.0)*r11);
IkReal x8442 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8442)==0){
continue;
}
IkReal x8441=pow(x8442,-0.5);
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal(x8440),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8443.value))));
IkReal gconst142=(x8440*x8441);
IkReal gconst143=((1.0)*r10*x8441);
CheckValue<IkReal> x8444 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8444.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8444.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8445=((-1.0)*r11);
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal(x8445),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
IkReal x8446=((1.0)*(x8448.value));
IkReal x8447=x8441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8446)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8446)));
IkReal gconst142=(x8445*x8447);
IkReal gconst143=((1.0)*r10*x8447);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8449=((-1.0)*r11);
CheckValue<IkReal> x8452 = IKatan2WithCheck(IkReal(x8449),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8452.valid){
continue;
}
IkReal x8450=((1.0)*(x8452.value));
IkReal x8451=x8441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8450)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8450)));
IkReal gconst142=(x8449*x8451);
IkReal gconst143=((1.0)*r10*x8451);
IkReal x8453=r12*r12;
IkReal x8454=((1.0)*sj0);
IkReal x8455=(cj0*r02);
IkReal x8456=x8441;
j4eval[0]=((IKabs(((((-1.0)*x8454*x8456))+((sj0*x8453*x8456))+((r12*x8455*x8456)))))+(IKabs(((((-1.0)*x8455))+(((-1.0)*r12*x8454))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8457=((-1.0)*r11);
CheckValue<IkReal> x8460 = IKatan2WithCheck(IkReal(x8457),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8460.valid){
continue;
}
IkReal x8458=((1.0)*(x8460.value));
IkReal x8459=x8441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8458)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8458)));
IkReal gconst142=(x8457*x8459);
IkReal gconst143=((1.0)*r10*x8459);
IkReal x8461=r12*r12;
IkReal x8462=(cj1*r22*sj2);
IkReal x8463=(cj2*r22*sj1);
CheckValue<IkReal> x8467=IKPowWithIntegerCheck(((-1.0)+x8461),-1);
if(!x8467.valid){
continue;
}
IkReal x8464=x8467.value;
if((((1.0)+(((-1.0)*x8461)))) < -0.00001)
continue;
IkReal x8465=IKsqrt(((1.0)+(((-1.0)*x8461))));
IkReal x8466=((1.0)*r12*x8464*x8465);
j4eval[0]=((IKabs(((((-1.0)*x8463*x8466))+(((-1.0)*x8462*x8466)))))+(IKabs((x8462+x8463))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8468=(gconst142*r21);
IkReal x8469=(cj1*sj2);
IkReal x8470=(cj2*sj1);
IkReal x8471=(gconst143*r20);
CheckValue<IkReal> x8472 = IKatan2WithCheck(IkReal((((r22*x8470))+((r22*x8469)))),IkReal(((((-1.0)*x8470*x8471))+((x8468*x8469))+((x8468*x8470))+(((-1.0)*x8469*x8471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8472.valid){
continue;
}
CheckValue<IkReal> x8473=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8468*x8468)+(((-2.0)*x8468*x8471))+(x8471*x8471))),-1);
if(!x8473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8472.value)+(((1.5707963267949)*(x8473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8474=IKsin(j4);
IkReal x8475=IKcos(j4);
IkReal x8476=(sj1*sj2);
IkReal x8477=(gconst143*r20);
IkReal x8478=((1.0)*x8475);
IkReal x8479=((1.0)*cj1*cj2);
IkReal x8480=((1.0)*x8474);
IkReal x8481=(gconst142*x8474);
IkReal x8482=(gconst143*x8475);
evalcond[0]=((((-1.0)*x8477*x8480))+(((-1.0)*r22*x8478))+((r21*x8481)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8480))+((r11*x8481))+(((-1.0)*r12*x8478)));
evalcond[2]=(((r01*x8481))+(((-1.0)*sj0))+(((-1.0)*r02*x8478))+(((-1.0)*gconst143*r00*x8480)));
evalcond[3]=(((x8475*x8477))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8480))+(((-1.0)*gconst142*r21*x8478)));
evalcond[4]=((((-1.0)*r02*x8480))+(((-1.0)*gconst142*r01*x8478))+((cj0*x8476))+(((-1.0)*cj0*x8479))+((r00*x8482)));
evalcond[5]=(((r10*x8482))+(((-1.0)*sj0*x8479))+(((-1.0)*r12*x8480))+(((-1.0)*gconst142*r11*x8478))+((sj0*x8476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8483=((1.0)*sj0);
IkReal x8484=((1.0)*gconst142);
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8483)))),IkReal(((((-1.0)*cj0*r01*x8484))+((cj0*gconst143*r00))+(((-1.0)*gconst142*r11*x8483))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
CheckValue<IkReal> x8486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8484))+(((-1.0)*gconst143*r21)))),-1);
if(!x8486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8485.value)+(((1.5707963267949)*(x8486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8487=IKsin(j4);
IkReal x8488=IKcos(j4);
IkReal x8489=(sj1*sj2);
IkReal x8490=(gconst143*r20);
IkReal x8491=((1.0)*x8488);
IkReal x8492=((1.0)*cj1*cj2);
IkReal x8493=((1.0)*x8487);
IkReal x8494=(gconst142*x8487);
IkReal x8495=(gconst143*x8488);
evalcond[0]=((((-1.0)*r22*x8491))+(((-1.0)*x8490*x8493))+((r21*x8494)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8493))+(((-1.0)*r12*x8491))+((r11*x8494)));
evalcond[2]=((((-1.0)*r02*x8491))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8493))+((r01*x8494)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8488*x8490))+(((-1.0)*r22*x8493))+(((-1.0)*gconst142*r21*x8491)));
evalcond[4]=(((r00*x8495))+((cj0*x8489))+(((-1.0)*cj0*x8492))+(((-1.0)*r02*x8493))+(((-1.0)*gconst142*r01*x8491)));
evalcond[5]=(((r10*x8495))+(((-1.0)*sj0*x8492))+(((-1.0)*gconst142*r11*x8491))+((sj0*x8489))+(((-1.0)*r12*x8493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8496=((1.0)*gconst143);
CheckValue<IkReal> x8497=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8496)))),-1);
if(!x8497.valid){
continue;
}
CheckValue<IkReal> x8498 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8496))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8497.value)))+(x8498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8499=IKsin(j4);
IkReal x8500=IKcos(j4);
IkReal x8501=(sj1*sj2);
IkReal x8502=(gconst143*r20);
IkReal x8503=((1.0)*x8500);
IkReal x8504=((1.0)*cj1*cj2);
IkReal x8505=((1.0)*x8499);
IkReal x8506=(gconst142*x8499);
IkReal x8507=(gconst143*x8500);
evalcond[0]=(((r21*x8506))+(((-1.0)*r22*x8503))+(((-1.0)*x8502*x8505)));
evalcond[1]=((((-1.0)*gconst143*r10*x8505))+cj0+((r11*x8506))+(((-1.0)*r12*x8503)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8505))+(((-1.0)*r02*x8503))+((r01*x8506)));
evalcond[3]=(((cj2*sj1))+((x8500*x8502))+(((-1.0)*gconst142*r21*x8503))+((cj1*sj2))+(((-1.0)*r22*x8505)));
evalcond[4]=(((cj0*x8501))+(((-1.0)*r02*x8505))+(((-1.0)*gconst142*r01*x8503))+(((-1.0)*cj0*x8504))+((r00*x8507)));
evalcond[5]=(((r10*x8507))+((sj0*x8501))+(((-1.0)*r12*x8505))+(((-1.0)*sj0*x8504))+(((-1.0)*gconst142*r11*x8503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8508=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8508;
j4eval[1]=IKsign(x8508);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8509=((1.0)*cj5);
IkReal x8510=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8509)));
j4eval[0]=x8510;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8509))))));
j4eval[2]=IKsign(x8510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8511=cj5*cj5;
IkReal x8512=r11*r11;
IkReal x8513=(r11*sj5);
IkReal x8514=(cj5*r10);
IkReal x8515=((r12*r12)+(((-2.0)*x8513*x8514))+x8512+(((-1.0)*x8511*x8512))+((x8511*(r10*r10))));
j4eval[0]=x8515;
j4eval[1]=IKsign(x8515);
j4eval[2]=((IKabs(r12))+(IKabs((x8514+(((-1.0)*x8513))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8516=cj5*cj5;
IkReal x8517=r11*r11;
IkReal x8518=(cj5*r10);
IkReal x8519=(r11*sj5);
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal((x8518+(((-1.0)*x8519)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
CheckValue<IkReal> x8521=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8518*x8519))+(r12*r12)+x8517+((x8516*(r10*r10)))+(((-1.0)*x8516*x8517)))),-1);
if(!x8521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8520.value)+(((1.5707963267949)*(x8521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8522=IKsin(j4);
IkReal x8523=IKcos(j4);
IkReal x8524=(cj5*r10);
IkReal x8525=(r01*sj5);
IkReal x8526=(cj5*r00);
IkReal x8527=(cj5*r20);
IkReal x8528=((1.0)*x8523);
IkReal x8529=((1.0)*x8522);
IkReal x8530=(sj5*x8522);
evalcond[0]=(((r21*x8530))+(((-1.0)*r22*x8528))+(((-1.0)*x8527*x8529)));
evalcond[1]=(((x8522*x8525))+(((-1.0)*x8526*x8529))+(((-1.0)*r02*x8528)));
evalcond[2]=((((-1.0)*r11*sj5*x8528))+((x8523*x8524))+(((-1.0)*r12*x8529)));
evalcond[3]=((1.0)+(((-1.0)*x8524*x8529))+(((-1.0)*r12*x8528))+((r11*x8530)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8528))+((cj1*sj2))+(((-1.0)*r22*x8529))+((x8523*x8527)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8529))+(((-1.0)*x8525*x8528))+((x8523*x8526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8531=((1.0)*cj5);
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8531))+(((-1.0)*r00*sj5)))),-1);
if(!x8532.valid){
continue;
}
CheckValue<IkReal> x8533 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8532.value)))+(x8533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8534=IKsin(j4);
IkReal x8535=IKcos(j4);
IkReal x8536=(cj5*r10);
IkReal x8537=(r01*sj5);
IkReal x8538=(cj5*r00);
IkReal x8539=(cj5*r20);
IkReal x8540=((1.0)*x8535);
IkReal x8541=((1.0)*x8534);
IkReal x8542=(sj5*x8534);
evalcond[0]=((((-1.0)*x8539*x8541))+(((-1.0)*r22*x8540))+((r21*x8542)));
evalcond[1]=((((-1.0)*r02*x8540))+((x8534*x8537))+(((-1.0)*x8538*x8541)));
evalcond[2]=(((x8535*x8536))+(((-1.0)*r11*sj5*x8540))+(((-1.0)*r12*x8541)));
evalcond[3]=((1.0)+(((-1.0)*x8536*x8541))+(((-1.0)*r12*x8540))+((r11*x8542)));
evalcond[4]=(((cj2*sj1))+((x8535*x8539))+((cj1*sj2))+(((-1.0)*r22*x8541))+(((-1.0)*r21*sj5*x8540)));
evalcond[5]=((((-1.0)*r02*x8541))+((x8535*x8538))+(((-1.0)*x8537*x8540))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8543=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8543.valid){
continue;
}
CheckValue<IkReal> x8544 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8543.value)))+(x8544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8545=IKsin(j4);
IkReal x8546=IKcos(j4);
IkReal x8547=(cj5*r10);
IkReal x8548=(r01*sj5);
IkReal x8549=(cj5*r00);
IkReal x8550=(cj5*r20);
IkReal x8551=((1.0)*x8546);
IkReal x8552=((1.0)*x8545);
IkReal x8553=(sj5*x8545);
evalcond[0]=(((r21*x8553))+(((-1.0)*r22*x8551))+(((-1.0)*x8550*x8552)));
evalcond[1]=((((-1.0)*x8549*x8552))+((x8545*x8548))+(((-1.0)*r02*x8551)));
evalcond[2]=((((-1.0)*r12*x8552))+((x8546*x8547))+(((-1.0)*r11*sj5*x8551)));
evalcond[3]=((1.0)+(((-1.0)*x8547*x8552))+(((-1.0)*r12*x8551))+((r11*x8553)));
evalcond[4]=(((cj2*sj1))+((x8546*x8550))+(((-1.0)*r22*x8552))+(((-1.0)*r21*sj5*x8551))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8548*x8551))+((x8546*x8549))+(((-1.0)*r02*x8552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8554=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8554;
j4eval[1]=IKsign(x8554);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8555=((1.0)*cj5);
IkReal x8556=((((-1.0)*r21*x8555))+(((-1.0)*r20*sj5)));
j4eval[0]=x8556;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8555))))));
j4eval[2]=IKsign(x8556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8557=cj5*cj5;
IkReal x8558=r11*r11;
IkReal x8559=(cj5*r10);
IkReal x8560=(r11*sj5);
IkReal x8561=((((2.0)*x8559*x8560))+(((-1.0)*x8557*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8557*x8558))+(((-1.0)*x8558)));
j4eval[0]=x8561;
j4eval[1]=((IKabs(r12))+(IKabs((x8559+(((-1.0)*x8560))))));
j4eval[2]=IKsign(x8561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8562=cj5*cj5;
IkReal x8563=r11*r11;
IkReal x8564=(cj5*r10);
IkReal x8565=(r11*sj5);
CheckValue<IkReal> x8566 = IKatan2WithCheck(IkReal((x8564+(((-1.0)*x8565)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8566.valid){
continue;
}
CheckValue<IkReal> x8567=IKPowWithIntegerCheck(IKsign((((x8562*x8563))+(((2.0)*x8564*x8565))+(((-1.0)*(r12*r12)))+(((-1.0)*x8563))+(((-1.0)*x8562*(r10*r10))))),-1);
if(!x8567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8566.value)+(((1.5707963267949)*(x8567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8568=IKsin(j4);
IkReal x8569=IKcos(j4);
IkReal x8570=(cj5*r10);
IkReal x8571=(r01*sj5);
IkReal x8572=(cj5*r00);
IkReal x8573=(cj5*r20);
IkReal x8574=((1.0)*x8569);
IkReal x8575=((1.0)*x8568);
IkReal x8576=(sj5*x8568);
evalcond[0]=(((r21*x8576))+(((-1.0)*x8573*x8575))+(((-1.0)*r22*x8574)));
evalcond[1]=((((-1.0)*x8572*x8575))+(((-1.0)*r02*x8574))+((x8568*x8571)));
evalcond[2]=((((-1.0)*r11*sj5*x8574))+(((-1.0)*r12*x8575))+((x8569*x8570)));
evalcond[3]=((-1.0)+((r11*x8576))+(((-1.0)*x8570*x8575))+(((-1.0)*r12*x8574)));
evalcond[4]=((((-1.0)*r21*sj5*x8574))+((cj2*sj1))+((cj1*sj2))+((x8569*x8573))+(((-1.0)*r22*x8575)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8571*x8574))+(((-1.0)*r02*x8575))+((cj1*cj2))+((x8569*x8572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8577=((1.0)*cj5);
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8577))+(((-1.0)*r20*sj5)))),-1);
if(!x8578.valid){
continue;
}
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8578.value)))+(x8579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8580=IKsin(j4);
IkReal x8581=IKcos(j4);
IkReal x8582=(cj5*r10);
IkReal x8583=(r01*sj5);
IkReal x8584=(cj5*r00);
IkReal x8585=(cj5*r20);
IkReal x8586=((1.0)*x8581);
IkReal x8587=((1.0)*x8580);
IkReal x8588=(sj5*x8580);
evalcond[0]=((((-1.0)*r22*x8586))+(((-1.0)*x8585*x8587))+((r21*x8588)));
evalcond[1]=((((-1.0)*x8584*x8587))+(((-1.0)*r02*x8586))+((x8580*x8583)));
evalcond[2]=(((x8581*x8582))+(((-1.0)*r12*x8587))+(((-1.0)*r11*sj5*x8586)));
evalcond[3]=((-1.0)+(((-1.0)*x8582*x8587))+((r11*x8588))+(((-1.0)*r12*x8586)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8587))+(((-1.0)*r21*sj5*x8586))+((cj1*sj2))+((x8581*x8585)));
evalcond[5]=((((-1.0)*x8583*x8586))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8587))+((x8581*x8584))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8589 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8589.valid){
continue;
}
CheckValue<IkReal> x8590=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8589.value)+(((1.5707963267949)*(x8590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8591=IKsin(j4);
IkReal x8592=IKcos(j4);
IkReal x8593=(cj5*r10);
IkReal x8594=(r01*sj5);
IkReal x8595=(cj5*r00);
IkReal x8596=(cj5*r20);
IkReal x8597=((1.0)*x8592);
IkReal x8598=((1.0)*x8591);
IkReal x8599=(sj5*x8591);
evalcond[0]=((((-1.0)*r22*x8597))+(((-1.0)*x8596*x8598))+((r21*x8599)));
evalcond[1]=((((-1.0)*r02*x8597))+((x8591*x8594))+(((-1.0)*x8595*x8598)));
evalcond[2]=((((-1.0)*r11*sj5*x8597))+(((-1.0)*r12*x8598))+((x8592*x8593)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8597))+(((-1.0)*x8593*x8598))+((r11*x8599)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8598))+((cj1*sj2))+(((-1.0)*r21*sj5*x8597))+((x8592*x8596)));
evalcond[5]=((((-1.0)*r02*x8598))+(((-1.0)*sj1*sj2))+((x8592*x8595))+((cj1*cj2))+(((-1.0)*x8594*x8597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8600=((-1.0)*r00);
IkReal x8602 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8602)==0){
continue;
}
IkReal x8601=pow(x8602,-0.5);
CheckValue<IkReal> x8603 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8600),IKFAST_ATAN2_MAGTHRESH);
if(!x8603.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8603.value));
IkReal gconst145=(r01*x8601);
IkReal gconst146=(x8600*x8601);
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8605=((-1.0)*r00);
IkReal x8606=x8601;
CheckValue<IkReal> x8608 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8605),IKFAST_ATAN2_MAGTHRESH);
if(!x8608.valid){
continue;
}
IkReal x8607=((-1.0)*(x8608.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8607;
IkReal gconst144=x8607;
IkReal gconst145=(r01*x8606);
IkReal gconst146=(x8605*x8606);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8609=((1.0)*sj0);
IkReal x8610=((1.0)*gconst145);
CheckValue<IkReal> x8611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8610))+(((-1.0)*gconst146*r21)))),-1);
if(!x8611.valid){
continue;
}
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8609))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8610))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8611.value)))+(x8612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8613=IKsin(j4);
IkReal x8614=IKcos(j4);
IkReal x8615=(gconst146*r10);
IkReal x8616=(sj1*sj2);
IkReal x8617=(gconst146*r20);
IkReal x8618=(gconst146*r00);
IkReal x8619=((1.0)*x8614);
IkReal x8620=((1.0)*x8613);
IkReal x8621=(gconst145*x8613);
IkReal x8622=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8621))+(((-1.0)*r22*x8619))+(((-1.0)*x8617*x8620)));
evalcond[1]=(cj0+(((-1.0)*r12*x8619))+(((-1.0)*x8615*x8620))+((r11*x8621)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8618*x8620))+(((-1.0)*r02*x8619))+((r01*x8621)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8619))+((cj1*sj2))+((x8614*x8617))+(((-1.0)*r22*x8620)));
evalcond[4]=((((-1.0)*gconst145*r01*x8619))+((x8614*x8618))+(((-1.0)*cj0*x8622))+((cj0*x8616))+(((-1.0)*r02*x8620)));
evalcond[5]=((((-1.0)*r12*x8620))+(((-1.0)*gconst145*r11*x8619))+((x8614*x8615))+(((-1.0)*sj0*x8622))+((sj0*x8616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8623=((1.0)*gconst146);
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8623))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
CheckValue<IkReal> x8625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8623))+(((-1.0)*gconst145*r10)))),-1);
if(!x8625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8624.value)+(((1.5707963267949)*(x8625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8626=IKsin(j4);
IkReal x8627=IKcos(j4);
IkReal x8628=(gconst146*r10);
IkReal x8629=(sj1*sj2);
IkReal x8630=(gconst146*r20);
IkReal x8631=(gconst146*r00);
IkReal x8632=((1.0)*x8627);
IkReal x8633=((1.0)*x8626);
IkReal x8634=(gconst145*x8626);
IkReal x8635=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8634))+(((-1.0)*r22*x8632))+(((-1.0)*x8630*x8633)));
evalcond[1]=((((-1.0)*x8628*x8633))+cj0+(((-1.0)*r12*x8632))+((r11*x8634)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8634))+(((-1.0)*r02*x8632))+(((-1.0)*x8631*x8633)));
evalcond[3]=(((cj2*sj1))+((x8627*x8630))+(((-1.0)*gconst145*r21*x8632))+((cj1*sj2))+(((-1.0)*r22*x8633)));
evalcond[4]=((((-1.0)*gconst145*r01*x8632))+((x8627*x8631))+((cj0*x8629))+(((-1.0)*cj0*x8635))+(((-1.0)*r02*x8633)));
evalcond[5]=(((x8627*x8628))+(((-1.0)*r12*x8633))+(((-1.0)*gconst145*r11*x8632))+((sj0*x8629))+(((-1.0)*sj0*x8635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8636=((-1.0)*r01);
IkReal x8638 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8638)==0){
continue;
}
IkReal x8637=pow(x8638,-0.5);
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(x8636),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8639.value))));
IkReal gconst148=(x8636*x8637);
IkReal gconst149=((1.0)*r00*x8637);
CheckValue<IkReal> x8640 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8640.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8640.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8641=((-1.0)*r01);
CheckValue<IkReal> x8644 = IKatan2WithCheck(IkReal(x8641),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8644.valid){
continue;
}
IkReal x8642=((1.0)*(x8644.value));
IkReal x8643=x8637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8642)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8642)));
IkReal gconst148=(x8641*x8643);
IkReal gconst149=((1.0)*r00*x8643);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8645=((-1.0)*r01);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(x8645),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
IkReal x8646=((1.0)*(x8648.value));
IkReal x8647=x8637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8646)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8646)));
IkReal gconst148=(x8645*x8647);
IkReal gconst149=((1.0)*r00*x8647);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8649=((-1.0)*r01);
CheckValue<IkReal> x8652 = IKatan2WithCheck(IkReal(x8649),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8652.valid){
continue;
}
IkReal x8650=((1.0)*(x8652.value));
IkReal x8651=x8637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8650)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8650)));
IkReal gconst148=(x8649*x8651);
IkReal gconst149=((1.0)*r00*x8651);
IkReal x8653=r02*r02;
IkReal x8654=(r12*sj0);
IkReal x8655=((1.0)*cj0);
IkReal x8656=x8637;
j4eval[0]=((IKabs(((((-1.0)*x8654))+(((-1.0)*r02*x8655)))))+(IKabs(((((-1.0)*x8655*x8656))+((cj0*x8653*x8656))+((r02*x8654*x8656))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8657=((1.0)*sj0);
IkReal x8658=((1.0)*gconst148);
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8657))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8658))+(((-1.0)*gconst148*r11*x8657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
CheckValue<IkReal> x8660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8658))+(((-1.0)*gconst149*r21)))),-1);
if(!x8660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8659.value)+(((1.5707963267949)*(x8660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8661=IKsin(j4);
IkReal x8662=IKcos(j4);
IkReal x8663=(gconst148*r11);
IkReal x8664=(sj1*sj2);
IkReal x8665=((1.0)*x8662);
IkReal x8666=(gconst149*x8662);
IkReal x8667=(gconst148*x8661);
IkReal x8668=((1.0)*cj1*cj2);
IkReal x8669=((1.0)*x8661);
evalcond[0]=((((-1.0)*r22*x8665))+(((-1.0)*gconst149*r20*x8669))+((r21*x8667)));
evalcond[1]=(cj0+(((-1.0)*r12*x8665))+((x8661*x8663))+(((-1.0)*gconst149*r10*x8669)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8665))+((r01*x8667))+(((-1.0)*gconst149*r00*x8669)));
evalcond[3]=(((cj2*sj1))+((r20*x8666))+((cj1*sj2))+(((-1.0)*r22*x8669))+(((-1.0)*gconst148*r21*x8665)));
evalcond[4]=(((cj0*x8664))+(((-1.0)*cj0*x8668))+(((-1.0)*r02*x8669))+((r00*x8666))+(((-1.0)*gconst148*r01*x8665)));
evalcond[5]=((((-1.0)*sj0*x8668))+((sj0*x8664))+(((-1.0)*r12*x8669))+((r10*x8666))+(((-1.0)*x8663*x8665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8670=((1.0)*gconst149);
CheckValue<IkReal> x8671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8670))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8671.valid){
continue;
}
CheckValue<IkReal> x8672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8670))+(((-1.0)*gconst148*r10)))),-1);
if(!x8672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8671.value)+(((1.5707963267949)*(x8672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8673=IKsin(j4);
IkReal x8674=IKcos(j4);
IkReal x8675=(gconst148*r11);
IkReal x8676=(sj1*sj2);
IkReal x8677=((1.0)*x8674);
IkReal x8678=(gconst149*x8674);
IkReal x8679=(gconst148*x8673);
IkReal x8680=((1.0)*cj1*cj2);
IkReal x8681=((1.0)*x8673);
evalcond[0]=((((-1.0)*r22*x8677))+(((-1.0)*gconst149*r20*x8681))+((r21*x8679)));
evalcond[1]=(cj0+(((-1.0)*r12*x8677))+((x8673*x8675))+(((-1.0)*gconst149*r10*x8681)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8677))+((r01*x8679))+(((-1.0)*gconst149*r00*x8681)));
evalcond[3]=(((r20*x8678))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8681))+(((-1.0)*gconst148*r21*x8677)));
evalcond[4]=((((-1.0)*gconst148*r01*x8677))+(((-1.0)*cj0*x8680))+((cj0*x8676))+(((-1.0)*r02*x8681))+((r00*x8678)));
evalcond[5]=((((-1.0)*r12*x8681))+(((-1.0)*x8675*x8677))+((r10*x8678))+(((-1.0)*sj0*x8680))+((sj0*x8676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8682=((1.0)*gconst149);
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8682))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
CheckValue<IkReal> x8684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8682))+(((-1.0)*gconst148*r00)))),-1);
if(!x8684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8683.value)+(((1.5707963267949)*(x8684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8685=IKsin(j4);
IkReal x8686=IKcos(j4);
IkReal x8687=(gconst148*r11);
IkReal x8688=(sj1*sj2);
IkReal x8689=((1.0)*x8686);
IkReal x8690=(gconst149*x8686);
IkReal x8691=(gconst148*x8685);
IkReal x8692=((1.0)*cj1*cj2);
IkReal x8693=((1.0)*x8685);
evalcond[0]=(((r21*x8691))+(((-1.0)*r22*x8689))+(((-1.0)*gconst149*r20*x8693)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8693))+(((-1.0)*r12*x8689))+((x8685*x8687)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8689))+((r01*x8691))+(((-1.0)*gconst149*r00*x8693)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8689))+((cj1*sj2))+((r20*x8690))+(((-1.0)*r22*x8693)));
evalcond[4]=((((-1.0)*cj0*x8692))+((r00*x8690))+(((-1.0)*r02*x8693))+(((-1.0)*gconst148*r01*x8689))+((cj0*x8688)));
evalcond[5]=((((-1.0)*sj0*x8692))+((r10*x8690))+(((-1.0)*r12*x8693))+(((-1.0)*x8687*x8689))+((sj0*x8688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8694=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8694;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8695=((1.0)*cj5);
IkReal x8696=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8695)));
j4eval[0]=x8696;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8695))))));
j4eval[2]=IKsign(x8696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8697=cj5*cj5;
IkReal x8698=r01*r01;
IkReal x8699=(r01*sj5);
IkReal x8700=(cj5*r00);
IkReal x8701=((((-1.0)*x8698))+(((-1.0)*(r02*r02)))+(((2.0)*x8699*x8700))+((x8697*x8698))+(((-1.0)*x8697*(r00*r00))));
j4eval[0]=x8701;
j4eval[1]=IKsign(x8701);
j4eval[2]=((IKabs(r02))+(IKabs((x8700+(((-1.0)*x8699))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8702=cj5*cj5;
IkReal x8703=r01*r01;
IkReal x8704=(r01*sj5);
IkReal x8705=(cj5*r00);
CheckValue<IkReal> x8706=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x8704*x8705))+(((-1.0)*x8703))+(((-1.0)*x8702*(r00*r00)))+((x8702*x8703)))),-1);
if(!x8706.valid){
continue;
}
CheckValue<IkReal> x8707 = IKatan2WithCheck(IkReal((x8705+(((-1.0)*x8704)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8706.value)))+(x8707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8708=IKsin(j4);
IkReal x8709=IKcos(j4);
IkReal x8710=(cj5*r10);
IkReal x8711=(r01*sj5);
IkReal x8712=(cj5*r00);
IkReal x8713=(cj5*r20);
IkReal x8714=((1.0)*x8709);
IkReal x8715=((1.0)*x8708);
IkReal x8716=(sj5*x8708);
evalcond[0]=((((-1.0)*x8713*x8715))+(((-1.0)*r22*x8714))+((r21*x8716)));
evalcond[1]=((((-1.0)*r12*x8714))+(((-1.0)*x8710*x8715))+((r11*x8716)));
evalcond[2]=(((x8709*x8712))+(((-1.0)*r02*x8715))+(((-1.0)*x8711*x8714)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8714))+((x8708*x8711))+(((-1.0)*x8712*x8715)));
evalcond[4]=(((cj2*sj1))+((x8709*x8713))+((cj1*sj2))+(((-1.0)*r22*x8715))+(((-1.0)*r21*sj5*x8714)));
evalcond[5]=(((x8709*x8710))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8715))+(((-1.0)*r11*sj5*x8714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8717=((1.0)*cj5);
CheckValue<IkReal> x8718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8717)))),-1);
if(!x8718.valid){
continue;
}
CheckValue<IkReal> x8719 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8717))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8718.value)))+(x8719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8720=IKsin(j4);
IkReal x8721=IKcos(j4);
IkReal x8722=(cj5*r10);
IkReal x8723=(r01*sj5);
IkReal x8724=(cj5*r00);
IkReal x8725=(cj5*r20);
IkReal x8726=((1.0)*x8721);
IkReal x8727=((1.0)*x8720);
IkReal x8728=(sj5*x8720);
evalcond[0]=(((r21*x8728))+(((-1.0)*r22*x8726))+(((-1.0)*x8725*x8727)));
evalcond[1]=(((r11*x8728))+(((-1.0)*x8722*x8727))+(((-1.0)*r12*x8726)));
evalcond[2]=((((-1.0)*x8723*x8726))+((x8721*x8724))+(((-1.0)*r02*x8727)));
evalcond[3]=((-1.0)+(((-1.0)*x8724*x8727))+((x8720*x8723))+(((-1.0)*r02*x8726)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8721*x8725))+(((-1.0)*r21*sj5*x8726))+(((-1.0)*r22*x8727)));
evalcond[5]=((((-1.0)*r11*sj5*x8726))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8721*x8722))+(((-1.0)*r12*x8727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8729.value)))+(x8730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKsin(j4);
IkReal x8732=IKcos(j4);
IkReal x8733=(cj5*r10);
IkReal x8734=(r01*sj5);
IkReal x8735=(cj5*r00);
IkReal x8736=(cj5*r20);
IkReal x8737=((1.0)*x8732);
IkReal x8738=((1.0)*x8731);
IkReal x8739=(sj5*x8731);
evalcond[0]=(((r21*x8739))+(((-1.0)*x8736*x8738))+(((-1.0)*r22*x8737)));
evalcond[1]=(((r11*x8739))+(((-1.0)*x8733*x8738))+(((-1.0)*r12*x8737)));
evalcond[2]=(((x8732*x8735))+(((-1.0)*x8734*x8737))+(((-1.0)*r02*x8738)));
evalcond[3]=((-1.0)+((x8731*x8734))+(((-1.0)*x8735*x8738))+(((-1.0)*r02*x8737)));
evalcond[4]=(((cj2*sj1))+((x8732*x8736))+((cj1*sj2))+(((-1.0)*r21*sj5*x8737))+(((-1.0)*r22*x8738)));
evalcond[5]=((((-1.0)*r11*sj5*x8737))+((x8732*x8733))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8740=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8740;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8741=((1.0)*cj5);
IkReal x8742=((((-1.0)*r21*x8741))+(((-1.0)*r20*sj5)));
j4eval[0]=x8742;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8741))+((r11*sj5))))));
j4eval[2]=IKsign(x8742);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8743=cj5*cj5;
IkReal x8744=r01*r01;
IkReal x8745=(cj5*r00);
IkReal x8746=(r01*sj5);
IkReal x8747=((((-1.0)*x8743*x8744))+x8744+((x8743*(r00*r00)))+(((-2.0)*x8745*x8746))+(r02*r02));
j4eval[0]=x8747;
j4eval[1]=((IKabs(r02))+(IKabs((x8745+(((-1.0)*x8746))))));
j4eval[2]=IKsign(x8747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8748=cj5*cj5;
IkReal x8749=r01*r01;
IkReal x8750=(r01*sj5);
IkReal x8751=(cj5*r00);
CheckValue<IkReal> x8752 = IKatan2WithCheck(IkReal((x8751+(((-1.0)*x8750)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8752.valid){
continue;
}
CheckValue<IkReal> x8753=IKPowWithIntegerCheck(IKsign((x8749+((x8748*(r00*r00)))+(((-1.0)*x8748*x8749))+(r02*r02)+(((-2.0)*x8750*x8751)))),-1);
if(!x8753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8752.value)+(((1.5707963267949)*(x8753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8754=IKsin(j4);
IkReal x8755=IKcos(j4);
IkReal x8756=(cj5*r10);
IkReal x8757=(r01*sj5);
IkReal x8758=(cj5*r00);
IkReal x8759=(cj5*r20);
IkReal x8760=((1.0)*x8755);
IkReal x8761=((1.0)*x8754);
IkReal x8762=(sj5*x8754);
evalcond[0]=((((-1.0)*x8759*x8761))+(((-1.0)*r22*x8760))+((r21*x8762)));
evalcond[1]=((((-1.0)*x8756*x8761))+(((-1.0)*r12*x8760))+((r11*x8762)));
evalcond[2]=((((-1.0)*x8757*x8760))+(((-1.0)*r02*x8761))+((x8755*x8758)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8760))+(((-1.0)*x8758*x8761))+((x8754*x8757)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8755*x8759))+(((-1.0)*r22*x8761))+(((-1.0)*r21*sj5*x8760)));
evalcond[5]=((((-1.0)*r11*sj5*x8760))+(((-1.0)*sj1*sj2))+((x8755*x8756))+(((-1.0)*r12*x8761))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8763=((1.0)*cj5);
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8763))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
CheckValue<IkReal> x8765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8763))+(((-1.0)*r20*sj5)))),-1);
if(!x8765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8764.value)+(((1.5707963267949)*(x8765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(cj5*r10);
IkReal x8769=(r01*sj5);
IkReal x8770=(cj5*r00);
IkReal x8771=(cj5*r20);
IkReal x8772=((1.0)*x8767);
IkReal x8773=((1.0)*x8766);
IkReal x8774=(sj5*x8766);
evalcond[0]=((((-1.0)*r22*x8772))+((r21*x8774))+(((-1.0)*x8771*x8773)));
evalcond[1]=((((-1.0)*x8768*x8773))+(((-1.0)*r12*x8772))+((r11*x8774)));
evalcond[2]=((((-1.0)*r02*x8773))+((x8767*x8770))+(((-1.0)*x8769*x8772)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8772))+((x8766*x8769))+(((-1.0)*x8770*x8773)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8767*x8771))+(((-1.0)*r22*x8773))+(((-1.0)*r21*sj5*x8772)));
evalcond[5]=((((-1.0)*r11*sj5*x8772))+(((-1.0)*sj1*sj2))+((x8767*x8768))+(((-1.0)*r12*x8773))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8775 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8775.valid){
continue;
}
CheckValue<IkReal> x8776=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8775.value)+(((1.5707963267949)*(x8776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8777=IKsin(j4);
IkReal x8778=IKcos(j4);
IkReal x8779=(cj5*r10);
IkReal x8780=(r01*sj5);
IkReal x8781=(cj5*r00);
IkReal x8782=(cj5*r20);
IkReal x8783=((1.0)*x8778);
IkReal x8784=((1.0)*x8777);
IkReal x8785=(sj5*x8777);
evalcond[0]=(((r21*x8785))+(((-1.0)*x8782*x8784))+(((-1.0)*r22*x8783)));
evalcond[1]=(((r11*x8785))+(((-1.0)*x8779*x8784))+(((-1.0)*r12*x8783)));
evalcond[2]=((((-1.0)*x8780*x8783))+((x8778*x8781))+(((-1.0)*r02*x8784)));
evalcond[3]=((1.0)+((x8777*x8780))+(((-1.0)*x8781*x8784))+(((-1.0)*r02*x8783)));
evalcond[4]=(((cj2*sj1))+((x8778*x8782))+((cj1*sj2))+(((-1.0)*r22*x8784))+(((-1.0)*r21*sj5*x8783)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x8778*x8779))+(((-1.0)*r12*x8784))+(((-1.0)*r11*sj5*x8783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8786=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8786);
rxp1_1=(px*r21);
rxp1_2=(r11*x8786);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8787=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8787);
rxp1_1=(px*r21);
rxp1_2=(r11*x8787);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8788=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8788);
rxp1_1=(px*r21);
rxp1_2=(r11*x8788);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8791=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8791.valid){
continue;
}
IkReal x8789=x8791.value;
IkReal x8790=(sj0*x8789);
cj4array[0]=((((-1.0)*sj1*sj2*x8790))+((cj1*cj2*x8790)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8792=IKsin(j4);
IkReal x8793=IKcos(j4);
IkReal x8794=(r21*sj5);
IkReal x8795=(cj5*r20);
IkReal x8796=((1.0)*x8792);
IkReal x8797=((1.0)*x8793);
evalcond[0]=((-1.0)*r02*x8792);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8797)));
evalcond[2]=((((-1.0)*x8795*x8796))+((x8792*x8794)));
evalcond[3]=(((r11*sj5*x8792))+(((-1.0)*cj5*r10*x8796)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8794*x8797))+((x8793*x8795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8800=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8800.valid){
continue;
}
IkReal x8798=x8800.value;
IkReal x8799=((1.0)*x8798);
cj4array[0]=((((-1.0)*cj1*sj2*x8799))+(((-1.0)*cj2*sj1*x8799)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8801=IKsin(j4);
IkReal x8802=IKcos(j4);
IkReal x8803=(r11*sj5);
IkReal x8804=((1.0)*sj0);
IkReal x8805=((1.0)*x8802);
IkReal x8806=((1.0)*cj5*x8801);
evalcond[0]=((-1.0)*r02*x8801);
evalcond[1]=((((-1.0)*r02*x8805))+(((-1.0)*x8804)));
evalcond[2]=((((-1.0)*r20*x8806))+((r21*sj5*x8801)));
evalcond[3]=((((-1.0)*r10*x8806))+((x8801*x8803)));
evalcond[4]=((((-1.0)*cj1*cj2*x8804))+(((-1.0)*x8803*x8805))+((sj0*sj1*sj2))+((cj5*r10*x8802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8807=IKPowWithIntegerCheck(r02,-1);
if(!x8807.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8807.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8808=IKsin(j4);
IkReal x8809=IKcos(j4);
IkReal x8810=(cj5*x8809);
IkReal x8811=(sj5*x8808);
IkReal x8812=((1.0)*sj5*x8809);
IkReal x8813=((1.0)*cj5*x8808);
evalcond[0]=((-1.0)*r02*x8808);
evalcond[1]=(((r21*x8811))+(((-1.0)*r20*x8813)));
evalcond[2]=((((-1.0)*r10*x8813))+((r11*x8811)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8812))+((cj1*sj2))+((r20*x8810)));
evalcond[4]=((((-1.0)*r11*x8812))+((r10*x8810))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8814=((1.0)*sj0);
IkReal x8815=((1.0)*cj0);
CheckValue<IkReal> x8816 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8814))+(((-1.0)*r02*x8815)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8815))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8816.valid){
continue;
}
CheckValue<IkReal> x8817=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8816.value)+(((1.5707963267949)*(x8817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8818=IKsin(j4);
IkReal x8819=IKcos(j4);
IkReal x8820=(cj5*r10);
IkReal x8821=(sj1*sj2);
IkReal x8822=(r01*sj5);
IkReal x8823=(cj5*r00);
IkReal x8824=(cj5*r20);
IkReal x8825=((1.0)*x8819);
IkReal x8826=((1.0)*cj1*cj2);
IkReal x8827=((1.0)*x8818);
IkReal x8828=(sj5*x8818);
evalcond[0]=(((r21*x8828))+(((-1.0)*x8824*x8827))+(((-1.0)*r22*x8825)));
evalcond[1]=((((-1.0)*r12*x8825))+cj0+((r11*x8828))+(((-1.0)*x8820*x8827)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8825))+((x8818*x8822))+(((-1.0)*x8823*x8827)));
evalcond[3]=(((cj2*sj1))+((x8819*x8824))+((cj1*sj2))+(((-1.0)*r21*sj5*x8825))+(((-1.0)*r22*x8827)));
evalcond[4]=(((x8819*x8823))+(((-1.0)*r02*x8827))+(((-1.0)*x8822*x8825))+(((-1.0)*cj0*x8826))+((cj0*x8821)));
evalcond[5]=((((-1.0)*r11*sj5*x8825))+((x8819*x8820))+(((-1.0)*r12*x8827))+(((-1.0)*sj0*x8826))+((sj0*x8821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8829=((1.0)*cj5);
CheckValue<IkReal> x8830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8829))+(((-1.0)*r10*sj5)))),-1);
if(!x8830.valid){
continue;
}
CheckValue<IkReal> x8831 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8829))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8830.value)))+(x8831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8832=IKsin(j4);
IkReal x8833=IKcos(j4);
IkReal x8834=(cj5*r10);
IkReal x8835=(sj1*sj2);
IkReal x8836=(r01*sj5);
IkReal x8837=(cj5*r00);
IkReal x8838=(cj5*r20);
IkReal x8839=((1.0)*x8833);
IkReal x8840=((1.0)*cj1*cj2);
IkReal x8841=((1.0)*x8832);
IkReal x8842=(sj5*x8832);
evalcond[0]=(((r21*x8842))+(((-1.0)*x8838*x8841))+(((-1.0)*r22*x8839)));
evalcond[1]=((((-1.0)*x8834*x8841))+cj0+((r11*x8842))+(((-1.0)*r12*x8839)));
evalcond[2]=((((-1.0)*sj0))+((x8832*x8836))+(((-1.0)*r02*x8839))+(((-1.0)*x8837*x8841)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8833*x8838))+(((-1.0)*r21*sj5*x8839))+(((-1.0)*r22*x8841)));
evalcond[4]=((((-1.0)*cj0*x8840))+((cj0*x8835))+((x8833*x8837))+(((-1.0)*r02*x8841))+(((-1.0)*x8836*x8839)));
evalcond[5]=(((x8833*x8834))+(((-1.0)*sj0*x8840))+((sj0*x8835))+(((-1.0)*r11*sj5*x8839))+(((-1.0)*r12*x8841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8843=((1.0)*cj5);
CheckValue<IkReal> x8844 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8844.valid){
continue;
}
CheckValue<IkReal> x8845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8843)))),-1);
if(!x8845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8844.value)+(((1.5707963267949)*(x8845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8846=IKsin(j4);
IkReal x8847=IKcos(j4);
IkReal x8848=(cj5*r10);
IkReal x8849=(sj1*sj2);
IkReal x8850=(r01*sj5);
IkReal x8851=(cj5*r00);
IkReal x8852=(cj5*r20);
IkReal x8853=((1.0)*x8847);
IkReal x8854=((1.0)*cj1*cj2);
IkReal x8855=((1.0)*x8846);
IkReal x8856=(sj5*x8846);
evalcond[0]=((((-1.0)*x8852*x8855))+(((-1.0)*r22*x8853))+((r21*x8856)));
evalcond[1]=(cj0+(((-1.0)*x8848*x8855))+(((-1.0)*r12*x8853))+((r11*x8856)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8851*x8855))+((x8846*x8850))+(((-1.0)*r02*x8853)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8855))+((cj1*sj2))+((x8847*x8852))+(((-1.0)*r21*sj5*x8853)));
evalcond[4]=(((cj0*x8849))+(((-1.0)*x8850*x8853))+((x8847*x8851))+(((-1.0)*cj0*x8854))+(((-1.0)*r02*x8855)));
evalcond[5]=((((-1.0)*r12*x8855))+(((-1.0)*r11*sj5*x8853))+((sj0*x8849))+((x8847*x8848))+(((-1.0)*sj0*x8854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8857=cj1*cj1;
IkReal x8858=cj2*cj2;
IkReal x8859=(cj1*cj5);
IkReal x8860=((7280355.0)*cj2);
IkReal x8861=(r10*sj5);
IkReal x8862=((8318211.0)*cj1);
IkReal x8863=((97460000.0)*cj1);
IkReal x8864=(sj1*sj2);
IkReal x8865=((85300000.0)*px);
IkReal x8866=(cj1*cj2);
IkReal x8867=((85300000.0)*py);
IkReal x8868=(r00*sj5);
IkReal x8869=((7280355.0)*cj5);
IkReal x8870=((3835629.0)*cj5);
CheckValue<IkReal> x8871 = IKatan2WithCheck(IkReal((((cj1*x8860*x8861))+(((-1.0)*r11*x8864*x8869))+(((-1.0)*r01*x8870))+(((-1.0)*x8864*x8867))+(((-7280355.0)*x8861*x8864))+((x8861*x8862))+((r11*x8859*x8860))+((x8866*x8867))+((py*x8863))+(((8318211.0)*r11*x8859))+(((-3835629.0)*x8868))+(((-44940000.0)*px)))),IkReal((((cj1*x8860*x8868))+(((8318211.0)*r01*x8859))+(((-1.0)*r01*x8864*x8869))+((px*x8863))+(((-1.0)*x8864*x8865))+((x8862*x8868))+((x8865*x8866))+(((3835629.0)*x8861))+((r11*x8870))+(((-7280355.0)*x8864*x8868))+(((44940000.0)*py))+((r01*x8859*x8860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8871.valid){
continue;
}
CheckValue<IkReal> x8872=IKPowWithIntegerCheck(IKsign(((23239234.0)+(((-41566690.0)*cj1*x8864))+(((-18190225.0)*x8858))+(((36380450.0)*x8857*x8858))+(((5555904.0)*x8857))+(((41566690.0)*cj2*x8857))+(((-36380450.0)*x8864*x8866)))),-1);
if(!x8872.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8871.value)+(((1.5707963267949)*(x8872.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8873=IKcos(j0);
IkReal x8874=IKsin(j0);
IkReal x8875=(sj1*sj2);
IkReal x8876=((0.08535)*sj5);
IkReal x8877=((0.08535)*cj5);
IkReal x8878=((0.21325)*x8874);
IkReal x8879=(cj1*x8873);
evalcond[0]=((((-1.0)*r01*x8877))+(((-0.11235)*x8874))+(((-1.0)*px))+(((-0.21325)*x8873*x8875))+(((0.24365)*x8879))+(((0.21325)*cj2*x8879))+(((-1.0)*r00*x8876)));
evalcond[1]=((((-1.0)*x8875*x8878))+((cj1*cj2*x8878))+(((0.11235)*x8873))+(((-1.0)*py))+(((-1.0)*r10*x8876))+(((-1.0)*r11*x8877))+(((0.24365)*cj1*x8874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8880=((1.0)*cj5);
IkReal x8881=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8880)));
j4eval[0]=x8881;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8880))))));
j4eval[2]=IKsign(x8881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8882=((1.0)*cj5);
IkReal x8883=((((-1.0)*r11*x8882))+(((-1.0)*r10*sj5)));
j4eval[0]=x8883;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8882))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8884=((1.0)*sj0);
IkReal x8885=((1.0)*cj0);
IkReal x8886=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8886;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x8885))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8884)))))+(IKabs(((((-1.0)*r12*x8884))+(((-1.0)*r02*x8885))))));
j4eval[2]=IKsign(x8886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8887=((-1.0)*r20);
IkReal x8889 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8889)==0){
continue;
}
IkReal x8888=pow(x8889,-0.5);
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8887),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8890.value));
IkReal gconst1=(r21*x8888);
IkReal gconst2=(x8887*x8888);
CheckValue<IkReal> x8891 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8891.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8891.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8892=((-1.0)*r20);
IkReal x8893=x8888;
CheckValue<IkReal> x8895 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8892),IKFAST_ATAN2_MAGTHRESH);
if(!x8895.valid){
continue;
}
IkReal x8894=((-1.0)*(x8895.value));
sj5=gconst1;
cj5=gconst2;
j5=x8894;
IkReal gconst0=x8894;
IkReal gconst1=(r21*x8893);
IkReal gconst2=(x8892*x8893);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8896=((-1.0)*r20);
IkReal x8897=x8888;
CheckValue<IkReal> x8899 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8896),IKFAST_ATAN2_MAGTHRESH);
if(!x8899.valid){
continue;
}
IkReal x8898=((-1.0)*(x8899.value));
sj5=gconst1;
cj5=gconst2;
j5=x8898;
IkReal gconst0=x8898;
IkReal gconst1=(r21*x8897);
IkReal gconst2=(x8896*x8897);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8900=((-1.0)*r20);
IkReal x8901=x8888;
CheckValue<IkReal> x8903 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8900),IKFAST_ATAN2_MAGTHRESH);
if(!x8903.valid){
continue;
}
IkReal x8902=((-1.0)*(x8903.value));
sj5=gconst1;
cj5=gconst2;
j5=x8902;
IkReal gconst0=x8902;
IkReal gconst1=(r21*x8901);
IkReal gconst2=(x8900*x8901);
IkReal x8904=r22*r22;
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8904))),-1);
if(!x8908.valid){
continue;
}
IkReal x8905=x8908.value;
IkReal x8906=(sj3*x8905);
IkReal x8907=(((sj3*x8904))+((x8906*(r20*r20*r20*r20)))+((x8906*(r21*r21*r21*r21)))+(((2.0)*x8906*(r20*r20)*(r21*r21))));
j4eval[0]=x8907;
j4eval[1]=IKsign(x8907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8909=((-1.0)*r20);
IkReal x8910=x8888;
CheckValue<IkReal> x8912 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8909),IKFAST_ATAN2_MAGTHRESH);
if(!x8912.valid){
continue;
}
IkReal x8911=((-1.0)*(x8912.value));
sj5=gconst1;
cj5=gconst2;
j5=x8911;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8911;
IkReal gconst1=(r21*x8910);
IkReal gconst2=(x8909*x8910);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8913=((-1.0)*r20);
IkReal x8914=x8888;
CheckValue<IkReal> x8916 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8913),IKFAST_ATAN2_MAGTHRESH);
if(!x8916.valid){
continue;
}
IkReal x8915=((-1.0)*(x8916.value));
sj5=gconst1;
cj5=gconst2;
j5=x8915;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8915;
IkReal gconst1=(r21*x8914);
IkReal gconst2=(x8913*x8914);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8917=((-1.0)*r20);
IkReal x8918=x8888;
CheckValue<IkReal> x8920 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8917),IKFAST_ATAN2_MAGTHRESH);
if(!x8920.valid){
continue;
}
IkReal x8919=((-1.0)*(x8920.value));
sj5=gconst1;
cj5=gconst2;
j5=x8919;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8919;
IkReal gconst1=(r21*x8918);
IkReal gconst2=(x8917*x8918);
IkReal x8921=((1.0)*(r22*r22));
CheckValue<IkReal> x8925=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8921))),-1);
if(!x8925.valid){
continue;
}
IkReal x8922=x8925.value;
IkReal x8923=((1.0)*x8922);
IkReal x8924=((((-1.0)*x8923*(r20*r20*r20*r20)))+(((-1.0)*x8921))+(((-2.0)*x8922*(r20*r20)*(r21*r21)))+(((-1.0)*x8923*(r21*r21*r21*r21))));
j4eval[0]=x8924;
j4eval[1]=IKsign(x8924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8926=((-1.0)*r20);
IkReal x8927=x8888;
CheckValue<IkReal> x8929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8926),IKFAST_ATAN2_MAGTHRESH);
if(!x8929.valid){
continue;
}
IkReal x8928=((-1.0)*(x8929.value));
sj5=gconst1;
cj5=gconst2;
j5=x8928;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8928;
IkReal gconst1=(r21*x8927);
IkReal gconst2=(x8926*x8927);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8930=((-1.0)*r20);
IkReal x8931=x8888;
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8930),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
IkReal x8932=((-1.0)*(x8933.value));
sj5=gconst1;
cj5=gconst2;
j5=x8932;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8932;
IkReal gconst1=(r21*x8931);
IkReal gconst2=(x8930*x8931);
IkReal x8934=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8938=IKPowWithIntegerCheck(x8934,-1);
if(!x8938.valid){
continue;
}
IkReal x8935=x8938.value;
IkReal x8936=((1.0)*x8935);
IkReal x8937=((((-1.0)*x8936*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8935))+(((-1.0)*x8936*(r11*r11)*(r21*r21))));
j4eval[0]=x8937;
j4eval[1]=r12;
j4eval[2]=x8934;
j4eval[3]=IKsign(x8937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8939=((-1.0)*r20);
IkReal x8940=x8888;
CheckValue<IkReal> x8942 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8939),IKFAST_ATAN2_MAGTHRESH);
if(!x8942.valid){
continue;
}
IkReal x8941=((-1.0)*(x8942.value));
sj5=gconst1;
cj5=gconst2;
j5=x8941;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8941;
IkReal gconst1=(r21*x8940);
IkReal gconst2=(x8939*x8940);
IkReal x8943=r22*r22;
IkReal x8944=(cj1*r12*sj2);
IkReal x8945=(cj2*r12*sj1);
CheckValue<IkReal> x8949=IKPowWithIntegerCheck(((-1.0)+x8943),-1);
if(!x8949.valid){
continue;
}
IkReal x8946=x8949.value;
if((((1.0)+(((-1.0)*x8943)))) < -0.00001)
continue;
IkReal x8947=IKsqrt(((1.0)+(((-1.0)*x8943))));
IkReal x8948=(r22*x8946*x8947);
j4eval[0]=((IKabs(((((-1.0)*x8944))+(((-1.0)*x8945)))))+(IKabs((((x8944*x8948))+((x8945*x8948))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8950=(cj1*sj2);
IkReal x8951=(cj2*sj1);
IkReal x8952=((1.0)*r12);
IkReal x8953=(gconst1*r11);
IkReal x8954=((1.0)*gconst2*r10);
CheckValue<IkReal> x8955=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8955.valid){
continue;
}
CheckValue<IkReal> x8956 = IKatan2WithCheck(IkReal(((((-1.0)*x8951*x8954))+((x8950*x8953))+((x8951*x8953))+(((-1.0)*x8950*x8954)))),IkReal(((((-1.0)*x8951*x8952))+(((-1.0)*x8950*x8952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8955.value)))+(x8956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8957=IKcos(j4);
IkReal x8958=IKsin(j4);
IkReal x8959=((1.0)*x8957);
IkReal x8960=(gconst1*x8957);
IkReal x8961=(gconst1*x8958);
IkReal x8962=((1.0)*gconst2*x8958);
evalcond[0]=(((r11*x8960))+(((-1.0)*gconst2*r10*x8959))+((r12*x8958)));
evalcond[1]=((((-1.0)*r22*x8959))+(((-1.0)*r20*x8962))+((r21*x8961)));
evalcond[2]=((((-1.0)*r00*x8962))+((r01*x8961))+(((-1.0)*r02*x8959)));
evalcond[3]=((1.0)+((r11*x8961))+(((-1.0)*r10*x8962))+(((-1.0)*r12*x8959)));
evalcond[4]=(((r22*x8958))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8959))+((r21*x8960)));
evalcond[5]=(((r02*x8958))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8960))+(((-1.0)*gconst2*r00*x8959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8963=(gconst2*r10);
IkReal x8964=(gconst1*r11);
CheckValue<IkReal> x8965 = IKatan2WithCheck(IkReal((x8964+(((-1.0)*x8963)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8965.valid){
continue;
}
CheckValue<IkReal> x8966=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x8963*x8963)))+(((-1.0)*(x8964*x8964)))+(((2.0)*x8963*x8964)))),-1);
if(!x8966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8965.value)+(((1.5707963267949)*(x8966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8967=IKcos(j4);
IkReal x8968=IKsin(j4);
IkReal x8969=((1.0)*x8967);
IkReal x8970=(gconst1*x8967);
IkReal x8971=(gconst1*x8968);
IkReal x8972=((1.0)*gconst2*x8968);
evalcond[0]=(((r11*x8970))+(((-1.0)*gconst2*r10*x8969))+((r12*x8968)));
evalcond[1]=(((r21*x8971))+(((-1.0)*r22*x8969))+(((-1.0)*r20*x8972)));
evalcond[2]=(((r01*x8971))+(((-1.0)*r02*x8969))+(((-1.0)*r00*x8972)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8972))+(((-1.0)*r12*x8969))+((r11*x8971)));
evalcond[4]=(((r21*x8970))+((cj2*sj1))+((r22*x8968))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8969)));
evalcond[5]=(((r02*x8968))+((r01*x8970))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8973=((1.0)*gconst2);
CheckValue<IkReal> x8974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8973)))),-1);
if(!x8974.valid){
continue;
}
CheckValue<IkReal> x8975 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8974.value)))+(x8975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8976=IKcos(j4);
IkReal x8977=IKsin(j4);
IkReal x8978=((1.0)*x8976);
IkReal x8979=(gconst1*x8976);
IkReal x8980=(gconst1*x8977);
IkReal x8981=((1.0)*gconst2*x8977);
evalcond[0]=(((r11*x8979))+((r12*x8977))+(((-1.0)*gconst2*r10*x8978)));
evalcond[1]=((((-1.0)*r22*x8978))+(((-1.0)*r20*x8981))+((r21*x8980)));
evalcond[2]=(((r01*x8980))+(((-1.0)*r02*x8978))+(((-1.0)*r00*x8981)));
evalcond[3]=((1.0)+((r11*x8980))+(((-1.0)*r12*x8978))+(((-1.0)*r10*x8981)));
evalcond[4]=(((r21*x8979))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8978))+((cj1*sj2))+((r22*x8977)));
evalcond[5]=(((r01*x8979))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8978))+((r02*x8977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8982=((-1.0)*r20);
IkReal x8983=x8888;
CheckValue<IkReal> x8985 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8982),IKFAST_ATAN2_MAGTHRESH);
if(!x8985.valid){
continue;
}
IkReal x8984=((-1.0)*(x8985.value));
sj5=gconst1;
cj5=gconst2;
j5=x8984;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8984;
IkReal gconst1=(r21*x8983);
IkReal gconst2=(x8982*x8983);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8986=((-1.0)*r20);
IkReal x8987=x8888;
CheckValue<IkReal> x8989 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8986),IKFAST_ATAN2_MAGTHRESH);
if(!x8989.valid){
continue;
}
IkReal x8988=((-1.0)*(x8989.value));
sj5=gconst1;
cj5=gconst2;
j5=x8988;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8988;
IkReal gconst1=(r21*x8987);
IkReal gconst2=(x8986*x8987);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8990=((-1.0)*r20);
IkReal x8991=x8888;
CheckValue<IkReal> x8993 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8990),IKFAST_ATAN2_MAGTHRESH);
if(!x8993.valid){
continue;
}
IkReal x8992=((-1.0)*(x8993.value));
sj5=gconst1;
cj5=gconst2;
j5=x8992;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8992;
IkReal gconst1=(r21*x8991);
IkReal gconst2=(x8990*x8991);
IkReal x8994=r22*r22;
IkReal x8995=(cj1*r12*sj2);
IkReal x8996=(cj2*r12*sj1);
CheckValue<IkReal> x9000=IKPowWithIntegerCheck(((-1.0)+x8994),-1);
if(!x9000.valid){
continue;
}
IkReal x8997=x9000.value;
if((((1.0)+(((-1.0)*x8994)))) < -0.00001)
continue;
IkReal x8998=IKsqrt(((1.0)+(((-1.0)*x8994))));
IkReal x8999=(r22*x8997*x8998);
j4eval[0]=((IKabs(((((-1.0)*x8996))+(((-1.0)*x8995)))))+(IKabs((((x8995*x8999))+((x8996*x8999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9001=(cj1*sj2);
IkReal x9002=(cj2*sj1);
IkReal x9003=((1.0)*r12);
IkReal x9004=(gconst1*r11);
IkReal x9005=((1.0)*gconst2*r10);
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal((((x9001*x9004))+((x9002*x9004))+(((-1.0)*x9001*x9005))+(((-1.0)*x9002*x9005)))),IkReal(((((-1.0)*x9001*x9003))+(((-1.0)*x9002*x9003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
CheckValue<IkReal> x9007=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9006.value)+(((1.5707963267949)*(x9007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9008=IKcos(j4);
IkReal x9009=IKsin(j4);
IkReal x9010=((1.0)*x9008);
IkReal x9011=(gconst1*x9008);
IkReal x9012=(gconst1*x9009);
IkReal x9013=((1.0)*gconst2*x9009);
evalcond[0]=((((-1.0)*gconst2*r10*x9010))+((r12*x9009))+((r11*x9011)));
evalcond[1]=((((-1.0)*r22*x9010))+(((-1.0)*r20*x9013))+((r21*x9012)));
evalcond[2]=((((-1.0)*r00*x9013))+(((-1.0)*r02*x9010))+((r01*x9012)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9013))+(((-1.0)*r12*x9010))+((r11*x9012)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9010))+((r22*x9009))+((cj1*sj2))+((r21*x9011)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9009))+((cj1*cj2))+((r01*x9011))+(((-1.0)*gconst2*r00*x9010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9014=(gconst1*r11);
IkReal x9015=(gconst2*r10);
CheckValue<IkReal> x9016=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9015*x9015)+(x9014*x9014)+(((-2.0)*x9014*x9015)))),-1);
if(!x9016.valid){
continue;
}
CheckValue<IkReal> x9017 = IKatan2WithCheck(IkReal(((((-1.0)*x9015))+x9014)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9016.value)))+(x9017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9018=IKcos(j4);
IkReal x9019=IKsin(j4);
IkReal x9020=((1.0)*x9018);
IkReal x9021=(gconst1*x9018);
IkReal x9022=(gconst1*x9019);
IkReal x9023=((1.0)*gconst2*x9019);
evalcond[0]=((((-1.0)*gconst2*r10*x9020))+((r12*x9019))+((r11*x9021)));
evalcond[1]=(((r21*x9022))+(((-1.0)*r20*x9023))+(((-1.0)*r22*x9020)));
evalcond[2]=(((r01*x9022))+(((-1.0)*r02*x9020))+(((-1.0)*r00*x9023)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9020))+((r11*x9022))+(((-1.0)*r10*x9023)));
evalcond[4]=((((-1.0)*gconst2*r20*x9020))+((cj2*sj1))+((cj1*sj2))+((r21*x9021))+((r22*x9019)));
evalcond[5]=((((-1.0)*gconst2*r00*x9020))+((r01*x9021))+(((-1.0)*sj1*sj2))+((r02*x9019))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9024 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9024.valid){
continue;
}
CheckValue<IkReal> x9025=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9024.value)+(((1.5707963267949)*(x9025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9026=IKcos(j4);
IkReal x9027=IKsin(j4);
IkReal x9028=((1.0)*x9026);
IkReal x9029=(gconst1*x9026);
IkReal x9030=(gconst1*x9027);
IkReal x9031=((1.0)*gconst2*x9027);
evalcond[0]=((((-1.0)*gconst2*r10*x9028))+((r11*x9029))+((r12*x9027)));
evalcond[1]=(((r21*x9030))+(((-1.0)*r20*x9031))+(((-1.0)*r22*x9028)));
evalcond[2]=(((r01*x9030))+(((-1.0)*r00*x9031))+(((-1.0)*r02*x9028)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9031))+(((-1.0)*r12*x9028))+((r11*x9030)));
evalcond[4]=((((-1.0)*gconst2*r20*x9028))+((cj2*sj1))+((cj1*sj2))+((r21*x9029))+((r22*x9027)));
evalcond[5]=((((-1.0)*gconst2*r00*x9028))+((r01*x9029))+(((-1.0)*sj1*sj2))+((r02*x9027))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9032=((-1.0)*r20);
IkReal x9033=x8888;
CheckValue<IkReal> x9035 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9032),IKFAST_ATAN2_MAGTHRESH);
if(!x9035.valid){
continue;
}
IkReal x9034=((-1.0)*(x9035.value));
sj5=gconst1;
cj5=gconst2;
j5=x9034;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9034;
IkReal gconst1=(r21*x9033);
IkReal gconst2=(x9032*x9033);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9036=((-1.0)*r20);
IkReal x9037=x8888;
CheckValue<IkReal> x9039 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9036),IKFAST_ATAN2_MAGTHRESH);
if(!x9039.valid){
continue;
}
IkReal x9038=((-1.0)*(x9039.value));
sj5=gconst1;
cj5=gconst2;
j5=x9038;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9038;
IkReal gconst1=(r21*x9037);
IkReal gconst2=(x9036*x9037);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9040=((-1.0)*r20);
IkReal x9041=x8888;
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9040),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
IkReal x9042=((-1.0)*(x9043.value));
sj5=gconst1;
cj5=gconst2;
j5=x9042;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9042;
IkReal gconst1=(r21*x9041);
IkReal gconst2=(x9040*x9041);
IkReal x9044=r22*r22;
IkReal x9045=((1.0)*r02);
IkReal x9046=(cj1*sj2);
IkReal x9047=(cj2*sj1);
CheckValue<IkReal> x9051=IKPowWithIntegerCheck(((-1.0)+x9044),-1);
if(!x9051.valid){
continue;
}
IkReal x9048=x9051.value;
if((((1.0)+(((-1.0)*x9044)))) < -0.00001)
continue;
IkReal x9049=IKsqrt(((1.0)+(((-1.0)*x9044))));
IkReal x9050=(r02*r22*x9048*x9049);
j4eval[0]=((IKabs((((x9047*x9050))+((x9046*x9050)))))+(IKabs(((((-1.0)*x9045*x9047))+(((-1.0)*x9045*x9046))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9052=(cj1*sj2);
IkReal x9053=(gconst1*r01);
IkReal x9054=((1.0)*r02);
IkReal x9055=(cj2*sj1);
IkReal x9056=((1.0)*gconst2*r00);
CheckValue<IkReal> x9057=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9057.valid){
continue;
}
CheckValue<IkReal> x9058 = IKatan2WithCheck(IkReal(((((-1.0)*x9055*x9056))+((x9052*x9053))+((x9053*x9055))+(((-1.0)*x9052*x9056)))),IkReal(((((-1.0)*x9054*x9055))+(((-1.0)*x9052*x9054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9057.value)))+(x9058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9059=IKcos(j4);
IkReal x9060=IKsin(j4);
IkReal x9061=((1.0)*x9059);
IkReal x9062=(gconst1*x9059);
IkReal x9063=(gconst1*x9060);
IkReal x9064=((1.0)*gconst2*x9060);
evalcond[0]=(((r01*x9062))+(((-1.0)*gconst2*r00*x9061))+((r02*x9060)));
evalcond[1]=((((-1.0)*r20*x9064))+((r21*x9063))+(((-1.0)*r22*x9061)));
evalcond[2]=(((r11*x9063))+(((-1.0)*r10*x9064))+(((-1.0)*r12*x9061)));
evalcond[3]=((-1.0)+((r01*x9063))+(((-1.0)*r02*x9061))+(((-1.0)*r00*x9064)));
evalcond[4]=(((cj2*sj1))+((r22*x9060))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9061))+((r21*x9062)));
evalcond[5]=(((r11*x9062))+((r12*x9060))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9065=(gconst1*r01);
IkReal x9066=(gconst2*r00);
CheckValue<IkReal> x9067 = IKatan2WithCheck(IkReal((x9065+(((-1.0)*x9066)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9067.valid){
continue;
}
CheckValue<IkReal> x9068=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9065*x9066))+(x9065*x9065)+(x9066*x9066)+(r02*r02))),-1);
if(!x9068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9067.value)+(((1.5707963267949)*(x9068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9069=IKcos(j4);
IkReal x9070=IKsin(j4);
IkReal x9071=((1.0)*x9069);
IkReal x9072=(gconst1*x9069);
IkReal x9073=(gconst1*x9070);
IkReal x9074=((1.0)*gconst2*x9070);
evalcond[0]=((((-1.0)*gconst2*r00*x9071))+((r01*x9072))+((r02*x9070)));
evalcond[1]=(((r21*x9073))+(((-1.0)*r22*x9071))+(((-1.0)*r20*x9074)));
evalcond[2]=((((-1.0)*r12*x9071))+((r11*x9073))+(((-1.0)*r10*x9074)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9071))+(((-1.0)*r00*x9074))+((r01*x9073)));
evalcond[4]=(((cj2*sj1))+((r21*x9072))+((cj1*sj2))+((r22*x9070))+(((-1.0)*gconst2*r20*x9071)));
evalcond[5]=((((-1.0)*gconst2*r10*x9071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9072))+((r12*x9070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9075=((1.0)*gconst2);
CheckValue<IkReal> x9076=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9075)))),-1);
if(!x9076.valid){
continue;
}
CheckValue<IkReal> x9077 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9076.value)))+(x9077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9078=IKcos(j4);
IkReal x9079=IKsin(j4);
IkReal x9080=((1.0)*x9078);
IkReal x9081=(gconst1*x9078);
IkReal x9082=(gconst1*x9079);
IkReal x9083=((1.0)*gconst2*x9079);
evalcond[0]=((((-1.0)*gconst2*r00*x9080))+((r01*x9081))+((r02*x9079)));
evalcond[1]=(((r21*x9082))+(((-1.0)*r20*x9083))+(((-1.0)*r22*x9080)));
evalcond[2]=(((r11*x9082))+(((-1.0)*r10*x9083))+(((-1.0)*r12*x9080)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9083))+((r01*x9082))+(((-1.0)*r02*x9080)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9080))+((cj1*sj2))+((r21*x9081))+((r22*x9079)));
evalcond[5]=(((r11*x9081))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9080))+((r12*x9079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9084=((-1.0)*r20);
IkReal x9085=x8888;
CheckValue<IkReal> x9087 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9084),IKFAST_ATAN2_MAGTHRESH);
if(!x9087.valid){
continue;
}
IkReal x9086=((-1.0)*(x9087.value));
sj5=gconst1;
cj5=gconst2;
j5=x9086;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9086;
IkReal gconst1=(r21*x9085);
IkReal gconst2=(x9084*x9085);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9088=((-1.0)*r20);
IkReal x9089=x8888;
CheckValue<IkReal> x9091 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9088),IKFAST_ATAN2_MAGTHRESH);
if(!x9091.valid){
continue;
}
IkReal x9090=((-1.0)*(x9091.value));
sj5=gconst1;
cj5=gconst2;
j5=x9090;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9090;
IkReal gconst1=(r21*x9089);
IkReal gconst2=(x9088*x9089);
IkReal x9092=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9096=IKPowWithIntegerCheck(x9092,-1);
if(!x9096.valid){
continue;
}
IkReal x9093=x9096.value;
IkReal x9094=((1.0)*x9093);
IkReal x9095=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9093))+(((-1.0)*x9094*(r01*r01)*(r21*r21)))+(((-1.0)*x9094*(r00*r00)*(r20*r20))));
j4eval[0]=x9095;
j4eval[1]=IKsign(x9095);
j4eval[2]=r02;
j4eval[3]=x9092;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9097=((-1.0)*r20);
IkReal x9098=x8888;
CheckValue<IkReal> x9100 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9097),IKFAST_ATAN2_MAGTHRESH);
if(!x9100.valid){
continue;
}
IkReal x9099=((-1.0)*(x9100.value));
sj5=gconst1;
cj5=gconst2;
j5=x9099;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9099;
IkReal gconst1=(r21*x9098);
IkReal gconst2=(x9097*x9098);
IkReal x9101=r22*r22;
IkReal x9102=((1.0)*r02);
IkReal x9103=(cj1*sj2);
IkReal x9104=(cj2*sj1);
CheckValue<IkReal> x9108=IKPowWithIntegerCheck(((-1.0)+x9101),-1);
if(!x9108.valid){
continue;
}
IkReal x9105=x9108.value;
if((((1.0)+(((-1.0)*x9101)))) < -0.00001)
continue;
IkReal x9106=IKsqrt(((1.0)+(((-1.0)*x9101))));
IkReal x9107=(r02*r22*x9105*x9106);
j4eval[0]=((IKabs((((x9104*x9107))+((x9103*x9107)))))+(IKabs(((((-1.0)*x9102*x9104))+(((-1.0)*x9102*x9103))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9109=(cj1*sj2);
IkReal x9110=(gconst1*r01);
IkReal x9111=((1.0)*r02);
IkReal x9112=(cj2*sj1);
IkReal x9113=((1.0)*gconst2*r00);
CheckValue<IkReal> x9114 = IKatan2WithCheck(IkReal(((((-1.0)*x9112*x9113))+(((-1.0)*x9109*x9113))+((x9110*x9112))+((x9109*x9110)))),IkReal(((((-1.0)*x9111*x9112))+(((-1.0)*x9109*x9111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9114.valid){
continue;
}
CheckValue<IkReal> x9115=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9114.value)+(((1.5707963267949)*(x9115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9116=IKcos(j4);
IkReal x9117=IKsin(j4);
IkReal x9118=((1.0)*x9116);
IkReal x9119=(gconst1*x9116);
IkReal x9120=(gconst1*x9117);
IkReal x9121=((1.0)*gconst2*x9117);
evalcond[0]=((((-1.0)*gconst2*r00*x9118))+((r01*x9119))+((r02*x9117)));
evalcond[1]=((((-1.0)*r20*x9121))+(((-1.0)*r22*x9118))+((r21*x9120)));
evalcond[2]=((((-1.0)*r10*x9121))+(((-1.0)*r12*x9118))+((r11*x9120)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9118))+((r01*x9120))+(((-1.0)*r00*x9121)));
evalcond[4]=(((r21*x9119))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9118))+((r22*x9117)));
evalcond[5]=(((r12*x9117))+(((-1.0)*sj1*sj2))+((r11*x9119))+(((-1.0)*gconst2*r10*x9118))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9122=(gconst1*r01);
IkReal x9123=(gconst2*r00);
CheckValue<IkReal> x9124=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9122*x9123))+(((-1.0)*(x9123*x9123)))+(((-1.0)*(x9122*x9122))))),-1);
if(!x9124.valid){
continue;
}
CheckValue<IkReal> x9125 = IKatan2WithCheck(IkReal((x9122+(((-1.0)*x9123)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9124.value)))+(x9125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9126=IKcos(j4);
IkReal x9127=IKsin(j4);
IkReal x9128=((1.0)*x9126);
IkReal x9129=(gconst1*x9126);
IkReal x9130=(gconst1*x9127);
IkReal x9131=((1.0)*gconst2*x9127);
evalcond[0]=((((-1.0)*gconst2*r00*x9128))+((r02*x9127))+((r01*x9129)));
evalcond[1]=((((-1.0)*r20*x9131))+(((-1.0)*r22*x9128))+((r21*x9130)));
evalcond[2]=((((-1.0)*r12*x9128))+(((-1.0)*r10*x9131))+((r11*x9130)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9128))+(((-1.0)*r00*x9131))+((r01*x9130)));
evalcond[4]=(((r22*x9127))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9128))+((cj1*sj2))+((r21*x9129)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9128))+((cj1*cj2))+((r11*x9129))+((r12*x9127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9132 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9132.valid){
continue;
}
CheckValue<IkReal> x9133=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9132.value)+(((1.5707963267949)*(x9133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9134=IKcos(j4);
IkReal x9135=IKsin(j4);
IkReal x9136=((1.0)*x9134);
IkReal x9137=(gconst1*x9134);
IkReal x9138=(gconst1*x9135);
IkReal x9139=((1.0)*gconst2*x9135);
evalcond[0]=(((r02*x9135))+(((-1.0)*gconst2*r00*x9136))+((r01*x9137)));
evalcond[1]=((((-1.0)*r22*x9136))+(((-1.0)*r20*x9139))+((r21*x9138)));
evalcond[2]=((((-1.0)*r12*x9136))+(((-1.0)*r10*x9139))+((r11*x9138)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9136))+(((-1.0)*r00*x9139))+((r01*x9138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9135))+((r21*x9137))+(((-1.0)*gconst2*r20*x9136)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9136))+((r12*x9135))+((r11*x9137))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9140=((-1.0)*r20);
IkReal x9141=((-1.0)*px);
CheckValue<IkReal> x9143 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9140),IKFAST_ATAN2_MAGTHRESH);
if(!x9143.valid){
continue;
}
IkReal x9142=((-1.0)*(x9143.value));
sj5=gconst1;
cj5=gconst2;
j5=x9142;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9141);
rxp1_1=(px*r21);
rxp1_2=(r11*x9141);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9142;
IkReal gconst1=r21;
IkReal gconst2=x9140;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9144=((-1.0)*r20);
IkReal x9145=((-1.0)*px);
CheckValue<IkReal> x9147 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9144),IKFAST_ATAN2_MAGTHRESH);
if(!x9147.valid){
continue;
}
IkReal x9146=((-1.0)*(x9147.value));
sj5=gconst1;
cj5=gconst2;
j5=x9146;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9145);
rxp1_1=(px*r21);
rxp1_2=(r11*x9145);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9146;
IkReal gconst1=r21;
IkReal gconst2=x9144;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9148=((-1.0)*r20);
IkReal x9149=((-1.0)*px);
CheckValue<IkReal> x9151 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9148),IKFAST_ATAN2_MAGTHRESH);
if(!x9151.valid){
continue;
}
IkReal x9150=((-1.0)*(x9151.value));
sj5=gconst1;
cj5=gconst2;
j5=x9150;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9149);
rxp1_1=(px*r21);
rxp1_2=(r11*x9149);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9150;
IkReal gconst1=r21;
IkReal gconst2=x9148;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9154=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9154.valid){
continue;
}
IkReal x9152=x9154.value;
IkReal x9153=(sj0*x9152);
cj4array[0]=(((cj1*cj2*x9153))+(((-1.0)*sj1*sj2*x9153)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9155=IKsin(j4);
IkReal x9156=IKcos(j4);
IkReal x9157=((1.0)*gconst2);
IkReal x9158=(gconst1*r21);
evalcond[0]=(r02*x9155);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9156)));
evalcond[2]=(((x9155*x9158))+(((-1.0)*r20*x9155*x9157)));
evalcond[3]=((((-1.0)*r10*x9155*x9157))+((gconst1*r11*x9155)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9156*x9157))+((x9156*x9158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9161=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9161.valid){
continue;
}
IkReal x9159=x9161.value;
IkReal x9160=((1.0)*x9159);
cj4array[0]=((((-1.0)*cj1*sj2*x9160))+(((-1.0)*cj2*sj1*x9160)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9162=IKsin(j4);
IkReal x9163=IKcos(j4);
IkReal x9164=((1.0)*sj0);
IkReal x9165=(gconst1*x9162);
IkReal x9166=((1.0)*x9163);
IkReal x9167=((1.0)*gconst2*x9162);
evalcond[0]=(r02*x9162);
evalcond[1]=((((-1.0)*r02*x9166))+(((-1.0)*x9164)));
evalcond[2]=(((r21*x9165))+(((-1.0)*r20*x9167)));
evalcond[3]=((((-1.0)*r10*x9167))+((r11*x9165)));
evalcond[4]=((((-1.0)*cj1*cj2*x9164))+(((-1.0)*gconst2*r10*x9166))+((gconst1*r11*x9163))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9168=IKPowWithIntegerCheck(r02,-1);
if(!x9168.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9168.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9169=IKsin(j4);
IkReal x9170=IKcos(j4);
IkReal x9171=(gconst1*r21);
IkReal x9172=(gconst1*r11);
IkReal x9173=((1.0)*gconst2*r10);
IkReal x9174=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9169);
evalcond[1]=(((x9169*x9171))+(((-1.0)*x9169*x9174)));
evalcond[2]=(((x9169*x9172))+(((-1.0)*x9169*x9173)));
evalcond[3]=(((x9170*x9171))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9170*x9174)));
evalcond[4]=(((x9170*x9172))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9170*x9173))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9175=(cj2*sj1);
IkReal x9176=(cj1*sj2);
IkReal x9177=(gconst1*r21);
IkReal x9178=((1.0)*gconst2*r20);
CheckValue<IkReal> x9179 = IKatan2WithCheck(IkReal((((r22*x9176))+((r22*x9175)))),IkReal((((x9176*x9177))+((x9175*x9177))+(((-1.0)*x9176*x9178))+(((-1.0)*x9175*x9178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9179.valid){
continue;
}
CheckValue<IkReal> x9180=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9178))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9177*x9177)))+(((2.0)*gconst2*r20*x9177)))),-1);
if(!x9180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9179.value)+(((1.5707963267949)*(x9180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9181=IKsin(j4);
IkReal x9182=IKcos(j4);
IkReal x9183=(sj1*sj2);
IkReal x9184=(gconst2*r10);
IkReal x9185=(gconst2*r00);
IkReal x9186=(gconst2*r20);
IkReal x9187=((1.0)*x9182);
IkReal x9188=(gconst1*x9182);
IkReal x9189=((1.0)*cj1*cj2);
IkReal x9190=(gconst1*x9181);
IkReal x9191=((1.0)*x9181);
evalcond[0]=((((-1.0)*r22*x9187))+((r21*x9190))+(((-1.0)*x9186*x9191)));
evalcond[1]=((((-1.0)*x9184*x9191))+(((-1.0)*r12*x9187))+cj0+((r11*x9190)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9185*x9191))+((r01*x9190))+(((-1.0)*r02*x9187)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9186*x9187))+((r22*x9181))+((r21*x9188)));
evalcond[4]=(((r02*x9181))+(((-1.0)*x9185*x9187))+(((-1.0)*cj0*x9189))+((cj0*x9183))+((r01*x9188)));
evalcond[5]=(((r11*x9188))+((r12*x9181))+(((-1.0)*x9184*x9187))+((sj0*x9183))+(((-1.0)*sj0*x9189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9192=((1.0)*gconst2);
CheckValue<IkReal> x9193=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9192)))),-1);
if(!x9193.valid){
continue;
}
CheckValue<IkReal> x9194 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9192))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9193.value)))+(x9194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9195=IKsin(j4);
IkReal x9196=IKcos(j4);
IkReal x9197=(sj1*sj2);
IkReal x9198=(gconst2*r10);
IkReal x9199=(gconst2*r00);
IkReal x9200=(gconst2*r20);
IkReal x9201=((1.0)*x9196);
IkReal x9202=(gconst1*x9196);
IkReal x9203=((1.0)*cj1*cj2);
IkReal x9204=(gconst1*x9195);
IkReal x9205=((1.0)*x9195);
evalcond[0]=(((r21*x9204))+(((-1.0)*x9200*x9205))+(((-1.0)*r22*x9201)));
evalcond[1]=(cj0+((r11*x9204))+(((-1.0)*x9198*x9205))+(((-1.0)*r12*x9201)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9204))+(((-1.0)*r02*x9201))+(((-1.0)*x9199*x9205)));
evalcond[3]=(((cj2*sj1))+((r22*x9195))+((cj1*sj2))+((r21*x9202))+(((-1.0)*x9200*x9201)));
evalcond[4]=(((r01*x9202))+(((-1.0)*cj0*x9203))+(((-1.0)*x9199*x9201))+((r02*x9195))+((cj0*x9197)));
evalcond[5]=(((sj0*x9197))+((r11*x9202))+(((-1.0)*x9198*x9201))+((r12*x9195))+(((-1.0)*sj0*x9203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9206=((1.0)*gconst2);
CheckValue<IkReal> x9207=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9206)))),-1);
if(!x9207.valid){
continue;
}
CheckValue<IkReal> x9208 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9207.value)))+(x9208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9209=IKsin(j4);
IkReal x9210=IKcos(j4);
IkReal x9211=(sj1*sj2);
IkReal x9212=(gconst2*r10);
IkReal x9213=(gconst2*r00);
IkReal x9214=(gconst2*r20);
IkReal x9215=((1.0)*x9210);
IkReal x9216=(gconst1*x9210);
IkReal x9217=((1.0)*cj1*cj2);
IkReal x9218=(gconst1*x9209);
IkReal x9219=((1.0)*x9209);
evalcond[0]=(((r21*x9218))+(((-1.0)*x9214*x9219))+(((-1.0)*r22*x9215)));
evalcond[1]=((((-1.0)*x9212*x9219))+cj0+((r11*x9218))+(((-1.0)*r12*x9215)));
evalcond[2]=((((-1.0)*r02*x9215))+(((-1.0)*sj0))+(((-1.0)*x9213*x9219))+((r01*x9218)));
evalcond[3]=(((cj2*sj1))+((r21*x9216))+((r22*x9209))+((cj1*sj2))+(((-1.0)*x9214*x9215)));
evalcond[4]=((((-1.0)*x9213*x9215))+(((-1.0)*cj0*x9217))+((r02*x9209))+((cj0*x9211))+((r01*x9216)));
evalcond[5]=((((-1.0)*x9212*x9215))+((sj0*x9211))+((r11*x9216))+((r12*x9209))+(((-1.0)*sj0*x9217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9220=((-1.0)*r20);
IkReal x9221=x8888;
CheckValue<IkReal> x9223 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9220),IKFAST_ATAN2_MAGTHRESH);
if(!x9223.valid){
continue;
}
IkReal x9222=((-1.0)*(x9223.value));
sj5=gconst1;
cj5=gconst2;
j5=x9222;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9222;
IkReal gconst1=(r21*x9221);
IkReal gconst2=(x9220*x9221);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9224=((-1.0)*r20);
IkReal x9225=x8888;
CheckValue<IkReal> x9227 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9224),IKFAST_ATAN2_MAGTHRESH);
if(!x9227.valid){
continue;
}
IkReal x9226=((-1.0)*(x9227.value));
sj5=gconst1;
cj5=gconst2;
j5=x9226;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9226;
IkReal gconst1=(r21*x9225);
IkReal gconst2=(x9224*x9225);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9228=((-1.0)*r20);
IkReal x9229=x8888;
CheckValue<IkReal> x9231 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9228),IKFAST_ATAN2_MAGTHRESH);
if(!x9231.valid){
continue;
}
IkReal x9230=((-1.0)*(x9231.value));
sj5=gconst1;
cj5=gconst2;
j5=x9230;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9230;
IkReal gconst1=(r21*x9229);
IkReal gconst2=(x9228*x9229);
IkReal x9232=r22*r22;
CheckValue<IkReal> x9235=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9232))),-1);
if(!x9235.valid){
continue;
}
IkReal x9233=x9235.value;
IkReal x9234=(x9232+((x9233*(r21*r21*r21*r21)))+((x9233*(r20*r20*r20*r20)))+(((2.0)*x9233*(r20*r20)*(r21*r21))));
j4eval[0]=x9234;
j4eval[1]=IKsign(x9234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9236=((-1.0)*r20);
IkReal x9237=x8888;
CheckValue<IkReal> x9239 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9236),IKFAST_ATAN2_MAGTHRESH);
if(!x9239.valid){
continue;
}
IkReal x9238=((-1.0)*(x9239.value));
sj5=gconst1;
cj5=gconst2;
j5=x9238;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9238;
IkReal gconst1=(r21*x9237);
IkReal gconst2=(x9236*x9237);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9240=((-1.0)*r20);
IkReal x9241=x8888;
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9240),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
IkReal x9242=((-1.0)*(x9243.value));
sj5=gconst1;
cj5=gconst2;
j5=x9242;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9242;
IkReal gconst1=(r21*x9241);
IkReal gconst2=(x9240*x9241);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9244=((-1.0)*r20);
IkReal x9245=x8888;
CheckValue<IkReal> x9247 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9244),IKFAST_ATAN2_MAGTHRESH);
if(!x9247.valid){
continue;
}
IkReal x9246=((-1.0)*(x9247.value));
sj5=gconst1;
cj5=gconst2;
j5=x9246;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9246;
IkReal gconst1=(r21*x9245);
IkReal gconst2=(x9244*x9245);
IkReal x9248=r22*r22;
IkReal x9249=(cj1*r12*sj2);
IkReal x9250=(cj2*r12*sj1);
CheckValue<IkReal> x9254=IKPowWithIntegerCheck(((-1.0)+x9248),-1);
if(!x9254.valid){
continue;
}
IkReal x9251=x9254.value;
if((((1.0)+(((-1.0)*x9248)))) < -0.00001)
continue;
IkReal x9252=IKsqrt(((1.0)+(((-1.0)*x9248))));
IkReal x9253=((1.0)*r22*x9251*x9252);
j4eval[0]=((IKabs((x9250+x9249)))+(IKabs(((((-1.0)*x9250*x9253))+(((-1.0)*x9249*x9253))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9255=((1.0)*gconst1);
IkReal x9256=(cj2*sj1);
IkReal x9257=(gconst2*r10);
IkReal x9258=(cj1*sj2);
CheckValue<IkReal> x9259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9255))+(((-1.0)*gconst2*r01)))),-1);
if(!x9259.valid){
continue;
}
CheckValue<IkReal> x9260 = IKatan2WithCheck(IkReal((((x9257*x9258))+(((-1.0)*r11*x9255*x9258))+(((-1.0)*r11*x9255*x9256))+((x9256*x9257)))),IkReal((((r12*x9258))+((r12*x9256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9259.value)))+(x9260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9261=IKsin(j4);
IkReal x9262=IKcos(j4);
IkReal x9263=((1.0)*x9262);
IkReal x9264=(gconst2*x9262);
IkReal x9265=(gconst1*x9261);
IkReal x9266=((1.0)*x9261);
evalcond[0]=((((-1.0)*gconst2*r20*x9266))+(((-1.0)*r22*x9263))+((r21*x9265)));
evalcond[1]=((((-1.0)*gconst2*r00*x9266))+((r01*x9265))+(((-1.0)*r02*x9263)));
evalcond[2]=((((-1.0)*gconst1*r11*x9263))+((r10*x9264))+(((-1.0)*r12*x9266)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9266))+(((-1.0)*r12*x9263))+((r11*x9265)));
evalcond[4]=((((-1.0)*gconst1*r21*x9263))+((cj2*sj1))+(((-1.0)*r22*x9266))+((cj1*sj2))+((r20*x9264)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9263))+((r00*x9264))+(((-1.0)*r02*x9266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9267=(gconst1*r11);
IkReal x9268=(gconst2*r10);
CheckValue<IkReal> x9269=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9268*x9268)+(((-2.0)*x9267*x9268))+(x9267*x9267))),-1);
if(!x9269.valid){
continue;
}
CheckValue<IkReal> x9270 = IKatan2WithCheck(IkReal((x9268+(((-1.0)*x9267)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9269.value)))+(x9270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9271=IKsin(j4);
IkReal x9272=IKcos(j4);
IkReal x9273=((1.0)*x9272);
IkReal x9274=(gconst2*x9272);
IkReal x9275=(gconst1*x9271);
IkReal x9276=((1.0)*x9271);
evalcond[0]=((((-1.0)*gconst2*r20*x9276))+(((-1.0)*r22*x9273))+((r21*x9275)));
evalcond[1]=((((-1.0)*gconst2*r00*x9276))+((r01*x9275))+(((-1.0)*r02*x9273)));
evalcond[2]=((((-1.0)*gconst1*r11*x9273))+((r10*x9274))+(((-1.0)*r12*x9276)));
evalcond[3]=((1.0)+((r11*x9275))+(((-1.0)*r12*x9273))+(((-1.0)*gconst2*r10*x9276)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9273))+(((-1.0)*r22*x9276))+((cj1*sj2))+((r20*x9274)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9273))+((r00*x9274))+(((-1.0)*r02*x9276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9277=((1.0)*gconst2);
CheckValue<IkReal> x9278=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9277)))),-1);
if(!x9278.valid){
continue;
}
CheckValue<IkReal> x9279 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9277))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9278.value)))+(x9279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9280=IKsin(j4);
IkReal x9281=IKcos(j4);
IkReal x9282=((1.0)*x9281);
IkReal x9283=(gconst2*x9281);
IkReal x9284=(gconst1*x9280);
IkReal x9285=((1.0)*x9280);
evalcond[0]=((((-1.0)*gconst2*r20*x9285))+(((-1.0)*r22*x9282))+((r21*x9284)));
evalcond[1]=((((-1.0)*gconst2*r00*x9285))+((r01*x9284))+(((-1.0)*r02*x9282)));
evalcond[2]=((((-1.0)*r12*x9285))+(((-1.0)*gconst1*r11*x9282))+((r10*x9283)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9282))+((r11*x9284))+(((-1.0)*gconst2*r10*x9285)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9282))+((cj1*sj2))+(((-1.0)*r22*x9285))+((r20*x9283)));
evalcond[5]=((((-1.0)*gconst1*r01*x9282))+((r00*x9283))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9286=((-1.0)*r20);
IkReal x9287=x8888;
CheckValue<IkReal> x9289 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9286),IKFAST_ATAN2_MAGTHRESH);
if(!x9289.valid){
continue;
}
IkReal x9288=((-1.0)*(x9289.value));
sj5=gconst1;
cj5=gconst2;
j5=x9288;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9288;
IkReal gconst1=(r21*x9287);
IkReal gconst2=(x9286*x9287);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9290=((-1.0)*r20);
IkReal x9291=x8888;
CheckValue<IkReal> x9293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9290),IKFAST_ATAN2_MAGTHRESH);
if(!x9293.valid){
continue;
}
IkReal x9292=((-1.0)*(x9293.value));
sj5=gconst1;
cj5=gconst2;
j5=x9292;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9292;
IkReal gconst1=(r21*x9291);
IkReal gconst2=(x9290*x9291);
IkReal x9294=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9298=IKPowWithIntegerCheck(x9294,-1);
if(!x9298.valid){
continue;
}
IkReal x9295=x9298.value;
IkReal x9296=((1.0)*x9295);
IkReal x9297=((((-1.0)*x9296*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9296*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9295)));
j4eval[0]=x9297;
j4eval[1]=r12;
j4eval[2]=x9294;
j4eval[3]=IKsign(x9297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9299=((-1.0)*r20);
IkReal x9300=x8888;
CheckValue<IkReal> x9302 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9299),IKFAST_ATAN2_MAGTHRESH);
if(!x9302.valid){
continue;
}
IkReal x9301=((-1.0)*(x9302.value));
sj5=gconst1;
cj5=gconst2;
j5=x9301;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9301;
IkReal gconst1=(r21*x9300);
IkReal gconst2=(x9299*x9300);
IkReal x9303=r22*r22;
IkReal x9304=(cj1*r12*sj2);
IkReal x9305=(cj2*r12*sj1);
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(((-1.0)+x9303),-1);
if(!x9309.valid){
continue;
}
IkReal x9306=x9309.value;
if((((1.0)+(((-1.0)*x9303)))) < -0.00001)
continue;
IkReal x9307=IKsqrt(((1.0)+(((-1.0)*x9303))));
IkReal x9308=((1.0)*r22*x9306*x9307);
j4eval[0]=((IKabs((x9304+x9305)))+(IKabs(((((-1.0)*x9305*x9308))+(((-1.0)*x9304*x9308))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9310=((1.0)*gconst1);
IkReal x9311=(cj2*sj1);
IkReal x9312=(gconst2*r10);
IkReal x9313=(cj1*sj2);
CheckValue<IkReal> x9314 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9310*x9311))+(((-1.0)*r11*x9310*x9313))+((x9311*x9312))+((x9312*x9313)))),IkReal((((r12*x9313))+((r12*x9311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9314.valid){
continue;
}
CheckValue<IkReal> x9315=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9310)))),-1);
if(!x9315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9314.value)+(((1.5707963267949)*(x9315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9316=IKsin(j4);
IkReal x9317=IKcos(j4);
IkReal x9318=((1.0)*x9317);
IkReal x9319=(gconst2*x9317);
IkReal x9320=(gconst1*x9316);
IkReal x9321=((1.0)*x9316);
evalcond[0]=((((-1.0)*gconst2*r20*x9321))+(((-1.0)*r22*x9318))+((r21*x9320)));
evalcond[1]=(((r01*x9320))+(((-1.0)*r02*x9318))+(((-1.0)*gconst2*r00*x9321)));
evalcond[2]=((((-1.0)*r12*x9321))+(((-1.0)*gconst1*r11*x9318))+((r10*x9319)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9321))+((r11*x9320))+(((-1.0)*r12*x9318)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9318))+(((-1.0)*r22*x9321))+((cj1*sj2))+((r20*x9319)));
evalcond[5]=((((-1.0)*r02*x9321))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9318))+((r00*x9319))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9322=(gconst1*r11);
IkReal x9323=(gconst2*r10);
CheckValue<IkReal> x9324 = IKatan2WithCheck(IkReal(((((-1.0)*x9322))+x9323)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9324.valid){
continue;
}
CheckValue<IkReal> x9325=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9323*x9323)))+(((-1.0)*(r12*r12)))+(((2.0)*x9322*x9323))+(((-1.0)*(x9322*x9322))))),-1);
if(!x9325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9324.value)+(((1.5707963267949)*(x9325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9326=IKsin(j4);
IkReal x9327=IKcos(j4);
IkReal x9328=((1.0)*x9327);
IkReal x9329=(gconst2*x9327);
IkReal x9330=(gconst1*x9326);
IkReal x9331=((1.0)*x9326);
evalcond[0]=((((-1.0)*r22*x9328))+(((-1.0)*gconst2*r20*x9331))+((r21*x9330)));
evalcond[1]=((((-1.0)*r02*x9328))+((r01*x9330))+(((-1.0)*gconst2*r00*x9331)));
evalcond[2]=((((-1.0)*r12*x9331))+((r10*x9329))+(((-1.0)*gconst1*r11*x9328)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9328))+(((-1.0)*gconst2*r10*x9331))+((r11*x9330)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9331))+((r20*x9329))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9328)));
evalcond[5]=((((-1.0)*gconst1*r01*x9328))+(((-1.0)*r02*x9331))+((r00*x9329))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9332 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9332.valid){
continue;
}
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9332.value)+(((1.5707963267949)*(x9333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9334=IKsin(j4);
IkReal x9335=IKcos(j4);
IkReal x9336=((1.0)*x9335);
IkReal x9337=(gconst2*x9335);
IkReal x9338=(gconst1*x9334);
IkReal x9339=((1.0)*x9334);
evalcond[0]=((((-1.0)*r22*x9336))+(((-1.0)*gconst2*r20*x9339))+((r21*x9338)));
evalcond[1]=((((-1.0)*r02*x9336))+((r01*x9338))+(((-1.0)*gconst2*r00*x9339)));
evalcond[2]=((((-1.0)*r12*x9339))+((r10*x9337))+(((-1.0)*gconst1*r11*x9336)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9339))+(((-1.0)*r12*x9336))+((r11*x9338)));
evalcond[4]=(((cj2*sj1))+((r20*x9337))+(((-1.0)*r22*x9339))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9336)));
evalcond[5]=((((-1.0)*r02*x9339))+((r00*x9337))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9340=((-1.0)*r20);
IkReal x9341=x8888;
CheckValue<IkReal> x9343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9340),IKFAST_ATAN2_MAGTHRESH);
if(!x9343.valid){
continue;
}
IkReal x9342=((-1.0)*(x9343.value));
sj5=gconst1;
cj5=gconst2;
j5=x9342;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9342;
IkReal gconst1=(r21*x9341);
IkReal gconst2=(x9340*x9341);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9344=((-1.0)*r20);
IkReal x9345=x8888;
CheckValue<IkReal> x9347 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9344),IKFAST_ATAN2_MAGTHRESH);
if(!x9347.valid){
continue;
}
IkReal x9346=((-1.0)*(x9347.value));
sj5=gconst1;
cj5=gconst2;
j5=x9346;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9346;
IkReal gconst1=(r21*x9345);
IkReal gconst2=(x9344*x9345);
IkReal x9348=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9352=IKPowWithIntegerCheck(x9348,-1);
if(!x9352.valid){
continue;
}
IkReal x9349=x9352.value;
IkReal x9350=((1.0)*x9349);
IkReal x9351=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9349))+(((-1.0)*x9350*(r01*r01)*(r21*r21)))+(((-1.0)*x9350*(r00*r00)*(r20*r20))));
j4eval[0]=x9351;
j4eval[1]=IKsign(x9351);
j4eval[2]=r02;
j4eval[3]=x9348;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9353=((-1.0)*r20);
IkReal x9354=x8888;
CheckValue<IkReal> x9356 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9353),IKFAST_ATAN2_MAGTHRESH);
if(!x9356.valid){
continue;
}
IkReal x9355=((-1.0)*(x9356.value));
sj5=gconst1;
cj5=gconst2;
j5=x9355;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9355;
IkReal gconst1=(r21*x9354);
IkReal gconst2=(x9353*x9354);
IkReal x9357=r22*r22;
IkReal x9358=(cj1*r02*sj2);
IkReal x9359=(cj2*r02*sj1);
CheckValue<IkReal> x9363=IKPowWithIntegerCheck(((-1.0)+x9357),-1);
if(!x9363.valid){
continue;
}
IkReal x9360=x9363.value;
if((((1.0)+(((-1.0)*x9357)))) < -0.00001)
continue;
IkReal x9361=IKsqrt(((1.0)+(((-1.0)*x9357))));
IkReal x9362=((1.0)*r22*x9360*x9361);
j4eval[0]=((IKabs(((((-1.0)*x9358*x9362))+(((-1.0)*x9359*x9362)))))+(IKabs((x9359+x9358))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9364=(cj2*sj1);
IkReal x9365=(cj1*sj2);
IkReal x9366=(gconst2*r00);
IkReal x9367=((1.0)*gconst1*r01);
CheckValue<IkReal> x9368 = IKatan2WithCheck(IkReal((((x9364*x9366))+(((-1.0)*x9365*x9367))+(((-1.0)*x9364*x9367))+((x9365*x9366)))),IkReal((((r02*x9365))+((r02*x9364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9368.valid){
continue;
}
CheckValue<IkReal> x9369=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9368.value)+(((1.5707963267949)*(x9369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9370=IKsin(j4);
IkReal x9371=IKcos(j4);
IkReal x9372=(gconst1*r11);
IkReal x9373=(gconst1*r21);
IkReal x9374=(gconst1*r01);
IkReal x9375=((1.0)*x9371);
IkReal x9376=(gconst2*x9371);
IkReal x9377=((1.0)*x9370);
evalcond[0]=((((-1.0)*r22*x9375))+(((-1.0)*gconst2*r20*x9377))+((x9370*x9373)));
evalcond[1]=((((-1.0)*gconst2*r10*x9377))+(((-1.0)*r12*x9375))+((x9370*x9372)));
evalcond[2]=((((-1.0)*r02*x9377))+(((-1.0)*x9374*x9375))+((r00*x9376)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9375))+(((-1.0)*gconst2*r00*x9377))+((x9370*x9374)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9373*x9375))+(((-1.0)*r22*x9377))+((r20*x9376)));
evalcond[5]=((((-1.0)*x9372*x9375))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9377))+((r10*x9376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9378=(gconst2*r00);
IkReal x9379=(gconst1*r01);
CheckValue<IkReal> x9380=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9379*x9379)))+(((2.0)*x9378*x9379))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9378*x9378))))),-1);
if(!x9380.valid){
continue;
}
CheckValue<IkReal> x9381 = IKatan2WithCheck(IkReal((x9378+(((-1.0)*x9379)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9380.value)))+(x9381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9382=IKsin(j4);
IkReal x9383=IKcos(j4);
IkReal x9384=(gconst1*r11);
IkReal x9385=(gconst1*r21);
IkReal x9386=(gconst1*r01);
IkReal x9387=((1.0)*x9383);
IkReal x9388=(gconst2*x9383);
IkReal x9389=((1.0)*x9382);
evalcond[0]=(((x9382*x9385))+(((-1.0)*gconst2*r20*x9389))+(((-1.0)*r22*x9387)));
evalcond[1]=(((x9382*x9384))+(((-1.0)*r12*x9387))+(((-1.0)*gconst2*r10*x9389)));
evalcond[2]=((((-1.0)*x9386*x9387))+(((-1.0)*r02*x9389))+((r00*x9388)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9387))+((x9382*x9386))+(((-1.0)*gconst2*r00*x9389)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9389))+((r20*x9388))+(((-1.0)*x9385*x9387)));
evalcond[5]=(((r10*x9388))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9384*x9387))+(((-1.0)*r12*x9389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9390=((1.0)*gconst2);
CheckValue<IkReal> x9391 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9390))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9391.valid){
continue;
}
CheckValue<IkReal> x9392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9390))+(((-1.0)*gconst1*r10)))),-1);
if(!x9392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9391.value)+(((1.5707963267949)*(x9392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9393=IKsin(j4);
IkReal x9394=IKcos(j4);
IkReal x9395=(gconst1*r11);
IkReal x9396=(gconst1*r21);
IkReal x9397=(gconst1*r01);
IkReal x9398=((1.0)*x9394);
IkReal x9399=(gconst2*x9394);
IkReal x9400=((1.0)*x9393);
evalcond[0]=(((x9393*x9396))+(((-1.0)*r22*x9398))+(((-1.0)*gconst2*r20*x9400)));
evalcond[1]=((((-1.0)*r12*x9398))+((x9393*x9395))+(((-1.0)*gconst2*r10*x9400)));
evalcond[2]=((((-1.0)*r02*x9400))+(((-1.0)*x9397*x9398))+((r00*x9399)));
evalcond[3]=((-1.0)+((x9393*x9397))+(((-1.0)*r02*x9398))+(((-1.0)*gconst2*r00*x9400)));
evalcond[4]=((((-1.0)*r22*x9400))+((cj2*sj1))+((r20*x9399))+((cj1*sj2))+(((-1.0)*x9396*x9398)));
evalcond[5]=(((r10*x9399))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9400))+(((-1.0)*x9395*x9398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9401=((-1.0)*r20);
IkReal x9402=x8888;
CheckValue<IkReal> x9404 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9401),IKFAST_ATAN2_MAGTHRESH);
if(!x9404.valid){
continue;
}
IkReal x9403=((-1.0)*(x9404.value));
sj5=gconst1;
cj5=gconst2;
j5=x9403;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9403;
IkReal gconst1=(r21*x9402);
IkReal gconst2=(x9401*x9402);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9405=((-1.0)*r20);
IkReal x9406=x8888;
CheckValue<IkReal> x9408 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9405),IKFAST_ATAN2_MAGTHRESH);
if(!x9408.valid){
continue;
}
IkReal x9407=((-1.0)*(x9408.value));
sj5=gconst1;
cj5=gconst2;
j5=x9407;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9407;
IkReal gconst1=(r21*x9406);
IkReal gconst2=(x9405*x9406);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9409=((-1.0)*r20);
IkReal x9410=x8888;
CheckValue<IkReal> x9412 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9409),IKFAST_ATAN2_MAGTHRESH);
if(!x9412.valid){
continue;
}
IkReal x9411=((-1.0)*(x9412.value));
sj5=gconst1;
cj5=gconst2;
j5=x9411;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9411;
IkReal gconst1=(r21*x9410);
IkReal gconst2=(x9409*x9410);
IkReal x9413=r22*r22;
IkReal x9414=(cj1*r02*sj2);
IkReal x9415=(cj2*r02*sj1);
CheckValue<IkReal> x9419=IKPowWithIntegerCheck(((-1.0)+x9413),-1);
if(!x9419.valid){
continue;
}
IkReal x9416=x9419.value;
if((((1.0)+(((-1.0)*x9413)))) < -0.00001)
continue;
IkReal x9417=IKsqrt(((1.0)+(((-1.0)*x9413))));
IkReal x9418=((1.0)*r22*x9416*x9417);
j4eval[0]=((IKabs((x9414+x9415)))+(IKabs(((((-1.0)*x9414*x9418))+(((-1.0)*x9415*x9418))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9420=(cj2*sj1);
IkReal x9421=(cj1*sj2);
IkReal x9422=(gconst2*r00);
IkReal x9423=((1.0)*gconst1*r01);
CheckValue<IkReal> x9424 = IKatan2WithCheck(IkReal(((((-1.0)*x9420*x9423))+(((-1.0)*x9421*x9423))+((x9420*x9422))+((x9421*x9422)))),IkReal((((r02*x9421))+((r02*x9420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9424.valid){
continue;
}
CheckValue<IkReal> x9425=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9424.value)+(((1.5707963267949)*(x9425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9426=IKsin(j4);
IkReal x9427=IKcos(j4);
IkReal x9428=(gconst1*r11);
IkReal x9429=(gconst1*r21);
IkReal x9430=(gconst1*r01);
IkReal x9431=((1.0)*x9427);
IkReal x9432=(gconst2*x9427);
IkReal x9433=((1.0)*x9426);
evalcond[0]=(((x9426*x9429))+(((-1.0)*gconst2*r20*x9433))+(((-1.0)*r22*x9431)));
evalcond[1]=((((-1.0)*gconst2*r10*x9433))+((x9426*x9428))+(((-1.0)*r12*x9431)));
evalcond[2]=((((-1.0)*r02*x9433))+(((-1.0)*x9430*x9431))+((r00*x9432)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9433))+((x9426*x9430))+(((-1.0)*r02*x9431)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9432))+(((-1.0)*r22*x9433))+(((-1.0)*x9429*x9431)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9428*x9431))+(((-1.0)*r12*x9433))+((cj1*cj2))+((r10*x9432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9434=(gconst1*r01);
IkReal x9435=(gconst2*r00);
CheckValue<IkReal> x9436=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9434*x9435))+(x9435*x9435)+(x9434*x9434)+(r02*r02))),-1);
if(!x9436.valid){
continue;
}
CheckValue<IkReal> x9437 = IKatan2WithCheck(IkReal(((((-1.0)*x9434))+x9435)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9436.value)))+(x9437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9438=IKsin(j4);
IkReal x9439=IKcos(j4);
IkReal x9440=(gconst1*r11);
IkReal x9441=(gconst1*r21);
IkReal x9442=(gconst1*r01);
IkReal x9443=((1.0)*x9439);
IkReal x9444=(gconst2*x9439);
IkReal x9445=((1.0)*x9438);
evalcond[0]=((((-1.0)*gconst2*r20*x9445))+(((-1.0)*r22*x9443))+((x9438*x9441)));
evalcond[1]=((((-1.0)*gconst2*r10*x9445))+(((-1.0)*r12*x9443))+((x9438*x9440)));
evalcond[2]=(((r00*x9444))+(((-1.0)*x9442*x9443))+(((-1.0)*r02*x9445)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9445))+((x9438*x9442))+(((-1.0)*r02*x9443)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9441*x9443))+(((-1.0)*r22*x9445))+((r20*x9444)));
evalcond[5]=(((r10*x9444))+(((-1.0)*sj1*sj2))+(((-1.0)*x9440*x9443))+((cj1*cj2))+(((-1.0)*r12*x9445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9446 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9446.valid){
continue;
}
CheckValue<IkReal> x9447=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9446.value)+(((1.5707963267949)*(x9447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9448=IKsin(j4);
IkReal x9449=IKcos(j4);
IkReal x9450=(gconst1*r11);
IkReal x9451=(gconst1*r21);
IkReal x9452=(gconst1*r01);
IkReal x9453=((1.0)*x9449);
IkReal x9454=(gconst2*x9449);
IkReal x9455=((1.0)*x9448);
evalcond[0]=(((x9448*x9451))+(((-1.0)*gconst2*r20*x9455))+(((-1.0)*r22*x9453)));
evalcond[1]=(((x9448*x9450))+(((-1.0)*gconst2*r10*x9455))+(((-1.0)*r12*x9453)));
evalcond[2]=(((r00*x9454))+(((-1.0)*x9452*x9453))+(((-1.0)*r02*x9455)));
evalcond[3]=((1.0)+((x9448*x9452))+(((-1.0)*gconst2*r00*x9455))+(((-1.0)*r02*x9453)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9451*x9453))+((cj1*sj2))+(((-1.0)*r22*x9455))+((r20*x9454)));
evalcond[5]=(((r10*x9454))+(((-1.0)*x9450*x9453))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x9455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9456=((-1.0)*r20);
IkReal x9457=((-1.0)*px);
CheckValue<IkReal> x9459 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9456),IKFAST_ATAN2_MAGTHRESH);
if(!x9459.valid){
continue;
}
IkReal x9458=((-1.0)*(x9459.value));
sj5=gconst1;
cj5=gconst2;
j5=x9458;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9457);
rxp1_1=(px*r21);
rxp1_2=(r11*x9457);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9458;
IkReal gconst1=r21;
IkReal gconst2=x9456;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9460=((-1.0)*r20);
IkReal x9461=((-1.0)*px);
CheckValue<IkReal> x9463 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9460),IKFAST_ATAN2_MAGTHRESH);
if(!x9463.valid){
continue;
}
IkReal x9462=((-1.0)*(x9463.value));
sj5=gconst1;
cj5=gconst2;
j5=x9462;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9461);
rxp1_1=(px*r21);
rxp1_2=(r11*x9461);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9462;
IkReal gconst1=r21;
IkReal gconst2=x9460;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9464=((-1.0)*r20);
IkReal x9465=((-1.0)*px);
CheckValue<IkReal> x9467 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9464),IKFAST_ATAN2_MAGTHRESH);
if(!x9467.valid){
continue;
}
IkReal x9466=((-1.0)*(x9467.value));
sj5=gconst1;
cj5=gconst2;
j5=x9466;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9465);
rxp1_1=(px*r21);
rxp1_2=(r11*x9465);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9466;
IkReal gconst1=r21;
IkReal gconst2=x9464;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9470=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9470.valid){
continue;
}
IkReal x9468=x9470.value;
IkReal x9469=(sj0*x9468);
cj4array[0]=(((cj1*cj2*x9469))+(((-1.0)*sj1*sj2*x9469)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9471=IKsin(j4);
IkReal x9472=IKcos(j4);
IkReal x9473=(gconst1*x9471);
IkReal x9474=((1.0)*x9472);
IkReal x9475=((1.0)*gconst2*x9471);
evalcond[0]=((-1.0)*r02*x9471);
evalcond[1]=((((-1.0)*r02*x9474))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x9473))+(((-1.0)*r20*x9475)));
evalcond[3]=((((-1.0)*r10*x9475))+((r11*x9473)));
evalcond[4]=(((cj2*sj1))+((gconst2*r20*x9472))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9478=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9478.valid){
continue;
}
IkReal x9476=x9478.value;
IkReal x9477=((1.0)*x9476);
cj4array[0]=((((-1.0)*cj2*sj1*x9477))+(((-1.0)*cj1*sj2*x9477)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9479=IKsin(j4);
IkReal x9480=IKcos(j4);
IkReal x9481=(gconst2*r10);
IkReal x9482=((1.0)*sj0);
IkReal x9483=(gconst1*r11);
IkReal x9484=((1.0)*x9479);
IkReal x9485=((1.0)*x9480);
evalcond[0]=((-1.0)*r02*x9479);
evalcond[1]=((((-1.0)*r02*x9485))+(((-1.0)*x9482)));
evalcond[2]=(((gconst1*r21*x9479))+(((-1.0)*gconst2*r20*x9484)));
evalcond[3]=((((-1.0)*x9481*x9484))+((x9479*x9483)));
evalcond[4]=(((x9480*x9481))+((sj0*sj1*sj2))+(((-1.0)*x9483*x9485))+(((-1.0)*cj1*cj2*x9482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9486=IKPowWithIntegerCheck(r02,-1);
if(!x9486.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9486.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9487=IKsin(j4);
IkReal x9488=IKcos(j4);
IkReal x9489=(gconst2*r10);
IkReal x9490=(gconst1*r11);
IkReal x9491=(gconst1*r21);
IkReal x9492=(gconst2*r20);
IkReal x9493=((1.0)*x9487);
IkReal x9494=((1.0)*x9488);
evalcond[0]=((-1.0)*r02*x9487);
evalcond[1]=(((x9487*x9491))+(((-1.0)*x9492*x9493)));
evalcond[2]=(((x9487*x9490))+(((-1.0)*x9489*x9493)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9491*x9494))+((x9488*x9492)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x9488*x9489))+(((-1.0)*x9490*x9494))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9495=(cj2*sj1);
IkReal x9496=(cj1*sj2);
IkReal x9497=(gconst1*r21);
IkReal x9498=((1.0)*gconst2*r20);
CheckValue<IkReal> x9499=IKPowWithIntegerCheck(IKsign(((x9497*x9497)+(r22*r22)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9497)))),-1);
if(!x9499.valid){
continue;
}
CheckValue<IkReal> x9500 = IKatan2WithCheck(IkReal((((r22*x9495))+((r22*x9496)))),IkReal(((((-1.0)*x9496*x9498))+(((-1.0)*x9495*x9498))+((x9496*x9497))+((x9495*x9497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9499.value)))+(x9500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9501=IKsin(j4);
IkReal x9502=IKcos(j4);
IkReal x9503=(gconst1*r11);
IkReal x9504=(sj1*sj2);
IkReal x9505=(gconst1*r21);
IkReal x9506=(gconst1*r01);
IkReal x9507=((1.0)*x9502);
IkReal x9508=(gconst2*x9502);
IkReal x9509=((1.0)*cj1*cj2);
IkReal x9510=((1.0)*x9501);
evalcond[0]=((((-1.0)*gconst2*r20*x9510))+(((-1.0)*r22*x9507))+((x9501*x9505)));
evalcond[1]=(cj0+(((-1.0)*r12*x9507))+(((-1.0)*gconst2*r10*x9510))+((x9501*x9503)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9507))+((x9501*x9506))+(((-1.0)*gconst2*r00*x9510)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9505*x9507))+((cj1*sj2))+((r20*x9508))+(((-1.0)*r22*x9510)));
evalcond[4]=((((-1.0)*r02*x9510))+((cj0*x9504))+(((-1.0)*x9506*x9507))+(((-1.0)*cj0*x9509))+((r00*x9508)));
evalcond[5]=(((r10*x9508))+(((-1.0)*sj0*x9509))+(((-1.0)*x9503*x9507))+((sj0*x9504))+(((-1.0)*r12*x9510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9511=((1.0)*gconst2);
CheckValue<IkReal> x9512 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9511))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9512.valid){
continue;
}
CheckValue<IkReal> x9513=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9511)))),-1);
if(!x9513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9512.value)+(((1.5707963267949)*(x9513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9514=IKsin(j4);
IkReal x9515=IKcos(j4);
IkReal x9516=(gconst1*r11);
IkReal x9517=(sj1*sj2);
IkReal x9518=(gconst1*r21);
IkReal x9519=(gconst1*r01);
IkReal x9520=((1.0)*x9515);
IkReal x9521=(gconst2*x9515);
IkReal x9522=((1.0)*cj1*cj2);
IkReal x9523=((1.0)*x9514);
evalcond[0]=(((x9514*x9518))+(((-1.0)*r22*x9520))+(((-1.0)*gconst2*r20*x9523)));
evalcond[1]=((((-1.0)*r12*x9520))+(((-1.0)*gconst2*r10*x9523))+cj0+((x9514*x9516)));
evalcond[2]=((((-1.0)*sj0))+((x9514*x9519))+(((-1.0)*r02*x9520))+(((-1.0)*gconst2*r00*x9523)));
evalcond[3]=(((cj2*sj1))+((r20*x9521))+((cj1*sj2))+(((-1.0)*r22*x9523))+(((-1.0)*x9518*x9520)));
evalcond[4]=((((-1.0)*cj0*x9522))+((cj0*x9517))+(((-1.0)*r02*x9523))+((r00*x9521))+(((-1.0)*x9519*x9520)));
evalcond[5]=((((-1.0)*r12*x9523))+((r10*x9521))+((sj0*x9517))+(((-1.0)*sj0*x9522))+(((-1.0)*x9516*x9520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9524=((1.0)*gconst2);
CheckValue<IkReal> x9525 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9524))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9525.valid){
continue;
}
CheckValue<IkReal> x9526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9524))+(((-1.0)*gconst1*r00)))),-1);
if(!x9526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9525.value)+(((1.5707963267949)*(x9526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9527=IKsin(j4);
IkReal x9528=IKcos(j4);
IkReal x9529=(gconst1*r11);
IkReal x9530=(sj1*sj2);
IkReal x9531=(gconst1*r21);
IkReal x9532=(gconst1*r01);
IkReal x9533=((1.0)*x9528);
IkReal x9534=(gconst2*x9528);
IkReal x9535=((1.0)*cj1*cj2);
IkReal x9536=((1.0)*x9527);
evalcond[0]=((((-1.0)*r22*x9533))+((x9527*x9531))+(((-1.0)*gconst2*r20*x9536)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9536))+((x9527*x9529))+(((-1.0)*r12*x9533)));
evalcond[2]=((((-1.0)*sj0))+((x9527*x9532))+(((-1.0)*gconst2*r00*x9536))+(((-1.0)*r02*x9533)));
evalcond[3]=(((cj2*sj1))+((r20*x9534))+(((-1.0)*x9531*x9533))+(((-1.0)*r22*x9536))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x9532*x9533))+(((-1.0)*cj0*x9535))+(((-1.0)*r02*x9536))+((cj0*x9530))+((r00*x9534)));
evalcond[5]=(((r10*x9534))+((sj0*x9530))+(((-1.0)*sj0*x9535))+(((-1.0)*x9529*x9533))+(((-1.0)*r12*x9536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9537=((-1.0)*r20);
IkReal x9538=x8888;
CheckValue<IkReal> x9540 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9537),IKFAST_ATAN2_MAGTHRESH);
if(!x9540.valid){
continue;
}
IkReal x9539=((-1.0)*(x9540.value));
sj5=gconst1;
cj5=gconst2;
j5=x9539;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9539;
IkReal gconst1=(r21*x9538);
IkReal gconst2=(x9537*x9538);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9541=((-1.0)*r20);
IkReal x9542=x8888;
CheckValue<IkReal> x9544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9541),IKFAST_ATAN2_MAGTHRESH);
if(!x9544.valid){
continue;
}
IkReal x9543=((-1.0)*(x9544.value));
sj5=gconst1;
cj5=gconst2;
j5=x9543;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9543;
IkReal gconst1=(r21*x9542);
IkReal gconst2=(x9541*x9542);
CheckValue<IkReal> x9552=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9552.valid){
continue;
}
IkReal x9545=x9552.value;
IkReal x9546=(sj3*x9545);
IkReal x9547=(r11*x9546);
IkReal x9548=(r00*x9546);
IkReal x9549=(r01*x9546);
IkReal x9550=(r10*x9546);
IkReal x9551=(r20*r21*x9546);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9547))+((r10*r20*r21*x9549))+((r01*x9547*(r21*r21)))+((r10*x9548*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9553=gconst2*gconst2;
IkReal x9554=gconst1*gconst1;
IkReal x9555=((1.0)*cj3);
IkReal x9556=((1.0)*sj3);
IkReal x9557=(r11*sj3);
IkReal x9558=(r10*sj3);
IkReal x9559=(gconst1*gconst2*r00);
IkReal x9560=(gconst1*gconst2*r01);
IkReal x9561=(r00*x9553);
IkReal x9562=(r01*x9554);
CheckValue<IkReal> x9563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9555*x9562))+(((-1.0)*r02*r12*x9555))+((cj3*r11*x9559))+(((-1.0)*r10*x9555*x9561))+((cj3*r10*x9560)))),-1);
if(!x9563.valid){
continue;
}
CheckValue<IkReal> x9564 = IKatan2WithCheck(IkReal((((gconst1*r02*x9558))+((gconst2*r02*x9557)))),IkReal((((x9558*x9562))+((x9557*x9560))+(((-1.0)*r10*x9556*x9559))+(((-1.0)*r11*x9556*x9561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9563.value)))+(x9564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9565=IKsin(j4);
IkReal x9566=IKcos(j4);
IkReal x9567=(sj1*sj2);
IkReal x9568=(gconst1*sj3);
IkReal x9569=(cj3*gconst1);
IkReal x9570=(cj3*gconst2);
IkReal x9571=((1.0)*cj2);
IkReal x9572=(cj1*sj2);
IkReal x9573=(gconst2*sj3);
IkReal x9574=(cj1*x9571);
IkReal x9575=((1.0)*x9566);
IkReal x9576=((1.0)*x9565);
IkReal x9577=(gconst1*x9565);
IkReal x9578=(cj3*x9565);
IkReal x9579=(x9566*x9573);
evalcond[0]=((((-1.0)*gconst2*r20*x9576))+((r21*x9577))+(((-1.0)*r22*x9575)));
evalcond[1]=((((-1.0)*r02*x9575))+((r01*x9577))+(((-1.0)*gconst2*r00*x9576)));
evalcond[2]=((1.0)+((r11*x9577))+(((-1.0)*r12*x9575))+(((-1.0)*gconst2*r10*x9576)));
evalcond[3]=(((r11*x9573))+((r12*x9578))+(((-1.0)*r10*x9570*x9575))+((r11*x9566*x9569))+((r10*x9568)));
evalcond[4]=((((-1.0)*r11*x9568*x9575))+((r11*x9570))+((r10*x9569))+(((-1.0)*r12*sj3*x9576))+((r10*x9579)));
evalcond[5]=(((cj2*sj1))+((r21*x9566*x9569))+((r21*x9573))+(((-1.0)*r20*x9570*x9575))+((r22*x9578))+x9572+((r20*x9568)));
evalcond[6]=(((r00*x9568))+(((-1.0)*r00*x9570*x9575))+(((-1.0)*x9574))+((r01*x9573))+((r01*x9566*x9569))+x9567+((r02*x9578)));
evalcond[7]=(((r21*x9570))+(((-1.0)*x9574))+(((-1.0)*r22*sj3*x9576))+x9567+((r20*x9579))+((r20*x9569))+(((-1.0)*r21*x9568*x9575)));
evalcond[8]=((((-1.0)*r01*x9568*x9575))+(((-1.0)*r02*sj3*x9576))+((r00*x9569))+(((-1.0)*x9572))+((r00*x9579))+((r01*x9570))+(((-1.0)*sj1*x9571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9580=gconst2*gconst2;
IkReal x9581=gconst1*gconst1;
IkReal x9582=(gconst2*r11);
IkReal x9583=(cj3*r02);
IkReal x9584=(gconst1*r01);
IkReal x9585=(cj3*r10);
IkReal x9586=(r10*sj3);
IkReal x9587=((1.0)*gconst1*r00);
IkReal x9588=(r01*x9581);
IkReal x9589=(r00*x9580);
CheckValue<IkReal> x9590=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9586*x9589))+(((-1.0)*sj3*x9582*x9587))+(((-1.0)*gconst2*x9584*x9586))+((r11*sj3*x9588)))),-1);
if(!x9590.valid){
continue;
}
CheckValue<IkReal> x9591 = IKatan2WithCheck(IkReal((((x9582*x9583))+((gconst1*r10*x9583)))),IkReal(((((-1.0)*gconst2*x9585*x9587))+(((-1.0)*cj3*r11*x9589))+((x9585*x9588))+((cj3*x9582*x9584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9590.value)))+(x9591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9592=IKsin(j4);
IkReal x9593=IKcos(j4);
IkReal x9594=(sj1*sj2);
IkReal x9595=(gconst1*sj3);
IkReal x9596=(cj3*gconst1);
IkReal x9597=(cj3*gconst2);
IkReal x9598=((1.0)*cj2);
IkReal x9599=(cj1*sj2);
IkReal x9600=(gconst2*sj3);
IkReal x9601=(cj1*x9598);
IkReal x9602=((1.0)*x9593);
IkReal x9603=((1.0)*x9592);
IkReal x9604=(gconst1*x9592);
IkReal x9605=(cj3*x9592);
IkReal x9606=(x9593*x9600);
evalcond[0]=((((-1.0)*r22*x9602))+((r21*x9604))+(((-1.0)*gconst2*r20*x9603)));
evalcond[1]=(((r01*x9604))+(((-1.0)*r02*x9602))+(((-1.0)*gconst2*r00*x9603)));
evalcond[2]=((1.0)+((r11*x9604))+(((-1.0)*r12*x9602))+(((-1.0)*gconst2*r10*x9603)));
evalcond[3]=((((-1.0)*r10*x9597*x9602))+((r12*x9605))+((r11*x9600))+((r11*x9593*x9596))+((r10*x9595)));
evalcond[4]=(((r11*x9597))+((r10*x9606))+(((-1.0)*r12*sj3*x9603))+(((-1.0)*r11*x9595*x9602))+((r10*x9596)));
evalcond[5]=(((r20*x9595))+((cj2*sj1))+((r21*x9600))+((r21*x9593*x9596))+x9599+(((-1.0)*r20*x9597*x9602))+((r22*x9605)));
evalcond[6]=(((r01*x9593*x9596))+(((-1.0)*x9601))+((r00*x9595))+((r01*x9600))+(((-1.0)*r00*x9597*x9602))+x9594+((r02*x9605)));
evalcond[7]=(((r20*x9596))+(((-1.0)*x9601))+(((-1.0)*r21*x9595*x9602))+((r20*x9606))+x9594+((r21*x9597))+(((-1.0)*r22*sj3*x9603)));
evalcond[8]=((((-1.0)*sj1*x9598))+(((-1.0)*r02*sj3*x9603))+((r01*x9597))+((r00*x9606))+((r00*x9596))+(((-1.0)*r01*x9595*x9602))+(((-1.0)*x9599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9607=((1.0)*gconst2);
CheckValue<IkReal> x9608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9607))+(((-1.0)*gconst1*r00)))),-1);
if(!x9608.valid){
continue;
}
CheckValue<IkReal> x9609 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9607))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9608.value)))+(x9609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9610=IKsin(j4);
IkReal x9611=IKcos(j4);
IkReal x9612=(sj1*sj2);
IkReal x9613=(gconst1*sj3);
IkReal x9614=(cj3*gconst1);
IkReal x9615=(cj3*gconst2);
IkReal x9616=((1.0)*cj2);
IkReal x9617=(cj1*sj2);
IkReal x9618=(gconst2*sj3);
IkReal x9619=(cj1*x9616);
IkReal x9620=((1.0)*x9611);
IkReal x9621=((1.0)*x9610);
IkReal x9622=(gconst1*x9610);
IkReal x9623=(cj3*x9610);
IkReal x9624=(x9611*x9618);
evalcond[0]=((((-1.0)*r22*x9620))+((r21*x9622))+(((-1.0)*gconst2*r20*x9621)));
evalcond[1]=(((r01*x9622))+(((-1.0)*gconst2*r00*x9621))+(((-1.0)*r02*x9620)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9620))+((r11*x9622))+(((-1.0)*gconst2*r10*x9621)));
evalcond[3]=(((r11*x9611*x9614))+((r10*x9613))+(((-1.0)*r10*x9615*x9620))+((r12*x9623))+((r11*x9618)));
evalcond[4]=(((r10*x9624))+((r10*x9614))+(((-1.0)*r12*sj3*x9621))+((r11*x9615))+(((-1.0)*r11*x9613*x9620)));
evalcond[5]=(((cj2*sj1))+((r20*x9613))+((r21*x9618))+((r22*x9623))+x9617+(((-1.0)*r20*x9615*x9620))+((r21*x9611*x9614)));
evalcond[6]=(((r01*x9611*x9614))+((r00*x9613))+((r01*x9618))+((r02*x9623))+x9612+(((-1.0)*x9619))+(((-1.0)*r00*x9615*x9620)));
evalcond[7]=(((r20*x9614))+(((-1.0)*r21*x9613*x9620))+((r20*x9624))+(((-1.0)*r22*sj3*x9621))+((r21*x9615))+x9612+(((-1.0)*x9619)));
evalcond[8]=(((r00*x9624))+(((-1.0)*r01*x9613*x9620))+((r00*x9614))+((r01*x9615))+(((-1.0)*x9617))+(((-1.0)*r02*sj3*x9621))+(((-1.0)*sj1*x9616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9625=((-1.0)*r20);
IkReal x9626=x8888;
CheckValue<IkReal> x9628 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9625),IKFAST_ATAN2_MAGTHRESH);
if(!x9628.valid){
continue;
}
IkReal x9627=((-1.0)*(x9628.value));
sj5=gconst1;
cj5=gconst2;
j5=x9627;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9627;
IkReal gconst1=(r21*x9626);
IkReal gconst2=(x9625*x9626);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9629=((-1.0)*r20);
IkReal x9630=x8888;
CheckValue<IkReal> x9632 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9629),IKFAST_ATAN2_MAGTHRESH);
if(!x9632.valid){
continue;
}
IkReal x9631=((-1.0)*(x9632.value));
sj5=gconst1;
cj5=gconst2;
j5=x9631;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9631;
IkReal gconst1=(r21*x9630);
IkReal gconst2=(x9629*x9630);
CheckValue<IkReal> x9640=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9640.valid){
continue;
}
IkReal x9633=x9640.value;
IkReal x9634=(sj3*x9633);
IkReal x9635=(r11*x9634);
IkReal x9636=(r00*x9634);
IkReal x9637=(r01*x9634);
IkReal x9638=(r10*x9634);
IkReal x9639=(r20*r21*x9634);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9636*(r20*r20)))+((r00*r20*r21*x9635))+((r01*x9635*(r21*r21)))+((r10*r20*r21*x9637))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9641=gconst2*gconst2;
IkReal x9642=gconst1*gconst1;
IkReal x9643=((1.0)*cj3);
IkReal x9644=((1.0)*sj3);
IkReal x9645=(r11*sj3);
IkReal x9646=(r10*sj3);
IkReal x9647=(gconst1*gconst2*r00);
IkReal x9648=(gconst1*gconst2*r01);
IkReal x9649=(r00*x9641);
IkReal x9650=(r01*x9642);
CheckValue<IkReal> x9651 = IKatan2WithCheck(IkReal((((gconst1*r02*x9646))+((gconst2*r02*x9645)))),IkReal(((((-1.0)*r10*x9644*x9647))+((x9645*x9648))+((x9646*x9650))+(((-1.0)*r11*x9644*x9649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9651.valid){
continue;
}
CheckValue<IkReal> x9652=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9648))+(((-1.0)*r11*x9643*x9650))+(((-1.0)*r02*r12*x9643))+((cj3*r11*x9647))+(((-1.0)*r10*x9643*x9649)))),-1);
if(!x9652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9651.value)+(((1.5707963267949)*(x9652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9653=IKsin(j4);
IkReal x9654=IKcos(j4);
IkReal x9655=(cj2*sj1);
IkReal x9656=(cj1*sj2);
IkReal x9657=(gconst1*sj3);
IkReal x9658=(cj3*gconst1);
IkReal x9659=(sj1*sj2);
IkReal x9660=(cj3*gconst2);
IkReal x9661=(cj1*cj2);
IkReal x9662=(gconst2*sj3);
IkReal x9663=((1.0)*x9654);
IkReal x9664=((1.0)*x9653);
IkReal x9665=(gconst1*x9653);
IkReal x9666=(cj3*x9653);
IkReal x9667=(x9656+x9655);
IkReal x9668=(x9654*x9662);
evalcond[0]=((((-1.0)*gconst2*r20*x9664))+((r21*x9665))+(((-1.0)*r22*x9663)));
evalcond[1]=(((r01*x9665))+(((-1.0)*gconst2*r00*x9664))+(((-1.0)*r02*x9663)));
evalcond[2]=((-1.0)+((r11*x9665))+(((-1.0)*r12*x9663))+(((-1.0)*gconst2*r10*x9664)));
evalcond[3]=((((-1.0)*r10*x9660*x9663))+((r11*x9662))+((r12*x9666))+((r10*x9657))+((r11*x9654*x9658)));
evalcond[4]=((((-1.0)*r11*x9657*x9663))+((r11*x9660))+((r10*x9668))+((r10*x9658))+(((-1.0)*r12*sj3*x9664)));
evalcond[5]=(((r21*x9662))+((r20*x9657))+x9667+((r22*x9666))+(((-1.0)*r20*x9660*x9663))+((r21*x9654*x9658)));
evalcond[6]=((((-1.0)*r00*x9660*x9663))+((r00*x9657))+x9661+((r01*x9662))+((r01*x9654*x9658))+(((-1.0)*x9659))+((r02*x9666)));
evalcond[7]=((((-1.0)*r01*x9657*x9663))+(((-1.0)*r02*sj3*x9664))+((r00*x9668))+((r00*x9658))+x9667+((r01*x9660)));
evalcond[8]=(((r21*x9660))+(((-1.0)*r21*x9657*x9663))+((r20*x9658))+((r20*x9668))+x9659+(((-1.0)*x9661))+(((-1.0)*r22*sj3*x9664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9669=gconst2*gconst2;
IkReal x9670=gconst1*gconst1;
IkReal x9671=(gconst2*r11);
IkReal x9672=(cj3*r02);
IkReal x9673=(gconst1*r01);
IkReal x9674=(cj3*r10);
IkReal x9675=(r10*sj3);
IkReal x9676=((1.0)*gconst1*r00);
IkReal x9677=(r01*x9670);
IkReal x9678=(r00*x9669);
CheckValue<IkReal> x9679 = IKatan2WithCheck(IkReal((((gconst1*r10*x9672))+((x9671*x9672)))),IkReal(((((-1.0)*cj3*r11*x9678))+((cj3*x9671*x9673))+((x9674*x9677))+(((-1.0)*gconst2*x9674*x9676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9679.valid){
continue;
}
CheckValue<IkReal> x9680=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9671*x9676))+((r11*sj3*x9677))+(((-1.0)*gconst2*x9673*x9675))+((x9675*x9678)))),-1);
if(!x9680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9679.value)+(((1.5707963267949)*(x9680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9681=IKsin(j4);
IkReal x9682=IKcos(j4);
IkReal x9683=(cj2*sj1);
IkReal x9684=(cj1*sj2);
IkReal x9685=(gconst1*sj3);
IkReal x9686=(cj3*gconst1);
IkReal x9687=(sj1*sj2);
IkReal x9688=(cj3*gconst2);
IkReal x9689=(cj1*cj2);
IkReal x9690=(gconst2*sj3);
IkReal x9691=((1.0)*x9682);
IkReal x9692=((1.0)*x9681);
IkReal x9693=(gconst1*x9681);
IkReal x9694=(cj3*x9681);
IkReal x9695=(x9683+x9684);
IkReal x9696=(x9682*x9690);
evalcond[0]=(((r21*x9693))+(((-1.0)*r22*x9691))+(((-1.0)*gconst2*r20*x9692)));
evalcond[1]=((((-1.0)*gconst2*r00*x9692))+(((-1.0)*r02*x9691))+((r01*x9693)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9692))+(((-1.0)*r12*x9691))+((r11*x9693)));
evalcond[3]=(((r11*x9682*x9686))+(((-1.0)*r10*x9688*x9691))+((r12*x9694))+((r11*x9690))+((r10*x9685)));
evalcond[4]=((((-1.0)*r11*x9685*x9691))+((r10*x9696))+((r11*x9688))+(((-1.0)*r12*sj3*x9692))+((r10*x9686)));
evalcond[5]=((((-1.0)*r20*x9688*x9691))+((r22*x9694))+((r21*x9690))+x9695+((r20*x9685))+((r21*x9682*x9686)));
evalcond[6]=((((-1.0)*x9687))+(((-1.0)*r00*x9688*x9691))+((r02*x9694))+((r01*x9682*x9686))+x9689+((r01*x9690))+((r00*x9685)));
evalcond[7]=((((-1.0)*r01*x9685*x9691))+(((-1.0)*r02*sj3*x9692))+x9695+((r01*x9688))+((r00*x9696))+((r00*x9686)));
evalcond[8]=((((-1.0)*x9689))+(((-1.0)*r22*sj3*x9692))+(((-1.0)*r21*x9685*x9691))+((r21*x9688))+x9687+((r20*x9686))+((r20*x9696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9697 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9697.valid){
continue;
}
CheckValue<IkReal> x9698=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9697.value)+(((1.5707963267949)*(x9698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9699=IKsin(j4);
IkReal x9700=IKcos(j4);
IkReal x9701=(cj2*sj1);
IkReal x9702=(cj1*sj2);
IkReal x9703=(gconst1*sj3);
IkReal x9704=(cj3*gconst1);
IkReal x9705=(sj1*sj2);
IkReal x9706=(cj3*gconst2);
IkReal x9707=(cj1*cj2);
IkReal x9708=(gconst2*sj3);
IkReal x9709=((1.0)*x9700);
IkReal x9710=((1.0)*x9699);
IkReal x9711=(gconst1*x9699);
IkReal x9712=(cj3*x9699);
IkReal x9713=(x9701+x9702);
IkReal x9714=(x9700*x9708);
evalcond[0]=((((-1.0)*r22*x9709))+(((-1.0)*gconst2*r20*x9710))+((r21*x9711)));
evalcond[1]=((((-1.0)*r02*x9709))+(((-1.0)*gconst2*r00*x9710))+((r01*x9711)));
evalcond[2]=((-1.0)+((r11*x9711))+(((-1.0)*gconst2*r10*x9710))+(((-1.0)*r12*x9709)));
evalcond[3]=((((-1.0)*r10*x9706*x9709))+((r10*x9703))+((r11*x9700*x9704))+((r12*x9712))+((r11*x9708)));
evalcond[4]=(((r10*x9704))+(((-1.0)*r12*sj3*x9710))+((r11*x9706))+((r10*x9714))+(((-1.0)*r11*x9703*x9709)));
evalcond[5]=(((r22*x9712))+((r20*x9703))+((r21*x9700*x9704))+((r21*x9708))+x9713+(((-1.0)*r20*x9706*x9709)));
evalcond[6]=((((-1.0)*x9705))+((r02*x9712))+((r01*x9708))+((r00*x9703))+x9707+((r01*x9700*x9704))+(((-1.0)*r00*x9706*x9709)));
evalcond[7]=((((-1.0)*r02*sj3*x9710))+((r01*x9706))+((r00*x9704))+x9713+((r00*x9714))+(((-1.0)*r01*x9703*x9709)));
evalcond[8]=((((-1.0)*x9707))+(((-1.0)*r21*x9703*x9709))+((r20*x9704))+(((-1.0)*r22*sj3*x9710))+((r21*x9706))+x9705+((r20*x9714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9715=((-1.0)*r20);
IkReal x9716=x8888;
CheckValue<IkReal> x9718 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9715),IKFAST_ATAN2_MAGTHRESH);
if(!x9718.valid){
continue;
}
IkReal x9717=((-1.0)*(x9718.value));
sj5=gconst1;
cj5=gconst2;
j5=x9717;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9717;
IkReal gconst1=(r21*x9716);
IkReal gconst2=(x9715*x9716);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9719=((-1.0)*r20);
IkReal x9720=x8888;
CheckValue<IkReal> x9722 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9719),IKFAST_ATAN2_MAGTHRESH);
if(!x9722.valid){
continue;
}
IkReal x9721=((-1.0)*(x9722.value));
sj5=gconst1;
cj5=gconst2;
j5=x9721;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9721;
IkReal gconst1=(r21*x9720);
IkReal gconst2=(x9719*x9720);
CheckValue<IkReal> x9730=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9730.valid){
continue;
}
IkReal x9723=x9730.value;
IkReal x9724=(sj3*x9723);
IkReal x9725=(r11*x9724);
IkReal x9726=(r00*x9724);
IkReal x9727=(r01*x9724);
IkReal x9728=(r10*x9724);
IkReal x9729=(r20*r21*x9724);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9727))+((r01*x9725*(r21*r21)))+((r00*r20*r21*x9725))+((r10*x9726*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9731=gconst1*gconst1;
IkReal x9732=gconst2*gconst2;
IkReal x9733=((1.0)*cj3);
IkReal x9734=(gconst2*r10);
IkReal x9735=(r01*sj3);
IkReal x9736=(gconst1*r00*sj3);
IkReal x9737=(gconst1*gconst2*r11);
IkReal x9738=(r10*x9732);
IkReal x9739=(r11*x9731);
CheckValue<IkReal> x9740 = IKatan2WithCheck(IkReal((((gconst2*r12*x9735))+((r12*x9736)))),IkReal(((((-1.0)*x9734*x9736))+((x9735*x9737))+(((-1.0)*x9735*x9738))+((r00*sj3*x9739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9740.valid){
continue;
}
CheckValue<IkReal> x9741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9733))+(((-1.0)*r01*x9733*x9739))+((cj3*gconst1*r01*x9734))+((cj3*r00*x9737))+(((-1.0)*r00*x9733*x9738)))),-1);
if(!x9741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9740.value)+(((1.5707963267949)*(x9741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9742=IKsin(j4);
IkReal x9743=IKcos(j4);
IkReal x9744=(sj1*sj2);
IkReal x9745=(gconst1*sj3);
IkReal x9746=(cj3*gconst1);
IkReal x9747=(cj3*gconst2);
IkReal x9748=((1.0)*cj2);
IkReal x9749=(cj1*sj2);
IkReal x9750=(gconst2*sj3);
IkReal x9751=(cj1*x9748);
IkReal x9752=((1.0)*x9743);
IkReal x9753=((1.0)*x9742);
IkReal x9754=(gconst1*x9742);
IkReal x9755=(cj3*x9742);
IkReal x9756=(x9743*x9750);
evalcond[0]=(((r21*x9754))+(((-1.0)*r22*x9752))+(((-1.0)*gconst2*r20*x9753)));
evalcond[1]=(((r11*x9754))+(((-1.0)*gconst2*r10*x9753))+(((-1.0)*r12*x9752)));
evalcond[2]=((-1.0)+((r01*x9754))+(((-1.0)*r02*x9752))+(((-1.0)*gconst2*r00*x9753)));
evalcond[3]=(((r01*x9750))+((r01*x9743*x9746))+((r02*x9755))+((r00*x9745))+(((-1.0)*r00*x9747*x9752)));
evalcond[4]=(((r00*x9756))+(((-1.0)*r01*x9745*x9752))+((r01*x9747))+((r00*x9746))+(((-1.0)*r02*sj3*x9753)));
evalcond[5]=(((r21*x9743*x9746))+((cj2*sj1))+(((-1.0)*r20*x9747*x9752))+((r22*x9755))+((r21*x9750))+x9749+((r20*x9745)));
evalcond[6]=(((r11*x9750))+((r10*x9745))+(((-1.0)*r10*x9747*x9752))+x9744+((r11*x9743*x9746))+((r12*x9755))+(((-1.0)*x9751)));
evalcond[7]=(((r21*x9747))+x9744+((r20*x9746))+(((-1.0)*r22*sj3*x9753))+(((-1.0)*r21*x9745*x9752))+((r20*x9756))+(((-1.0)*x9751)));
evalcond[8]=(((r10*x9756))+((r11*x9747))+(((-1.0)*r11*x9745*x9752))+((r10*x9746))+(((-1.0)*r12*sj3*x9753))+(((-1.0)*x9749))+(((-1.0)*sj1*x9748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9757=gconst2*gconst2;
IkReal x9758=gconst1*gconst1;
IkReal x9759=(gconst1*r00);
IkReal x9760=(r11*sj3);
IkReal x9761=((1.0)*gconst2);
IkReal x9762=(cj3*r12);
IkReal x9763=(cj3*r11);
IkReal x9764=(gconst2*r01);
IkReal x9765=(cj3*r10);
IkReal x9766=(r10*sj3);
CheckValue<IkReal> x9767=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9761*x9766))+(((-1.0)*x9759*x9760*x9761))+((r00*x9757*x9766))+((r01*x9758*x9760)))),-1);
if(!x9767.valid){
continue;
}
CheckValue<IkReal> x9768 = IKatan2WithCheck(IkReal((((x9762*x9764))+((x9759*x9762)))),IkReal((((r00*x9758*x9763))+((gconst1*x9763*x9764))+(((-1.0)*r01*x9757*x9765))+(((-1.0)*x9759*x9761*x9765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9767.value)))+(x9768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9769=IKsin(j4);
IkReal x9770=IKcos(j4);
IkReal x9771=(sj1*sj2);
IkReal x9772=(gconst1*sj3);
IkReal x9773=(cj3*gconst1);
IkReal x9774=(cj3*gconst2);
IkReal x9775=((1.0)*cj2);
IkReal x9776=(cj1*sj2);
IkReal x9777=(gconst2*sj3);
IkReal x9778=(cj1*x9775);
IkReal x9779=((1.0)*x9770);
IkReal x9780=((1.0)*x9769);
IkReal x9781=(gconst1*x9769);
IkReal x9782=(cj3*x9769);
IkReal x9783=(x9770*x9777);
evalcond[0]=(((r21*x9781))+(((-1.0)*gconst2*r20*x9780))+(((-1.0)*r22*x9779)));
evalcond[1]=(((r11*x9781))+(((-1.0)*r12*x9779))+(((-1.0)*gconst2*r10*x9780)));
evalcond[2]=((-1.0)+((r01*x9781))+(((-1.0)*r02*x9779))+(((-1.0)*gconst2*r00*x9780)));
evalcond[3]=(((r01*x9777))+((r01*x9770*x9773))+((r00*x9772))+((r02*x9782))+(((-1.0)*r00*x9774*x9779)));
evalcond[4]=(((r00*x9783))+(((-1.0)*r02*sj3*x9780))+((r01*x9774))+((r00*x9773))+(((-1.0)*r01*x9772*x9779)));
evalcond[5]=((((-1.0)*r20*x9774*x9779))+((cj2*sj1))+((r22*x9782))+((r21*x9770*x9773))+x9776+((r21*x9777))+((r20*x9772)));
evalcond[6]=(((r10*x9772))+x9771+(((-1.0)*r10*x9774*x9779))+((r12*x9782))+((r11*x9770*x9773))+(((-1.0)*x9778))+((r11*x9777)));
evalcond[7]=((((-1.0)*r21*x9772*x9779))+(((-1.0)*r22*sj3*x9780))+x9771+((r21*x9774))+((r20*x9773))+((r20*x9783))+(((-1.0)*x9778)));
evalcond[8]=(((r10*x9773))+(((-1.0)*x9776))+(((-1.0)*r11*x9772*x9779))+(((-1.0)*r12*sj3*x9780))+((r10*x9783))+(((-1.0)*sj1*x9775))+((r11*x9774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9784=((1.0)*gconst2);
CheckValue<IkReal> x9785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9784))+(((-1.0)*gconst1*r10)))),-1);
if(!x9785.valid){
continue;
}
CheckValue<IkReal> x9786 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9784))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9785.value)))+(x9786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9787=IKsin(j4);
IkReal x9788=IKcos(j4);
IkReal x9789=(sj1*sj2);
IkReal x9790=(gconst1*sj3);
IkReal x9791=(cj3*gconst1);
IkReal x9792=(cj3*gconst2);
IkReal x9793=((1.0)*cj2);
IkReal x9794=(cj1*sj2);
IkReal x9795=(gconst2*sj3);
IkReal x9796=(cj1*x9793);
IkReal x9797=((1.0)*x9788);
IkReal x9798=((1.0)*x9787);
IkReal x9799=(gconst1*x9787);
IkReal x9800=(cj3*x9787);
IkReal x9801=(x9788*x9795);
evalcond[0]=(((r21*x9799))+(((-1.0)*gconst2*r20*x9798))+(((-1.0)*r22*x9797)));
evalcond[1]=(((r11*x9799))+(((-1.0)*gconst2*r10*x9798))+(((-1.0)*r12*x9797)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9797))+(((-1.0)*gconst2*r00*x9798))+((r01*x9799)));
evalcond[3]=(((r00*x9790))+((r02*x9800))+((r01*x9795))+((r01*x9788*x9791))+(((-1.0)*r00*x9792*x9797)));
evalcond[4]=((((-1.0)*r01*x9790*x9797))+((r00*x9801))+(((-1.0)*r02*sj3*x9798))+((r00*x9791))+((r01*x9792)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9792*x9797))+((r20*x9790))+((r21*x9788*x9791))+((r22*x9800))+x9794+((r21*x9795)));
evalcond[6]=(((r12*x9800))+((r11*x9795))+((r10*x9790))+(((-1.0)*x9796))+x9789+(((-1.0)*r10*x9792*x9797))+((r11*x9788*x9791)));
evalcond[7]=(((r20*x9791))+(((-1.0)*x9796))+x9789+((r21*x9792))+(((-1.0)*r22*sj3*x9798))+((r20*x9801))+(((-1.0)*r21*x9790*x9797)));
evalcond[8]=(((r10*x9801))+(((-1.0)*sj1*x9793))+((r11*x9792))+((r10*x9791))+(((-1.0)*r12*sj3*x9798))+(((-1.0)*x9794))+(((-1.0)*r11*x9790*x9797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9802=((-1.0)*r20);
IkReal x9803=x8888;
CheckValue<IkReal> x9805 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9802),IKFAST_ATAN2_MAGTHRESH);
if(!x9805.valid){
continue;
}
IkReal x9804=((-1.0)*(x9805.value));
sj5=gconst1;
cj5=gconst2;
j5=x9804;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9804;
IkReal gconst1=(r21*x9803);
IkReal gconst2=(x9802*x9803);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9806=((-1.0)*r20);
IkReal x9807=x8888;
CheckValue<IkReal> x9809 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9806),IKFAST_ATAN2_MAGTHRESH);
if(!x9809.valid){
continue;
}
IkReal x9808=((-1.0)*(x9809.value));
sj5=gconst1;
cj5=gconst2;
j5=x9808;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9808;
IkReal gconst1=(r21*x9807);
IkReal gconst2=(x9806*x9807);
CheckValue<IkReal> x9817=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9817.valid){
continue;
}
IkReal x9810=x9817.value;
IkReal x9811=(sj3*x9810);
IkReal x9812=(r11*x9811);
IkReal x9813=(r00*x9811);
IkReal x9814=(r01*x9811);
IkReal x9815=(r10*x9811);
IkReal x9816=(r20*r21*x9811);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9814))+((r00*r20*r21*x9812))+((r10*x9813*(r20*r20)))+((r01*x9812*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9818=gconst1*gconst1;
IkReal x9819=gconst2*gconst2;
IkReal x9820=((1.0)*cj3);
IkReal x9821=(gconst2*r10);
IkReal x9822=(r01*sj3);
IkReal x9823=(gconst1*r00*sj3);
IkReal x9824=(gconst1*gconst2*r11);
IkReal x9825=(r10*x9819);
IkReal x9826=(r11*x9818);
CheckValue<IkReal> x9827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9820*x9825))+((cj3*gconst1*r01*x9821))+((cj3*r00*x9824))+(((-1.0)*r02*r12*x9820))+(((-1.0)*r01*x9820*x9826)))),-1);
if(!x9827.valid){
continue;
}
CheckValue<IkReal> x9828 = IKatan2WithCheck(IkReal((((gconst2*r12*x9822))+((r12*x9823)))),IkReal((((r00*sj3*x9826))+(((-1.0)*x9822*x9825))+((x9822*x9824))+(((-1.0)*x9821*x9823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9827.value)))+(x9828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9829=IKsin(j4);
IkReal x9830=IKcos(j4);
IkReal x9831=(cj2*sj1);
IkReal x9832=(cj1*sj2);
IkReal x9833=(gconst1*sj3);
IkReal x9834=(cj3*gconst1);
IkReal x9835=(sj1*sj2);
IkReal x9836=(cj3*gconst2);
IkReal x9837=(cj1*cj2);
IkReal x9838=(gconst2*sj3);
IkReal x9839=((1.0)*x9830);
IkReal x9840=((1.0)*x9829);
IkReal x9841=(gconst1*x9829);
IkReal x9842=(cj3*x9829);
IkReal x9843=(x9832+x9831);
IkReal x9844=(x9830*x9838);
evalcond[0]=((((-1.0)*gconst2*r20*x9840))+(((-1.0)*r22*x9839))+((r21*x9841)));
evalcond[1]=(((r11*x9841))+(((-1.0)*gconst2*r10*x9840))+(((-1.0)*r12*x9839)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9840))+(((-1.0)*r02*x9839))+((r01*x9841)));
evalcond[3]=(((r00*x9833))+((r02*x9842))+((r01*x9838))+((r01*x9830*x9834))+(((-1.0)*r00*x9836*x9839)));
evalcond[4]=(((r00*x9834))+((r01*x9836))+(((-1.0)*r01*x9833*x9839))+(((-1.0)*r02*sj3*x9840))+((r00*x9844)));
evalcond[5]=(((r21*x9838))+(((-1.0)*r20*x9836*x9839))+((r20*x9833))+x9843+((r22*x9842))+((r21*x9830*x9834)));
evalcond[6]=(((r11*x9830*x9834))+((r11*x9838))+((r10*x9833))+(((-1.0)*x9835))+(((-1.0)*r10*x9836*x9839))+((r12*x9842))+x9837);
evalcond[7]=((((-1.0)*r12*sj3*x9840))+((r11*x9836))+((r10*x9844))+((r10*x9834))+(((-1.0)*r11*x9833*x9839))+x9843);
evalcond[8]=((((-1.0)*x9837))+((r21*x9836))+((r20*x9844))+(((-1.0)*r22*sj3*x9840))+(((-1.0)*r21*x9833*x9839))+((r20*x9834))+x9835);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9845=gconst2*gconst2;
IkReal x9846=gconst1*gconst1;
IkReal x9847=(gconst1*r00);
IkReal x9848=(r11*sj3);
IkReal x9849=((1.0)*gconst2);
IkReal x9850=(cj3*r12);
IkReal x9851=(cj3*r11);
IkReal x9852=(gconst2*r01);
IkReal x9853=(cj3*r10);
IkReal x9854=(r10*sj3);
CheckValue<IkReal> x9855=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9845*x9854))+((r01*x9846*x9848))+(((-1.0)*gconst1*r01*x9849*x9854))+(((-1.0)*x9847*x9848*x9849)))),-1);
if(!x9855.valid){
continue;
}
CheckValue<IkReal> x9856 = IKatan2WithCheck(IkReal((((x9847*x9850))+((x9850*x9852)))),IkReal(((((-1.0)*r01*x9845*x9853))+((gconst1*x9851*x9852))+(((-1.0)*x9847*x9849*x9853))+((r00*x9846*x9851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9855.value)))+(x9856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9857=IKsin(j4);
IkReal x9858=IKcos(j4);
IkReal x9859=(cj2*sj1);
IkReal x9860=(cj1*sj2);
IkReal x9861=(gconst1*sj3);
IkReal x9862=(cj3*gconst1);
IkReal x9863=(sj1*sj2);
IkReal x9864=(cj3*gconst2);
IkReal x9865=(cj1*cj2);
IkReal x9866=(gconst2*sj3);
IkReal x9867=((1.0)*x9858);
IkReal x9868=((1.0)*x9857);
IkReal x9869=(gconst1*x9857);
IkReal x9870=(cj3*x9857);
IkReal x9871=(x9860+x9859);
IkReal x9872=(x9858*x9866);
evalcond[0]=((((-1.0)*r22*x9867))+((r21*x9869))+(((-1.0)*gconst2*r20*x9868)));
evalcond[1]=((((-1.0)*r12*x9867))+((r11*x9869))+(((-1.0)*gconst2*r10*x9868)));
evalcond[2]=((1.0)+((r01*x9869))+(((-1.0)*gconst2*r00*x9868))+(((-1.0)*r02*x9867)));
evalcond[3]=(((r02*x9870))+((r00*x9861))+((r01*x9866))+(((-1.0)*r00*x9864*x9867))+((r01*x9858*x9862)));
evalcond[4]=(((r00*x9862))+((r01*x9864))+(((-1.0)*r01*x9861*x9867))+((r00*x9872))+(((-1.0)*r02*sj3*x9868)));
evalcond[5]=(((r22*x9870))+((r21*x9858*x9862))+((r21*x9866))+(((-1.0)*r20*x9864*x9867))+((r20*x9861))+x9871);
evalcond[6]=(((r12*x9870))+((r11*x9858*x9862))+((r11*x9866))+(((-1.0)*r10*x9864*x9867))+(((-1.0)*x9863))+((r10*x9861))+x9865);
evalcond[7]=(((r10*x9872))+((r11*x9864))+(((-1.0)*r11*x9861*x9867))+((r10*x9862))+(((-1.0)*r12*sj3*x9868))+x9871);
evalcond[8]=((((-1.0)*r21*x9861*x9867))+((r20*x9872))+(((-1.0)*x9865))+((r21*x9864))+((r20*x9862))+x9863+(((-1.0)*r22*sj3*x9868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9873 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9873.valid){
continue;
}
CheckValue<IkReal> x9874=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9873.value)+(((1.5707963267949)*(x9874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9875=IKsin(j4);
IkReal x9876=IKcos(j4);
IkReal x9877=(cj2*sj1);
IkReal x9878=(cj1*sj2);
IkReal x9879=(gconst1*sj3);
IkReal x9880=(cj3*gconst1);
IkReal x9881=(sj1*sj2);
IkReal x9882=(cj3*gconst2);
IkReal x9883=(cj1*cj2);
IkReal x9884=(gconst2*sj3);
IkReal x9885=((1.0)*x9876);
IkReal x9886=((1.0)*x9875);
IkReal x9887=(gconst1*x9875);
IkReal x9888=(cj3*x9875);
IkReal x9889=(x9878+x9877);
IkReal x9890=(x9876*x9884);
evalcond[0]=((((-1.0)*r22*x9885))+((r21*x9887))+(((-1.0)*gconst2*r20*x9886)));
evalcond[1]=(((r11*x9887))+(((-1.0)*gconst2*r10*x9886))+(((-1.0)*r12*x9885)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9886))+((r01*x9887))+(((-1.0)*r02*x9885)));
evalcond[3]=(((r01*x9876*x9880))+((r01*x9884))+((r00*x9879))+(((-1.0)*r00*x9882*x9885))+((r02*x9888)));
evalcond[4]=(((r01*x9882))+((r00*x9890))+((r00*x9880))+(((-1.0)*r02*sj3*x9886))+(((-1.0)*r01*x9879*x9885)));
evalcond[5]=(((r21*x9884))+(((-1.0)*r20*x9882*x9885))+((r20*x9879))+((r22*x9888))+((r21*x9876*x9880))+x9889);
evalcond[6]=(((r12*x9888))+(((-1.0)*r10*x9882*x9885))+((r10*x9879))+((r11*x9884))+((r11*x9876*x9880))+(((-1.0)*x9881))+x9883);
evalcond[7]=(((r11*x9882))+(((-1.0)*r12*sj3*x9886))+((r10*x9880))+((r10*x9890))+(((-1.0)*r11*x9879*x9885))+x9889);
evalcond[8]=((((-1.0)*r22*sj3*x9886))+((r20*x9880))+((r21*x9882))+(((-1.0)*r21*x9879*x9885))+((r20*x9890))+(((-1.0)*x9883))+x9881);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9891=((-1.0)*r20);
IkReal x9892=((-1.0)*px);
CheckValue<IkReal> x9894 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9891),IKFAST_ATAN2_MAGTHRESH);
if(!x9894.valid){
continue;
}
IkReal x9893=((-1.0)*(x9894.value));
sj5=gconst1;
cj5=gconst2;
j5=x9893;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9892);
rxp1_1=(px*r21);
rxp1_2=(r11*x9892);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9893;
IkReal gconst1=r21;
IkReal gconst2=x9891;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9895=((-1.0)*r20);
IkReal x9896=((-1.0)*px);
CheckValue<IkReal> x9898 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9895),IKFAST_ATAN2_MAGTHRESH);
if(!x9898.valid){
continue;
}
IkReal x9897=((-1.0)*(x9898.value));
sj5=gconst1;
cj5=gconst2;
j5=x9897;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9896);
rxp1_1=(px*r21);
rxp1_2=(r11*x9896);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9897;
IkReal gconst1=r21;
IkReal gconst2=x9895;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9899=((-1.0)*r20);
IkReal x9900=((-1.0)*px);
CheckValue<IkReal> x9902 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9899),IKFAST_ATAN2_MAGTHRESH);
if(!x9902.valid){
continue;
}
IkReal x9901=((-1.0)*(x9902.value));
sj5=gconst1;
cj5=gconst2;
j5=x9901;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9900);
rxp1_1=(px*r21);
rxp1_2=(r11*x9900);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9901;
IkReal gconst1=r21;
IkReal gconst2=x9899;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9903=((-1.0)*r20);
IkReal x9904=((-1.0)*px);
CheckValue<IkReal> x9906 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9903),IKFAST_ATAN2_MAGTHRESH);
if(!x9906.valid){
continue;
}
IkReal x9905=((-1.0)*(x9906.value));
sj5=gconst1;
cj5=gconst2;
j5=x9905;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9904);
rxp1_1=(px*r21);
rxp1_2=(r11*x9904);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9905;
IkReal gconst1=r21;
IkReal gconst2=x9903;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9907=((-1.0)*r20);
IkReal x9908=((-1.0)*px);
CheckValue<IkReal> x9910 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9907),IKFAST_ATAN2_MAGTHRESH);
if(!x9910.valid){
continue;
}
IkReal x9909=((-1.0)*(x9910.value));
sj5=gconst1;
cj5=gconst2;
j5=x9909;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9908);
rxp1_1=(px*r21);
rxp1_2=(r11*x9908);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9909;
IkReal gconst1=r21;
IkReal gconst2=x9907;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9911=((-1.0)*r20);
IkReal x9912=((-1.0)*px);
CheckValue<IkReal> x9914 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9911),IKFAST_ATAN2_MAGTHRESH);
if(!x9914.valid){
continue;
}
IkReal x9913=((-1.0)*(x9914.value));
sj5=gconst1;
cj5=gconst2;
j5=x9913;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9912);
rxp1_1=(px*r21);
rxp1_2=(r11*x9912);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9913;
IkReal gconst1=r21;
IkReal gconst2=x9911;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9917=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9917.valid){
continue;
}
IkReal x9915=x9917.value;
IkReal x9916=(sj0*x9915);
cj4array[0]=(((cj1*sj2*x9916))+((cj2*sj1*x9916)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9918=IKsin(j4);
IkReal x9919=IKcos(j4);
IkReal x9920=(gconst1*x9918);
IkReal x9921=((1.0)*x9919);
IkReal x9922=((1.0)*gconst2*x9918);
evalcond[0]=((-1.0)*r02*x9918);
evalcond[1]=((((-1.0)*r02*x9921))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9922))+((r21*x9920)));
evalcond[3]=((((-1.0)*r10*x9922))+((r11*x9920)));
evalcond[4]=((((-1.0)*gconst1*r21*x9921))+((gconst2*r20*x9919))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9924=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9924.valid){
continue;
}
IkReal x9923=x9924.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9923))+((cj1*cj2*x9923)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9925=IKsin(j4);
IkReal x9926=IKcos(j4);
IkReal x9927=(gconst2*r10);
IkReal x9928=((1.0)*sj0);
IkReal x9929=((1.0)*x9925);
IkReal x9930=(gconst1*x9925);
IkReal x9931=((1.0)*x9926);
evalcond[0]=((-1.0)*r02*x9925);
evalcond[1]=((((-1.0)*r02*x9931))+(((-1.0)*x9928)));
evalcond[2]=((((-1.0)*gconst2*r20*x9929))+((r21*x9930)));
evalcond[3]=((((-1.0)*x9927*x9929))+((r11*x9930)));
evalcond[4]=((((-1.0)*gconst1*r11*x9931))+(((-1.0)*cj2*sj1*x9928))+((x9926*x9927))+(((-1.0)*cj1*sj2*x9928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9932=IKPowWithIntegerCheck(r02,-1);
if(!x9932.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9932.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9933=IKsin(j4);
IkReal x9934=IKcos(j4);
IkReal x9935=(gconst2*r10);
IkReal x9936=((1.0)*sj0);
IkReal x9937=(gconst1*r11);
IkReal x9938=(gconst1*r21);
IkReal x9939=(gconst2*r20);
IkReal x9940=((1.0)*x9933);
IkReal x9941=((1.0)*x9934);
evalcond[0]=((-1.0)*r02*x9933);
evalcond[1]=(((x9933*x9938))+(((-1.0)*x9939*x9940)));
evalcond[2]=(((x9933*x9937))+(((-1.0)*x9935*x9940)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9938*x9941))+((x9934*x9939)));
evalcond[4]=((((-1.0)*cj2*sj1*x9936))+(((-1.0)*cj1*sj2*x9936))+(((-1.0)*x9937*x9941))+((x9934*x9935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9942=((-1.0)*r20);
IkReal x9943=((-1.0)*px);
CheckValue<IkReal> x9945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9942),IKFAST_ATAN2_MAGTHRESH);
if(!x9945.valid){
continue;
}
IkReal x9944=((-1.0)*(x9945.value));
sj5=gconst1;
cj5=gconst2;
j5=x9944;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9943);
rxp1_1=(px*r21);
rxp1_2=(r11*x9943);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9944;
IkReal gconst1=r21;
IkReal gconst2=x9942;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9946=((-1.0)*r20);
IkReal x9947=((-1.0)*px);
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9946),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
IkReal x9948=((-1.0)*(x9949.value));
sj5=gconst1;
cj5=gconst2;
j5=x9948;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9947);
rxp1_1=(px*r21);
rxp1_2=(r11*x9947);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9948;
IkReal gconst1=r21;
IkReal gconst2=x9946;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9950=((-1.0)*r20);
IkReal x9951=((-1.0)*px);
CheckValue<IkReal> x9953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9950),IKFAST_ATAN2_MAGTHRESH);
if(!x9953.valid){
continue;
}
IkReal x9952=((-1.0)*(x9953.value));
sj5=gconst1;
cj5=gconst2;
j5=x9952;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9951);
rxp1_1=(px*r21);
rxp1_2=(r11*x9951);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9952;
IkReal gconst1=r21;
IkReal gconst2=x9950;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9956=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9956.valid){
continue;
}
IkReal x9954=x9956.value;
IkReal x9955=(sj0*x9954);
cj4array[0]=(((cj1*sj2*x9955))+((cj2*sj1*x9955)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9957=IKsin(j4);
IkReal x9958=IKcos(j4);
IkReal x9959=((1.0)*gconst2);
IkReal x9960=(gconst1*r21);
evalcond[0]=(r02*x9957);
evalcond[1]=((((-1.0)*r02*x9958))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9957*x9959))+((x9957*x9960)));
evalcond[3]=(((gconst1*r11*x9957))+(((-1.0)*r10*x9957*x9959)));
evalcond[4]=(((x9958*x9960))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9958*x9959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9962=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9962.valid){
continue;
}
IkReal x9961=x9962.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9961))+((cj1*cj2*x9961)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9963=IKsin(j4);
IkReal x9964=IKcos(j4);
IkReal x9965=((1.0)*sj0);
IkReal x9966=(gconst1*x9963);
IkReal x9967=((1.0)*x9964);
IkReal x9968=((1.0)*gconst2*x9963);
evalcond[0]=(r02*x9963);
evalcond[1]=((((-1.0)*x9965))+(((-1.0)*r02*x9967)));
evalcond[2]=(((r21*x9966))+(((-1.0)*r20*x9968)));
evalcond[3]=((((-1.0)*r10*x9968))+((r11*x9966)));
evalcond[4]=((((-1.0)*cj2*sj1*x9965))+(((-1.0)*cj1*sj2*x9965))+((gconst1*r11*x9964))+(((-1.0)*gconst2*r10*x9967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9969=IKPowWithIntegerCheck(r02,-1);
if(!x9969.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9969.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9970=IKsin(j4);
IkReal x9971=IKcos(j4);
IkReal x9972=(gconst1*r21);
IkReal x9973=((1.0)*sj0);
IkReal x9974=(gconst1*r11);
IkReal x9975=((1.0)*gconst2*r10);
IkReal x9976=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9970);
evalcond[1]=((((-1.0)*x9970*x9976))+((x9970*x9972)));
evalcond[2]=((((-1.0)*x9970*x9975))+((x9970*x9974)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9971*x9976))+((x9971*x9972)));
evalcond[4]=((((-1.0)*cj2*sj1*x9973))+(((-1.0)*cj1*sj2*x9973))+(((-1.0)*x9971*x9975))+((x9971*x9974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9978=IKPowWithIntegerCheck(r02,-1);
if(!x9978.valid){
continue;
}
IkReal x9977=x9978.value;
CheckValue<IkReal> x9979=IKPowWithIntegerCheck(cj3,-1);
if(!x9979.valid){
continue;
}
if( IKabs((x9977*(x9979.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9977)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9977*(x9979.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9977))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9977*(x9979.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9977));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9980=IKsin(j4);
IkReal x9981=IKcos(j4);
IkReal x9982=(gconst2*r10);
IkReal x9983=(gconst1*r11);
IkReal x9984=(sj1*sj2);
IkReal x9985=(gconst2*r20);
IkReal x9986=(cj2*sj1);
IkReal x9987=((1.0)*sj0);
IkReal x9988=(gconst1*r20);
IkReal x9989=(gconst2*r11);
IkReal x9990=(gconst1*r21);
IkReal x9991=((1.0)*cj0);
IkReal x9992=(gconst1*r10);
IkReal x9993=(cj1*sj2);
IkReal x9994=(gconst2*r21);
IkReal x9995=(sj3*x9981);
IkReal x9996=((1.0)*cj1*cj2);
IkReal x9997=(cj3*x9981);
IkReal x9998=(r02*x9980);
IkReal x9999=((1.0)*x9980);
evalcond[0]=((((-1.0)*r02*x9981))+(((-1.0)*x9987)));
evalcond[1]=(((x9980*x9990))+(((-1.0)*x9985*x9999)));
evalcond[2]=(cj0+(((-1.0)*x9982*x9999))+((x9980*x9983)));
evalcond[3]=(((cj3*x9998))+((cj0*x9984))+(((-1.0)*cj1*cj2*x9991)));
evalcond[4]=((((-1.0)*x9991*x9993))+(((-1.0)*sj3*x9998))+(((-1.0)*x9986*x9991)));
evalcond[5]=((((-1.0)*x9985*x9997))+((x9990*x9997))+((sj3*x9988))+((sj3*x9994))+x9986+x9993);
evalcond[6]=(((cj3*x9988))+((cj3*x9994))+((x9985*x9995))+(((-1.0)*x9990*x9995))+x9984+(((-1.0)*x9996)));
evalcond[7]=((((-1.0)*x9982*x9997))+((x9983*x9997))+((sj0*x9984))+((sj3*x9989))+((sj3*x9992))+(((-1.0)*cj1*cj2*x9987)));
evalcond[8]=(((cj3*x9989))+((cj3*x9992))+(((-1.0)*x9983*x9995))+((x9982*x9995))+(((-1.0)*x9986*x9987))+(((-1.0)*x9987*x9993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10000=((1.0)*sj3);
IkReal x10001=((1.0)*gconst2);
CheckValue<IkReal> x10002=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10001))),-1);
if(!x10002.valid){
continue;
}
CheckValue<IkReal> x10003=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10001))),-1);
if(!x10003.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10002.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10003.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x10000))+(((-1.0)*gconst1*r20*x10000))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10002.value)))+IKsqr(((x10003.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x10000))+(((-1.0)*gconst1*r20*x10000))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10002.value)), ((x10003.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x10000))+(((-1.0)*gconst1*r20*x10000))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10004=IKsin(j4);
IkReal x10005=IKcos(j4);
IkReal x10006=(gconst2*r10);
IkReal x10007=(gconst1*r11);
IkReal x10008=(sj1*sj2);
IkReal x10009=(gconst2*r20);
IkReal x10010=(cj2*sj1);
IkReal x10011=((1.0)*sj0);
IkReal x10012=(gconst1*r20);
IkReal x10013=(gconst2*r11);
IkReal x10014=(gconst1*r21);
IkReal x10015=((1.0)*cj0);
IkReal x10016=(gconst1*r10);
IkReal x10017=(cj1*sj2);
IkReal x10018=(gconst2*r21);
IkReal x10019=(sj3*x10005);
IkReal x10020=((1.0)*cj1*cj2);
IkReal x10021=(cj3*x10005);
IkReal x10022=(r02*x10004);
IkReal x10023=((1.0)*x10004);
evalcond[0]=((((-1.0)*r02*x10005))+(((-1.0)*x10011)));
evalcond[1]=((((-1.0)*x10009*x10023))+((x10004*x10014)));
evalcond[2]=(cj0+((x10004*x10007))+(((-1.0)*x10006*x10023)));
evalcond[3]=(((cj0*x10008))+(((-1.0)*cj1*cj2*x10015))+((cj3*x10022)));
evalcond[4]=((((-1.0)*x10015*x10017))+(((-1.0)*sj3*x10022))+(((-1.0)*x10010*x10015)));
evalcond[5]=((((-1.0)*x10009*x10021))+x10010+x10017+((sj3*x10018))+((sj3*x10012))+((x10014*x10021)));
evalcond[6]=(((x10009*x10019))+((cj3*x10018))+((cj3*x10012))+x10008+(((-1.0)*x10020))+(((-1.0)*x10014*x10019)));
evalcond[7]=(((x10007*x10021))+(((-1.0)*cj1*cj2*x10011))+((sj3*x10016))+((sj3*x10013))+(((-1.0)*x10006*x10021))+((sj0*x10008)));
evalcond[8]=((((-1.0)*x10007*x10019))+((x10006*x10019))+((cj3*x10013))+((cj3*x10016))+(((-1.0)*x10011*x10017))+(((-1.0)*x10010*x10011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10024=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10024.valid){
continue;
}
CheckValue<IkReal> x10025=IKPowWithIntegerCheck(r02,-1);
if(!x10025.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10024.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10025.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10024.value)))+IKsqr(((-1.0)*sj0*(x10025.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10024.value)), ((-1.0)*sj0*(x10025.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10026=IKsin(j4);
IkReal x10027=IKcos(j4);
IkReal x10028=(gconst2*r10);
IkReal x10029=(gconst1*r11);
IkReal x10030=(sj1*sj2);
IkReal x10031=(gconst2*r20);
IkReal x10032=(cj2*sj1);
IkReal x10033=((1.0)*sj0);
IkReal x10034=(gconst1*r20);
IkReal x10035=(gconst2*r11);
IkReal x10036=(gconst1*r21);
IkReal x10037=((1.0)*cj0);
IkReal x10038=(gconst1*r10);
IkReal x10039=(cj1*sj2);
IkReal x10040=(gconst2*r21);
IkReal x10041=(sj3*x10027);
IkReal x10042=((1.0)*cj1*cj2);
IkReal x10043=(cj3*x10027);
IkReal x10044=(r02*x10026);
IkReal x10045=((1.0)*x10026);
evalcond[0]=((((-1.0)*r02*x10027))+(((-1.0)*x10033)));
evalcond[1]=(((x10026*x10036))+(((-1.0)*x10031*x10045)));
evalcond[2]=(cj0+(((-1.0)*x10028*x10045))+((x10026*x10029)));
evalcond[3]=(((cj0*x10030))+(((-1.0)*cj1*cj2*x10037))+((cj3*x10044)));
evalcond[4]=((((-1.0)*sj3*x10044))+(((-1.0)*x10037*x10039))+(((-1.0)*x10032*x10037)));
evalcond[5]=(((x10036*x10043))+((sj3*x10034))+((sj3*x10040))+x10039+x10032+(((-1.0)*x10031*x10043)));
evalcond[6]=(((x10031*x10041))+(((-1.0)*x10036*x10041))+x10030+((cj3*x10034))+((cj3*x10040))+(((-1.0)*x10042)));
evalcond[7]=((((-1.0)*x10028*x10043))+((sj0*x10030))+((sj3*x10038))+((sj3*x10035))+((x10029*x10043))+(((-1.0)*cj1*cj2*x10033)));
evalcond[8]=((((-1.0)*x10029*x10041))+((x10028*x10041))+((cj3*x10038))+((cj3*x10035))+(((-1.0)*x10032*x10033))+(((-1.0)*x10033*x10039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10046=gconst1*gconst1;
IkReal x10047=r21*r21;
IkReal x10048=gconst2*gconst2;
IkReal x10049=r20*r20;
IkReal x10050=(gconst2*r20);
IkReal x10051=(cj1*cj2);
IkReal x10052=(sj1*sj2);
IkReal x10053=(gconst1*r21);
IkReal x10054=(cj3*gconst2);
IkReal x10055=(cj3*r20);
CheckValue<IkReal> x10056 = IKatan2WithCheck(IkReal((((r21*r22*x10054))+((gconst1*r22*x10055))+(((-1.0)*r22*x10051))+((r22*x10052)))),IkReal((((r21*x10046*x10055))+(((-1.0)*x10050*x10052))+(((-1.0)*x10051*x10053))+(((-1.0)*gconst1*x10049*x10054))+(((-1.0)*r21*x10048*x10055))+((gconst1*x10047*x10054))+((x10052*x10053))+((x10050*x10051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10056.valid){
continue;
}
CheckValue<IkReal> x10057=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10046*x10047))+(((-2.0)*sj3*x10050*x10053))+((sj3*x10048*x10049)))),-1);
if(!x10057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10056.value)+(((1.5707963267949)*(x10057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10058=IKsin(j4);
IkReal x10059=IKcos(j4);
IkReal x10060=(cj3*gconst1);
IkReal x10061=(gconst1*r01);
IkReal x10062=(gconst1*r11);
IkReal x10063=(sj1*sj2);
IkReal x10064=(cj3*gconst2);
IkReal x10065=(gconst1*sj3);
IkReal x10066=(gconst2*sj3);
IkReal x10067=((1.0)*sj0);
IkReal x10068=(cj1*sj2);
IkReal x10069=((1.0)*x10059);
IkReal x10070=((1.0)*x10058);
IkReal x10071=((1.0)*cj1*cj2);
IkReal x10072=(cj3*x10058);
IkReal x10073=((1.0)*cj2*sj1);
IkReal x10074=(x10059*x10066);
evalcond[0]=(((gconst1*r21*x10058))+(((-1.0)*r22*x10069))+(((-1.0)*gconst2*r20*x10070)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10070))+(((-1.0)*r12*x10069))+((x10058*x10062)));
evalcond[2]=((((-1.0)*x10067))+(((-1.0)*gconst2*r00*x10070))+((x10058*x10061))+(((-1.0)*r02*x10069)));
evalcond[3]=(((cj2*sj1))+((r21*x10059*x10060))+((r20*x10065))+x10068+((r22*x10072))+(((-1.0)*r20*x10064*x10069))+((r21*x10066)));
evalcond[4]=((((-1.0)*r22*sj3*x10070))+((r20*x10060))+((r20*x10074))+(((-1.0)*x10071))+x10063+((r21*x10064))+(((-1.0)*r21*x10065*x10069)));
evalcond[5]=((((-1.0)*r00*x10064*x10069))+(((-1.0)*cj0*x10071))+((r01*x10059*x10060))+((r00*x10065))+((r01*x10066))+((r02*x10072))+((cj0*x10063)));
evalcond[6]=(((r10*x10065))+((r12*x10072))+(((-1.0)*cj1*cj2*x10067))+((sj0*x10063))+((r11*x10066))+(((-1.0)*r10*x10064*x10069))+((r11*x10059*x10060)));
evalcond[7]=((((-1.0)*sj3*x10061*x10069))+(((-1.0)*cj0*x10073))+((r00*x10060))+((r00*x10074))+((r01*x10064))+(((-1.0)*cj0*x10068))+(((-1.0)*r02*sj3*x10070)));
evalcond[8]=(((r10*x10074))+((r10*x10060))+(((-1.0)*r12*sj3*x10070))+(((-1.0)*x10067*x10068))+(((-1.0)*sj3*x10062*x10069))+(((-1.0)*cj2*sj1*x10067))+((r11*x10064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10075=((1.0)*gconst2);
CheckValue<IkReal> x10076 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10075))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10076.valid){
continue;
}
CheckValue<IkReal> x10077=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10075)))),-1);
if(!x10077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10076.value)+(((1.5707963267949)*(x10077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10078=IKsin(j4);
IkReal x10079=IKcos(j4);
IkReal x10080=(cj3*gconst1);
IkReal x10081=(gconst1*r01);
IkReal x10082=(gconst1*r11);
IkReal x10083=(sj1*sj2);
IkReal x10084=(cj3*gconst2);
IkReal x10085=(gconst1*sj3);
IkReal x10086=(gconst2*sj3);
IkReal x10087=((1.0)*sj0);
IkReal x10088=(cj1*sj2);
IkReal x10089=((1.0)*x10079);
IkReal x10090=((1.0)*x10078);
IkReal x10091=((1.0)*cj1*cj2);
IkReal x10092=(cj3*x10078);
IkReal x10093=((1.0)*cj2*sj1);
IkReal x10094=(x10079*x10086);
evalcond[0]=(((gconst1*r21*x10078))+(((-1.0)*gconst2*r20*x10090))+(((-1.0)*r22*x10089)));
evalcond[1]=(cj0+((x10078*x10082))+(((-1.0)*gconst2*r10*x10090))+(((-1.0)*r12*x10089)));
evalcond[2]=(((x10078*x10081))+(((-1.0)*gconst2*r00*x10090))+(((-1.0)*x10087))+(((-1.0)*r02*x10089)));
evalcond[3]=(((cj2*sj1))+((r20*x10085))+x10088+((r22*x10092))+((r21*x10086))+((r21*x10079*x10080))+(((-1.0)*r20*x10084*x10089)));
evalcond[4]=((((-1.0)*r22*sj3*x10090))+(((-1.0)*r21*x10085*x10089))+((r20*x10080))+x10083+((r21*x10084))+((r20*x10094))+(((-1.0)*x10091)));
evalcond[5]=(((r00*x10085))+((r01*x10086))+((r01*x10079*x10080))+((r02*x10092))+((cj0*x10083))+(((-1.0)*cj0*x10091))+(((-1.0)*r00*x10084*x10089)));
evalcond[6]=((((-1.0)*cj1*cj2*x10087))+((r12*x10092))+((sj0*x10083))+(((-1.0)*r10*x10084*x10089))+((r10*x10085))+((r11*x10079*x10080))+((r11*x10086)));
evalcond[7]=((((-1.0)*sj3*x10081*x10089))+((r00*x10080))+((r01*x10084))+(((-1.0)*r02*sj3*x10090))+(((-1.0)*cj0*x10088))+(((-1.0)*cj0*x10093))+((r00*x10094)));
evalcond[8]=((((-1.0)*sj3*x10082*x10089))+(((-1.0)*x10087*x10088))+(((-1.0)*cj2*sj1*x10087))+(((-1.0)*r12*sj3*x10090))+((r10*x10094))+((r10*x10080))+((r11*x10084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10095=((1.0)*gconst2);
CheckValue<IkReal> x10096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10095))+(((-1.0)*gconst1*r00)))),-1);
if(!x10096.valid){
continue;
}
CheckValue<IkReal> x10097 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10096.value)))+(x10097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10098=IKsin(j4);
IkReal x10099=IKcos(j4);
IkReal x10100=(cj3*gconst1);
IkReal x10101=(gconst1*r01);
IkReal x10102=(gconst1*r11);
IkReal x10103=(sj1*sj2);
IkReal x10104=(cj3*gconst2);
IkReal x10105=(gconst1*sj3);
IkReal x10106=(gconst2*sj3);
IkReal x10107=((1.0)*sj0);
IkReal x10108=(cj1*sj2);
IkReal x10109=((1.0)*x10099);
IkReal x10110=((1.0)*x10098);
IkReal x10111=((1.0)*cj1*cj2);
IkReal x10112=(cj3*x10098);
IkReal x10113=((1.0)*cj2*sj1);
IkReal x10114=(x10099*x10106);
evalcond[0]=((((-1.0)*gconst2*r20*x10110))+(((-1.0)*r22*x10109))+((gconst1*r21*x10098)));
evalcond[1]=((((-1.0)*r12*x10109))+cj0+((x10098*x10102))+(((-1.0)*gconst2*r10*x10110)));
evalcond[2]=(((x10098*x10101))+(((-1.0)*r02*x10109))+(((-1.0)*gconst2*r00*x10110))+(((-1.0)*x10107)));
evalcond[3]=(((r21*x10106))+((cj2*sj1))+((r20*x10105))+x10108+((r21*x10099*x10100))+((r22*x10112))+(((-1.0)*r20*x10104*x10109)));
evalcond[4]=(((r21*x10104))+((r20*x10114))+((r20*x10100))+(((-1.0)*r21*x10105*x10109))+x10103+(((-1.0)*r22*sj3*x10110))+(((-1.0)*x10111)));
evalcond[5]=(((cj0*x10103))+((r01*x10106))+((r00*x10105))+(((-1.0)*cj0*x10111))+(((-1.0)*r00*x10104*x10109))+((r02*x10112))+((r01*x10099*x10100)));
evalcond[6]=((((-1.0)*cj1*cj2*x10107))+((sj0*x10103))+((r11*x10106))+((r12*x10112))+((r10*x10105))+(((-1.0)*r10*x10104*x10109))+((r11*x10099*x10100)));
evalcond[7]=(((r01*x10104))+((r00*x10100))+((r00*x10114))+(((-1.0)*cj0*x10113))+(((-1.0)*sj3*x10101*x10109))+(((-1.0)*r02*sj3*x10110))+(((-1.0)*cj0*x10108)));
evalcond[8]=((((-1.0)*sj3*x10102*x10109))+(((-1.0)*r12*sj3*x10110))+(((-1.0)*cj2*sj1*x10107))+((r11*x10104))+((r10*x10100))+((r10*x10114))+(((-1.0)*x10107*x10108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10115=((-1.0)*r21);
IkReal x10117 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10117)==0){
continue;
}
IkReal x10116=pow(x10117,-0.5);
CheckValue<IkReal> x10118 = IKatan2WithCheck(IkReal(x10115),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10118.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10118.value))));
IkReal gconst4=(x10115*x10116);
IkReal gconst5=((1.0)*r20*x10116);
CheckValue<IkReal> x10119 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10119.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10119.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10120=((-1.0)*r21);
CheckValue<IkReal> x10123 = IKatan2WithCheck(IkReal(x10120),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10123.valid){
continue;
}
IkReal x10121=((1.0)*(x10123.value));
IkReal x10122=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10121)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10121)));
IkReal gconst4=(x10120*x10122);
IkReal gconst5=((1.0)*r20*x10122);
IkReal x10124=r22*r22;
IkReal x10125=((1.0)*x10124);
CheckValue<IkReal> x10129=IKPowWithIntegerCheck(((-1.0)+x10124),-1);
if(!x10129.valid){
continue;
}
IkReal x10126=x10129.value;
if((((1.0)+(((-1.0)*x10125)))) < -0.00001)
continue;
IkReal x10127=IKsqrt(((1.0)+(((-1.0)*x10125))));
IkReal x10128=(cj0*x10126*x10127);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x10128+(((-1.0)*x10125*x10128))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10130=((-1.0)*r21);
CheckValue<IkReal> x10133 = IKatan2WithCheck(IkReal(x10130),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10133.valid){
continue;
}
IkReal x10131=((1.0)*(x10133.value));
IkReal x10132=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10131)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10131)));
IkReal gconst4=(x10130*x10132);
IkReal gconst5=((1.0)*r20*x10132);
IkReal x10134=r22*r22;
IkReal x10135=((1.0)*x10134);
CheckValue<IkReal> x10139=IKPowWithIntegerCheck(((-1.0)+x10134),-1);
if(!x10139.valid){
continue;
}
IkReal x10136=x10139.value;
if((((1.0)+(((-1.0)*x10135)))) < -0.00001)
continue;
IkReal x10137=IKsqrt(((1.0)+(((-1.0)*x10135))));
IkReal x10138=(sj0*x10136*x10137);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10138+(((-1.0)*x10135*x10138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10140=((-1.0)*r21);
CheckValue<IkReal> x10143 = IKatan2WithCheck(IkReal(x10140),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10143.valid){
continue;
}
IkReal x10141=((1.0)*(x10143.value));
IkReal x10142=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10141)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10141)));
IkReal gconst4=(x10140*x10142);
IkReal gconst5=((1.0)*r20*x10142);
IkReal x10144=r22*r22;
IkReal x10145=(r12*sj0);
IkReal x10146=(cj0*r02);
CheckValue<IkReal> x10150=IKPowWithIntegerCheck(((-1.0)+x10144),-1);
if(!x10150.valid){
continue;
}
IkReal x10147=x10150.value;
if((((1.0)+(((-1.0)*x10144)))) < -0.00001)
continue;
IkReal x10148=IKsqrt(((1.0)+(((-1.0)*x10144))));
IkReal x10149=(r22*x10147*x10148);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10145*x10149))+((x10146*x10149)))))+(IKabs(((((-1.0)*x10146))+(((-1.0)*x10145))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10151=((-1.0)*r21);
CheckValue<IkReal> x10154 = IKatan2WithCheck(IkReal(x10151),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10154.valid){
continue;
}
IkReal x10152=((1.0)*(x10154.value));
IkReal x10153=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10152)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10152)));
IkReal gconst4=(x10151*x10153);
IkReal gconst5=((1.0)*r20*x10153);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10155=((-1.0)*r21);
CheckValue<IkReal> x10158 = IKatan2WithCheck(IkReal(x10155),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10158.valid){
continue;
}
IkReal x10156=((1.0)*(x10158.value));
IkReal x10157=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10156)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10156)));
IkReal gconst4=(x10155*x10157);
IkReal gconst5=((1.0)*r20*x10157);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10159=((-1.0)*r21);
CheckValue<IkReal> x10162 = IKatan2WithCheck(IkReal(x10159),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10162.valid){
continue;
}
IkReal x10160=((1.0)*(x10162.value));
IkReal x10161=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10160)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10160)));
IkReal gconst4=(x10159*x10161);
IkReal gconst5=((1.0)*r20*x10161);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10163=((-1.0)*r21);
CheckValue<IkReal> x10166 = IKatan2WithCheck(IkReal(x10163),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10166.valid){
continue;
}
IkReal x10164=((1.0)*(x10166.value));
IkReal x10165=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10164)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10164)));
IkReal gconst4=(x10163*x10165);
IkReal gconst5=((1.0)*r20*x10165);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10167=((-1.0)*r21);
CheckValue<IkReal> x10170 = IKatan2WithCheck(IkReal(x10167),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10170.valid){
continue;
}
IkReal x10168=((1.0)*(x10170.value));
IkReal x10169=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10168)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10168)));
IkReal gconst4=(x10167*x10169);
IkReal gconst5=((1.0)*r20*x10169);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10171=((-1.0)*r21);
CheckValue<IkReal> x10174 = IKatan2WithCheck(IkReal(x10171),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10174.valid){
continue;
}
IkReal x10172=((1.0)*(x10174.value));
IkReal x10173=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10172)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10172)));
IkReal gconst4=(x10171*x10173);
IkReal gconst5=((1.0)*r20*x10173);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10175=(gconst5*r10);
IkReal x10176=(gconst4*r11);
CheckValue<IkReal> x10177 = IKatan2WithCheck(IkReal(((((-1.0)*x10176))+x10175)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10177.valid){
continue;
}
CheckValue<IkReal> x10178=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10176*x10176)+(((-2.0)*x10175*x10176))+(x10175*x10175))),-1);
if(!x10178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10177.value)+(((1.5707963267949)*(x10178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10179=IKsin(j4);
IkReal x10180=IKcos(j4);
IkReal x10181=(gconst4*r11);
IkReal x10182=((1.0)*cj1);
IkReal x10183=(gconst5*r10);
IkReal x10184=(gconst4*r01);
IkReal x10185=(gconst5*r00);
IkReal x10186=(gconst4*r21);
IkReal x10187=(gconst5*r20);
IkReal x10188=((1.0)*x10180);
IkReal x10189=((1.0)*x10179);
evalcond[0]=((((-1.0)*x10187*x10189))+(((-1.0)*r22*x10188))+((x10179*x10186)));
evalcond[1]=((((-1.0)*r02*x10188))+(((-1.0)*x10185*x10189))+((x10179*x10184)));
evalcond[2]=((((-1.0)*r12*x10189))+(((-1.0)*x10181*x10188))+((x10180*x10183)));
evalcond[3]=((1.0)+(((-1.0)*x10183*x10189))+(((-1.0)*r12*x10188))+((x10179*x10181)));
evalcond[4]=((((-1.0)*cj2*x10182))+(((-1.0)*x10186*x10188))+((sj1*sj2))+(((-1.0)*r22*x10189))+((x10180*x10187)));
evalcond[5]=((((-1.0)*r02*x10189))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10182))+(((-1.0)*x10184*x10188))+((x10180*x10185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10190=((1.0)*gconst5);
CheckValue<IkReal> x10191=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10190)))),-1);
if(!x10191.valid){
continue;
}
CheckValue<IkReal> x10192 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10190))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10191.value)))+(x10192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10193=IKsin(j4);
IkReal x10194=IKcos(j4);
IkReal x10195=(gconst4*r11);
IkReal x10196=((1.0)*cj1);
IkReal x10197=(gconst5*r10);
IkReal x10198=(gconst4*r01);
IkReal x10199=(gconst5*r00);
IkReal x10200=(gconst4*r21);
IkReal x10201=(gconst5*r20);
IkReal x10202=((1.0)*x10194);
IkReal x10203=((1.0)*x10193);
evalcond[0]=((((-1.0)*r22*x10202))+(((-1.0)*x10201*x10203))+((x10193*x10200)));
evalcond[1]=((((-1.0)*r02*x10202))+(((-1.0)*x10199*x10203))+((x10193*x10198)));
evalcond[2]=((((-1.0)*x10195*x10202))+((x10194*x10197))+(((-1.0)*r12*x10203)));
evalcond[3]=((1.0)+(((-1.0)*x10197*x10203))+((x10193*x10195))+(((-1.0)*r12*x10202)));
evalcond[4]=((((-1.0)*x10200*x10202))+(((-1.0)*cj2*x10196))+(((-1.0)*r22*x10203))+((x10194*x10201))+((sj1*sj2)));
evalcond[5]=((((-1.0)*r02*x10203))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10196))+((x10194*x10199))+(((-1.0)*x10198*x10202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10204 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10204.valid){
continue;
}
CheckValue<IkReal> x10205=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10204.value)+(((1.5707963267949)*(x10205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10206=IKsin(j4);
IkReal x10207=IKcos(j4);
IkReal x10208=(gconst4*r11);
IkReal x10209=((1.0)*cj1);
IkReal x10210=(gconst5*r10);
IkReal x10211=(gconst4*r01);
IkReal x10212=(gconst5*r00);
IkReal x10213=(gconst4*r21);
IkReal x10214=(gconst5*r20);
IkReal x10215=((1.0)*x10207);
IkReal x10216=((1.0)*x10206);
evalcond[0]=((((-1.0)*r22*x10215))+(((-1.0)*x10214*x10216))+((x10206*x10213)));
evalcond[1]=((((-1.0)*x10212*x10216))+((x10206*x10211))+(((-1.0)*r02*x10215)));
evalcond[2]=(((x10207*x10210))+(((-1.0)*r12*x10216))+(((-1.0)*x10208*x10215)));
evalcond[3]=((1.0)+(((-1.0)*x10210*x10216))+((x10206*x10208))+(((-1.0)*r12*x10215)));
evalcond[4]=((((-1.0)*r22*x10216))+(((-1.0)*x10213*x10215))+(((-1.0)*cj2*x10209))+((sj1*sj2))+((x10207*x10214)));
evalcond[5]=((((-1.0)*x10211*x10215))+(((-1.0)*cj2*sj1))+((x10207*x10212))+(((-1.0)*sj2*x10209))+(((-1.0)*r02*x10216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10217=((-1.0)*r21);
CheckValue<IkReal> x10220 = IKatan2WithCheck(IkReal(x10217),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10220.valid){
continue;
}
IkReal x10218=((1.0)*(x10220.value));
IkReal x10219=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10218)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10218)));
IkReal gconst4=(x10217*x10219);
IkReal gconst5=((1.0)*r20*x10219);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10221=((-1.0)*r21);
CheckValue<IkReal> x10224 = IKatan2WithCheck(IkReal(x10221),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10224.valid){
continue;
}
IkReal x10222=((1.0)*(x10224.value));
IkReal x10223=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10222)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10222)));
IkReal gconst4=(x10221*x10223);
IkReal gconst5=((1.0)*r20*x10223);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10225=((-1.0)*r21);
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal(x10225),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
IkReal x10226=((1.0)*(x10228.value));
IkReal x10227=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10226)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10226)));
IkReal gconst4=(x10225*x10227);
IkReal gconst5=((1.0)*r20*x10227);
IkReal x10229=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10233=IKPowWithIntegerCheck(x10229,-1);
if(!x10233.valid){
continue;
}
IkReal x10230=x10233.value;
IkReal x10231=((1.0)*x10230);
IkReal x10232=((((-2.0)*r10*r11*r20*r21*x10230))+(((-1.0)*x10231*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10231*(r10*r10)*(r20*r20))));
j4eval[0]=x10232;
j4eval[1]=r12;
j4eval[2]=x10229;
j4eval[3]=IKsign(x10232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10234=(gconst5*r10);
IkReal x10235=(gconst4*r11);
CheckValue<IkReal> x10236=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10235*x10235)))+(((-1.0)*(r12*r12)))+(((2.0)*x10234*x10235))+(((-1.0)*(x10234*x10234))))),-1);
if(!x10236.valid){
continue;
}
CheckValue<IkReal> x10237 = IKatan2WithCheck(IkReal((x10235+(((-1.0)*x10234)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10236.value)))+(x10237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10238=IKcos(j4);
IkReal x10239=IKsin(j4);
IkReal x10240=(gconst4*r11);
IkReal x10241=(gconst5*r10);
IkReal x10242=((1.0)*cj1);
IkReal x10243=(gconst5*r00);
IkReal x10244=(gconst5*r20);
IkReal x10245=((1.0)*x10238);
IkReal x10246=(gconst4*x10238);
IkReal x10247=((1.0)*x10239);
IkReal x10248=(gconst4*x10239);
evalcond[0]=((((-1.0)*x10241*x10245))+((x10238*x10240))+((r12*x10239)));
evalcond[1]=(((r21*x10248))+(((-1.0)*r22*x10245))+(((-1.0)*x10244*x10247)));
evalcond[2]=(((r01*x10248))+(((-1.0)*x10243*x10247))+(((-1.0)*r02*x10245)));
evalcond[3]=((1.0)+((x10239*x10240))+(((-1.0)*x10241*x10247))+(((-1.0)*r12*x10245)));
evalcond[4]=((((-1.0)*cj2*x10242))+((r22*x10239))+((sj1*sj2))+((r21*x10246))+(((-1.0)*x10244*x10245)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10239))+(((-1.0)*sj2*x10242))+((r01*x10246))+(((-1.0)*x10243*x10245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10249=((1.0)*gconst5);
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10249))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10249)))),-1);
if(!x10251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10250.value)+(((1.5707963267949)*(x10251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10252=IKcos(j4);
IkReal x10253=IKsin(j4);
IkReal x10254=(gconst4*r11);
IkReal x10255=(gconst5*r10);
IkReal x10256=((1.0)*cj1);
IkReal x10257=(gconst5*r00);
IkReal x10258=(gconst5*r20);
IkReal x10259=((1.0)*x10252);
IkReal x10260=(gconst4*x10252);
IkReal x10261=((1.0)*x10253);
IkReal x10262=(gconst4*x10253);
evalcond[0]=(((r12*x10253))+(((-1.0)*x10255*x10259))+((x10252*x10254)));
evalcond[1]=((((-1.0)*r22*x10259))+((r21*x10262))+(((-1.0)*x10258*x10261)));
evalcond[2]=((((-1.0)*x10257*x10261))+(((-1.0)*r02*x10259))+((r01*x10262)));
evalcond[3]=((1.0)+(((-1.0)*x10255*x10261))+(((-1.0)*r12*x10259))+((x10253*x10254)));
evalcond[4]=(((r22*x10253))+(((-1.0)*x10258*x10259))+(((-1.0)*cj2*x10256))+((sj1*sj2))+((r21*x10260)));
evalcond[5]=(((r02*x10253))+(((-1.0)*cj2*sj1))+((r01*x10260))+(((-1.0)*x10257*x10259))+(((-1.0)*sj2*x10256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10263 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10263.valid){
continue;
}
CheckValue<IkReal> x10264=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10263.value)+(((1.5707963267949)*(x10264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10265=IKcos(j4);
IkReal x10266=IKsin(j4);
IkReal x10267=(gconst4*r11);
IkReal x10268=(gconst5*r10);
IkReal x10269=((1.0)*cj1);
IkReal x10270=(gconst5*r00);
IkReal x10271=(gconst5*r20);
IkReal x10272=((1.0)*x10265);
IkReal x10273=(gconst4*x10265);
IkReal x10274=((1.0)*x10266);
IkReal x10275=(gconst4*x10266);
evalcond[0]=(((r12*x10266))+(((-1.0)*x10268*x10272))+((x10265*x10267)));
evalcond[1]=((((-1.0)*r22*x10272))+((r21*x10275))+(((-1.0)*x10271*x10274)));
evalcond[2]=(((r01*x10275))+(((-1.0)*r02*x10272))+(((-1.0)*x10270*x10274)));
evalcond[3]=((1.0)+(((-1.0)*x10268*x10274))+(((-1.0)*r12*x10272))+((x10266*x10267)));
evalcond[4]=(((r22*x10266))+((sj1*sj2))+((r21*x10273))+(((-1.0)*cj2*x10269))+(((-1.0)*x10271*x10272)));
evalcond[5]=(((r02*x10266))+((r01*x10273))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10269))+(((-1.0)*x10270*x10272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10276=((-1.0)*r21);
CheckValue<IkReal> x10279 = IKatan2WithCheck(IkReal(x10276),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10279.valid){
continue;
}
IkReal x10277=((1.0)*(x10279.value));
IkReal x10278=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10277)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10277)));
IkReal gconst4=(x10276*x10278);
IkReal gconst5=((1.0)*r20*x10278);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10280=((-1.0)*r21);
CheckValue<IkReal> x10283 = IKatan2WithCheck(IkReal(x10280),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10283.valid){
continue;
}
IkReal x10281=((1.0)*(x10283.value));
IkReal x10282=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10281)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10281)));
IkReal gconst4=(x10280*x10282);
IkReal gconst5=((1.0)*r20*x10282);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10284=((-1.0)*r21);
CheckValue<IkReal> x10287 = IKatan2WithCheck(IkReal(x10284),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10287.valid){
continue;
}
IkReal x10285=((1.0)*(x10287.value));
IkReal x10286=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10285)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10285)));
IkReal gconst4=(x10284*x10286);
IkReal gconst5=((1.0)*r20*x10286);
IkReal x10288=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10292=IKPowWithIntegerCheck(x10288,-1);
if(!x10292.valid){
continue;
}
IkReal x10289=x10292.value;
IkReal x10290=((1.0)*x10289);
IkReal x10291=((((-1.0)*x10290*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10289))+(((-1.0)*(r12*r12)))+(((-1.0)*x10290*(r11*r11)*(r21*r21))));
j4eval[0]=x10291;
j4eval[1]=r12;
j4eval[2]=x10288;
j4eval[3]=IKsign(x10291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10293=(gconst5*r10);
IkReal x10294=(gconst4*r11);
CheckValue<IkReal> x10295 = IKatan2WithCheck(IkReal(((((-1.0)*x10293))+x10294)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10295.valid){
continue;
}
CheckValue<IkReal> x10296=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10293*x10293)))+(((2.0)*x10293*x10294))+(((-1.0)*(x10294*x10294)))+(((-1.0)*(r12*r12))))),-1);
if(!x10296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10295.value)+(((1.5707963267949)*(x10296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10297=IKcos(j4);
IkReal x10298=IKsin(j4);
IkReal x10299=(gconst4*r11);
IkReal x10300=(gconst5*r10);
IkReal x10301=(gconst5*r00);
IkReal x10302=(gconst5*r20);
IkReal x10303=((1.0)*x10297);
IkReal x10304=(gconst4*x10297);
IkReal x10305=((1.0)*x10298);
IkReal x10306=(gconst4*x10298);
evalcond[0]=(((r12*x10298))+(((-1.0)*x10300*x10303))+((x10297*x10299)));
evalcond[1]=((((-1.0)*r22*x10303))+(((-1.0)*x10302*x10305))+((r21*x10306)));
evalcond[2]=((((-1.0)*r02*x10303))+(((-1.0)*x10301*x10305))+((r01*x10306)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10303))+(((-1.0)*x10300*x10305))+((x10298*x10299)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10302*x10303))+((r21*x10304))+((r22*x10298)));
evalcond[5]=((((-1.0)*x10301*x10303))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10304))+((r02*x10298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10307=((1.0)*gconst5);
CheckValue<IkReal> x10308 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10308.valid){
continue;
}
CheckValue<IkReal> x10309=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10307)))),-1);
if(!x10309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10308.value)+(((1.5707963267949)*(x10309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10310=IKcos(j4);
IkReal x10311=IKsin(j4);
IkReal x10312=(gconst4*r11);
IkReal x10313=(gconst5*r10);
IkReal x10314=(gconst5*r00);
IkReal x10315=(gconst5*r20);
IkReal x10316=((1.0)*x10310);
IkReal x10317=(gconst4*x10310);
IkReal x10318=((1.0)*x10311);
IkReal x10319=(gconst4*x10311);
evalcond[0]=((((-1.0)*x10313*x10316))+((r12*x10311))+((x10310*x10312)));
evalcond[1]=(((r21*x10319))+(((-1.0)*r22*x10316))+(((-1.0)*x10315*x10318)));
evalcond[2]=(((r01*x10319))+(((-1.0)*x10314*x10318))+(((-1.0)*r02*x10316)));
evalcond[3]=((1.0)+(((-1.0)*x10313*x10318))+(((-1.0)*r12*x10316))+((x10311*x10312)));
evalcond[4]=(((cj2*sj1))+((r21*x10317))+((cj1*sj2))+((r22*x10311))+(((-1.0)*x10315*x10316)));
evalcond[5]=(((r01*x10317))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10311))+(((-1.0)*x10314*x10316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10320 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10320.valid){
continue;
}
CheckValue<IkReal> x10321=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10320.value)+(((1.5707963267949)*(x10321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10322=IKcos(j4);
IkReal x10323=IKsin(j4);
IkReal x10324=(gconst4*r11);
IkReal x10325=(gconst5*r10);
IkReal x10326=(gconst5*r00);
IkReal x10327=(gconst5*r20);
IkReal x10328=((1.0)*x10322);
IkReal x10329=(gconst4*x10322);
IkReal x10330=((1.0)*x10323);
IkReal x10331=(gconst4*x10323);
evalcond[0]=(((x10322*x10324))+((r12*x10323))+(((-1.0)*x10325*x10328)));
evalcond[1]=((((-1.0)*r22*x10328))+((r21*x10331))+(((-1.0)*x10327*x10330)));
evalcond[2]=((((-1.0)*r02*x10328))+((r01*x10331))+(((-1.0)*x10326*x10330)));
evalcond[3]=((1.0)+((x10323*x10324))+(((-1.0)*r12*x10328))+(((-1.0)*x10325*x10330)));
evalcond[4]=(((cj2*sj1))+((r22*x10323))+((cj1*sj2))+((r21*x10329))+(((-1.0)*x10327*x10328)));
evalcond[5]=(((r02*x10323))+(((-1.0)*cj1*cj2))+((r01*x10329))+((sj1*sj2))+(((-1.0)*x10326*x10328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10332=((-1.0)*r21);
CheckValue<IkReal> x10335 = IKatan2WithCheck(IkReal(x10332),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10335.valid){
continue;
}
IkReal x10333=((1.0)*(x10335.value));
IkReal x10334=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10333)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10333)));
IkReal gconst4=(x10332*x10334);
IkReal gconst5=((1.0)*r20*x10334);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10336=((-1.0)*r21);
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(x10336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
IkReal x10337=((1.0)*(x10339.value));
IkReal x10338=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10337)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10337)));
IkReal gconst4=(x10336*x10338);
IkReal gconst5=((1.0)*r20*x10338);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10340=((-1.0)*r21);
CheckValue<IkReal> x10343 = IKatan2WithCheck(IkReal(x10340),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10343.valid){
continue;
}
IkReal x10341=((1.0)*(x10343.value));
IkReal x10342=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10341)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10341)));
IkReal gconst4=(x10340*x10342);
IkReal gconst5=((1.0)*r20*x10342);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10344=(gconst5*r10);
IkReal x10345=(gconst4*r11);
CheckValue<IkReal> x10346=IKPowWithIntegerCheck(IKsign(((x10344*x10344)+(r12*r12)+(((-2.0)*x10344*x10345))+(x10345*x10345))),-1);
if(!x10346.valid){
continue;
}
CheckValue<IkReal> x10347 = IKatan2WithCheck(IkReal((x10344+(((-1.0)*x10345)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10346.value)))+(x10347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10348=IKsin(j4);
IkReal x10349=IKcos(j4);
IkReal x10350=(gconst4*r11);
IkReal x10351=(gconst5*r10);
IkReal x10352=(gconst4*r01);
IkReal x10353=(gconst5*r00);
IkReal x10354=(gconst4*r21);
IkReal x10355=(gconst5*r20);
IkReal x10356=((1.0)*x10349);
IkReal x10357=((1.0)*x10348);
evalcond[0]=(((x10348*x10354))+(((-1.0)*r22*x10356))+(((-1.0)*x10355*x10357)));
evalcond[1]=(((x10348*x10352))+(((-1.0)*x10353*x10357))+(((-1.0)*r02*x10356)));
evalcond[2]=(((x10349*x10351))+(((-1.0)*x10350*x10356))+(((-1.0)*r12*x10357)));
evalcond[3]=((1.0)+((x10348*x10350))+(((-1.0)*x10351*x10357))+(((-1.0)*r12*x10356)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10357))+((x10349*x10355))+(((-1.0)*x10354*x10356)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10352*x10356))+((x10349*x10353))+(((-1.0)*r02*x10357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10358=((1.0)*gconst5);
CheckValue<IkReal> x10359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10358)))),-1);
if(!x10359.valid){
continue;
}
CheckValue<IkReal> x10360 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10359.value)))+(x10360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10361=IKsin(j4);
IkReal x10362=IKcos(j4);
IkReal x10363=(gconst4*r11);
IkReal x10364=(gconst5*r10);
IkReal x10365=(gconst4*r01);
IkReal x10366=(gconst5*r00);
IkReal x10367=(gconst4*r21);
IkReal x10368=(gconst5*r20);
IkReal x10369=((1.0)*x10362);
IkReal x10370=((1.0)*x10361);
evalcond[0]=(((x10361*x10367))+(((-1.0)*x10368*x10370))+(((-1.0)*r22*x10369)));
evalcond[1]=(((x10361*x10365))+(((-1.0)*r02*x10369))+(((-1.0)*x10366*x10370)));
evalcond[2]=(((x10362*x10364))+(((-1.0)*x10363*x10369))+(((-1.0)*r12*x10370)));
evalcond[3]=((1.0)+((x10361*x10363))+(((-1.0)*r12*x10369))+(((-1.0)*x10364*x10370)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10362*x10368))+(((-1.0)*r22*x10370))+(((-1.0)*x10367*x10369)));
evalcond[5]=((((-1.0)*r02*x10370))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10362*x10366))+(((-1.0)*x10365*x10369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10371 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10371.valid){
continue;
}
CheckValue<IkReal> x10372=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10371.value)+(((1.5707963267949)*(x10372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10373=IKsin(j4);
IkReal x10374=IKcos(j4);
IkReal x10375=(gconst4*r11);
IkReal x10376=(gconst5*r10);
IkReal x10377=(gconst4*r01);
IkReal x10378=(gconst5*r00);
IkReal x10379=(gconst4*r21);
IkReal x10380=(gconst5*r20);
IkReal x10381=((1.0)*x10374);
IkReal x10382=((1.0)*x10373);
evalcond[0]=((((-1.0)*x10380*x10382))+((x10373*x10379))+(((-1.0)*r22*x10381)));
evalcond[1]=((((-1.0)*r02*x10381))+((x10373*x10377))+(((-1.0)*x10378*x10382)));
evalcond[2]=((((-1.0)*x10375*x10381))+(((-1.0)*r12*x10382))+((x10374*x10376)));
evalcond[3]=((1.0)+(((-1.0)*x10376*x10382))+((x10373*x10375))+(((-1.0)*r12*x10381)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10379*x10381))+(((-1.0)*r22*x10382))+((x10374*x10380)));
evalcond[5]=((((-1.0)*x10377*x10381))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10382))+((x10374*x10378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10383=gconst4*gconst4;
IkReal x10384=gconst5*gconst5;
IkReal x10385=(r10*r21);
IkReal x10386=((1.0)*cj3);
IkReal x10387=(r11*r21);
IkReal x10388=(r11*r20);
IkReal x10389=(r22*sj3);
IkReal x10390=(gconst4*r10);
IkReal x10391=((1.0)*sj3);
IkReal x10392=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10386))+(((-1.0)*x10383*x10386*x10387))+((x10385*x10392))+(((-1.0)*r10*r20*x10384*x10386))+((x10388*x10392)))),-1);
if(!x10393.valid){
continue;
}
CheckValue<IkReal> x10394 = IKatan2WithCheck(IkReal((((gconst5*r11*x10389))+((x10389*x10390)))),IkReal(((((-1.0)*gconst5*r20*x10390*x10391))+((sj3*x10383*x10385))+((gconst4*gconst5*sj3*x10387))+(((-1.0)*x10384*x10388*x10391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10393.value)))+(x10394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10395=IKsin(j4);
IkReal x10396=IKcos(j4);
IkReal x10397=(sj1*sj2);
IkReal x10398=(gconst5*sj3);
IkReal x10399=(cj3*gconst5);
IkReal x10400=(gconst4*r11);
IkReal x10401=((1.0)*cj1);
IkReal x10402=(gconst4*r01);
IkReal x10403=(cj2*sj1);
IkReal x10404=(gconst4*r21);
IkReal x10405=(gconst4*sj3);
IkReal x10406=(cj3*gconst4);
IkReal x10407=(cj2*x10401);
IkReal x10408=((1.0)*x10396);
IkReal x10409=((1.0)*x10395);
IkReal x10410=(cj3*x10395);
IkReal x10411=(cj3*x10396);
evalcond[0]=((((-1.0)*gconst5*r20*x10409))+(((-1.0)*r22*x10408))+((x10395*x10404)));
evalcond[1]=(((x10395*x10402))+(((-1.0)*r02*x10408))+(((-1.0)*gconst5*r00*x10409)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10409))+(((-1.0)*r12*x10408))+((x10395*x10400)));
evalcond[3]=(((x10400*x10411))+((r11*x10398))+(((-1.0)*r10*x10399*x10408))+((r12*x10410))+((r10*x10405)));
evalcond[4]=(((r11*x10399))+(((-1.0)*r12*sj3*x10409))+(((-1.0)*sj3*x10400*x10408))+((r10*x10406))+((r10*x10396*x10398)));
evalcond[5]=(((r22*x10410))+(((-1.0)*r20*x10399*x10408))+((r21*x10398))+((cj1*sj2))+((x10404*x10411))+((r20*x10405))+x10403);
evalcond[6]=(((r01*x10398))+((r00*x10405))+(((-1.0)*r00*x10399*x10408))+((r02*x10410))+(((-1.0)*x10407))+x10397+((x10402*x10411)));
evalcond[7]=((((-1.0)*r22*sj3*x10409))+((r21*x10399))+((r20*x10396*x10398))+(((-1.0)*sj3*x10404*x10408))+(((-1.0)*x10407))+x10397+((r20*x10406)));
evalcond[8]=(((r01*x10399))+((r00*x10406))+((r00*x10396*x10398))+(((-1.0)*sj2*x10401))+(((-1.0)*sj3*x10402*x10408))+(((-1.0)*x10403))+(((-1.0)*r02*sj3*x10409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10412=((1.0)*gconst5);
CheckValue<IkReal> x10413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10412)))),-1);
if(!x10413.valid){
continue;
}
CheckValue<IkReal> x10414 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10412))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10413.value)))+(x10414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10415=IKsin(j4);
IkReal x10416=IKcos(j4);
IkReal x10417=(sj1*sj2);
IkReal x10418=(gconst5*sj3);
IkReal x10419=(cj3*gconst5);
IkReal x10420=(gconst4*r11);
IkReal x10421=((1.0)*cj1);
IkReal x10422=(gconst4*r01);
IkReal x10423=(cj2*sj1);
IkReal x10424=(gconst4*r21);
IkReal x10425=(gconst4*sj3);
IkReal x10426=(cj3*gconst4);
IkReal x10427=(cj2*x10421);
IkReal x10428=((1.0)*x10416);
IkReal x10429=((1.0)*x10415);
IkReal x10430=(cj3*x10415);
IkReal x10431=(cj3*x10416);
evalcond[0]=(((x10415*x10424))+(((-1.0)*gconst5*r20*x10429))+(((-1.0)*r22*x10428)));
evalcond[1]=((((-1.0)*gconst5*r00*x10429))+((x10415*x10422))+(((-1.0)*r02*x10428)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10429))+((x10415*x10420))+(((-1.0)*r12*x10428)));
evalcond[3]=(((x10420*x10431))+(((-1.0)*r10*x10419*x10428))+((r11*x10418))+((r12*x10430))+((r10*x10425)));
evalcond[4]=((((-1.0)*sj3*x10420*x10428))+(((-1.0)*r12*sj3*x10429))+((r10*x10416*x10418))+((r11*x10419))+((r10*x10426)));
evalcond[5]=(((r21*x10418))+((r22*x10430))+((cj1*sj2))+x10423+(((-1.0)*r20*x10419*x10428))+((r20*x10425))+((x10424*x10431)));
evalcond[6]=(((r00*x10425))+(((-1.0)*r00*x10419*x10428))+((r01*x10418))+((x10422*x10431))+(((-1.0)*x10427))+((r02*x10430))+x10417);
evalcond[7]=(((r21*x10419))+((r20*x10416*x10418))+(((-1.0)*sj3*x10424*x10428))+(((-1.0)*x10427))+x10417+((r20*x10426))+(((-1.0)*r22*sj3*x10429)));
evalcond[8]=(((r00*x10426))+((r00*x10416*x10418))+((r01*x10419))+(((-1.0)*sj2*x10421))+(((-1.0)*sj3*x10422*x10428))+(((-1.0)*x10423))+(((-1.0)*r02*sj3*x10429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10432 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10432.valid){
continue;
}
CheckValue<IkReal> x10433=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10432.value)+(((1.5707963267949)*(x10433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10434=IKsin(j4);
IkReal x10435=IKcos(j4);
IkReal x10436=(sj1*sj2);
IkReal x10437=(gconst5*sj3);
IkReal x10438=(cj3*gconst5);
IkReal x10439=(gconst4*r11);
IkReal x10440=((1.0)*cj1);
IkReal x10441=(gconst4*r01);
IkReal x10442=(cj2*sj1);
IkReal x10443=(gconst4*r21);
IkReal x10444=(gconst4*sj3);
IkReal x10445=(cj3*gconst4);
IkReal x10446=(cj2*x10440);
IkReal x10447=((1.0)*x10435);
IkReal x10448=((1.0)*x10434);
IkReal x10449=(cj3*x10434);
IkReal x10450=(cj3*x10435);
evalcond[0]=(((x10434*x10443))+(((-1.0)*gconst5*r20*x10448))+(((-1.0)*r22*x10447)));
evalcond[1]=(((x10434*x10441))+(((-1.0)*r02*x10447))+(((-1.0)*gconst5*r00*x10448)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10447))+((x10434*x10439))+(((-1.0)*gconst5*r10*x10448)));
evalcond[3]=(((x10439*x10450))+((r12*x10449))+((r11*x10437))+(((-1.0)*r10*x10438*x10447))+((r10*x10444)));
evalcond[4]=((((-1.0)*r12*sj3*x10448))+(((-1.0)*sj3*x10439*x10447))+((r10*x10435*x10437))+((r11*x10438))+((r10*x10445)));
evalcond[5]=(((r22*x10449))+((x10443*x10450))+((cj1*sj2))+((r20*x10444))+x10442+(((-1.0)*r20*x10438*x10447))+((r21*x10437)));
evalcond[6]=(((r01*x10437))+(((-1.0)*x10446))+((r02*x10449))+(((-1.0)*r00*x10438*x10447))+((r00*x10444))+((x10441*x10450))+x10436);
evalcond[7]=((((-1.0)*r22*sj3*x10448))+(((-1.0)*sj3*x10443*x10447))+(((-1.0)*x10446))+((r20*x10435*x10437))+((r20*x10445))+x10436+((r21*x10438)));
evalcond[8]=((((-1.0)*x10442))+((r01*x10438))+(((-1.0)*r02*sj3*x10448))+(((-1.0)*sj2*x10440))+((r00*x10445))+(((-1.0)*sj3*x10441*x10447))+((r00*x10435*x10437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10451=((-1.0)*r21);
CheckValue<IkReal> x10454 = IKatan2WithCheck(IkReal(x10451),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10454.valid){
continue;
}
IkReal x10452=((1.0)*(x10454.value));
IkReal x10453=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10452)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10452)));
IkReal gconst4=(x10451*x10453);
IkReal gconst5=((1.0)*r20*x10453);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10455=((-1.0)*r21);
CheckValue<IkReal> x10458 = IKatan2WithCheck(IkReal(x10455),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10458.valid){
continue;
}
IkReal x10456=((1.0)*(x10458.value));
IkReal x10457=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10456)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10456)));
IkReal gconst4=(x10455*x10457);
IkReal gconst5=((1.0)*r20*x10457);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10459=((-1.0)*r21);
CheckValue<IkReal> x10462 = IKatan2WithCheck(IkReal(x10459),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10462.valid){
continue;
}
IkReal x10460=((1.0)*(x10462.value));
IkReal x10461=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10460)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10460)));
IkReal gconst4=(x10459*x10461);
IkReal gconst5=((1.0)*r20*x10461);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10463=((-1.0)*r21);
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal(x10463),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
IkReal x10464=((1.0)*(x10466.value));
IkReal x10465=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10464)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10464)));
IkReal gconst4=(x10463*x10465);
IkReal gconst5=((1.0)*r20*x10465);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10467=((-1.0)*r21);
CheckValue<IkReal> x10470 = IKatan2WithCheck(IkReal(x10467),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10470.valid){
continue;
}
IkReal x10468=((1.0)*(x10470.value));
IkReal x10469=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10468)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10468)));
IkReal gconst4=(x10467*x10469);
IkReal gconst5=((1.0)*r20*x10469);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10471=((-1.0)*r21);
CheckValue<IkReal> x10474 = IKatan2WithCheck(IkReal(x10471),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10474.valid){
continue;
}
IkReal x10472=((1.0)*(x10474.value));
IkReal x10473=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10472)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10472)));
IkReal gconst4=(x10471*x10473);
IkReal gconst5=((1.0)*r20*x10473);
IkReal x10475=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10479=IKPowWithIntegerCheck(x10475,-1);
if(!x10479.valid){
continue;
}
IkReal x10476=x10479.value;
IkReal x10477=((1.0)*x10476);
IkReal x10478=((((-1.0)*x10477*(r10*r10)*(r20*r20)))+(((-1.0)*x10477*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10476)));
j4eval[0]=x10478;
j4eval[1]=r12;
j4eval[2]=x10475;
j4eval[3]=IKsign(x10478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10480=(gconst5*r10);
IkReal x10481=(gconst4*r11);
CheckValue<IkReal> x10482=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10481*x10481)))+(((-1.0)*(r12*r12)))+(((2.0)*x10480*x10481))+(((-1.0)*(x10480*x10480))))),-1);
if(!x10482.valid){
continue;
}
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal(((((-1.0)*x10481))+x10480)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10482.value)))+(x10483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10484=IKsin(j4);
IkReal x10485=IKcos(j4);
IkReal x10486=(gconst4*r11);
IkReal x10487=(gconst5*r10);
IkReal x10488=(gconst4*r01);
IkReal x10489=(gconst5*r00);
IkReal x10490=(gconst4*r21);
IkReal x10491=(gconst5*r20);
IkReal x10492=((1.0)*x10485);
IkReal x10493=((1.0)*x10484);
evalcond[0]=((((-1.0)*r22*x10492))+(((-1.0)*x10491*x10493))+((x10484*x10490)));
evalcond[1]=((((-1.0)*x10489*x10493))+(((-1.0)*r02*x10492))+((x10484*x10488)));
evalcond[2]=((((-1.0)*r12*x10493))+((x10485*x10487))+(((-1.0)*x10486*x10492)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10492))+((x10484*x10486))+(((-1.0)*x10487*x10493)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10488*x10492))+((cj1*sj2))+((x10485*x10489))+(((-1.0)*r02*x10493)));
evalcond[5]=((((-1.0)*x10490*x10492))+(((-1.0)*r22*x10493))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10485*x10491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10494=((1.0)*gconst5);
CheckValue<IkReal> x10495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10494))+(((-1.0)*gconst4*r20)))),-1);
if(!x10495.valid){
continue;
}
CheckValue<IkReal> x10496 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10495.value)))+(x10496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10497=IKsin(j4);
IkReal x10498=IKcos(j4);
IkReal x10499=(gconst4*r11);
IkReal x10500=(gconst5*r10);
IkReal x10501=(gconst4*r01);
IkReal x10502=(gconst5*r00);
IkReal x10503=(gconst4*r21);
IkReal x10504=(gconst5*r20);
IkReal x10505=((1.0)*x10498);
IkReal x10506=((1.0)*x10497);
evalcond[0]=((((-1.0)*r22*x10505))+((x10497*x10503))+(((-1.0)*x10504*x10506)));
evalcond[1]=((((-1.0)*x10502*x10506))+((x10497*x10501))+(((-1.0)*r02*x10505)));
evalcond[2]=(((x10498*x10500))+(((-1.0)*r12*x10506))+(((-1.0)*x10499*x10505)));
evalcond[3]=((-1.0)+((x10497*x10499))+(((-1.0)*r12*x10505))+(((-1.0)*x10500*x10506)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10501*x10505))+((x10498*x10502))+((cj1*sj2))+(((-1.0)*r02*x10506)));
evalcond[5]=((((-1.0)*r22*x10506))+((x10498*x10504))+(((-1.0)*x10503*x10505))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10507=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10507.valid){
continue;
}
CheckValue<IkReal> x10508 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10507.value)))+(x10508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10509=IKsin(j4);
IkReal x10510=IKcos(j4);
IkReal x10511=(gconst4*r11);
IkReal x10512=(gconst5*r10);
IkReal x10513=(gconst4*r01);
IkReal x10514=(gconst5*r00);
IkReal x10515=(gconst4*r21);
IkReal x10516=(gconst5*r20);
IkReal x10517=((1.0)*x10510);
IkReal x10518=((1.0)*x10509);
evalcond[0]=(((x10509*x10515))+(((-1.0)*r22*x10517))+(((-1.0)*x10516*x10518)));
evalcond[1]=(((x10509*x10513))+(((-1.0)*r02*x10517))+(((-1.0)*x10514*x10518)));
evalcond[2]=(((x10510*x10512))+(((-1.0)*x10511*x10517))+(((-1.0)*r12*x10518)));
evalcond[3]=((-1.0)+((x10509*x10511))+(((-1.0)*x10512*x10518))+(((-1.0)*r12*x10517)));
evalcond[4]=(((cj2*sj1))+((x10510*x10514))+(((-1.0)*r02*x10518))+((cj1*sj2))+(((-1.0)*x10513*x10517)));
evalcond[5]=(((x10510*x10516))+(((-1.0)*r22*x10518))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10515*x10517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10519=((-1.0)*r21);
CheckValue<IkReal> x10522 = IKatan2WithCheck(IkReal(x10519),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10522.valid){
continue;
}
IkReal x10520=((1.0)*(x10522.value));
IkReal x10521=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10520)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10520)));
IkReal gconst4=(x10519*x10521);
IkReal gconst5=((1.0)*r20*x10521);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10523=((-1.0)*r21);
CheckValue<IkReal> x10526 = IKatan2WithCheck(IkReal(x10523),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10526.valid){
continue;
}
IkReal x10524=((1.0)*(x10526.value));
IkReal x10525=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10524)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10524)));
IkReal gconst4=(x10523*x10525);
IkReal gconst5=((1.0)*r20*x10525);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10527=((-1.0)*r21);
CheckValue<IkReal> x10530 = IKatan2WithCheck(IkReal(x10527),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10530.valid){
continue;
}
IkReal x10528=((1.0)*(x10530.value));
IkReal x10529=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10528)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10528)));
IkReal gconst4=(x10527*x10529);
IkReal gconst5=((1.0)*r20*x10529);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10531=(gconst5*r10);
IkReal x10532=(gconst4*r11);
CheckValue<IkReal> x10533=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10532*x10532)+(x10531*x10531)+(((-2.0)*x10531*x10532)))),-1);
if(!x10533.valid){
continue;
}
CheckValue<IkReal> x10534 = IKatan2WithCheck(IkReal(((((-1.0)*x10531))+x10532)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10533.value)))+(x10534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10535=IKcos(j4);
IkReal x10536=IKsin(j4);
IkReal x10537=(gconst4*r11);
IkReal x10538=(gconst5*r10);
IkReal x10539=(gconst5*r00);
IkReal x10540=(gconst5*r20);
IkReal x10541=((1.0)*x10535);
IkReal x10542=(gconst4*x10535);
IkReal x10543=((1.0)*x10536);
IkReal x10544=(gconst4*x10536);
evalcond[0]=((((-1.0)*x10538*x10541))+((r12*x10536))+((x10535*x10537)));
evalcond[1]=((((-1.0)*r22*x10541))+((r21*x10544))+(((-1.0)*x10540*x10543)));
evalcond[2]=((((-1.0)*x10539*x10543))+(((-1.0)*r02*x10541))+((r01*x10544)));
evalcond[3]=((-1.0)+((x10536*x10537))+(((-1.0)*x10538*x10543))+(((-1.0)*r12*x10541)));
evalcond[4]=(((cj2*sj1))+((r02*x10536))+(((-1.0)*x10539*x10541))+((cj1*sj2))+((r01*x10542)));
evalcond[5]=(((r22*x10536))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10542))+(((-1.0)*x10540*x10541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10545=((1.0)*gconst5);
CheckValue<IkReal> x10546=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10545)))),-1);
if(!x10546.valid){
continue;
}
CheckValue<IkReal> x10547 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10545))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10546.value)))+(x10547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10548=IKcos(j4);
IkReal x10549=IKsin(j4);
IkReal x10550=(gconst4*r11);
IkReal x10551=(gconst5*r10);
IkReal x10552=(gconst5*r00);
IkReal x10553=(gconst5*r20);
IkReal x10554=((1.0)*x10548);
IkReal x10555=(gconst4*x10548);
IkReal x10556=((1.0)*x10549);
IkReal x10557=(gconst4*x10549);
evalcond[0]=((((-1.0)*x10551*x10554))+((r12*x10549))+((x10548*x10550)));
evalcond[1]=(((r21*x10557))+(((-1.0)*x10553*x10556))+(((-1.0)*r22*x10554)));
evalcond[2]=((((-1.0)*r02*x10554))+((r01*x10557))+(((-1.0)*x10552*x10556)));
evalcond[3]=((-1.0)+(((-1.0)*x10551*x10556))+(((-1.0)*r12*x10554))+((x10549*x10550)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10549))+((r01*x10555))+(((-1.0)*x10552*x10554)));
evalcond[5]=(((r22*x10549))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10555))+(((-1.0)*x10553*x10554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10558=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10558.valid){
continue;
}
CheckValue<IkReal> x10559 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10558.value)))+(x10559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10560=IKcos(j4);
IkReal x10561=IKsin(j4);
IkReal x10562=(gconst4*r11);
IkReal x10563=(gconst5*r10);
IkReal x10564=(gconst5*r00);
IkReal x10565=(gconst5*r20);
IkReal x10566=((1.0)*x10560);
IkReal x10567=(gconst4*x10560);
IkReal x10568=((1.0)*x10561);
IkReal x10569=(gconst4*x10561);
evalcond[0]=((((-1.0)*x10563*x10566))+((r12*x10561))+((x10560*x10562)));
evalcond[1]=((((-1.0)*r22*x10566))+((r21*x10569))+(((-1.0)*x10565*x10568)));
evalcond[2]=(((r01*x10569))+(((-1.0)*x10564*x10568))+(((-1.0)*r02*x10566)));
evalcond[3]=((-1.0)+(((-1.0)*x10563*x10568))+((x10561*x10562))+(((-1.0)*r12*x10566)));
evalcond[4]=(((r01*x10567))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10564*x10566))+((r02*x10561)));
evalcond[5]=(((r21*x10567))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10561))+(((-1.0)*x10565*x10566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10570=((-1.0)*r21);
CheckValue<IkReal> x10573 = IKatan2WithCheck(IkReal(x10570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10573.valid){
continue;
}
IkReal x10571=((1.0)*(x10573.value));
IkReal x10572=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10571)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10571)));
IkReal gconst4=(x10570*x10572);
IkReal gconst5=((1.0)*r20*x10572);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10574=((-1.0)*r21);
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal(x10574),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
IkReal x10575=((1.0)*(x10577.value));
IkReal x10576=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10575)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10575)));
IkReal gconst4=(x10574*x10576);
IkReal gconst5=((1.0)*r20*x10576);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10578=((-1.0)*r21);
CheckValue<IkReal> x10581 = IKatan2WithCheck(IkReal(x10578),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10581.valid){
continue;
}
IkReal x10579=((1.0)*(x10581.value));
IkReal x10580=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10579)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10579)));
IkReal gconst4=(x10578*x10580);
IkReal gconst5=((1.0)*r20*x10580);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10582=(gconst5*r10);
IkReal x10583=(gconst4*r11);
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal((x10583+(((-1.0)*x10582)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
CheckValue<IkReal> x10585=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10582*x10583))+(r12*r12)+(x10583*x10583)+(x10582*x10582))),-1);
if(!x10585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10584.value)+(((1.5707963267949)*(x10585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10586=IKcos(j4);
IkReal x10587=IKsin(j4);
IkReal x10588=(gconst5*r10);
IkReal x10589=(gconst5*r00);
IkReal x10590=(gconst5*r20);
IkReal x10591=((1.0)*x10586);
IkReal x10592=(gconst4*x10587);
IkReal x10593=(gconst4*x10586);
IkReal x10594=((1.0)*x10587);
evalcond[0]=(((r12*x10587))+((r11*x10593))+(((-1.0)*x10588*x10591)));
evalcond[1]=(((r21*x10592))+(((-1.0)*r22*x10591))+(((-1.0)*x10590*x10594)));
evalcond[2]=((((-1.0)*r02*x10591))+((r01*x10592))+(((-1.0)*x10589*x10594)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10591))+((r11*x10592))+(((-1.0)*x10588*x10594)));
evalcond[4]=(((r21*x10593))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10590*x10591))+((r22*x10587)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10593))+(((-1.0)*x10589*x10591))+((r02*x10587))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10595=((1.0)*gconst5);
CheckValue<IkReal> x10596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10595))+(((-1.0)*gconst4*r20)))),-1);
if(!x10596.valid){
continue;
}
CheckValue<IkReal> x10597 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10596.value)))+(x10597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10598=IKcos(j4);
IkReal x10599=IKsin(j4);
IkReal x10600=(gconst5*r10);
IkReal x10601=(gconst5*r00);
IkReal x10602=(gconst5*r20);
IkReal x10603=((1.0)*x10598);
IkReal x10604=(gconst4*x10599);
IkReal x10605=(gconst4*x10598);
IkReal x10606=((1.0)*x10599);
evalcond[0]=((((-1.0)*x10600*x10603))+((r11*x10605))+((r12*x10599)));
evalcond[1]=(((r21*x10604))+(((-1.0)*r22*x10603))+(((-1.0)*x10602*x10606)));
evalcond[2]=(((r01*x10604))+(((-1.0)*r02*x10603))+(((-1.0)*x10601*x10606)));
evalcond[3]=((-1.0)+(((-1.0)*x10600*x10606))+((r11*x10604))+(((-1.0)*r12*x10603)));
evalcond[4]=(((cj2*sj1))+((r21*x10605))+((cj1*sj2))+((r22*x10599))+(((-1.0)*x10602*x10603)));
evalcond[5]=(((r01*x10605))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10599))+(((-1.0)*x10601*x10603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10607=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10607.valid){
continue;
}
CheckValue<IkReal> x10608 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10607.value)))+(x10608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10609=IKcos(j4);
IkReal x10610=IKsin(j4);
IkReal x10611=(gconst5*r10);
IkReal x10612=(gconst5*r00);
IkReal x10613=(gconst5*r20);
IkReal x10614=((1.0)*x10609);
IkReal x10615=(gconst4*x10610);
IkReal x10616=(gconst4*x10609);
IkReal x10617=((1.0)*x10610);
evalcond[0]=(((r12*x10610))+(((-1.0)*x10611*x10614))+((r11*x10616)));
evalcond[1]=((((-1.0)*r22*x10614))+(((-1.0)*x10613*x10617))+((r21*x10615)));
evalcond[2]=((((-1.0)*r02*x10614))+((r01*x10615))+(((-1.0)*x10612*x10617)));
evalcond[3]=((-1.0)+(((-1.0)*x10611*x10617))+(((-1.0)*r12*x10614))+((r11*x10615)));
evalcond[4]=(((cj2*sj1))+((r22*x10610))+((cj1*sj2))+(((-1.0)*x10613*x10614))+((r21*x10616)));
evalcond[5]=(((r02*x10610))+(((-1.0)*sj1*sj2))+((r01*x10616))+((cj1*cj2))+(((-1.0)*x10612*x10614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10618=((-1.0)*r21);
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(x10618),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
IkReal x10619=((1.0)*(x10621.value));
IkReal x10620=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10619)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10619)));
IkReal gconst4=(x10618*x10620);
IkReal gconst5=((1.0)*r20*x10620);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10622=((-1.0)*r21);
CheckValue<IkReal> x10625 = IKatan2WithCheck(IkReal(x10622),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10625.valid){
continue;
}
IkReal x10623=((1.0)*(x10625.value));
IkReal x10624=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10623)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10623)));
IkReal gconst4=(x10622*x10624);
IkReal gconst5=((1.0)*r20*x10624);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10626=((-1.0)*r21);
CheckValue<IkReal> x10629 = IKatan2WithCheck(IkReal(x10626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10629.valid){
continue;
}
IkReal x10627=((1.0)*(x10629.value));
IkReal x10628=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10627)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10627)));
IkReal gconst4=(x10626*x10628);
IkReal gconst5=((1.0)*r20*x10628);
IkReal x10630=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10634=IKPowWithIntegerCheck(x10630,-1);
if(!x10634.valid){
continue;
}
IkReal x10631=x10634.value;
IkReal x10632=((1.0)*x10631);
IkReal x10633=((((-2.0)*r10*r11*r20*r21*x10631))+(((-1.0)*(r12*r12)))+(((-1.0)*x10632*(r10*r10)*(r20*r20)))+(((-1.0)*x10632*(r11*r11)*(r21*r21))));
j4eval[0]=x10633;
j4eval[1]=r12;
j4eval[2]=x10630;
j4eval[3]=IKsign(x10633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10635=(gconst5*r10);
IkReal x10636=(gconst4*r11);
CheckValue<IkReal> x10637=IKPowWithIntegerCheck(IKsign(((((2.0)*x10635*x10636))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10636*x10636)))+(((-1.0)*(x10635*x10635))))),-1);
if(!x10637.valid){
continue;
}
CheckValue<IkReal> x10638 = IKatan2WithCheck(IkReal(((((-1.0)*x10636))+x10635)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10637.value)))+(x10638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10639=IKsin(j4);
IkReal x10640=IKcos(j4);
IkReal x10641=(gconst4*r11);
IkReal x10642=(gconst5*r10);
IkReal x10643=(gconst5*r00);
IkReal x10644=(gconst5*r20);
IkReal x10645=((1.0)*x10640);
IkReal x10646=(gconst4*x10639);
IkReal x10647=((1.0)*x10639);
evalcond[0]=(((r21*x10646))+(((-1.0)*r22*x10645))+(((-1.0)*x10644*x10647)));
evalcond[1]=((((-1.0)*r02*x10645))+((r01*x10646))+(((-1.0)*x10643*x10647)));
evalcond[2]=(((x10640*x10642))+(((-1.0)*x10641*x10645))+(((-1.0)*r12*x10647)));
evalcond[3]=((-1.0)+((x10639*x10641))+(((-1.0)*r12*x10645))+(((-1.0)*x10642*x10647)));
evalcond[4]=(((x10640*x10644))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10647))+(((-1.0)*gconst4*r21*x10645)));
evalcond[5]=(((x10640*x10643))+(((-1.0)*r02*x10647))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10645))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10648=((1.0)*gconst5);
CheckValue<IkReal> x10649 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10648))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10649.valid){
continue;
}
CheckValue<IkReal> x10650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10648))+(((-1.0)*gconst4*r20)))),-1);
if(!x10650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10649.value)+(((1.5707963267949)*(x10650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10651=IKsin(j4);
IkReal x10652=IKcos(j4);
IkReal x10653=(gconst4*r11);
IkReal x10654=(gconst5*r10);
IkReal x10655=(gconst5*r00);
IkReal x10656=(gconst5*r20);
IkReal x10657=((1.0)*x10652);
IkReal x10658=(gconst4*x10651);
IkReal x10659=((1.0)*x10651);
evalcond[0]=((((-1.0)*x10656*x10659))+(((-1.0)*r22*x10657))+((r21*x10658)));
evalcond[1]=((((-1.0)*x10655*x10659))+(((-1.0)*r02*x10657))+((r01*x10658)));
evalcond[2]=((((-1.0)*r12*x10659))+(((-1.0)*x10653*x10657))+((x10652*x10654)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10657))+(((-1.0)*x10654*x10659))+((x10651*x10653)));
evalcond[4]=((((-1.0)*gconst4*r21*x10657))+((cj2*sj1))+(((-1.0)*r22*x10659))+((cj1*sj2))+((x10652*x10656)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10659))+(((-1.0)*gconst4*r01*x10657))+((x10652*x10655))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10660=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10660.valid){
continue;
}
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10660.value)))+(x10661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10662=IKsin(j4);
IkReal x10663=IKcos(j4);
IkReal x10664=(gconst4*r11);
IkReal x10665=(gconst5*r10);
IkReal x10666=(gconst5*r00);
IkReal x10667=(gconst5*r20);
IkReal x10668=((1.0)*x10663);
IkReal x10669=(gconst4*x10662);
IkReal x10670=((1.0)*x10662);
evalcond[0]=((((-1.0)*r22*x10668))+((r21*x10669))+(((-1.0)*x10667*x10670)));
evalcond[1]=((((-1.0)*r02*x10668))+((r01*x10669))+(((-1.0)*x10666*x10670)));
evalcond[2]=(((x10663*x10665))+(((-1.0)*r12*x10670))+(((-1.0)*x10664*x10668)));
evalcond[3]=((-1.0)+(((-1.0)*x10665*x10670))+(((-1.0)*r12*x10668))+((x10662*x10664)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10668))+(((-1.0)*r22*x10670))+((x10663*x10667)));
evalcond[5]=((((-1.0)*r02*x10670))+(((-1.0)*sj1*sj2))+((x10663*x10666))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10671=((-1.0)*r21);
IkReal x10672=((-1.0)*px);
CheckValue<IkReal> x10674 = IKatan2WithCheck(IkReal(x10671),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10674.valid){
continue;
}
IkReal x10673=((1.0)*(x10674.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10673)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10672);
rxp1_1=(px*r21);
rxp1_2=(r11*x10672);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10673)));
IkReal gconst4=x10671;
IkReal gconst5=((1.0)*r20);
IkReal x10675=((1.0)*cj3);
IkReal x10676=(r10*r20);
IkReal x10677=(r11*r21);
j4eval[0]=((((-1.0)*x10677))+(((-1.0)*x10676)));
j4eval[1]=((((-1.0)*x10675*x10676))+(((-1.0)*x10675*x10677)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10678=((-1.0)*r21);
IkReal x10679=((-1.0)*px);
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal(x10678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
IkReal x10680=((1.0)*(x10681.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10680)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10679);
rxp1_1=(px*r21);
rxp1_2=(r11*x10679);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10680)));
IkReal gconst4=x10678;
IkReal gconst5=((1.0)*r20);
IkReal x10682=((1.0)*r11*r21);
IkReal x10683=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10683))+(((-1.0)*x10682)));
j4eval[1]=(((sj3*x10683))+((sj3*x10682)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10684=((-1.0)*r21);
IkReal x10685=((-1.0)*px);
CheckValue<IkReal> x10687 = IKatan2WithCheck(IkReal(x10684),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10687.valid){
continue;
}
IkReal x10686=((1.0)*(x10687.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10686)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10685);
rxp1_1=(px*r21);
rxp1_2=(r11*x10685);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10686)));
IkReal gconst4=x10684;
IkReal gconst5=((1.0)*r20);
IkReal x10688=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10688))+(((-1.0)*r11*r21*x10688)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10689=((1.0)*r10);
CheckValue<IkReal> x10690=IKPowWithIntegerCheck(cj3,-1);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691=IKPowWithIntegerCheck(r02,-1);
if(!x10691.valid){
continue;
}
CheckValue<IkReal> x10692=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10689))),-1);
if(!x10692.valid){
continue;
}
if( IKabs(((x10690.value)*(x10691.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10692.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10690.value)*(x10691.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10692.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10689))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10690.value)*(x10691.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10692.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10689))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10693=IKsin(j4);
IkReal x10694=IKcos(j4);
IkReal x10695=(cj2*sj1);
IkReal x10696=(cj1*sj2);
IkReal x10697=(gconst5*sj3);
IkReal x10698=(gconst4*r11);
IkReal x10699=(sj1*sj2);
IkReal x10700=((1.0)*gconst5);
IkReal x10701=(cj1*cj2);
IkReal x10702=(gconst4*r21);
IkReal x10703=(cj3*gconst4);
IkReal x10704=(gconst4*sj3);
IkReal x10705=(cj3*gconst5);
IkReal x10706=(r20*x10694);
IkReal x10707=(r10*x10694);
IkReal x10708=(cj3*x10694);
IkReal x10709=(r02*x10693);
IkReal x10710=(x10696+x10695);
IkReal x10711=((1.0)*sj3*x10694);
evalcond[0]=((-1.0)*r02*x10694);
evalcond[1]=((((-1.0)*r20*x10693*x10700))+((x10693*x10702)));
evalcond[2]=(((cj3*x10709))+(((-1.0)*x10699))+x10701);
evalcond[3]=(x10710+(((-1.0)*sj3*x10709)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10693*x10700))+((x10693*x10698)));
evalcond[5]=(((r11*x10697))+((x10698*x10708))+((r10*x10704))+(((-1.0)*cj3*x10700*x10707)));
evalcond[6]=((((-1.0)*x10698*x10711))+((r11*x10705))+((r10*x10703))+((x10697*x10707)));
evalcond[7]=(((r21*x10697))+((x10702*x10708))+(((-1.0)*cj3*x10700*x10706))+x10710+((r20*x10704)));
evalcond[8]=((((-1.0)*x10701))+((x10697*x10706))+(((-1.0)*x10702*x10711))+((r21*x10705))+((r20*x10703))+x10699);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10712=((1.0)*gconst5);
IkReal x10713=(gconst4*r11);
CheckValue<IkReal> x10714=IKPowWithIntegerCheck(((((-1.0)*r10*x10712))+x10713),-1);
if(!x10714.valid){
continue;
}
CheckValue<IkReal> x10715=IKPowWithIntegerCheck(((((-1.0)*sj3*x10713))+((gconst5*r10*sj3))),-1);
if(!x10715.valid){
continue;
}
if( IKabs(x10714.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10715.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10712)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10714.value)+IKsqr(((x10715.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10712))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10714.value, ((x10715.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10712))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10716=IKsin(j4);
IkReal x10717=IKcos(j4);
IkReal x10718=(cj2*sj1);
IkReal x10719=(cj1*sj2);
IkReal x10720=(gconst5*sj3);
IkReal x10721=(gconst4*r11);
IkReal x10722=(sj1*sj2);
IkReal x10723=((1.0)*gconst5);
IkReal x10724=(cj1*cj2);
IkReal x10725=(gconst4*r21);
IkReal x10726=(cj3*gconst4);
IkReal x10727=(gconst4*sj3);
IkReal x10728=(cj3*gconst5);
IkReal x10729=(r20*x10717);
IkReal x10730=(r10*x10717);
IkReal x10731=(cj3*x10717);
IkReal x10732=(r02*x10716);
IkReal x10733=(x10718+x10719);
IkReal x10734=((1.0)*sj3*x10717);
evalcond[0]=((-1.0)*r02*x10717);
evalcond[1]=(((x10716*x10725))+(((-1.0)*r20*x10716*x10723)));
evalcond[2]=((((-1.0)*x10722))+x10724+((cj3*x10732)));
evalcond[3]=((((-1.0)*sj3*x10732))+x10733);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10716*x10723))+((x10716*x10721)));
evalcond[5]=(((r10*x10727))+(((-1.0)*cj3*x10723*x10730))+((x10721*x10731))+((r11*x10720)));
evalcond[6]=(((r10*x10726))+(((-1.0)*x10721*x10734))+((x10720*x10730))+((r11*x10728)));
evalcond[7]=(((r21*x10720))+((x10725*x10731))+((r20*x10727))+x10733+(((-1.0)*cj3*x10723*x10729)));
evalcond[8]=((((-1.0)*x10725*x10734))+((r21*x10728))+((x10720*x10729))+(((-1.0)*x10724))+((r20*x10726))+x10722);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10735=((1.0)*sj3);
IkReal x10736=(gconst4*r11);
IkReal x10737=((1.0)*gconst5*r10);
CheckValue<IkReal> x10738=IKPowWithIntegerCheck(((((-1.0)*x10737))+x10736),-1);
if(!x10738.valid){
continue;
}
CheckValue<IkReal> x10739=IKPowWithIntegerCheck(((((-1.0)*cj3*x10737))+((cj3*x10736))),-1);
if(!x10739.valid){
continue;
}
if( IKabs(x10738.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10739.value)*(((((-1.0)*gconst4*r10*x10735))+(((-1.0)*gconst5*r11*x10735)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10738.value)+IKsqr(((x10739.value)*(((((-1.0)*gconst4*r10*x10735))+(((-1.0)*gconst5*r11*x10735))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10738.value, ((x10739.value)*(((((-1.0)*gconst4*r10*x10735))+(((-1.0)*gconst5*r11*x10735))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10740=IKsin(j4);
IkReal x10741=IKcos(j4);
IkReal x10742=(cj2*sj1);
IkReal x10743=(cj1*sj2);
IkReal x10744=(gconst5*sj3);
IkReal x10745=(gconst4*r11);
IkReal x10746=(sj1*sj2);
IkReal x10747=((1.0)*gconst5);
IkReal x10748=(cj1*cj2);
IkReal x10749=(gconst4*r21);
IkReal x10750=(cj3*gconst4);
IkReal x10751=(gconst4*sj3);
IkReal x10752=(cj3*gconst5);
IkReal x10753=(r20*x10741);
IkReal x10754=(r10*x10741);
IkReal x10755=(cj3*x10741);
IkReal x10756=(r02*x10740);
IkReal x10757=(x10743+x10742);
IkReal x10758=((1.0)*sj3*x10741);
evalcond[0]=((-1.0)*r02*x10741);
evalcond[1]=((((-1.0)*r20*x10740*x10747))+((x10740*x10749)));
evalcond[2]=((((-1.0)*x10746))+((cj3*x10756))+x10748);
evalcond[3]=((((-1.0)*sj3*x10756))+x10757);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10740*x10747))+((x10740*x10745)));
evalcond[5]=(((x10745*x10755))+(((-1.0)*cj3*x10747*x10754))+((r10*x10751))+((r11*x10744)));
evalcond[6]=(((r10*x10750))+(((-1.0)*x10745*x10758))+((r11*x10752))+((x10744*x10754)));
evalcond[7]=((((-1.0)*cj3*x10747*x10753))+((x10749*x10755))+((r20*x10751))+x10757+((r21*x10744)));
evalcond[8]=((((-1.0)*x10748))+((r20*x10750))+(((-1.0)*x10749*x10758))+x10746+((x10744*x10753))+((r21*x10752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10759=gconst4*gconst4;
IkReal x10760=gconst5*gconst5;
IkReal x10761=(r10*r21);
IkReal x10762=((1.0)*cj3);
IkReal x10763=(r11*r21);
IkReal x10764=(r11*r20);
IkReal x10765=(r22*sj3);
IkReal x10766=(gconst4*r10);
IkReal x10767=((1.0)*sj3);
IkReal x10768=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10769=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10759*x10762*x10763))+((x10764*x10768))+(((-1.0)*r12*r22*x10762))+((x10761*x10768))+(((-1.0)*r10*r20*x10760*x10762)))),-1);
if(!x10769.valid){
continue;
}
CheckValue<IkReal> x10770 = IKatan2WithCheck(IkReal((((gconst5*r11*x10765))+((x10765*x10766)))),IkReal((((gconst4*gconst5*sj3*x10763))+(((-1.0)*gconst5*r20*x10766*x10767))+(((-1.0)*x10760*x10764*x10767))+((sj3*x10759*x10761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10769.value)))+(x10770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10771=IKsin(j4);
IkReal x10772=IKcos(j4);
IkReal x10773=(cj2*sj1);
IkReal x10774=(cj1*sj2);
IkReal x10775=(gconst5*sj3);
IkReal x10776=(gconst4*r11);
IkReal x10777=(sj1*sj2);
IkReal x10778=(gconst5*r10);
IkReal x10779=(cj1*cj2);
IkReal x10780=(gconst4*r01);
IkReal x10781=(gconst4*r21);
IkReal x10782=(gconst5*r00);
IkReal x10783=(gconst4*sj3);
IkReal x10784=(cj3*gconst5);
IkReal x10785=(cj3*gconst4);
IkReal x10786=((1.0)*x10772);
IkReal x10787=((1.0)*x10771);
IkReal x10788=(cj3*x10771);
IkReal x10789=(cj3*x10772);
IkReal x10790=(x10773+x10774);
evalcond[0]=(((x10771*x10781))+(((-1.0)*gconst5*r20*x10787))+(((-1.0)*r22*x10786)));
evalcond[1]=(((x10771*x10780))+(((-1.0)*x10782*x10787))+(((-1.0)*r02*x10786)));
evalcond[2]=((-1.0)+((x10771*x10776))+(((-1.0)*x10778*x10787))+(((-1.0)*r12*x10786)));
evalcond[3]=((((-1.0)*cj3*x10778*x10786))+((r11*x10775))+((x10776*x10789))+((r12*x10788))+((r10*x10783)));
evalcond[4]=(((r11*x10784))+(((-1.0)*sj3*x10776*x10786))+(((-1.0)*r12*sj3*x10787))+((r10*x10772*x10775))+((r10*x10785)));
evalcond[5]=(((r22*x10788))+((r20*x10783))+(((-1.0)*r20*x10784*x10786))+((r21*x10775))+((x10781*x10789))+x10790);
evalcond[6]=((((-1.0)*cj3*x10782*x10786))+(((-1.0)*x10777))+((r02*x10788))+((r01*x10775))+((x10780*x10789))+((r00*x10783))+x10779);
evalcond[7]=((((-1.0)*sj3*x10780*x10786))+(((-1.0)*r02*sj3*x10787))+((r01*x10784))+((r00*x10772*x10775))+((r00*x10785))+x10790);
evalcond[8]=((((-1.0)*sj3*x10781*x10786))+((r21*x10784))+((r20*x10772*x10775))+(((-1.0)*x10779))+(((-1.0)*r22*sj3*x10787))+((r20*x10785))+x10777);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10791=((1.0)*gconst5);
CheckValue<IkReal> x10792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10791))+(((-1.0)*gconst4*r20)))),-1);
if(!x10792.valid){
continue;
}
CheckValue<IkReal> x10793 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10791))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10792.value)))+(x10793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10794=IKsin(j4);
IkReal x10795=IKcos(j4);
IkReal x10796=(cj2*sj1);
IkReal x10797=(cj1*sj2);
IkReal x10798=(gconst5*sj3);
IkReal x10799=(gconst4*r11);
IkReal x10800=(sj1*sj2);
IkReal x10801=(gconst5*r10);
IkReal x10802=(cj1*cj2);
IkReal x10803=(gconst4*r01);
IkReal x10804=(gconst4*r21);
IkReal x10805=(gconst5*r00);
IkReal x10806=(gconst4*sj3);
IkReal x10807=(cj3*gconst5);
IkReal x10808=(cj3*gconst4);
IkReal x10809=((1.0)*x10795);
IkReal x10810=((1.0)*x10794);
IkReal x10811=(cj3*x10794);
IkReal x10812=(cj3*x10795);
IkReal x10813=(x10796+x10797);
evalcond[0]=((((-1.0)*r22*x10809))+(((-1.0)*gconst5*r20*x10810))+((x10794*x10804)));
evalcond[1]=((((-1.0)*x10805*x10810))+(((-1.0)*r02*x10809))+((x10794*x10803)));
evalcond[2]=((-1.0)+(((-1.0)*x10801*x10810))+((x10794*x10799))+(((-1.0)*r12*x10809)));
evalcond[3]=(((r10*x10806))+((r11*x10798))+((r12*x10811))+((x10799*x10812))+(((-1.0)*cj3*x10801*x10809)));
evalcond[4]=(((r10*x10808))+((r10*x10795*x10798))+((r11*x10807))+(((-1.0)*r12*sj3*x10810))+(((-1.0)*sj3*x10799*x10809)));
evalcond[5]=(((r22*x10811))+((r20*x10806))+((x10804*x10812))+((r21*x10798))+(((-1.0)*r20*x10807*x10809))+x10813);
evalcond[6]=(((r02*x10811))+((r00*x10806))+(((-1.0)*x10800))+(((-1.0)*cj3*x10805*x10809))+((x10803*x10812))+((r01*x10798))+x10802);
evalcond[7]=((((-1.0)*sj3*x10803*x10809))+((r01*x10807))+((r00*x10808))+(((-1.0)*r02*sj3*x10810))+((r00*x10795*x10798))+x10813);
evalcond[8]=(((r20*x10808))+(((-1.0)*r22*sj3*x10810))+((r21*x10807))+((r20*x10795*x10798))+(((-1.0)*x10802))+(((-1.0)*sj3*x10804*x10809))+x10800);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10814=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10814.valid){
continue;
}
CheckValue<IkReal> x10815 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10814.value)))+(x10815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10816=IKsin(j4);
IkReal x10817=IKcos(j4);
IkReal x10818=(cj2*sj1);
IkReal x10819=(cj1*sj2);
IkReal x10820=(gconst5*sj3);
IkReal x10821=(gconst4*r11);
IkReal x10822=(sj1*sj2);
IkReal x10823=(gconst5*r10);
IkReal x10824=(cj1*cj2);
IkReal x10825=(gconst4*r01);
IkReal x10826=(gconst4*r21);
IkReal x10827=(gconst5*r00);
IkReal x10828=(gconst4*sj3);
IkReal x10829=(cj3*gconst5);
IkReal x10830=(cj3*gconst4);
IkReal x10831=((1.0)*x10817);
IkReal x10832=((1.0)*x10816);
IkReal x10833=(cj3*x10816);
IkReal x10834=(cj3*x10817);
IkReal x10835=(x10819+x10818);
evalcond[0]=(((x10816*x10826))+(((-1.0)*gconst5*r20*x10832))+(((-1.0)*r22*x10831)));
evalcond[1]=(((x10816*x10825))+(((-1.0)*x10827*x10832))+(((-1.0)*r02*x10831)));
evalcond[2]=((-1.0)+(((-1.0)*x10823*x10832))+((x10816*x10821))+(((-1.0)*r12*x10831)));
evalcond[3]=((((-1.0)*cj3*x10823*x10831))+((r10*x10828))+((r12*x10833))+((r11*x10820))+((x10821*x10834)));
evalcond[4]=((((-1.0)*sj3*x10821*x10831))+((r10*x10830))+(((-1.0)*r12*sj3*x10832))+((r10*x10817*x10820))+((r11*x10829)));
evalcond[5]=(((r21*x10820))+((r22*x10833))+((x10826*x10834))+(((-1.0)*r20*x10829*x10831))+((r20*x10828))+x10835);
evalcond[6]=((((-1.0)*x10822))+(((-1.0)*cj3*x10827*x10831))+((x10825*x10834))+((r02*x10833))+((r00*x10828))+((r01*x10820))+x10824);
evalcond[7]=((((-1.0)*sj3*x10825*x10831))+(((-1.0)*r02*sj3*x10832))+((r00*x10817*x10820))+((r00*x10830))+((r01*x10829))+x10835);
evalcond[8]=(((r21*x10829))+(((-1.0)*x10824))+(((-1.0)*sj3*x10826*x10831))+(((-1.0)*r22*sj3*x10832))+((r20*x10817*x10820))+((r20*x10830))+x10822);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10836=((-1.0)*r21);
CheckValue<IkReal> x10839 = IKatan2WithCheck(IkReal(x10836),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10839.valid){
continue;
}
IkReal x10837=((1.0)*(x10839.value));
IkReal x10838=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10837)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10837)));
IkReal gconst4=(x10836*x10838);
IkReal gconst5=((1.0)*r20*x10838);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10840=((-1.0)*r21);
CheckValue<IkReal> x10843 = IKatan2WithCheck(IkReal(x10840),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10843.valid){
continue;
}
IkReal x10841=((1.0)*(x10843.value));
IkReal x10842=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10841)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10841)));
IkReal gconst4=(x10840*x10842);
IkReal gconst5=((1.0)*r20*x10842);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10844=((-1.0)*r21);
CheckValue<IkReal> x10847 = IKatan2WithCheck(IkReal(x10844),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10847.valid){
continue;
}
IkReal x10845=((1.0)*(x10847.value));
IkReal x10846=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10845)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10845)));
IkReal gconst4=(x10844*x10846);
IkReal gconst5=((1.0)*r20*x10846);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10848=((-1.0)*r21);
CheckValue<IkReal> x10851 = IKatan2WithCheck(IkReal(x10848),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10851.valid){
continue;
}
IkReal x10849=((1.0)*(x10851.value));
IkReal x10850=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10849)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10849)));
IkReal gconst4=(x10848*x10850);
IkReal gconst5=((1.0)*r20*x10850);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10852=((-1.0)*r21);
CheckValue<IkReal> x10855 = IKatan2WithCheck(IkReal(x10852),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10855.valid){
continue;
}
IkReal x10853=((1.0)*(x10855.value));
IkReal x10854=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10853)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10853)));
IkReal gconst4=(x10852*x10854);
IkReal gconst5=((1.0)*r20*x10854);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10856=((-1.0)*r21);
CheckValue<IkReal> x10859 = IKatan2WithCheck(IkReal(x10856),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10859.valid){
continue;
}
IkReal x10857=((1.0)*(x10859.value));
IkReal x10858=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10857)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10857)));
IkReal gconst4=(x10856*x10858);
IkReal gconst5=((1.0)*r20*x10858);
IkReal x10860=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10864=IKPowWithIntegerCheck(x10860,-1);
if(!x10864.valid){
continue;
}
IkReal x10861=x10864.value;
IkReal x10862=((1.0)*x10861);
IkReal x10863=((((-1.0)*(r02*r02)))+(((-1.0)*x10862*(r01*r01)*(r21*r21)))+(((-1.0)*x10862*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10861)));
j4eval[0]=x10863;
j4eval[1]=r02;
j4eval[2]=x10860;
j4eval[3]=IKsign(x10863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10865=(gconst5*r00);
IkReal x10866=(gconst4*r01);
CheckValue<IkReal> x10867 = IKatan2WithCheck(IkReal(((((-1.0)*x10866))+x10865)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10867.valid){
continue;
}
CheckValue<IkReal> x10868=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10866*x10866)))+(((-1.0)*(x10865*x10865)))+(((2.0)*x10865*x10866)))),-1);
if(!x10868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10867.value)+(((1.5707963267949)*(x10868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10869=IKsin(j4);
IkReal x10870=IKcos(j4);
IkReal x10871=(gconst4*r11);
IkReal x10872=((1.0)*cj1);
IkReal x10873=(gconst5*r10);
IkReal x10874=(gconst4*r01);
IkReal x10875=(gconst5*r00);
IkReal x10876=(gconst4*r21);
IkReal x10877=(gconst5*r20);
IkReal x10878=((1.0)*x10870);
IkReal x10879=((1.0)*x10869);
evalcond[0]=((((-1.0)*x10877*x10879))+(((-1.0)*r22*x10878))+((x10869*x10876)));
evalcond[1]=((((-1.0)*x10873*x10879))+(((-1.0)*r12*x10878))+((x10869*x10871)));
evalcond[2]=(((x10870*x10875))+(((-1.0)*x10874*x10878))+(((-1.0)*r02*x10879)));
evalcond[3]=((-1.0)+(((-1.0)*x10875*x10879))+(((-1.0)*r02*x10878))+((x10869*x10874)));
evalcond[4]=(((x10870*x10877))+(((-1.0)*r22*x10879))+((sj1*sj2))+(((-1.0)*x10876*x10878))+(((-1.0)*cj2*x10872)));
evalcond[5]=(((x10870*x10873))+(((-1.0)*r12*x10879))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10872))+(((-1.0)*x10871*x10878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10880=((1.0)*gconst5);
CheckValue<IkReal> x10881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10880))+(((-1.0)*gconst4*r10)))),-1);
if(!x10881.valid){
continue;
}
CheckValue<IkReal> x10882 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10881.value)))+(x10882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10883=IKsin(j4);
IkReal x10884=IKcos(j4);
IkReal x10885=(gconst4*r11);
IkReal x10886=((1.0)*cj1);
IkReal x10887=(gconst5*r10);
IkReal x10888=(gconst4*r01);
IkReal x10889=(gconst5*r00);
IkReal x10890=(gconst4*r21);
IkReal x10891=(gconst5*r20);
IkReal x10892=((1.0)*x10884);
IkReal x10893=((1.0)*x10883);
evalcond[0]=(((x10883*x10890))+(((-1.0)*x10891*x10893))+(((-1.0)*r22*x10892)));
evalcond[1]=(((x10883*x10885))+(((-1.0)*x10887*x10893))+(((-1.0)*r12*x10892)));
evalcond[2]=((((-1.0)*x10888*x10892))+(((-1.0)*r02*x10893))+((x10884*x10889)));
evalcond[3]=((-1.0)+((x10883*x10888))+(((-1.0)*r02*x10892))+(((-1.0)*x10889*x10893)));
evalcond[4]=((((-1.0)*x10890*x10892))+((sj1*sj2))+(((-1.0)*cj2*x10886))+(((-1.0)*r22*x10893))+((x10884*x10891)));
evalcond[5]=((((-1.0)*sj2*x10886))+(((-1.0)*cj2*sj1))+(((-1.0)*x10885*x10892))+(((-1.0)*r12*x10893))+((x10884*x10887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10894 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10894.valid){
continue;
}
CheckValue<IkReal> x10895=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10894.value)+(((1.5707963267949)*(x10895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10896=IKsin(j4);
IkReal x10897=IKcos(j4);
IkReal x10898=(gconst4*r11);
IkReal x10899=((1.0)*cj1);
IkReal x10900=(gconst5*r10);
IkReal x10901=(gconst4*r01);
IkReal x10902=(gconst5*r00);
IkReal x10903=(gconst4*r21);
IkReal x10904=(gconst5*r20);
IkReal x10905=((1.0)*x10897);
IkReal x10906=((1.0)*x10896);
evalcond[0]=((((-1.0)*r22*x10905))+(((-1.0)*x10904*x10906))+((x10896*x10903)));
evalcond[1]=((((-1.0)*x10900*x10906))+(((-1.0)*r12*x10905))+((x10896*x10898)));
evalcond[2]=((((-1.0)*x10901*x10905))+((x10897*x10902))+(((-1.0)*r02*x10906)));
evalcond[3]=((-1.0)+((x10896*x10901))+(((-1.0)*x10902*x10906))+(((-1.0)*r02*x10905)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10906))+(((-1.0)*cj2*x10899))+(((-1.0)*x10903*x10905))+((x10897*x10904)));
evalcond[5]=((((-1.0)*sj2*x10899))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10906))+((x10897*x10900))+(((-1.0)*x10898*x10905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10907=((-1.0)*r21);
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal(x10907),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
IkReal x10908=((1.0)*(x10910.value));
IkReal x10909=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10908)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10908)));
IkReal gconst4=(x10907*x10909);
IkReal gconst5=((1.0)*r20*x10909);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10911=((-1.0)*r21);
CheckValue<IkReal> x10914 = IKatan2WithCheck(IkReal(x10911),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10914.valid){
continue;
}
IkReal x10912=((1.0)*(x10914.value));
IkReal x10913=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10912)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10912)));
IkReal gconst4=(x10911*x10913);
IkReal gconst5=((1.0)*r20*x10913);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10915=((-1.0)*r21);
CheckValue<IkReal> x10918 = IKatan2WithCheck(IkReal(x10915),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10918.valid){
continue;
}
IkReal x10916=((1.0)*(x10918.value));
IkReal x10917=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10916)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10916)));
IkReal gconst4=(x10915*x10917);
IkReal gconst5=((1.0)*r20*x10917);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10919=(gconst4*r01);
IkReal x10920=(gconst5*r00);
CheckValue<IkReal> x10921=IKPowWithIntegerCheck(IKsign(((x10919*x10919)+(x10920*x10920)+(r02*r02)+(((-2.0)*x10919*x10920)))),-1);
if(!x10921.valid){
continue;
}
CheckValue<IkReal> x10922 = IKatan2WithCheck(IkReal(((((-1.0)*x10920))+x10919)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10921.value)))+(x10922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10923=IKcos(j4);
IkReal x10924=IKsin(j4);
IkReal x10925=(gconst4*r11);
IkReal x10926=(gconst5*r10);
IkReal x10927=((1.0)*cj1);
IkReal x10928=(gconst5*r00);
IkReal x10929=(gconst5*r20);
IkReal x10930=((1.0)*x10923);
IkReal x10931=(gconst4*x10923);
IkReal x10932=((1.0)*x10924);
IkReal x10933=(gconst4*x10924);
evalcond[0]=(((r02*x10924))+(((-1.0)*x10928*x10930))+((r01*x10931)));
evalcond[1]=((((-1.0)*x10929*x10932))+(((-1.0)*r22*x10930))+((r21*x10933)));
evalcond[2]=((((-1.0)*r12*x10930))+(((-1.0)*x10926*x10932))+((x10924*x10925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10930))+(((-1.0)*x10928*x10932))+((r01*x10933)));
evalcond[4]=((((-1.0)*x10929*x10930))+((sj1*sj2))+((r21*x10931))+((r22*x10924))+(((-1.0)*cj2*x10927)));
evalcond[5]=((((-1.0)*sj2*x10927))+(((-1.0)*x10926*x10930))+(((-1.0)*cj2*sj1))+((r12*x10924))+((x10923*x10925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10934=((1.0)*gconst5);
CheckValue<IkReal> x10935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10934))+(((-1.0)*gconst4*r10)))),-1);
if(!x10935.valid){
continue;
}
CheckValue<IkReal> x10936 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10934))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10935.value)))+(x10936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10937=IKcos(j4);
IkReal x10938=IKsin(j4);
IkReal x10939=(gconst4*r11);
IkReal x10940=(gconst5*r10);
IkReal x10941=((1.0)*cj1);
IkReal x10942=(gconst5*r00);
IkReal x10943=(gconst5*r20);
IkReal x10944=((1.0)*x10937);
IkReal x10945=(gconst4*x10937);
IkReal x10946=((1.0)*x10938);
IkReal x10947=(gconst4*x10938);
evalcond[0]=(((r02*x10938))+((r01*x10945))+(((-1.0)*x10942*x10944)));
evalcond[1]=(((r21*x10947))+(((-1.0)*r22*x10944))+(((-1.0)*x10943*x10946)));
evalcond[2]=(((x10938*x10939))+(((-1.0)*r12*x10944))+(((-1.0)*x10940*x10946)));
evalcond[3]=((-1.0)+((r01*x10947))+(((-1.0)*x10942*x10946))+(((-1.0)*r02*x10944)));
evalcond[4]=(((r21*x10945))+((sj1*sj2))+((r22*x10938))+(((-1.0)*x10943*x10944))+(((-1.0)*cj2*x10941)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10941))+((r12*x10938))+((x10937*x10939))+(((-1.0)*x10940*x10944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10948 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10948.valid){
continue;
}
CheckValue<IkReal> x10949=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10948.value)+(((1.5707963267949)*(x10949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10950=IKcos(j4);
IkReal x10951=IKsin(j4);
IkReal x10952=(gconst4*r11);
IkReal x10953=(gconst5*r10);
IkReal x10954=((1.0)*cj1);
IkReal x10955=(gconst5*r00);
IkReal x10956=(gconst5*r20);
IkReal x10957=((1.0)*x10950);
IkReal x10958=(gconst4*x10950);
IkReal x10959=((1.0)*x10951);
IkReal x10960=(gconst4*x10951);
evalcond[0]=(((r02*x10951))+((r01*x10958))+(((-1.0)*x10955*x10957)));
evalcond[1]=((((-1.0)*r22*x10957))+((r21*x10960))+(((-1.0)*x10956*x10959)));
evalcond[2]=((((-1.0)*x10953*x10959))+(((-1.0)*r12*x10957))+((x10951*x10952)));
evalcond[3]=((-1.0)+((r01*x10960))+(((-1.0)*x10955*x10959))+(((-1.0)*r02*x10957)));
evalcond[4]=((((-1.0)*cj2*x10954))+((r22*x10951))+((sj1*sj2))+((r21*x10958))+(((-1.0)*x10956*x10957)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10954))+(((-1.0)*x10953*x10957))+((x10950*x10952))+((r12*x10951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10961=((-1.0)*r21);
CheckValue<IkReal> x10964 = IKatan2WithCheck(IkReal(x10961),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10964.valid){
continue;
}
IkReal x10962=((1.0)*(x10964.value));
IkReal x10963=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10962)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10962)));
IkReal gconst4=(x10961*x10963);
IkReal gconst5=((1.0)*r20*x10963);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10965=((-1.0)*r21);
CheckValue<IkReal> x10968 = IKatan2WithCheck(IkReal(x10965),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10968.valid){
continue;
}
IkReal x10966=((1.0)*(x10968.value));
IkReal x10967=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10966)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10966)));
IkReal gconst4=(x10965*x10967);
IkReal gconst5=((1.0)*r20*x10967);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10969=((-1.0)*r21);
CheckValue<IkReal> x10972 = IKatan2WithCheck(IkReal(x10969),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10972.valid){
continue;
}
IkReal x10970=((1.0)*(x10972.value));
IkReal x10971=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10970)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10970)));
IkReal gconst4=(x10969*x10971);
IkReal gconst5=((1.0)*r20*x10971);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10973=(gconst4*r01);
IkReal x10974=(gconst5*r00);
CheckValue<IkReal> x10975 = IKatan2WithCheck(IkReal(((((-1.0)*x10974))+x10973)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10975.valid){
continue;
}
CheckValue<IkReal> x10976=IKPowWithIntegerCheck(IKsign(((x10974*x10974)+(x10973*x10973)+(((-2.0)*x10973*x10974))+(r02*r02))),-1);
if(!x10976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10975.value)+(((1.5707963267949)*(x10976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10977=IKcos(j4);
IkReal x10978=IKsin(j4);
IkReal x10979=(gconst4*r11);
IkReal x10980=(gconst5*r10);
IkReal x10981=(gconst5*r00);
IkReal x10982=(gconst5*r20);
IkReal x10983=((1.0)*x10977);
IkReal x10984=(gconst4*x10977);
IkReal x10985=((1.0)*x10978);
IkReal x10986=(gconst4*x10978);
evalcond[0]=(((r02*x10978))+((r01*x10984))+(((-1.0)*x10981*x10983)));
evalcond[1]=(((r21*x10986))+(((-1.0)*r22*x10983))+(((-1.0)*x10982*x10985)));
evalcond[2]=(((x10978*x10979))+(((-1.0)*r12*x10983))+(((-1.0)*x10980*x10985)));
evalcond[3]=((-1.0)+((r01*x10986))+(((-1.0)*x10981*x10985))+(((-1.0)*r02*x10983)));
evalcond[4]=(((cj2*sj1))+((r21*x10984))+((cj1*sj2))+((r22*x10978))+(((-1.0)*x10982*x10983)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10977*x10979))+(((-1.0)*x10980*x10983))+((r12*x10978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10987=((1.0)*gconst5);
CheckValue<IkReal> x10988 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10987))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10988.valid){
continue;
}
CheckValue<IkReal> x10989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10987))+(((-1.0)*gconst4*r10)))),-1);
if(!x10989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10988.value)+(((1.5707963267949)*(x10989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10990=IKcos(j4);
IkReal x10991=IKsin(j4);
IkReal x10992=(gconst4*r11);
IkReal x10993=(gconst5*r10);
IkReal x10994=(gconst5*r00);
IkReal x10995=(gconst5*r20);
IkReal x10996=((1.0)*x10990);
IkReal x10997=(gconst4*x10990);
IkReal x10998=((1.0)*x10991);
IkReal x10999=(gconst4*x10991);
evalcond[0]=(((r01*x10997))+(((-1.0)*x10994*x10996))+((r02*x10991)));
evalcond[1]=(((r21*x10999))+(((-1.0)*r22*x10996))+(((-1.0)*x10995*x10998)));
evalcond[2]=((((-1.0)*x10993*x10998))+((x10991*x10992))+(((-1.0)*r12*x10996)));
evalcond[3]=((-1.0)+((r01*x10999))+(((-1.0)*x10994*x10998))+(((-1.0)*r02*x10996)));
evalcond[4]=(((cj2*sj1))+((r22*x10991))+((r21*x10997))+(((-1.0)*x10995*x10996))+((cj1*sj2)));
evalcond[5]=(((r12*x10991))+(((-1.0)*x10993*x10996))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10990*x10992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11000 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11000.valid){
continue;
}
CheckValue<IkReal> x11001=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11000.value)+(((1.5707963267949)*(x11001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11002=IKcos(j4);
IkReal x11003=IKsin(j4);
IkReal x11004=(gconst4*r11);
IkReal x11005=(gconst5*r10);
IkReal x11006=(gconst5*r00);
IkReal x11007=(gconst5*r20);
IkReal x11008=((1.0)*x11002);
IkReal x11009=(gconst4*x11002);
IkReal x11010=((1.0)*x11003);
IkReal x11011=(gconst4*x11003);
evalcond[0]=(((r02*x11003))+((r01*x11009))+(((-1.0)*x11006*x11008)));
evalcond[1]=((((-1.0)*r22*x11008))+(((-1.0)*x11007*x11010))+((r21*x11011)));
evalcond[2]=((((-1.0)*x11005*x11010))+((x11003*x11004))+(((-1.0)*r12*x11008)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11008))+(((-1.0)*x11006*x11010))+((r01*x11011)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11007*x11008))+((cj1*sj2))+((r21*x11009))+((r22*x11003)));
evalcond[5]=(((x11002*x11004))+(((-1.0)*x11005*x11008))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11012=((-1.0)*r21);
CheckValue<IkReal> x11015 = IKatan2WithCheck(IkReal(x11012),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11015.valid){
continue;
}
IkReal x11013=((1.0)*(x11015.value));
IkReal x11014=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11013)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11013)));
IkReal gconst4=(x11012*x11014);
IkReal gconst5=((1.0)*r20*x11014);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11016=((-1.0)*r21);
CheckValue<IkReal> x11019 = IKatan2WithCheck(IkReal(x11016),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11019.valid){
continue;
}
IkReal x11017=((1.0)*(x11019.value));
IkReal x11018=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11017)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11017)));
IkReal gconst4=(x11016*x11018);
IkReal gconst5=((1.0)*r20*x11018);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11020=((-1.0)*r21);
CheckValue<IkReal> x11023 = IKatan2WithCheck(IkReal(x11020),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11023.valid){
continue;
}
IkReal x11021=((1.0)*(x11023.value));
IkReal x11022=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11021)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11021)));
IkReal gconst4=(x11020*x11022);
IkReal gconst5=((1.0)*r20*x11022);
IkReal x11024=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11028=IKPowWithIntegerCheck(x11024,-1);
if(!x11028.valid){
continue;
}
IkReal x11025=x11028.value;
IkReal x11026=((1.0)*x11025);
IkReal x11027=((((-1.0)*x11026*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11026*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11025)));
j4eval[0]=x11027;
j4eval[1]=r02;
j4eval[2]=x11024;
j4eval[3]=IKsign(x11027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11029=(gconst5*r00);
IkReal x11030=(gconst4*r01);
CheckValue<IkReal> x11031=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11029*x11029)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11030*x11030)))+(((2.0)*x11029*x11030)))),-1);
if(!x11031.valid){
continue;
}
CheckValue<IkReal> x11032 = IKatan2WithCheck(IkReal(((((-1.0)*x11030))+x11029)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11031.value)))+(x11032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11033=IKsin(j4);
IkReal x11034=IKcos(j4);
IkReal x11035=(gconst4*r11);
IkReal x11036=(gconst5*r10);
IkReal x11037=(gconst4*r01);
IkReal x11038=(gconst5*r00);
IkReal x11039=(gconst4*r21);
IkReal x11040=(gconst5*r20);
IkReal x11041=((1.0)*x11034);
IkReal x11042=((1.0)*x11033);
evalcond[0]=(((x11033*x11039))+(((-1.0)*r22*x11041))+(((-1.0)*x11040*x11042)));
evalcond[1]=(((x11033*x11035))+(((-1.0)*x11036*x11042))+(((-1.0)*r12*x11041)));
evalcond[2]=((((-1.0)*x11037*x11041))+((x11034*x11038))+(((-1.0)*r02*x11042)));
evalcond[3]=((-1.0)+((x11033*x11037))+(((-1.0)*r02*x11041))+(((-1.0)*x11038*x11042)));
evalcond[4]=(((cj2*sj1))+((x11034*x11040))+(((-1.0)*r22*x11042))+((cj1*sj2))+(((-1.0)*x11039*x11041)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11042))+((x11034*x11036))+(((-1.0)*x11035*x11041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11043=((1.0)*gconst5);
CheckValue<IkReal> x11044 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11043))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11044.valid){
continue;
}
CheckValue<IkReal> x11045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11043))+(((-1.0)*gconst4*r10)))),-1);
if(!x11045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11044.value)+(((1.5707963267949)*(x11045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11046=IKsin(j4);
IkReal x11047=IKcos(j4);
IkReal x11048=(gconst4*r11);
IkReal x11049=(gconst5*r10);
IkReal x11050=(gconst4*r01);
IkReal x11051=(gconst5*r00);
IkReal x11052=(gconst4*r21);
IkReal x11053=(gconst5*r20);
IkReal x11054=((1.0)*x11047);
IkReal x11055=((1.0)*x11046);
evalcond[0]=(((x11046*x11052))+(((-1.0)*r22*x11054))+(((-1.0)*x11053*x11055)));
evalcond[1]=((((-1.0)*r12*x11054))+(((-1.0)*x11049*x11055))+((x11046*x11048)));
evalcond[2]=(((x11047*x11051))+(((-1.0)*x11050*x11054))+(((-1.0)*r02*x11055)));
evalcond[3]=((-1.0)+((x11046*x11050))+(((-1.0)*x11051*x11055))+(((-1.0)*r02*x11054)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11055))+((x11047*x11053))+(((-1.0)*x11052*x11054))+((cj1*sj2)));
evalcond[5]=(((x11047*x11049))+(((-1.0)*r12*x11055))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11048*x11054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
CheckValue<IkReal> x11057=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11056.value)+(((1.5707963267949)*(x11057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11058=IKsin(j4);
IkReal x11059=IKcos(j4);
IkReal x11060=(gconst4*r11);
IkReal x11061=(gconst5*r10);
IkReal x11062=(gconst4*r01);
IkReal x11063=(gconst5*r00);
IkReal x11064=(gconst4*r21);
IkReal x11065=(gconst5*r20);
IkReal x11066=((1.0)*x11059);
IkReal x11067=((1.0)*x11058);
evalcond[0]=((((-1.0)*r22*x11066))+((x11058*x11064))+(((-1.0)*x11065*x11067)));
evalcond[1]=(((x11058*x11060))+(((-1.0)*x11061*x11067))+(((-1.0)*r12*x11066)));
evalcond[2]=((((-1.0)*r02*x11067))+(((-1.0)*x11062*x11066))+((x11059*x11063)));
evalcond[3]=((-1.0)+((x11058*x11062))+(((-1.0)*r02*x11066))+(((-1.0)*x11063*x11067)));
evalcond[4]=((((-1.0)*r22*x11067))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11064*x11066))+((x11059*x11065)));
evalcond[5]=((((-1.0)*x11060*x11066))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11067))+((x11059*x11061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11068=gconst4*gconst4;
IkReal x11069=gconst5*gconst5;
IkReal x11070=(r01*r20);
IkReal x11071=(gconst4*sj3);
IkReal x11072=(r01*r21);
IkReal x11073=((1.0)*cj3);
IkReal x11074=(r00*r21);
IkReal x11075=(r00*r20);
IkReal x11076=(cj3*gconst4*gconst5);
IkReal x11077=((1.0)*x11069);
CheckValue<IkReal> x11078 = IKatan2WithCheck(IkReal((((r00*r22*x11071))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11071*x11075))+((gconst5*x11071*x11072))+((sj3*x11068*x11074))+(((-1.0)*sj3*x11070*x11077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11078.valid){
continue;
}
CheckValue<IkReal> x11079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11073))+(((-1.0)*x11069*x11073*x11075))+(((-1.0)*x11068*x11072*x11073))+((x11070*x11076))+((x11074*x11076)))),-1);
if(!x11079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11078.value)+(((1.5707963267949)*(x11079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11080=IKsin(j4);
IkReal x11081=IKcos(j4);
IkReal x11082=(sj1*sj2);
IkReal x11083=(gconst5*sj3);
IkReal x11084=(gconst4*r11);
IkReal x11085=(gconst5*r10);
IkReal x11086=((1.0)*cj1);
IkReal x11087=(gconst4*r01);
IkReal x11088=(cj2*sj1);
IkReal x11089=(gconst5*r00);
IkReal x11090=(gconst4*sj3);
IkReal x11091=(cj3*gconst5);
IkReal x11092=(cj3*gconst4);
IkReal x11093=(gconst4*r21);
IkReal x11094=(cj2*x11086);
IkReal x11095=((1.0)*x11081);
IkReal x11096=((1.0)*x11080);
IkReal x11097=(cj3*x11080);
IkReal x11098=(cj3*x11081);
evalcond[0]=((((-1.0)*r22*x11095))+(((-1.0)*gconst5*r20*x11096))+((x11080*x11093)));
evalcond[1]=((((-1.0)*r12*x11095))+(((-1.0)*x11085*x11096))+((x11080*x11084)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11095))+((x11080*x11087))+(((-1.0)*x11089*x11096)));
evalcond[3]=((((-1.0)*cj3*x11089*x11095))+((r02*x11097))+((r01*x11083))+((r00*x11090))+((x11087*x11098)));
evalcond[4]=((((-1.0)*r02*sj3*x11096))+((r00*x11092))+((r01*x11091))+((r00*x11081*x11083))+(((-1.0)*sj3*x11087*x11095)));
evalcond[5]=(((r21*x11083))+((cj1*sj2))+((r20*x11090))+x11088+((r21*x11081*x11092))+(((-1.0)*r20*x11091*x11095))+((r22*x11097)));
evalcond[6]=(((x11084*x11098))+(((-1.0)*cj3*x11085*x11095))+(((-1.0)*x11094))+((r12*x11097))+x11082+((r11*x11083))+((r10*x11090)));
evalcond[7]=(((r20*x11081*x11083))+(((-1.0)*r21*x11090*x11095))+(((-1.0)*x11094))+((r20*x11092))+x11082+(((-1.0)*r22*sj3*x11096))+((r21*x11091)));
evalcond[8]=((((-1.0)*sj2*x11086))+((r10*x11081*x11083))+(((-1.0)*x11088))+(((-1.0)*r12*sj3*x11096))+((r11*x11091))+((r10*x11092))+(((-1.0)*sj3*x11084*x11095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11099=((1.0)*gconst5);
CheckValue<IkReal> x11100 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11099))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11100.valid){
continue;
}
CheckValue<IkReal> x11101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11099))+(((-1.0)*gconst4*r10)))),-1);
if(!x11101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11100.value)+(((1.5707963267949)*(x11101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11102=IKsin(j4);
IkReal x11103=IKcos(j4);
IkReal x11104=(sj1*sj2);
IkReal x11105=(gconst5*sj3);
IkReal x11106=(gconst4*r11);
IkReal x11107=(gconst5*r10);
IkReal x11108=((1.0)*cj1);
IkReal x11109=(gconst4*r01);
IkReal x11110=(cj2*sj1);
IkReal x11111=(gconst5*r00);
IkReal x11112=(gconst4*sj3);
IkReal x11113=(cj3*gconst5);
IkReal x11114=(cj3*gconst4);
IkReal x11115=(gconst4*r21);
IkReal x11116=(cj2*x11108);
IkReal x11117=((1.0)*x11103);
IkReal x11118=((1.0)*x11102);
IkReal x11119=(cj3*x11102);
IkReal x11120=(cj3*x11103);
evalcond[0]=((((-1.0)*gconst5*r20*x11118))+((x11102*x11115))+(((-1.0)*r22*x11117)));
evalcond[1]=(((x11102*x11106))+(((-1.0)*x11107*x11118))+(((-1.0)*r12*x11117)));
evalcond[2]=((-1.0)+((x11102*x11109))+(((-1.0)*x11111*x11118))+(((-1.0)*r02*x11117)));
evalcond[3]=(((r02*x11119))+(((-1.0)*cj3*x11111*x11117))+((x11109*x11120))+((r00*x11112))+((r01*x11105)));
evalcond[4]=((((-1.0)*r02*sj3*x11118))+(((-1.0)*sj3*x11109*x11117))+((r00*x11103*x11105))+((r00*x11114))+((r01*x11113)));
evalcond[5]=(((cj1*sj2))+x11110+((r21*x11105))+(((-1.0)*r20*x11113*x11117))+((r20*x11112))+((r21*x11103*x11114))+((r22*x11119)));
evalcond[6]=(((x11106*x11120))+((r10*x11112))+x11104+(((-1.0)*cj3*x11107*x11117))+((r11*x11105))+(((-1.0)*x11116))+((r12*x11119)));
evalcond[7]=(((r20*x11103*x11105))+x11104+((r21*x11113))+(((-1.0)*r22*sj3*x11118))+((r20*x11114))+(((-1.0)*x11116))+(((-1.0)*r21*x11112*x11117)));
evalcond[8]=((((-1.0)*x11110))+(((-1.0)*sj3*x11106*x11117))+(((-1.0)*r12*sj3*x11118))+((r10*x11114))+(((-1.0)*sj2*x11108))+((r11*x11113))+((r10*x11103*x11105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11121 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11121.valid){
continue;
}
CheckValue<IkReal> x11122=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11121.value)+(((1.5707963267949)*(x11122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11123=IKsin(j4);
IkReal x11124=IKcos(j4);
IkReal x11125=(sj1*sj2);
IkReal x11126=(gconst5*sj3);
IkReal x11127=(gconst4*r11);
IkReal x11128=(gconst5*r10);
IkReal x11129=((1.0)*cj1);
IkReal x11130=(gconst4*r01);
IkReal x11131=(cj2*sj1);
IkReal x11132=(gconst5*r00);
IkReal x11133=(gconst4*sj3);
IkReal x11134=(cj3*gconst5);
IkReal x11135=(cj3*gconst4);
IkReal x11136=(gconst4*r21);
IkReal x11137=(cj2*x11129);
IkReal x11138=((1.0)*x11124);
IkReal x11139=((1.0)*x11123);
IkReal x11140=(cj3*x11123);
IkReal x11141=(cj3*x11124);
evalcond[0]=(((x11123*x11136))+(((-1.0)*r22*x11138))+(((-1.0)*gconst5*r20*x11139)));
evalcond[1]=(((x11123*x11127))+(((-1.0)*x11128*x11139))+(((-1.0)*r12*x11138)));
evalcond[2]=((-1.0)+((x11123*x11130))+(((-1.0)*x11132*x11139))+(((-1.0)*r02*x11138)));
evalcond[3]=((((-1.0)*cj3*x11132*x11138))+((r02*x11140))+((x11130*x11141))+((r01*x11126))+((r00*x11133)));
evalcond[4]=((((-1.0)*r02*sj3*x11139))+((r00*x11124*x11126))+((r01*x11134))+(((-1.0)*sj3*x11130*x11138))+((r00*x11135)));
evalcond[5]=(((r21*x11126))+((r22*x11140))+((cj1*sj2))+x11131+((r20*x11133))+((r21*x11124*x11135))+(((-1.0)*r20*x11134*x11138)));
evalcond[6]=(((x11127*x11141))+x11125+((r10*x11133))+((r11*x11126))+((r12*x11140))+(((-1.0)*cj3*x11128*x11138))+(((-1.0)*x11137)));
evalcond[7]=((((-1.0)*r21*x11133*x11138))+((r20*x11124*x11126))+((r21*x11134))+x11125+(((-1.0)*r22*sj3*x11139))+((r20*x11135))+(((-1.0)*x11137)));
evalcond[8]=((((-1.0)*x11131))+(((-1.0)*r12*sj3*x11139))+((r10*x11135))+(((-1.0)*sj3*x11127*x11138))+((r11*x11134))+((r10*x11124*x11126))+(((-1.0)*sj2*x11129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11142=((-1.0)*r21);
CheckValue<IkReal> x11145 = IKatan2WithCheck(IkReal(x11142),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11145.valid){
continue;
}
IkReal x11143=((1.0)*(x11145.value));
IkReal x11144=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11143)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11143)));
IkReal gconst4=(x11142*x11144);
IkReal gconst5=((1.0)*r20*x11144);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11146=((-1.0)*r21);
CheckValue<IkReal> x11149 = IKatan2WithCheck(IkReal(x11146),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11149.valid){
continue;
}
IkReal x11147=((1.0)*(x11149.value));
IkReal x11148=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11147)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11147)));
IkReal gconst4=(x11146*x11148);
IkReal gconst5=((1.0)*r20*x11148);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11150=((-1.0)*r21);
CheckValue<IkReal> x11153 = IKatan2WithCheck(IkReal(x11150),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11153.valid){
continue;
}
IkReal x11151=((1.0)*(x11153.value));
IkReal x11152=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11151)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11151)));
IkReal gconst4=(x11150*x11152);
IkReal gconst5=((1.0)*r20*x11152);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11154=((-1.0)*r21);
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal(x11154),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
IkReal x11155=((1.0)*(x11157.value));
IkReal x11156=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11155)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11155)));
IkReal gconst4=(x11154*x11156);
IkReal gconst5=((1.0)*r20*x11156);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11158=((-1.0)*r21);
CheckValue<IkReal> x11161 = IKatan2WithCheck(IkReal(x11158),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11161.valid){
continue;
}
IkReal x11159=((1.0)*(x11161.value));
IkReal x11160=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11159)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11159)));
IkReal gconst4=(x11158*x11160);
IkReal gconst5=((1.0)*r20*x11160);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11162=((-1.0)*r21);
CheckValue<IkReal> x11165 = IKatan2WithCheck(IkReal(x11162),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11165.valid){
continue;
}
IkReal x11163=((1.0)*(x11165.value));
IkReal x11164=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11163)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11163)));
IkReal gconst4=(x11162*x11164);
IkReal gconst5=((1.0)*r20*x11164);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11166=(gconst5*r00);
IkReal x11167=(gconst4*r01);
CheckValue<IkReal> x11168 = IKatan2WithCheck(IkReal((x11166+(((-1.0)*x11167)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11168.valid){
continue;
}
CheckValue<IkReal> x11169=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11166*x11167))+(x11166*x11166)+(x11167*x11167)+(r02*r02))),-1);
if(!x11169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11168.value)+(((1.5707963267949)*(x11169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11170=IKsin(j4);
IkReal x11171=IKcos(j4);
IkReal x11172=(gconst4*r11);
IkReal x11173=(gconst5*r10);
IkReal x11174=(gconst4*r01);
IkReal x11175=(gconst5*r00);
IkReal x11176=(gconst4*r21);
IkReal x11177=(gconst5*r20);
IkReal x11178=((1.0)*x11171);
IkReal x11179=((1.0)*x11170);
evalcond[0]=((((-1.0)*x11177*x11179))+(((-1.0)*r22*x11178))+((x11170*x11176)));
evalcond[1]=((((-1.0)*r12*x11178))+(((-1.0)*x11173*x11179))+((x11170*x11172)));
evalcond[2]=((((-1.0)*x11174*x11178))+((x11171*x11175))+(((-1.0)*r02*x11179)));
evalcond[3]=((1.0)+(((-1.0)*x11175*x11179))+((x11170*x11174))+(((-1.0)*r02*x11178)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11172*x11178))+(((-1.0)*r12*x11179))+((x11171*x11173)));
evalcond[5]=((((-1.0)*x11176*x11178))+(((-1.0)*r22*x11179))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11171*x11177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11180=((1.0)*gconst5);
CheckValue<IkReal> x11181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11180))+(((-1.0)*gconst4*r20)))),-1);
if(!x11181.valid){
continue;
}
CheckValue<IkReal> x11182 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11180))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11181.value)))+(x11182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11183=IKsin(j4);
IkReal x11184=IKcos(j4);
IkReal x11185=(gconst4*r11);
IkReal x11186=(gconst5*r10);
IkReal x11187=(gconst4*r01);
IkReal x11188=(gconst5*r00);
IkReal x11189=(gconst4*r21);
IkReal x11190=(gconst5*r20);
IkReal x11191=((1.0)*x11184);
IkReal x11192=((1.0)*x11183);
evalcond[0]=((((-1.0)*r22*x11191))+((x11183*x11189))+(((-1.0)*x11190*x11192)));
evalcond[1]=((((-1.0)*x11186*x11192))+(((-1.0)*r12*x11191))+((x11183*x11185)));
evalcond[2]=((((-1.0)*r02*x11192))+(((-1.0)*x11187*x11191))+((x11184*x11188)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11191))+((x11183*x11187))+(((-1.0)*x11188*x11192)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11192))+(((-1.0)*x11185*x11191))+((cj1*sj2))+((x11184*x11186)));
evalcond[5]=((((-1.0)*r22*x11192))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11189*x11191))+((x11184*x11190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11193=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11193.valid){
continue;
}
CheckValue<IkReal> x11194 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11193.value)))+(x11194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11195=IKsin(j4);
IkReal x11196=IKcos(j4);
IkReal x11197=(gconst4*r11);
IkReal x11198=(gconst5*r10);
IkReal x11199=(gconst4*r01);
IkReal x11200=(gconst5*r00);
IkReal x11201=(gconst4*r21);
IkReal x11202=(gconst5*r20);
IkReal x11203=((1.0)*x11196);
IkReal x11204=((1.0)*x11195);
evalcond[0]=((((-1.0)*r22*x11203))+((x11195*x11201))+(((-1.0)*x11202*x11204)));
evalcond[1]=((((-1.0)*r12*x11203))+(((-1.0)*x11198*x11204))+((x11195*x11197)));
evalcond[2]=(((x11196*x11200))+(((-1.0)*x11199*x11203))+(((-1.0)*r02*x11204)));
evalcond[3]=((1.0)+((x11195*x11199))+(((-1.0)*x11200*x11204))+(((-1.0)*r02*x11203)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11197*x11203))+((cj1*sj2))+((x11196*x11198))+(((-1.0)*r12*x11204)));
evalcond[5]=((((-1.0)*r22*x11204))+((x11196*x11202))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11201*x11203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11205=((-1.0)*r21);
CheckValue<IkReal> x11208 = IKatan2WithCheck(IkReal(x11205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11208.valid){
continue;
}
IkReal x11206=((1.0)*(x11208.value));
IkReal x11207=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11206)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11206)));
IkReal gconst4=(x11205*x11207);
IkReal gconst5=((1.0)*r20*x11207);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11209=((-1.0)*r21);
CheckValue<IkReal> x11212 = IKatan2WithCheck(IkReal(x11209),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11212.valid){
continue;
}
IkReal x11210=((1.0)*(x11212.value));
IkReal x11211=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11210)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11210)));
IkReal gconst4=(x11209*x11211);
IkReal gconst5=((1.0)*r20*x11211);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11213=((-1.0)*r21);
CheckValue<IkReal> x11216 = IKatan2WithCheck(IkReal(x11213),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11216.valid){
continue;
}
IkReal x11214=((1.0)*(x11216.value));
IkReal x11215=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11214)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11214)));
IkReal gconst4=(x11213*x11215);
IkReal gconst5=((1.0)*r20*x11215);
IkReal x11217=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11221=IKPowWithIntegerCheck(x11217,-1);
if(!x11221.valid){
continue;
}
IkReal x11218=x11221.value;
IkReal x11219=((1.0)*x11218);
IkReal x11220=((((-1.0)*x11219*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11218))+(((-1.0)*x11219*(r00*r00)*(r20*r20))));
j4eval[0]=x11220;
j4eval[1]=IKsign(x11220);
j4eval[2]=r02;
j4eval[3]=x11217;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11222=(gconst4*r01);
IkReal x11223=(gconst5*r00);
CheckValue<IkReal> x11224 = IKatan2WithCheck(IkReal((x11222+(((-1.0)*x11223)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11224.valid){
continue;
}
CheckValue<IkReal> x11225=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11222*x11222)))+(((2.0)*x11222*x11223))+(((-1.0)*(x11223*x11223))))),-1);
if(!x11225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11224.value)+(((1.5707963267949)*(x11225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11226=IKcos(j4);
IkReal x11227=IKsin(j4);
IkReal x11228=(gconst4*r11);
IkReal x11229=(gconst5*r10);
IkReal x11230=(gconst5*r00);
IkReal x11231=(gconst5*r20);
IkReal x11232=((1.0)*x11226);
IkReal x11233=(gconst4*x11226);
IkReal x11234=((1.0)*x11227);
IkReal x11235=(gconst4*x11227);
evalcond[0]=((((-1.0)*x11230*x11232))+((r02*x11227))+((r01*x11233)));
evalcond[1]=((((-1.0)*x11231*x11234))+((r21*x11235))+(((-1.0)*r22*x11232)));
evalcond[2]=(((x11227*x11228))+(((-1.0)*x11229*x11234))+(((-1.0)*r12*x11232)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11232))+(((-1.0)*x11230*x11234))+((r01*x11235)));
evalcond[4]=(((cj2*sj1))+((r12*x11227))+((cj1*sj2))+((x11226*x11228))+(((-1.0)*x11229*x11232)));
evalcond[5]=(((r22*x11227))+(((-1.0)*x11231*x11232))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11236=((1.0)*gconst5);
CheckValue<IkReal> x11237 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11237.valid){
continue;
}
CheckValue<IkReal> x11238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11236))+(((-1.0)*gconst4*r20)))),-1);
if(!x11238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11237.value)+(((1.5707963267949)*(x11238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11239=IKcos(j4);
IkReal x11240=IKsin(j4);
IkReal x11241=(gconst4*r11);
IkReal x11242=(gconst5*r10);
IkReal x11243=(gconst5*r00);
IkReal x11244=(gconst5*r20);
IkReal x11245=((1.0)*x11239);
IkReal x11246=(gconst4*x11239);
IkReal x11247=((1.0)*x11240);
IkReal x11248=(gconst4*x11240);
evalcond[0]=((((-1.0)*x11243*x11245))+((r02*x11240))+((r01*x11246)));
evalcond[1]=((((-1.0)*x11244*x11247))+((r21*x11248))+(((-1.0)*r22*x11245)));
evalcond[2]=(((x11240*x11241))+(((-1.0)*x11242*x11247))+(((-1.0)*r12*x11245)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11245))+(((-1.0)*x11243*x11247))+((r01*x11248)));
evalcond[4]=(((x11239*x11241))+((cj2*sj1))+((cj1*sj2))+((r12*x11240))+(((-1.0)*x11242*x11245)));
evalcond[5]=(((r22*x11240))+(((-1.0)*x11244*x11245))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11249=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11249.valid){
continue;
}
CheckValue<IkReal> x11250 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11249.value)))+(x11250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11251=IKcos(j4);
IkReal x11252=IKsin(j4);
IkReal x11253=(gconst4*r11);
IkReal x11254=(gconst5*r10);
IkReal x11255=(gconst5*r00);
IkReal x11256=(gconst5*r20);
IkReal x11257=((1.0)*x11251);
IkReal x11258=(gconst4*x11251);
IkReal x11259=((1.0)*x11252);
IkReal x11260=(gconst4*x11252);
evalcond[0]=(((r02*x11252))+((r01*x11258))+(((-1.0)*x11255*x11257)));
evalcond[1]=(((r21*x11260))+(((-1.0)*x11256*x11259))+(((-1.0)*r22*x11257)));
evalcond[2]=(((x11252*x11253))+(((-1.0)*r12*x11257))+(((-1.0)*x11254*x11259)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11257))+(((-1.0)*x11255*x11259))+((r01*x11260)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x11252))+((x11251*x11253))+(((-1.0)*x11254*x11257)));
evalcond[5]=(((r22*x11252))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11256*x11257))+((r21*x11258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11261=((-1.0)*r21);
CheckValue<IkReal> x11264 = IKatan2WithCheck(IkReal(x11261),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11264.valid){
continue;
}
IkReal x11262=((1.0)*(x11264.value));
IkReal x11263=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11262)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11262)));
IkReal gconst4=(x11261*x11263);
IkReal gconst5=((1.0)*r20*x11263);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11265=((-1.0)*r21);
CheckValue<IkReal> x11268 = IKatan2WithCheck(IkReal(x11265),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11268.valid){
continue;
}
IkReal x11266=((1.0)*(x11268.value));
IkReal x11267=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11266)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11266)));
IkReal gconst4=(x11265*x11267);
IkReal gconst5=((1.0)*r20*x11267);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11269=((-1.0)*r21);
CheckValue<IkReal> x11272 = IKatan2WithCheck(IkReal(x11269),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11272.valid){
continue;
}
IkReal x11270=((1.0)*(x11272.value));
IkReal x11271=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11270)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11270)));
IkReal gconst4=(x11269*x11271);
IkReal gconst5=((1.0)*r20*x11271);
IkReal x11273=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11277=IKPowWithIntegerCheck(x11273,-1);
if(!x11277.valid){
continue;
}
IkReal x11274=x11277.value;
IkReal x11275=((1.0)*x11274);
IkReal x11276=((((-1.0)*x11275*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11274))+(((-1.0)*x11275*(r01*r01)*(r21*r21))));
j4eval[0]=x11276;
j4eval[1]=IKsign(x11276);
j4eval[2]=r02;
j4eval[3]=x11273;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11278=(gconst4*r01);
IkReal x11279=(gconst5*r00);
CheckValue<IkReal> x11280=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11278*x11278)))+(((2.0)*x11278*x11279))+(((-1.0)*(x11279*x11279))))),-1);
if(!x11280.valid){
continue;
}
CheckValue<IkReal> x11281 = IKatan2WithCheck(IkReal((x11278+(((-1.0)*x11279)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11280.value)))+(x11281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11282=IKcos(j4);
IkReal x11283=IKsin(j4);
IkReal x11284=(gconst5*r10);
IkReal x11285=(gconst5*r00);
IkReal x11286=(gconst5*r20);
IkReal x11287=((1.0)*x11282);
IkReal x11288=(gconst4*x11283);
IkReal x11289=(gconst4*x11282);
IkReal x11290=((1.0)*x11283);
evalcond[0]=(((r02*x11283))+(((-1.0)*x11285*x11287))+((r01*x11289)));
evalcond[1]=((((-1.0)*r22*x11287))+((r21*x11288))+(((-1.0)*x11286*x11290)));
evalcond[2]=((((-1.0)*r12*x11287))+(((-1.0)*x11284*x11290))+((r11*x11288)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11287))+(((-1.0)*x11285*x11290))+((r01*x11288)));
evalcond[4]=(((cj2*sj1))+((r22*x11283))+((cj1*sj2))+((r21*x11289))+(((-1.0)*x11286*x11287)));
evalcond[5]=((((-1.0)*x11284*x11287))+(((-1.0)*sj1*sj2))+((r12*x11283))+((cj1*cj2))+((r11*x11289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11291=((1.0)*gconst5);
CheckValue<IkReal> x11292 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11291))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11292.valid){
continue;
}
CheckValue<IkReal> x11293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11291))+(((-1.0)*gconst4*r20)))),-1);
if(!x11293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11292.value)+(((1.5707963267949)*(x11293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11294=IKcos(j4);
IkReal x11295=IKsin(j4);
IkReal x11296=(gconst5*r10);
IkReal x11297=(gconst5*r00);
IkReal x11298=(gconst5*r20);
IkReal x11299=((1.0)*x11294);
IkReal x11300=(gconst4*x11295);
IkReal x11301=(gconst4*x11294);
IkReal x11302=((1.0)*x11295);
evalcond[0]=(((r01*x11301))+((r02*x11295))+(((-1.0)*x11297*x11299)));
evalcond[1]=((((-1.0)*x11298*x11302))+(((-1.0)*r22*x11299))+((r21*x11300)));
evalcond[2]=((((-1.0)*x11296*x11302))+((r11*x11300))+(((-1.0)*r12*x11299)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11299))+((r01*x11300))+(((-1.0)*x11297*x11302)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11298*x11299))+((cj1*sj2))+((r21*x11301))+((r22*x11295)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x11301))+((cj1*cj2))+((r12*x11295))+(((-1.0)*x11296*x11299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11303=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11303.valid){
continue;
}
CheckValue<IkReal> x11304 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11303.value)))+(x11304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11305=IKcos(j4);
IkReal x11306=IKsin(j4);
IkReal x11307=(gconst5*r10);
IkReal x11308=(gconst5*r00);
IkReal x11309=(gconst5*r20);
IkReal x11310=((1.0)*x11305);
IkReal x11311=(gconst4*x11306);
IkReal x11312=(gconst4*x11305);
IkReal x11313=((1.0)*x11306);
evalcond[0]=(((r02*x11306))+(((-1.0)*x11308*x11310))+((r01*x11312)));
evalcond[1]=((((-1.0)*x11309*x11313))+(((-1.0)*r22*x11310))+((r21*x11311)));
evalcond[2]=(((r11*x11311))+(((-1.0)*x11307*x11313))+(((-1.0)*r12*x11310)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11310))+(((-1.0)*x11308*x11313))+((r01*x11311)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11309*x11310))+((cj1*sj2))+((r21*x11312))+((r22*x11306)));
evalcond[5]=(((r11*x11312))+(((-1.0)*x11307*x11310))+(((-1.0)*sj1*sj2))+((r12*x11306))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11314=((-1.0)*r21);
CheckValue<IkReal> x11317 = IKatan2WithCheck(IkReal(x11314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11317.valid){
continue;
}
IkReal x11315=((1.0)*(x11317.value));
IkReal x11316=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11315)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11315)));
IkReal gconst4=(x11314*x11316);
IkReal gconst5=((1.0)*r20*x11316);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11318=((-1.0)*r21);
CheckValue<IkReal> x11321 = IKatan2WithCheck(IkReal(x11318),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11321.valid){
continue;
}
IkReal x11319=((1.0)*(x11321.value));
IkReal x11320=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11319)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11319)));
IkReal gconst4=(x11318*x11320);
IkReal gconst5=((1.0)*r20*x11320);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11322=((-1.0)*r21);
CheckValue<IkReal> x11325 = IKatan2WithCheck(IkReal(x11322),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11325.valid){
continue;
}
IkReal x11323=((1.0)*(x11325.value));
IkReal x11324=x10116;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11323)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11323)));
IkReal gconst4=(x11322*x11324);
IkReal gconst5=((1.0)*r20*x11324);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11326=(gconst5*r00);
IkReal x11327=(gconst4*r01);
CheckValue<IkReal> x11328=IKPowWithIntegerCheck(IKsign(((x11327*x11327)+(((-2.0)*x11326*x11327))+(r02*r02)+(x11326*x11326))),-1);
if(!x11328.valid){
continue;
}
CheckValue<IkReal> x11329 = IKatan2WithCheck(IkReal((x11326+(((-1.0)*x11327)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11328.value)))+(x11329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11330=IKsin(j4);
IkReal x11331=IKcos(j4);
IkReal x11332=(gconst4*r11);
IkReal x11333=(gconst5*r10);
IkReal x11334=(gconst5*r00);
IkReal x11335=(gconst5*r20);
IkReal x11336=((1.0)*x11331);
IkReal x11337=(gconst4*x11330);
IkReal x11338=((1.0)*x11330);
evalcond[0]=((((-1.0)*r22*x11336))+(((-1.0)*x11335*x11338))+((r21*x11337)));
evalcond[1]=((((-1.0)*x11333*x11338))+(((-1.0)*r12*x11336))+((x11330*x11332)));
evalcond[2]=(((x11331*x11334))+(((-1.0)*gconst4*r01*x11336))+(((-1.0)*r02*x11338)));
evalcond[3]=((1.0)+(((-1.0)*x11334*x11338))+((r01*x11337))+(((-1.0)*r02*x11336)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11338))+(((-1.0)*gconst4*r21*x11336))+((x11331*x11335)));
evalcond[5]=((((-1.0)*r12*x11338))+(((-1.0)*sj1*sj2))+(((-1.0)*x11332*x11336))+((x11331*x11333))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11339=((1.0)*gconst5);
CheckValue<IkReal> x11340 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11340.valid){
continue;
}
CheckValue<IkReal> x11341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11339))+(((-1.0)*gconst4*r20)))),-1);
if(!x11341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11340.value)+(((1.5707963267949)*(x11341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11342=IKsin(j4);
IkReal x11343=IKcos(j4);
IkReal x11344=(gconst4*r11);
IkReal x11345=(gconst5*r10);
IkReal x11346=(gconst5*r00);
IkReal x11347=(gconst5*r20);
IkReal x11348=((1.0)*x11343);
IkReal x11349=(gconst4*x11342);
IkReal x11350=((1.0)*x11342);
evalcond[0]=((((-1.0)*r22*x11348))+(((-1.0)*x11347*x11350))+((r21*x11349)));
evalcond[1]=(((x11342*x11344))+(((-1.0)*x11345*x11350))+(((-1.0)*r12*x11348)));
evalcond[2]=(((x11343*x11346))+(((-1.0)*gconst4*r01*x11348))+(((-1.0)*r02*x11350)));
evalcond[3]=((1.0)+(((-1.0)*x11346*x11350))+((r01*x11349))+(((-1.0)*r02*x11348)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11343*x11347))+(((-1.0)*r22*x11350))+(((-1.0)*gconst4*r21*x11348)));
evalcond[5]=((((-1.0)*r12*x11350))+(((-1.0)*sj1*sj2))+((x11343*x11345))+(((-1.0)*x11344*x11348))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11351=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11351.valid){
continue;
}
CheckValue<IkReal> x11352 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11351.value)))+(x11352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11353=IKsin(j4);
IkReal x11354=IKcos(j4);
IkReal x11355=(gconst4*r11);
IkReal x11356=(gconst5*r10);
IkReal x11357=(gconst5*r00);
IkReal x11358=(gconst5*r20);
IkReal x11359=((1.0)*x11354);
IkReal x11360=(gconst4*x11353);
IkReal x11361=((1.0)*x11353);
evalcond[0]=(((r21*x11360))+(((-1.0)*r22*x11359))+(((-1.0)*x11358*x11361)));
evalcond[1]=((((-1.0)*r12*x11359))+((x11353*x11355))+(((-1.0)*x11356*x11361)));
evalcond[2]=((((-1.0)*r02*x11361))+((x11354*x11357))+(((-1.0)*gconst4*r01*x11359)));
evalcond[3]=((1.0)+((r01*x11360))+(((-1.0)*x11357*x11361))+(((-1.0)*r02*x11359)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11361))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11359))+((x11354*x11358)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11354*x11356))+(((-1.0)*r12*x11361))+((cj1*cj2))+(((-1.0)*x11355*x11359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11362=((-1.0)*r21);
IkReal x11363=((-1.0)*r20);
CheckValue<IkReal> x11365 = IKatan2WithCheck(IkReal(x11362),IkReal(x11363),IKFAST_ATAN2_MAGTHRESH);
if(!x11365.valid){
continue;
}
IkReal x11364=((1.0)*(x11365.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11364)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11363);
rxp0_2=(py*r00);
rxp1_0=(py*x11362);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11364)));
IkReal gconst4=x11362;
IkReal gconst5=((1.0)*r20);
IkReal x11366=((1.0)*r01*r21);
IkReal x11367=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11367))+(((-1.0)*x11366)));
j4eval[1]=((((-1.0)*cj3*x11366))+(((-1.0)*cj3*x11367)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11368=((-1.0)*r21);
IkReal x11369=((-1.0)*r20);
CheckValue<IkReal> x11371 = IKatan2WithCheck(IkReal(x11368),IkReal(x11369),IKFAST_ATAN2_MAGTHRESH);
if(!x11371.valid){
continue;
}
IkReal x11370=((1.0)*(x11371.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11370)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11369);
rxp0_2=(py*r00);
rxp1_0=(py*x11368);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11370)));
IkReal gconst4=x11368;
IkReal gconst5=((1.0)*r20);
IkReal x11372=((1.0)*r01*r21);
IkReal x11373=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11372))+(((-1.0)*x11373)));
j4eval[1]=(((sj3*x11372))+((sj3*x11373)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11374=((-1.0)*r21);
IkReal x11375=((-1.0)*r20);
CheckValue<IkReal> x11377 = IKatan2WithCheck(IkReal(x11374),IkReal(x11375),IKFAST_ATAN2_MAGTHRESH);
if(!x11377.valid){
continue;
}
IkReal x11376=((1.0)*(x11377.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11376)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11375);
rxp0_2=(py*r00);
rxp1_0=(py*x11374);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11376)));
IkReal gconst4=x11374;
IkReal gconst5=((1.0)*r20);
IkReal x11378=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11378))+(((-1.0)*r01*r21*x11378)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11379=((1.0)*gconst5);
CheckValue<IkReal> x11380=IKPowWithIntegerCheck(cj3,-1);
if(!x11380.valid){
continue;
}
CheckValue<IkReal> x11381=IKPowWithIntegerCheck(r12,-1);
if(!x11381.valid){
continue;
}
CheckValue<IkReal> x11382=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11379))),-1);
if(!x11382.valid){
continue;
}
if( IKabs(((x11380.value)*(x11381.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11382.value)*(((((-1.0)*r01*sj3*x11379))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11380.value)*(x11381.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11382.value)*(((((-1.0)*r01*sj3*x11379))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11380.value)*(x11381.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11382.value)*(((((-1.0)*r01*sj3*x11379))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11383=IKsin(j4);
IkReal x11384=IKcos(j4);
IkReal x11385=(cj2*sj1);
IkReal x11386=(cj1*sj2);
IkReal x11387=(sj1*sj2);
IkReal x11388=(gconst5*sj3);
IkReal x11389=(gconst5*r00);
IkReal x11390=(cj3*gconst5);
IkReal x11391=(gconst4*sj3);
IkReal x11392=(cj3*gconst4);
IkReal x11393=(cj1*cj2);
IkReal x11394=((1.0)*x11383);
IkReal x11395=(gconst4*x11383);
IkReal x11396=((1.0)*x11384);
IkReal x11397=(x11386+x11385);
IkReal x11398=(x11384*x11388);
IkReal x11399=(x11384*x11392);
evalcond[0]=((-1.0)*r12*x11384);
evalcond[1]=((((-1.0)*gconst5*r20*x11394))+((r21*x11395)));
evalcond[2]=(((cj3*r12*x11383))+x11393+(((-1.0)*x11387)));
evalcond[3]=((((-1.0)*r12*sj3*x11394))+x11397);
evalcond[4]=((1.0)+((r01*x11395))+(((-1.0)*x11389*x11394)));
evalcond[5]=(((r00*x11391))+((r01*x11399))+(((-1.0)*cj3*x11389*x11396))+((r01*x11388)));
evalcond[6]=(((r00*x11398))+((r00*x11392))+((r01*x11390))+(((-1.0)*r01*x11391*x11396)));
evalcond[7]=(((r20*x11391))+x11397+(((-1.0)*r20*x11390*x11396))+((r21*x11388))+((r21*x11399)));
evalcond[8]=(((r20*x11398))+((r20*x11392))+x11387+(((-1.0)*x11393))+(((-1.0)*r21*x11391*x11396))+((r21*x11390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11400=((1.0)*gconst4);
IkReal x11401=(gconst5*r00);
CheckValue<IkReal> x11402=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11401))),-1);
if(!x11402.valid){
continue;
}
CheckValue<IkReal> x11403=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11400))+((sj3*x11401))),-1);
if(!x11403.valid){
continue;
}
if( IKabs(((-1.0)*(x11402.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11403.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11400)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11402.value)))+IKsqr(((x11403.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11400))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11402.value)), ((x11403.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11400))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11404=IKsin(j4);
IkReal x11405=IKcos(j4);
IkReal x11406=(cj2*sj1);
IkReal x11407=(cj1*sj2);
IkReal x11408=(sj1*sj2);
IkReal x11409=(gconst5*sj3);
IkReal x11410=(gconst5*r00);
IkReal x11411=(cj3*gconst5);
IkReal x11412=(gconst4*sj3);
IkReal x11413=(cj3*gconst4);
IkReal x11414=(cj1*cj2);
IkReal x11415=((1.0)*x11404);
IkReal x11416=(gconst4*x11404);
IkReal x11417=((1.0)*x11405);
IkReal x11418=(x11407+x11406);
IkReal x11419=(x11405*x11409);
IkReal x11420=(x11405*x11413);
evalcond[0]=((-1.0)*r12*x11405);
evalcond[1]=((((-1.0)*gconst5*r20*x11415))+((r21*x11416)));
evalcond[2]=(x11414+((cj3*r12*x11404))+(((-1.0)*x11408)));
evalcond[3]=(x11418+(((-1.0)*r12*sj3*x11415)));
evalcond[4]=((1.0)+(((-1.0)*x11410*x11415))+((r01*x11416)));
evalcond[5]=(((r00*x11412))+(((-1.0)*cj3*x11410*x11417))+((r01*x11420))+((r01*x11409)));
evalcond[6]=((((-1.0)*r01*x11412*x11417))+((r01*x11411))+((r00*x11419))+((r00*x11413)));
evalcond[7]=(((r21*x11409))+x11418+(((-1.0)*r20*x11411*x11417))+((r21*x11420))+((r20*x11412)));
evalcond[8]=(x11408+((r21*x11411))+(((-1.0)*x11414))+(((-1.0)*r21*x11412*x11417))+((r20*x11419))+((r20*x11413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11421=((1.0)*gconst5);
IkReal x11422=(gconst4*r01);
CheckValue<IkReal> x11423=IKPowWithIntegerCheck((x11422+(((-1.0)*r00*x11421))),-1);
if(!x11423.valid){
continue;
}
CheckValue<IkReal> x11424=IKPowWithIntegerCheck((((cj3*x11422))+(((-1.0)*cj3*r00*x11421))),-1);
if(!x11424.valid){
continue;
}
if( IKabs(((-1.0)*(x11423.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11424.value)*(((((-1.0)*r01*sj3*x11421))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11423.value)))+IKsqr(((x11424.value)*(((((-1.0)*r01*sj3*x11421))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11423.value)), ((x11424.value)*(((((-1.0)*r01*sj3*x11421))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11425=IKsin(j4);
IkReal x11426=IKcos(j4);
IkReal x11427=(cj2*sj1);
IkReal x11428=(cj1*sj2);
IkReal x11429=(sj1*sj2);
IkReal x11430=(gconst5*sj3);
IkReal x11431=(gconst5*r00);
IkReal x11432=(cj3*gconst5);
IkReal x11433=(gconst4*sj3);
IkReal x11434=(cj3*gconst4);
IkReal x11435=(cj1*cj2);
IkReal x11436=((1.0)*x11425);
IkReal x11437=(gconst4*x11425);
IkReal x11438=((1.0)*x11426);
IkReal x11439=(x11428+x11427);
IkReal x11440=(x11426*x11430);
IkReal x11441=(x11426*x11434);
evalcond[0]=((-1.0)*r12*x11426);
evalcond[1]=(((r21*x11437))+(((-1.0)*gconst5*r20*x11436)));
evalcond[2]=(x11435+((cj3*r12*x11425))+(((-1.0)*x11429)));
evalcond[3]=(x11439+(((-1.0)*r12*sj3*x11436)));
evalcond[4]=((1.0)+((r01*x11437))+(((-1.0)*x11431*x11436)));
evalcond[5]=((((-1.0)*cj3*x11431*x11438))+((r01*x11430))+((r00*x11433))+((r01*x11441)));
evalcond[6]=(((r00*x11440))+((r01*x11432))+(((-1.0)*r01*x11433*x11438))+((r00*x11434)));
evalcond[7]=(((r20*x11433))+x11439+(((-1.0)*r20*x11432*x11438))+((r21*x11430))+((r21*x11441)));
evalcond[8]=(((r20*x11434))+x11429+(((-1.0)*r21*x11433*x11438))+((r21*x11432))+(((-1.0)*x11435))+((r20*x11440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11442=gconst4*gconst4;
IkReal x11443=gconst5*gconst5;
IkReal x11444=(r01*r20);
IkReal x11445=(gconst4*sj3);
IkReal x11446=(r01*r21);
IkReal x11447=((1.0)*cj3);
IkReal x11448=(r00*r21);
IkReal x11449=(r00*r20);
IkReal x11450=(cj3*gconst4*gconst5);
IkReal x11451=((1.0)*x11443);
CheckValue<IkReal> x11452 = IKatan2WithCheck(IkReal((((r00*r22*x11445))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11442*x11448))+(((-1.0)*sj3*x11444*x11451))+((gconst5*x11445*x11446))+(((-1.0)*gconst5*x11445*x11449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11452.valid){
continue;
}
CheckValue<IkReal> x11453=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11443*x11447*x11449))+(((-1.0)*r02*r22*x11447))+(((-1.0)*x11442*x11446*x11447))+((x11448*x11450))+((x11444*x11450)))),-1);
if(!x11453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11452.value)+(((1.5707963267949)*(x11453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11454=IKsin(j4);
IkReal x11455=IKcos(j4);
IkReal x11456=(cj2*sj1);
IkReal x11457=(cj1*sj2);
IkReal x11458=(gconst5*sj3);
IkReal x11459=(gconst4*r11);
IkReal x11460=(sj1*sj2);
IkReal x11461=(gconst5*r10);
IkReal x11462=(cj1*cj2);
IkReal x11463=(gconst4*r01);
IkReal x11464=(gconst5*r00);
IkReal x11465=(gconst4*sj3);
IkReal x11466=(cj3*gconst5);
IkReal x11467=(cj3*gconst4);
IkReal x11468=(gconst4*r21);
IkReal x11469=((1.0)*x11455);
IkReal x11470=((1.0)*x11454);
IkReal x11471=(cj3*x11454);
IkReal x11472=(cj3*x11455);
IkReal x11473=(x11456+x11457);
evalcond[0]=(((x11454*x11468))+(((-1.0)*gconst5*r20*x11470))+(((-1.0)*r22*x11469)));
evalcond[1]=((((-1.0)*r12*x11469))+(((-1.0)*x11461*x11470))+((x11454*x11459)));
evalcond[2]=((1.0)+(((-1.0)*x11464*x11470))+((x11454*x11463))+(((-1.0)*r02*x11469)));
evalcond[3]=((((-1.0)*cj3*x11464*x11469))+((r01*x11458))+((x11463*x11472))+((r02*x11471))+((r00*x11465)));
evalcond[4]=(((r01*x11466))+(((-1.0)*r02*sj3*x11470))+(((-1.0)*sj3*x11463*x11469))+((r00*x11455*x11458))+((r00*x11467)));
evalcond[5]=(x11473+((r21*x11455*x11467))+((r21*x11458))+((r22*x11471))+((r20*x11465))+(((-1.0)*r20*x11466*x11469)));
evalcond[6]=(((r12*x11471))+x11462+((r10*x11465))+((r11*x11458))+((x11459*x11472))+(((-1.0)*cj3*x11461*x11469))+(((-1.0)*x11460)));
evalcond[7]=(((r10*x11455*x11458))+x11473+((r11*x11466))+((r10*x11467))+(((-1.0)*r12*sj3*x11470))+(((-1.0)*sj3*x11459*x11469)));
evalcond[8]=(x11460+((r20*x11455*x11458))+(((-1.0)*r21*x11465*x11469))+(((-1.0)*r22*sj3*x11470))+((r20*x11467))+((r21*x11466))+(((-1.0)*x11462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11474=((1.0)*gconst5);
CheckValue<IkReal> x11475 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11475.valid){
continue;
}
CheckValue<IkReal> x11476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11474))+(((-1.0)*gconst4*r20)))),-1);
if(!x11476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11475.value)+(((1.5707963267949)*(x11476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11477=IKsin(j4);
IkReal x11478=IKcos(j4);
IkReal x11479=(cj2*sj1);
IkReal x11480=(cj1*sj2);
IkReal x11481=(gconst5*sj3);
IkReal x11482=(gconst4*r11);
IkReal x11483=(sj1*sj2);
IkReal x11484=(gconst5*r10);
IkReal x11485=(cj1*cj2);
IkReal x11486=(gconst4*r01);
IkReal x11487=(gconst5*r00);
IkReal x11488=(gconst4*sj3);
IkReal x11489=(cj3*gconst5);
IkReal x11490=(cj3*gconst4);
IkReal x11491=(gconst4*r21);
IkReal x11492=((1.0)*x11478);
IkReal x11493=((1.0)*x11477);
IkReal x11494=(cj3*x11477);
IkReal x11495=(cj3*x11478);
IkReal x11496=(x11479+x11480);
evalcond[0]=(((x11477*x11491))+(((-1.0)*gconst5*r20*x11493))+(((-1.0)*r22*x11492)));
evalcond[1]=((((-1.0)*r12*x11492))+((x11477*x11482))+(((-1.0)*x11484*x11493)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11492))+(((-1.0)*x11487*x11493))+((x11477*x11486)));
evalcond[3]=(((r02*x11494))+((r00*x11488))+((r01*x11481))+((x11486*x11495))+(((-1.0)*cj3*x11487*x11492)));
evalcond[4]=(((r00*x11490))+((r01*x11489))+(((-1.0)*r02*sj3*x11493))+((r00*x11478*x11481))+(((-1.0)*sj3*x11486*x11492)));
evalcond[5]=(((r22*x11494))+(((-1.0)*r20*x11489*x11492))+((r20*x11488))+x11496+((r21*x11478*x11490))+((r21*x11481)));
evalcond[6]=(((x11482*x11495))+x11485+(((-1.0)*x11483))+((r12*x11494))+((r11*x11481))+((r10*x11488))+(((-1.0)*cj3*x11484*x11492)));
evalcond[7]=(x11496+(((-1.0)*sj3*x11482*x11492))+((r10*x11490))+((r11*x11489))+(((-1.0)*r12*sj3*x11493))+((r10*x11478*x11481)));
evalcond[8]=(x11483+(((-1.0)*r22*sj3*x11493))+(((-1.0)*x11485))+((r20*x11490))+(((-1.0)*r21*x11488*x11492))+((r20*x11478*x11481))+((r21*x11489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11497=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11497.valid){
continue;
}
CheckValue<IkReal> x11498 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11497.value)))+(x11498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11499=IKsin(j4);
IkReal x11500=IKcos(j4);
IkReal x11501=(cj2*sj1);
IkReal x11502=(cj1*sj2);
IkReal x11503=(gconst5*sj3);
IkReal x11504=(gconst4*r11);
IkReal x11505=(sj1*sj2);
IkReal x11506=(gconst5*r10);
IkReal x11507=(cj1*cj2);
IkReal x11508=(gconst4*r01);
IkReal x11509=(gconst5*r00);
IkReal x11510=(gconst4*sj3);
IkReal x11511=(cj3*gconst5);
IkReal x11512=(cj3*gconst4);
IkReal x11513=(gconst4*r21);
IkReal x11514=((1.0)*x11500);
IkReal x11515=((1.0)*x11499);
IkReal x11516=(cj3*x11499);
IkReal x11517=(cj3*x11500);
IkReal x11518=(x11501+x11502);
evalcond[0]=((((-1.0)*r22*x11514))+((x11499*x11513))+(((-1.0)*gconst5*r20*x11515)));
evalcond[1]=((((-1.0)*r12*x11514))+(((-1.0)*x11506*x11515))+((x11499*x11504)));
evalcond[2]=((1.0)+(((-1.0)*x11509*x11515))+(((-1.0)*r02*x11514))+((x11499*x11508)));
evalcond[3]=(((x11508*x11517))+((r01*x11503))+((r02*x11516))+(((-1.0)*cj3*x11509*x11514))+((r00*x11510)));
evalcond[4]=(((r01*x11511))+((r00*x11500*x11503))+(((-1.0)*r02*sj3*x11515))+((r00*x11512))+(((-1.0)*sj3*x11508*x11514)));
evalcond[5]=(x11518+((r20*x11510))+((r21*x11500*x11512))+((r21*x11503))+((r22*x11516))+(((-1.0)*r20*x11511*x11514)));
evalcond[6]=(x11507+((x11504*x11517))+((r11*x11503))+(((-1.0)*x11505))+(((-1.0)*cj3*x11506*x11514))+((r12*x11516))+((r10*x11510)));
evalcond[7]=(x11518+(((-1.0)*sj3*x11504*x11514))+(((-1.0)*r12*sj3*x11515))+((r10*x11512))+((r11*x11511))+((r10*x11500*x11503)));
evalcond[8]=(x11505+((r20*x11512))+((r20*x11500*x11503))+(((-1.0)*r22*sj3*x11515))+(((-1.0)*r21*x11510*x11514))+(((-1.0)*x11507))+((r21*x11511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11519=((-1.0)*r21);
IkReal x11520=((-1.0)*px);
CheckValue<IkReal> x11522 = IKatan2WithCheck(IkReal(x11519),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11522.valid){
continue;
}
IkReal x11521=((1.0)*(x11522.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11521)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11520);
rxp1_1=(px*r21);
rxp1_2=(r11*x11520);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11521)));
IkReal gconst4=x11519;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11523=((-1.0)*r21);
IkReal x11524=((-1.0)*px);
CheckValue<IkReal> x11526 = IKatan2WithCheck(IkReal(x11523),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11526.valid){
continue;
}
IkReal x11525=((1.0)*(x11526.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11525)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11524);
rxp1_1=(px*r21);
rxp1_2=(r11*x11524);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11525)));
IkReal gconst4=x11523;
IkReal gconst5=((1.0)*r20);
IkReal x11527=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11527*(r21*r21)))+((x11527*(r10*r10)))+(((-1.0)*x11527)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11528=((-1.0)*r21);
IkReal x11529=((-1.0)*px);
CheckValue<IkReal> x11531 = IKatan2WithCheck(IkReal(x11528),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11531.valid){
continue;
}
IkReal x11530=((1.0)*(x11531.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11530)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11529);
rxp1_1=(px*r21);
rxp1_2=(r11*x11529);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11530)));
IkReal gconst4=x11528;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11532=((-1.0)*r21);
IkReal x11533=((-1.0)*px);
CheckValue<IkReal> x11535 = IKatan2WithCheck(IkReal(x11532),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11535.valid){
continue;
}
IkReal x11534=((1.0)*(x11535.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11534)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11533);
rxp1_1=(px*r21);
rxp1_2=(r11*x11533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11534)));
IkReal gconst4=x11532;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11536=((-1.0)*r21);
IkReal x11537=((-1.0)*px);
CheckValue<IkReal> x11539 = IKatan2WithCheck(IkReal(x11536),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11539.valid){
continue;
}
IkReal x11538=((1.0)*(x11539.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11538)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11537);
rxp1_1=(px*r21);
rxp1_2=(r11*x11537);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11538)));
IkReal gconst4=x11536;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11540=((-1.0)*r21);
IkReal x11541=((-1.0)*px);
CheckValue<IkReal> x11543 = IKatan2WithCheck(IkReal(x11540),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11543.valid){
continue;
}
IkReal x11542=((1.0)*(x11543.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11542)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11541);
rxp1_1=(px*r21);
rxp1_2=(r11*x11541);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11542)));
IkReal gconst4=x11540;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11546=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11546.valid){
continue;
}
IkReal x11544=x11546.value;
IkReal x11545=(sj0*x11544);
cj4array[0]=(((cj1*sj2*x11545))+((cj2*sj1*x11545)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11547=IKsin(j4);
IkReal x11548=IKcos(j4);
IkReal x11549=(gconst5*r20);
IkReal x11550=(gconst4*x11547);
IkReal x11551=((1.0)*x11548);
IkReal x11552=((1.0)*x11547);
evalcond[0]=((-1.0)*r02*x11547);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11551)));
evalcond[2]=(((r21*x11550))+(((-1.0)*x11549*x11552)));
evalcond[3]=(((r11*x11550))+(((-1.0)*gconst5*r10*x11552)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11551))+((x11548*x11549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11554=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11554.valid){
continue;
}
IkReal x11553=x11554.value;
cj4array[0]=(((cj1*cj2*x11553))+(((-1.0)*sj1*sj2*x11553)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11555=IKsin(j4);
IkReal x11556=IKcos(j4);
IkReal x11557=(gconst5*r10);
IkReal x11558=((1.0)*sj0);
IkReal x11559=(gconst4*x11555);
IkReal x11560=((1.0)*x11556);
IkReal x11561=((1.0)*x11555);
evalcond[0]=((-1.0)*r02*x11555);
evalcond[1]=((((-1.0)*x11558))+(((-1.0)*r02*x11560)));
evalcond[2]=(((r21*x11559))+(((-1.0)*gconst5*r20*x11561)));
evalcond[3]=(((r11*x11559))+(((-1.0)*x11557*x11561)));
evalcond[4]=((((-1.0)*cj1*sj2*x11558))+(((-1.0)*gconst4*r11*x11560))+((x11556*x11557))+(((-1.0)*cj2*sj1*x11558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11562=IKPowWithIntegerCheck(r02,-1);
if(!x11562.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11562.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11563=IKsin(j4);
IkReal x11564=IKcos(j4);
IkReal x11565=((1.0)*sj0);
IkReal x11566=(gconst5*x11564);
IkReal x11567=(gconst4*x11563);
IkReal x11568=((1.0)*gconst4*x11564);
IkReal x11569=((1.0)*gconst5*x11563);
evalcond[0]=((-1.0)*r02*x11563);
evalcond[1]=((((-1.0)*r20*x11569))+((r21*x11567)));
evalcond[2]=(((r11*x11567))+(((-1.0)*r10*x11569)));
evalcond[3]=(((r20*x11566))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11568)));
evalcond[4]=(((r10*x11566))+(((-1.0)*cj2*sj1*x11565))+(((-1.0)*cj1*sj2*x11565))+(((-1.0)*r11*x11568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11570=((-1.0)*r21);
IkReal x11571=((-1.0)*px);
CheckValue<IkReal> x11573 = IKatan2WithCheck(IkReal(x11570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11573.valid){
continue;
}
IkReal x11572=((1.0)*(x11573.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11572)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11571);
rxp1_1=(px*r21);
rxp1_2=(r11*x11571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11572)));
IkReal gconst4=x11570;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11574=((-1.0)*r21);
IkReal x11575=((-1.0)*px);
CheckValue<IkReal> x11577 = IKatan2WithCheck(IkReal(x11574),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11577.valid){
continue;
}
IkReal x11576=((1.0)*(x11577.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11576)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11575);
rxp1_1=(px*r21);
rxp1_2=(r11*x11575);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11576)));
IkReal gconst4=x11574;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11578=((-1.0)*r21);
IkReal x11579=((-1.0)*px);
CheckValue<IkReal> x11581 = IKatan2WithCheck(IkReal(x11578),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11581.valid){
continue;
}
IkReal x11580=((1.0)*(x11581.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11580)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11579);
rxp1_1=(px*r21);
rxp1_2=(r11*x11579);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11580)));
IkReal gconst4=x11578;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11584=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11584.valid){
continue;
}
IkReal x11582=x11584.value;
IkReal x11583=(sj0*x11582);
cj4array[0]=(((cj2*sj1*x11583))+((cj1*sj2*x11583)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11585=IKsin(j4);
IkReal x11586=IKcos(j4);
IkReal x11587=(gconst5*r20);
IkReal x11588=(gconst4*x11585);
IkReal x11589=((1.0)*x11586);
IkReal x11590=((1.0)*x11585);
evalcond[0]=(r02*x11585);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11589)));
evalcond[2]=((((-1.0)*x11587*x11590))+((r21*x11588)));
evalcond[3]=((((-1.0)*gconst5*r10*x11590))+((r11*x11588)));
evalcond[4]=((((-1.0)*x11587*x11589))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11592=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11592.valid){
continue;
}
IkReal x11591=x11592.value;
cj4array[0]=(((cj1*cj2*x11591))+(((-1.0)*sj1*sj2*x11591)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11593=IKsin(j4);
IkReal x11594=IKcos(j4);
IkReal x11595=(gconst4*r11);
IkReal x11596=((1.0)*sj0);
IkReal x11597=(gconst5*r10);
IkReal x11598=((1.0)*x11594);
IkReal x11599=((1.0)*x11593);
evalcond[0]=(r02*x11593);
evalcond[1]=((((-1.0)*x11596))+(((-1.0)*r02*x11598)));
evalcond[2]=(((gconst4*r21*x11593))+(((-1.0)*gconst5*r20*x11599)));
evalcond[3]=((((-1.0)*x11597*x11599))+((x11593*x11595)));
evalcond[4]=(((x11594*x11595))+(((-1.0)*cj2*sj1*x11596))+(((-1.0)*x11597*x11598))+(((-1.0)*cj1*sj2*x11596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11600=IKPowWithIntegerCheck(r02,-1);
if(!x11600.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11600.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11601=IKsin(j4);
IkReal x11602=IKcos(j4);
IkReal x11603=(gconst4*r11);
IkReal x11604=((1.0)*cj1);
IkReal x11605=(gconst4*r21);
IkReal x11606=((1.0)*gconst5*x11602);
IkReal x11607=((1.0)*gconst5*x11601);
evalcond[0]=(r02*x11601);
evalcond[1]=((((-1.0)*r20*x11607))+((x11601*x11605)));
evalcond[2]=((((-1.0)*r10*x11607))+((x11601*x11603)));
evalcond[3]=((((-1.0)*r20*x11606))+((x11602*x11605))+((sj1*sj2))+(((-1.0)*cj2*x11604)));
evalcond[4]=((((-1.0)*sj0*sj2*x11604))+((x11602*x11603))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11609=IKPowWithIntegerCheck(r02,-1);
if(!x11609.valid){
continue;
}
IkReal x11608=x11609.value;
CheckValue<IkReal> x11610=IKPowWithIntegerCheck(cj3,-1);
if(!x11610.valid){
continue;
}
if( IKabs((x11608*(x11610.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11608)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11608*(x11610.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11608))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11608*(x11610.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11608));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11611=IKsin(j4);
IkReal x11612=IKcos(j4);
IkReal x11613=(gconst5*sj3);
IkReal x11614=(gconst4*r11);
IkReal x11615=(sj1*sj2);
IkReal x11616=((1.0)*gconst5);
IkReal x11617=(cj2*sj1);
IkReal x11618=((1.0)*sj0);
IkReal x11619=((1.0)*cj0);
IkReal x11620=(gconst4*r21);
IkReal x11621=(cj1*sj2);
IkReal x11622=(cj3*gconst4);
IkReal x11623=(gconst4*sj3);
IkReal x11624=(cj3*gconst5);
IkReal x11625=(r20*x11612);
IkReal x11626=((1.0)*cj1*cj2);
IkReal x11627=(r10*x11612);
IkReal x11628=(cj3*x11612);
IkReal x11629=(r02*x11611);
IkReal x11630=((1.0)*sj3*x11612);
evalcond[0]=((((-1.0)*x11618))+(((-1.0)*r02*x11612)));
evalcond[1]=(((x11611*x11620))+(((-1.0)*r20*x11611*x11616)));
evalcond[2]=(((x11611*x11614))+(((-1.0)*r10*x11611*x11616))+cj0);
evalcond[3]=((((-1.0)*cj1*cj2*x11619))+((cj3*x11629))+((cj0*x11615)));
evalcond[4]=((((-1.0)*sj3*x11629))+(((-1.0)*x11619*x11621))+(((-1.0)*x11617*x11619)));
evalcond[5]=((((-1.0)*cj3*x11616*x11625))+x11617+x11621+((r21*x11613))+((r20*x11623))+((x11620*x11628)));
evalcond[6]=(x11615+((x11613*x11625))+(((-1.0)*x11626))+(((-1.0)*x11620*x11630))+((r21*x11624))+((r20*x11622)));
evalcond[7]=((((-1.0)*cj1*cj2*x11618))+(((-1.0)*cj3*x11616*x11627))+((r11*x11613))+((sj0*x11615))+((x11614*x11628))+((r10*x11623)));
evalcond[8]=(((x11613*x11627))+((r11*x11624))+(((-1.0)*x11614*x11630))+(((-1.0)*x11617*x11618))+(((-1.0)*x11618*x11621))+((r10*x11622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11631=((1.0)*gconst5);
CheckValue<IkReal> x11632=IKPowWithIntegerCheck(((((-1.0)*r10*x11631))+((gconst4*r11))),-1);
if(!x11632.valid){
continue;
}
CheckValue<IkReal> x11633=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11631))),-1);
if(!x11633.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11632.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11633.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11631))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11632.value)))+IKsqr(((x11633.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11631))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11632.value)), ((x11633.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11631))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11634=IKsin(j4);
IkReal x11635=IKcos(j4);
IkReal x11636=(gconst5*sj3);
IkReal x11637=(gconst4*r11);
IkReal x11638=(sj1*sj2);
IkReal x11639=((1.0)*gconst5);
IkReal x11640=(cj2*sj1);
IkReal x11641=((1.0)*sj0);
IkReal x11642=((1.0)*cj0);
IkReal x11643=(gconst4*r21);
IkReal x11644=(cj1*sj2);
IkReal x11645=(cj3*gconst4);
IkReal x11646=(gconst4*sj3);
IkReal x11647=(cj3*gconst5);
IkReal x11648=(r20*x11635);
IkReal x11649=((1.0)*cj1*cj2);
IkReal x11650=(r10*x11635);
IkReal x11651=(cj3*x11635);
IkReal x11652=(r02*x11634);
IkReal x11653=((1.0)*sj3*x11635);
evalcond[0]=((((-1.0)*r02*x11635))+(((-1.0)*x11641)));
evalcond[1]=((((-1.0)*r20*x11634*x11639))+((x11634*x11643)));
evalcond[2]=((((-1.0)*r10*x11634*x11639))+cj0+((x11634*x11637)));
evalcond[3]=((((-1.0)*cj1*cj2*x11642))+((cj3*x11652))+((cj0*x11638)));
evalcond[4]=((((-1.0)*x11640*x11642))+(((-1.0)*sj3*x11652))+(((-1.0)*x11642*x11644)));
evalcond[5]=(x11640+x11644+(((-1.0)*cj3*x11639*x11648))+((x11643*x11651))+((r21*x11636))+((r20*x11646)));
evalcond[6]=(x11638+((x11636*x11648))+(((-1.0)*x11643*x11653))+((r21*x11647))+((r20*x11645))+(((-1.0)*x11649)));
evalcond[7]=(((r11*x11636))+(((-1.0)*cj1*cj2*x11641))+((r10*x11646))+((x11637*x11651))+(((-1.0)*cj3*x11639*x11650))+((sj0*x11638)));
evalcond[8]=((((-1.0)*x11640*x11641))+((r11*x11647))+(((-1.0)*x11641*x11644))+((r10*x11645))+((x11636*x11650))+(((-1.0)*x11637*x11653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11654=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11654.valid){
continue;
}
CheckValue<IkReal> x11655=IKPowWithIntegerCheck(r02,-1);
if(!x11655.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11654.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11655.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11654.value)))+IKsqr(((-1.0)*sj0*(x11655.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11654.value)), ((-1.0)*sj0*(x11655.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11656=IKsin(j4);
IkReal x11657=IKcos(j4);
IkReal x11658=(gconst5*sj3);
IkReal x11659=(gconst4*r11);
IkReal x11660=(sj1*sj2);
IkReal x11661=((1.0)*gconst5);
IkReal x11662=(cj2*sj1);
IkReal x11663=((1.0)*sj0);
IkReal x11664=((1.0)*cj0);
IkReal x11665=(gconst4*r21);
IkReal x11666=(cj1*sj2);
IkReal x11667=(cj3*gconst4);
IkReal x11668=(gconst4*sj3);
IkReal x11669=(cj3*gconst5);
IkReal x11670=(r20*x11657);
IkReal x11671=((1.0)*cj1*cj2);
IkReal x11672=(r10*x11657);
IkReal x11673=(cj3*x11657);
IkReal x11674=(r02*x11656);
IkReal x11675=((1.0)*sj3*x11657);
evalcond[0]=((((-1.0)*x11663))+(((-1.0)*r02*x11657)));
evalcond[1]=((((-1.0)*r20*x11656*x11661))+((x11656*x11665)));
evalcond[2]=((((-1.0)*r10*x11656*x11661))+cj0+((x11656*x11659)));
evalcond[3]=(((cj0*x11660))+((cj3*x11674))+(((-1.0)*cj1*cj2*x11664)));
evalcond[4]=((((-1.0)*sj3*x11674))+(((-1.0)*x11664*x11666))+(((-1.0)*x11662*x11664)));
evalcond[5]=(x11666+x11662+((r20*x11668))+((r21*x11658))+((x11665*x11673))+(((-1.0)*cj3*x11661*x11670)));
evalcond[6]=(((r21*x11669))+((x11658*x11670))+x11660+((r20*x11667))+(((-1.0)*x11665*x11675))+(((-1.0)*x11671)));
evalcond[7]=(((r11*x11658))+((x11659*x11673))+(((-1.0)*cj1*cj2*x11663))+((r10*x11668))+(((-1.0)*cj3*x11661*x11672))+((sj0*x11660)));
evalcond[8]=(((x11658*x11672))+(((-1.0)*x11659*x11675))+((r11*x11669))+(((-1.0)*x11662*x11663))+((r10*x11667))+(((-1.0)*x11663*x11666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11676=((1.0)*sj0);
IkReal x11677=((1.0)*gconst4);
CheckValue<IkReal> x11678 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11676)))),IkReal(((((-1.0)*cj0*r01*x11677))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11676))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11678.valid){
continue;
}
CheckValue<IkReal> x11679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11677))+(((-1.0)*gconst5*r21)))),-1);
if(!x11679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11678.value)+(((1.5707963267949)*(x11679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11680=IKsin(j4);
IkReal x11681=IKcos(j4);
IkReal x11682=(gconst5*sj3);
IkReal x11683=(cj3*gconst5);
IkReal x11684=(gconst4*r11);
IkReal x11685=(sj1*sj2);
IkReal x11686=(cj2*sj1);
IkReal x11687=((1.0)*sj0);
IkReal x11688=(gconst4*r01);
IkReal x11689=(gconst4*r21);
IkReal x11690=((1.0)*cj0);
IkReal x11691=(cj1*sj2);
IkReal x11692=(gconst4*sj3);
IkReal x11693=(cj3*gconst4);
IkReal x11694=((1.0)*x11681);
IkReal x11695=((1.0)*cj1*cj2);
IkReal x11696=(cj3*x11680);
IkReal x11697=(cj3*x11681);
IkReal x11698=((1.0)*gconst5*x11680);
IkReal x11699=((1.0)*sj3*x11680);
evalcond[0]=((((-1.0)*r22*x11694))+(((-1.0)*r20*x11698))+((x11680*x11689)));
evalcond[1]=(cj0+((x11680*x11684))+(((-1.0)*r12*x11694))+(((-1.0)*r10*x11698)));
evalcond[2]=((((-1.0)*x11687))+(((-1.0)*r02*x11694))+((x11680*x11688))+(((-1.0)*r00*x11698)));
evalcond[3]=(x11686+x11691+((x11689*x11697))+((r20*x11692))+((r21*x11682))+(((-1.0)*r20*x11683*x11694))+((r22*x11696)));
evalcond[4]=((((-1.0)*r22*x11699))+x11685+((r20*x11681*x11682))+((r20*x11693))+((r21*x11683))+(((-1.0)*sj3*x11689*x11694))+(((-1.0)*x11695)));
evalcond[5]=(((r00*x11692))+((cj0*x11685))+((x11688*x11697))+(((-1.0)*cj1*cj2*x11690))+((r02*x11696))+(((-1.0)*r00*x11683*x11694))+((r01*x11682)));
evalcond[6]=(((x11684*x11697))+(((-1.0)*r10*x11683*x11694))+((sj0*x11685))+((r11*x11682))+((r12*x11696))+((r10*x11692))+(((-1.0)*cj1*cj2*x11687)));
evalcond[7]=((((-1.0)*x11690*x11691))+(((-1.0)*x11686*x11690))+(((-1.0)*sj3*x11688*x11694))+((r00*x11681*x11682))+((r00*x11693))+(((-1.0)*r02*x11699))+((r01*x11683)));
evalcond[8]=((((-1.0)*x11687*x11691))+((r11*x11683))+((r10*x11681*x11682))+(((-1.0)*x11686*x11687))+((r10*x11693))+(((-1.0)*r12*x11699))+(((-1.0)*sj3*x11684*x11694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11700=((1.0)*gconst5);
CheckValue<IkReal> x11701 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11700))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11701.valid){
continue;
}
CheckValue<IkReal> x11702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11700))+(((-1.0)*gconst4*r10)))),-1);
if(!x11702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11701.value)+(((1.5707963267949)*(x11702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11703=IKsin(j4);
IkReal x11704=IKcos(j4);
IkReal x11705=(gconst5*sj3);
IkReal x11706=(cj3*gconst5);
IkReal x11707=(gconst4*r11);
IkReal x11708=(sj1*sj2);
IkReal x11709=(cj2*sj1);
IkReal x11710=((1.0)*sj0);
IkReal x11711=(gconst4*r01);
IkReal x11712=(gconst4*r21);
IkReal x11713=((1.0)*cj0);
IkReal x11714=(cj1*sj2);
IkReal x11715=(gconst4*sj3);
IkReal x11716=(cj3*gconst4);
IkReal x11717=((1.0)*x11704);
IkReal x11718=((1.0)*cj1*cj2);
IkReal x11719=(cj3*x11703);
IkReal x11720=(cj3*x11704);
IkReal x11721=((1.0)*gconst5*x11703);
IkReal x11722=((1.0)*sj3*x11703);
evalcond[0]=((((-1.0)*r20*x11721))+(((-1.0)*r22*x11717))+((x11703*x11712)));
evalcond[1]=(((x11703*x11707))+cj0+(((-1.0)*r10*x11721))+(((-1.0)*r12*x11717)));
evalcond[2]=((((-1.0)*x11710))+(((-1.0)*r00*x11721))+((x11703*x11711))+(((-1.0)*r02*x11717)));
evalcond[3]=(x11714+x11709+(((-1.0)*r20*x11706*x11717))+((r21*x11705))+((r20*x11715))+((x11712*x11720))+((r22*x11719)));
evalcond[4]=(x11708+(((-1.0)*x11718))+((r21*x11706))+((r20*x11716))+(((-1.0)*r22*x11722))+(((-1.0)*sj3*x11712*x11717))+((r20*x11704*x11705)));
evalcond[5]=(((r00*x11715))+((r01*x11705))+((r02*x11719))+((cj0*x11708))+(((-1.0)*cj1*cj2*x11713))+((x11711*x11720))+(((-1.0)*r00*x11706*x11717)));
evalcond[6]=(((x11707*x11720))+(((-1.0)*r10*x11706*x11717))+(((-1.0)*cj1*cj2*x11710))+((r10*x11715))+((sj0*x11708))+((r11*x11705))+((r12*x11719)));
evalcond[7]=(((r00*x11704*x11705))+(((-1.0)*x11709*x11713))+((r00*x11716))+((r01*x11706))+(((-1.0)*x11713*x11714))+(((-1.0)*sj3*x11711*x11717))+(((-1.0)*r02*x11722)));
evalcond[8]=((((-1.0)*x11709*x11710))+(((-1.0)*sj3*x11707*x11717))+(((-1.0)*r12*x11722))+(((-1.0)*x11710*x11714))+((r10*x11716))+((r11*x11706))+((r10*x11704*x11705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11723=((1.0)*gconst5);
CheckValue<IkReal> x11724 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11723))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11724.valid){
continue;
}
CheckValue<IkReal> x11725=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11723)))),-1);
if(!x11725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11724.value)+(((1.5707963267949)*(x11725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11726=IKsin(j4);
IkReal x11727=IKcos(j4);
IkReal x11728=(gconst5*sj3);
IkReal x11729=(cj3*gconst5);
IkReal x11730=(gconst4*r11);
IkReal x11731=(sj1*sj2);
IkReal x11732=(cj2*sj1);
IkReal x11733=((1.0)*sj0);
IkReal x11734=(gconst4*r01);
IkReal x11735=(gconst4*r21);
IkReal x11736=((1.0)*cj0);
IkReal x11737=(cj1*sj2);
IkReal x11738=(gconst4*sj3);
IkReal x11739=(cj3*gconst4);
IkReal x11740=((1.0)*x11727);
IkReal x11741=((1.0)*cj1*cj2);
IkReal x11742=(cj3*x11726);
IkReal x11743=(cj3*x11727);
IkReal x11744=((1.0)*gconst5*x11726);
IkReal x11745=((1.0)*sj3*x11726);
evalcond[0]=((((-1.0)*r20*x11744))+(((-1.0)*r22*x11740))+((x11726*x11735)));
evalcond[1]=(cj0+(((-1.0)*r10*x11744))+(((-1.0)*r12*x11740))+((x11726*x11730)));
evalcond[2]=((((-1.0)*r00*x11744))+(((-1.0)*x11733))+(((-1.0)*r02*x11740))+((x11726*x11734)));
evalcond[3]=(x11737+x11732+((x11735*x11743))+((r20*x11738))+(((-1.0)*r20*x11729*x11740))+((r22*x11742))+((r21*x11728)));
evalcond[4]=(x11731+(((-1.0)*x11741))+((r20*x11739))+(((-1.0)*r22*x11745))+((r20*x11727*x11728))+(((-1.0)*sj3*x11735*x11740))+((r21*x11729)));
evalcond[5]=(((r00*x11738))+((cj0*x11731))+((r01*x11728))+((x11734*x11743))+(((-1.0)*cj1*cj2*x11736))+((r02*x11742))+(((-1.0)*r00*x11729*x11740)));
evalcond[6]=(((sj0*x11731))+(((-1.0)*r10*x11729*x11740))+(((-1.0)*cj1*cj2*x11733))+((r10*x11738))+((x11730*x11743))+((r11*x11728))+((r12*x11742)));
evalcond[7]=(((r00*x11739))+((r01*x11729))+((r00*x11727*x11728))+(((-1.0)*x11732*x11736))+(((-1.0)*r02*x11745))+(((-1.0)*x11736*x11737))+(((-1.0)*sj3*x11734*x11740)));
evalcond[8]=(((r10*x11727*x11728))+(((-1.0)*r12*x11745))+((r10*x11739))+(((-1.0)*sj3*x11730*x11740))+(((-1.0)*x11732*x11733))+((r11*x11729))+(((-1.0)*x11733*x11737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11746=((-1.0)*r10);
IkReal x11748 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11748)==0){
continue;
}
IkReal x11747=pow(x11748,-0.5);
CheckValue<IkReal> x11749 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11746),IKFAST_ATAN2_MAGTHRESH);
if(!x11749.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11749.value));
IkReal gconst7=(r11*x11747);
IkReal gconst8=(x11746*x11747);
CheckValue<IkReal> x11750 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11750.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11750.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11751=((-1.0)*r10);
IkReal x11752=x11747;
CheckValue<IkReal> x11754 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11751),IKFAST_ATAN2_MAGTHRESH);
if(!x11754.valid){
continue;
}
IkReal x11753=((-1.0)*(x11754.value));
sj5=gconst7;
cj5=gconst8;
j5=x11753;
IkReal gconst6=x11753;
IkReal gconst7=(r11*x11752);
IkReal gconst8=(x11751*x11752);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11755=((1.0)*sj0);
IkReal x11756=((1.0)*gconst7);
CheckValue<IkReal> x11757 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11755))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst7*r11*x11755))+((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11756))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11757.valid){
continue;
}
CheckValue<IkReal> x11758=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x11756)))),-1);
if(!x11758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11757.value)+(((1.5707963267949)*(x11758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11759=IKsin(j4);
IkReal x11760=IKcos(j4);
IkReal x11761=(gconst7*sj3);
IkReal x11762=(cj3*gconst8);
IkReal x11763=(cj3*gconst7);
IkReal x11764=(sj1*sj2);
IkReal x11765=(cj2*sj1);
IkReal x11766=((1.0)*sj0);
IkReal x11767=((1.0)*cj0);
IkReal x11768=(gconst8*sj3);
IkReal x11769=(cj1*sj2);
IkReal x11770=((1.0)*x11760);
IkReal x11771=((1.0)*x11759);
IkReal x11772=((1.0)*cj1*cj2);
IkReal x11773=(cj3*x11759);
IkReal x11774=(gconst7*x11759);
IkReal x11775=(x11760*x11768);
evalcond[0]=((((-1.0)*gconst8*r20*x11771))+(((-1.0)*r22*x11770))+((r21*x11774)));
evalcond[1]=(cj0+(((-1.0)*r12*x11770))+((r11*x11774))+(((-1.0)*gconst8*r10*x11771)));
evalcond[2]=((((-1.0)*r02*x11770))+((r01*x11774))+(((-1.0)*x11766))+(((-1.0)*gconst8*r00*x11771)));
evalcond[3]=(x11769+x11765+((r20*x11761))+((r21*x11760*x11763))+((r22*x11773))+(((-1.0)*r20*x11762*x11770))+((r21*x11768)));
evalcond[4]=(x11764+((r20*x11763))+((r20*x11775))+(((-1.0)*r22*sj3*x11771))+(((-1.0)*r21*x11761*x11770))+(((-1.0)*x11772))+((r21*x11762)));
evalcond[5]=(((cj0*x11764))+(((-1.0)*cj1*cj2*x11767))+((r01*x11760*x11763))+(((-1.0)*r00*x11762*x11770))+((r02*x11773))+((r00*x11761))+((r01*x11768)));
evalcond[6]=((((-1.0)*cj1*cj2*x11766))+((r11*x11768))+((r12*x11773))+((r10*x11761))+((sj0*x11764))+(((-1.0)*r10*x11762*x11770))+((r11*x11760*x11763)));
evalcond[7]=((((-1.0)*r01*x11761*x11770))+(((-1.0)*x11765*x11767))+(((-1.0)*r02*sj3*x11771))+((r00*x11775))+((r00*x11763))+((r01*x11762))+(((-1.0)*x11767*x11769)));
evalcond[8]=(((r11*x11762))+((r10*x11775))+(((-1.0)*x11765*x11766))+((r10*x11763))+(((-1.0)*x11766*x11769))+(((-1.0)*r12*sj3*x11771))+(((-1.0)*r11*x11761*x11770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11776=((1.0)*gconst8);
CheckValue<IkReal> x11777=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11776)))),-1);
if(!x11777.valid){
continue;
}
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11777.value)))+(x11778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11779=IKsin(j4);
IkReal x11780=IKcos(j4);
IkReal x11781=(gconst7*sj3);
IkReal x11782=(cj3*gconst8);
IkReal x11783=(cj3*gconst7);
IkReal x11784=(sj1*sj2);
IkReal x11785=(cj2*sj1);
IkReal x11786=((1.0)*sj0);
IkReal x11787=((1.0)*cj0);
IkReal x11788=(gconst8*sj3);
IkReal x11789=(cj1*sj2);
IkReal x11790=((1.0)*x11780);
IkReal x11791=((1.0)*x11779);
IkReal x11792=((1.0)*cj1*cj2);
IkReal x11793=(cj3*x11779);
IkReal x11794=(gconst7*x11779);
IkReal x11795=(x11780*x11788);
evalcond[0]=((((-1.0)*gconst8*r20*x11791))+(((-1.0)*r22*x11790))+((r21*x11794)));
evalcond[1]=(cj0+((r11*x11794))+(((-1.0)*gconst8*r10*x11791))+(((-1.0)*r12*x11790)));
evalcond[2]=((((-1.0)*gconst8*r00*x11791))+(((-1.0)*r02*x11790))+((r01*x11794))+(((-1.0)*x11786)));
evalcond[3]=(((r21*x11788))+x11785+x11789+((r20*x11781))+((r21*x11780*x11783))+((r22*x11793))+(((-1.0)*r20*x11782*x11790)));
evalcond[4]=((((-1.0)*r21*x11781*x11790))+((r21*x11782))+x11784+((r20*x11783))+((r20*x11795))+(((-1.0)*r22*sj3*x11791))+(((-1.0)*x11792)));
evalcond[5]=(((cj0*x11784))+((r01*x11780*x11783))+(((-1.0)*r00*x11782*x11790))+(((-1.0)*cj1*cj2*x11787))+((r02*x11793))+((r00*x11781))+((r01*x11788)));
evalcond[6]=(((r12*x11793))+((r11*x11788))+(((-1.0)*cj1*cj2*x11786))+((r10*x11781))+(((-1.0)*r10*x11782*x11790))+((r11*x11780*x11783))+((sj0*x11784)));
evalcond[7]=((((-1.0)*x11785*x11787))+(((-1.0)*r02*sj3*x11791))+(((-1.0)*r01*x11781*x11790))+(((-1.0)*x11787*x11789))+((r00*x11795))+((r00*x11783))+((r01*x11782)));
evalcond[8]=(((r11*x11782))+(((-1.0)*r11*x11781*x11790))+(((-1.0)*x11785*x11786))+((r10*x11795))+(((-1.0)*x11786*x11789))+((r10*x11783))+(((-1.0)*r12*sj3*x11791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11796=((-1.0)*r11);
IkReal x11798 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11798)==0){
continue;
}
IkReal x11797=pow(x11798,-0.5);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(x11796),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11799.value))));
IkReal gconst10=(x11796*x11797);
IkReal gconst11=((1.0)*r10*x11797);
CheckValue<IkReal> x11800 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11800.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11800.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11801=((-1.0)*r11);
CheckValue<IkReal> x11804 = IKatan2WithCheck(IkReal(x11801),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11804.valid){
continue;
}
IkReal x11802=((1.0)*(x11804.value));
IkReal x11803=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11802)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11802)));
IkReal gconst10=(x11801*x11803);
IkReal gconst11=((1.0)*r10*x11803);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11805=((-1.0)*r11);
CheckValue<IkReal> x11808 = IKatan2WithCheck(IkReal(x11805),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11808.valid){
continue;
}
IkReal x11806=((1.0)*(x11808.value));
IkReal x11807=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11806)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11806)));
IkReal gconst10=(x11805*x11807);
IkReal gconst11=((1.0)*r10*x11807);
IkReal x11809=r12*r12;
IkReal x11810=((1.0)*sj0);
IkReal x11811=(cj0*r02);
IkReal x11812=x11797;
j4eval[0]=((IKabs((((r12*x11811*x11812))+(((-1.0)*x11810*x11812))+((sj0*x11809*x11812)))))+(IKabs(((((-1.0)*x11811))+(((-1.0)*r12*x11810))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11813=((-1.0)*r11);
CheckValue<IkReal> x11816 = IKatan2WithCheck(IkReal(x11813),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11816.valid){
continue;
}
IkReal x11814=((1.0)*(x11816.value));
IkReal x11815=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11814)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11814)));
IkReal gconst10=(x11813*x11815);
IkReal gconst11=((1.0)*r10*x11815);
IkReal x11817=((1.0)*cj3);
CheckValue<IkReal> x11822=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11822.valid){
continue;
}
IkReal x11818=x11822.value;
IkReal x11819=(cj3*x11818);
IkReal x11820=(x11817*x11818);
IkReal x11821=((((-2.0)*r10*r11*r20*r21*x11819))+(((-1.0)*x11817*(r22*r22)))+(((-1.0)*x11820*(r10*r10)*(r20*r20)))+(((-1.0)*x11820*(r11*r11)*(r21*r21))));
j4eval[0]=x11821;
j4eval[1]=IKsign(x11821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11823=((-1.0)*r11);
CheckValue<IkReal> x11826 = IKatan2WithCheck(IkReal(x11823),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11826.valid){
continue;
}
IkReal x11824=((1.0)*(x11826.value));
IkReal x11825=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11824)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11824)));
IkReal gconst10=(x11823*x11825);
IkReal gconst11=((1.0)*r10*x11825);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11827=((-1.0)*r11);
CheckValue<IkReal> x11830 = IKatan2WithCheck(IkReal(x11827),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11830.valid){
continue;
}
IkReal x11828=((1.0)*(x11830.value));
IkReal x11829=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11828)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11828)));
IkReal gconst10=(x11827*x11829);
IkReal gconst11=((1.0)*r10*x11829);
IkReal x11831=r12*r12;
IkReal x11832=((1.0)*sj0);
IkReal x11833=(cj0*r02);
IkReal x11834=x11797;
j4eval[0]=((IKabs((((r12*x11833*x11834))+((sj0*x11831*x11834))+(((-1.0)*x11832*x11834)))))+(IKabs(((((-1.0)*r12*x11832))+(((-1.0)*x11833))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11835=((-1.0)*r11);
CheckValue<IkReal> x11838 = IKatan2WithCheck(IkReal(x11835),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11838.valid){
continue;
}
IkReal x11836=((1.0)*(x11838.value));
IkReal x11837=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11836)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11836)));
IkReal gconst10=(x11835*x11837);
IkReal gconst11=((1.0)*r10*x11837);
IkReal x11839=r12*r12;
IkReal x11840=(cj1*cj2*r22);
IkReal x11841=(r22*sj1*sj2);
CheckValue<IkReal> x11845=IKPowWithIntegerCheck(((-1.0)+x11839),-1);
if(!x11845.valid){
continue;
}
IkReal x11842=x11845.value;
if((((1.0)+(((-1.0)*x11839)))) < -0.00001)
continue;
IkReal x11843=IKsqrt(((1.0)+(((-1.0)*x11839))));
IkReal x11844=(r12*x11842*x11843);
j4eval[0]=((IKabs((((x11840*x11844))+(((-1.0)*x11841*x11844)))))+(IKabs(((((-1.0)*x11840))+x11841))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11846=((-1.0)*r11);
CheckValue<IkReal> x11849 = IKatan2WithCheck(IkReal(x11846),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11849.valid){
continue;
}
IkReal x11847=((1.0)*(x11849.value));
IkReal x11848=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11847)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11847)));
IkReal gconst10=(x11846*x11848);
IkReal gconst11=((1.0)*r10*x11848);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11850=((-1.0)*r11);
CheckValue<IkReal> x11853 = IKatan2WithCheck(IkReal(x11850),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11853.valid){
continue;
}
IkReal x11851=((1.0)*(x11853.value));
IkReal x11852=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11851)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11851)));
IkReal gconst10=(x11850*x11852);
IkReal gconst11=((1.0)*r10*x11852);
IkReal x11854=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11858=IKPowWithIntegerCheck(x11854,-1);
if(!x11858.valid){
continue;
}
IkReal x11855=x11858.value;
IkReal x11856=((1.0)*x11855);
IkReal x11857=((((-1.0)*(r02*r02)))+(((-1.0)*x11856*(r00*r00)*(r10*r10)))+(((-1.0)*x11856*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11855)));
j4eval[0]=x11857;
j4eval[1]=IKsign(x11857);
j4eval[2]=r02;
j4eval[3]=x11854;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11859=((-1.0)*r11);
CheckValue<IkReal> x11862 = IKatan2WithCheck(IkReal(x11859),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11862.valid){
continue;
}
IkReal x11860=((1.0)*(x11862.value));
IkReal x11861=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11860)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11860)));
IkReal gconst10=(x11859*x11861);
IkReal gconst11=((1.0)*r10*x11861);
IkReal x11863=r12*r12;
IkReal x11864=(cj1*cj2*r22);
IkReal x11865=(r22*sj1*sj2);
CheckValue<IkReal> x11869=IKPowWithIntegerCheck(((-1.0)+x11863),-1);
if(!x11869.valid){
continue;
}
IkReal x11866=x11869.value;
if((((1.0)+(((-1.0)*x11863)))) < -0.00001)
continue;
IkReal x11867=IKsqrt(((1.0)+(((-1.0)*x11863))));
IkReal x11868=(r12*x11866*x11867);
j4eval[0]=((IKabs((((x11864*x11868))+(((-1.0)*x11865*x11868)))))+(IKabs(((((-1.0)*x11864))+x11865))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11870=(gconst10*r21);
IkReal x11871=(gconst11*r20);
IkReal x11872=(sj1*sj2);
IkReal x11873=(cj1*cj2);
CheckValue<IkReal> x11874 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11873))+((r22*x11872)))),IkReal((((x11871*x11873))+(((-1.0)*x11871*x11872))+((x11870*x11872))+(((-1.0)*x11870*x11873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11874.valid){
continue;
}
CheckValue<IkReal> x11875=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11870*x11870)+(((-2.0)*x11870*x11871))+(x11871*x11871))),-1);
if(!x11875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11874.value)+(((1.5707963267949)*(x11875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11876=IKsin(j4);
IkReal x11877=IKcos(j4);
IkReal x11878=((1.0)*cj2);
IkReal x11879=((1.0)*x11877);
IkReal x11880=(gconst10*x11876);
IkReal x11881=((1.0)*x11876);
IkReal x11882=(gconst11*x11877);
IkReal x11883=(gconst11*x11881);
evalcond[0]=((((-1.0)*r22*x11879))+((r21*x11880))+(((-1.0)*r20*x11883)));
evalcond[1]=((((-1.0)*r12*x11879))+((r11*x11880))+(((-1.0)*r10*x11883)));
evalcond[2]=(((r00*x11882))+(((-1.0)*gconst10*r01*x11879))+(((-1.0)*r02*x11881)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11883))+((r01*x11880))+(((-1.0)*r02*x11879)));
evalcond[4]=((((-1.0)*gconst10*r21*x11879))+(((-1.0)*cj1*x11878))+(((-1.0)*r22*x11881))+((sj1*sj2))+((r20*x11882)));
evalcond[5]=((((-1.0)*sj1*x11878))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11879))+((r10*x11882))+(((-1.0)*r12*x11881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11884=(gconst11*r00);
IkReal x11885=(gconst10*r01);
CheckValue<IkReal> x11886 = IKatan2WithCheck(IkReal(((((-1.0)*x11885))+x11884)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11886.valid){
continue;
}
CheckValue<IkReal> x11887=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11885*x11885)))+(((2.0)*x11884*x11885))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11884*x11884))))),-1);
if(!x11887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11886.value)+(((1.5707963267949)*(x11887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11888=IKsin(j4);
IkReal x11889=IKcos(j4);
IkReal x11890=((1.0)*cj2);
IkReal x11891=((1.0)*x11889);
IkReal x11892=(gconst10*x11888);
IkReal x11893=((1.0)*x11888);
IkReal x11894=(gconst11*x11889);
IkReal x11895=(gconst11*x11893);
evalcond[0]=((((-1.0)*r20*x11895))+(((-1.0)*r22*x11891))+((r21*x11892)));
evalcond[1]=((((-1.0)*r10*x11895))+(((-1.0)*r12*x11891))+((r11*x11892)));
evalcond[2]=((((-1.0)*gconst10*r01*x11891))+((r00*x11894))+(((-1.0)*r02*x11893)));
evalcond[3]=((-1.0)+((r01*x11892))+(((-1.0)*r00*x11895))+(((-1.0)*r02*x11891)));
evalcond[4]=((((-1.0)*cj1*x11890))+(((-1.0)*r22*x11893))+((sj1*sj2))+((r20*x11894))+(((-1.0)*gconst10*r21*x11891)));
evalcond[5]=((((-1.0)*gconst10*r11*x11891))+(((-1.0)*r12*x11893))+(((-1.0)*cj1*sj2))+((r10*x11894))+(((-1.0)*sj1*x11890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11896 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11896.valid){
continue;
}
CheckValue<IkReal> x11897=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11896.value)+(((1.5707963267949)*(x11897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11898=IKsin(j4);
IkReal x11899=IKcos(j4);
IkReal x11900=((1.0)*cj2);
IkReal x11901=((1.0)*x11899);
IkReal x11902=(gconst10*x11898);
IkReal x11903=((1.0)*x11898);
IkReal x11904=(gconst11*x11899);
IkReal x11905=(gconst11*x11903);
evalcond[0]=((((-1.0)*r22*x11901))+(((-1.0)*r20*x11905))+((r21*x11902)));
evalcond[1]=((((-1.0)*r12*x11901))+(((-1.0)*r10*x11905))+((r11*x11902)));
evalcond[2]=((((-1.0)*r02*x11903))+((r00*x11904))+(((-1.0)*gconst10*r01*x11901)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11901))+(((-1.0)*r00*x11905))+((r01*x11902)));
evalcond[4]=((((-1.0)*r22*x11903))+(((-1.0)*gconst10*r21*x11901))+(((-1.0)*cj1*x11900))+((sj1*sj2))+((r20*x11904)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11900))+(((-1.0)*r12*x11903))+(((-1.0)*gconst10*r11*x11901))+((r10*x11904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11906=((-1.0)*r11);
CheckValue<IkReal> x11909 = IKatan2WithCheck(IkReal(x11906),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11909.valid){
continue;
}
IkReal x11907=((1.0)*(x11909.value));
IkReal x11908=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11907)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11907)));
IkReal gconst10=(x11906*x11908);
IkReal gconst11=((1.0)*r10*x11908);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11910=((-1.0)*r11);
CheckValue<IkReal> x11913 = IKatan2WithCheck(IkReal(x11910),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11913.valid){
continue;
}
IkReal x11911=((1.0)*(x11913.value));
IkReal x11912=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11911)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11911)));
IkReal gconst10=(x11910*x11912);
IkReal gconst11=((1.0)*r10*x11912);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11914=((-1.0)*r11);
CheckValue<IkReal> x11917 = IKatan2WithCheck(IkReal(x11914),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11917.valid){
continue;
}
IkReal x11915=((1.0)*(x11917.value));
IkReal x11916=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11915)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11915)));
IkReal gconst10=(x11914*x11916);
IkReal gconst11=((1.0)*r10*x11916);
IkReal x11918=r12*r12;
CheckValue<IkReal> x11921=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11918))),-1);
if(!x11921.valid){
continue;
}
IkReal x11919=x11921.value;
IkReal x11920=((1.0)*x11919);
j4eval[0]=IKsign((x11918+((x11920*(r10*r10*r10*r10)))+((x11920*(r11*r11*r11*r11)))+(((2.0)*x11919*(r10*r10)*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11922=(cj2*sj1);
IkReal x11923=(gconst10*r11);
IkReal x11924=(gconst11*r10);
IkReal x11925=(cj1*sj2);
CheckValue<IkReal> x11926 = IKatan2WithCheck(IkReal((((r12*x11925))+((r12*x11922)))),IkReal(((((-1.0)*x11924*x11925))+((x11922*x11923))+(((-1.0)*x11922*x11924))+((x11923*x11925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11926.valid){
continue;
}
CheckValue<IkReal> x11927=IKPowWithIntegerCheck(IKsign(((x11923*x11923)+(r12*r12)+(x11924*x11924)+(((-2.0)*x11923*x11924)))),-1);
if(!x11927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11926.value)+(((1.5707963267949)*(x11927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11928=IKsin(j4);
IkReal x11929=IKcos(j4);
IkReal x11930=((1.0)*x11929);
IkReal x11931=(gconst10*x11928);
IkReal x11932=((1.0)*x11928);
IkReal x11933=(gconst11*x11929);
IkReal x11934=(gconst11*x11932);
evalcond[0]=(((r21*x11931))+(((-1.0)*r22*x11930))+(((-1.0)*r20*x11934)));
evalcond[1]=((((-1.0)*r10*x11934))+((r11*x11931))+(((-1.0)*r12*x11930)));
evalcond[2]=((((-1.0)*gconst10*r01*x11930))+(((-1.0)*r02*x11932))+((r00*x11933)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11930))+(((-1.0)*r00*x11934))+((r01*x11931)));
evalcond[4]=(((cj2*sj1))+((r10*x11933))+(((-1.0)*gconst10*r11*x11930))+((cj1*sj2))+(((-1.0)*r12*x11932)));
evalcond[5]=(((r20*x11933))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11930))+(((-1.0)*r22*x11932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11935=(gconst11*r00);
IkReal x11936=(gconst10*r01);
CheckValue<IkReal> x11937=IKPowWithIntegerCheck(IKsign(((x11935*x11935)+(x11936*x11936)+(((-2.0)*x11935*x11936))+(r02*r02))),-1);
if(!x11937.valid){
continue;
}
CheckValue<IkReal> x11938 = IKatan2WithCheck(IkReal((x11935+(((-1.0)*x11936)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11937.value)))+(x11938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11939=IKsin(j4);
IkReal x11940=IKcos(j4);
IkReal x11941=((1.0)*x11940);
IkReal x11942=(gconst10*x11939);
IkReal x11943=((1.0)*x11939);
IkReal x11944=(gconst11*x11940);
IkReal x11945=(gconst11*x11943);
evalcond[0]=((((-1.0)*r20*x11945))+(((-1.0)*r22*x11941))+((r21*x11942)));
evalcond[1]=(((r11*x11942))+(((-1.0)*r12*x11941))+(((-1.0)*r10*x11945)));
evalcond[2]=((((-1.0)*r02*x11943))+((r00*x11944))+(((-1.0)*gconst10*r01*x11941)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11941))+(((-1.0)*r00*x11945))+((r01*x11942)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11941))+((cj1*sj2))+((r10*x11944))+(((-1.0)*r12*x11943)));
evalcond[5]=((((-1.0)*gconst10*r21*x11941))+((r20*x11944))+(((-1.0)*r22*x11943))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11946=((1.0)*gconst11);
CheckValue<IkReal> x11947 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11947.valid){
continue;
}
CheckValue<IkReal> x11948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11946))+(((-1.0)*gconst10*r20)))),-1);
if(!x11948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11947.value)+(((1.5707963267949)*(x11948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11949=IKsin(j4);
IkReal x11950=IKcos(j4);
IkReal x11951=((1.0)*x11950);
IkReal x11952=(gconst10*x11949);
IkReal x11953=((1.0)*x11949);
IkReal x11954=(gconst11*x11950);
IkReal x11955=(gconst11*x11953);
evalcond[0]=((((-1.0)*r20*x11955))+((r21*x11952))+(((-1.0)*r22*x11951)));
evalcond[1]=((((-1.0)*r12*x11951))+((r11*x11952))+(((-1.0)*r10*x11955)));
evalcond[2]=((((-1.0)*gconst10*r01*x11951))+(((-1.0)*r02*x11953))+((r00*x11954)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11951))+(((-1.0)*r00*x11955))+((r01*x11952)));
evalcond[4]=((((-1.0)*r12*x11953))+((cj2*sj1))+(((-1.0)*gconst10*r11*x11951))+((cj1*sj2))+((r10*x11954)));
evalcond[5]=((((-1.0)*gconst10*r21*x11951))+((r20*x11954))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11956=((-1.0)*r11);
IkReal x11957=((-1.0)*r10);
CheckValue<IkReal> x11959 = IKatan2WithCheck(IkReal(x11956),IkReal(x11957),IKFAST_ATAN2_MAGTHRESH);
if(!x11959.valid){
continue;
}
IkReal x11958=((1.0)*(x11959.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11958)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11957);
rxp1_1=(px*r21);
rxp1_2=(px*x11956);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11958)));
IkReal gconst10=x11956;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11960=((-1.0)*r11);
IkReal x11961=((-1.0)*r10);
CheckValue<IkReal> x11963 = IKatan2WithCheck(IkReal(x11960),IkReal(x11961),IKFAST_ATAN2_MAGTHRESH);
if(!x11963.valid){
continue;
}
IkReal x11962=((1.0)*(x11963.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11962)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11961);
rxp1_1=(px*r21);
rxp1_2=(px*x11960);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11962)));
IkReal gconst10=x11960;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11964=((-1.0)*r11);
IkReal x11965=((-1.0)*r10);
CheckValue<IkReal> x11967 = IKatan2WithCheck(IkReal(x11964),IkReal(x11965),IKFAST_ATAN2_MAGTHRESH);
if(!x11967.valid){
continue;
}
IkReal x11966=((1.0)*(x11967.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11966)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11965);
rxp1_1=(px*r21);
rxp1_2=(px*x11964);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11966)));
IkReal gconst10=x11964;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11970=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11970.valid){
continue;
}
IkReal x11968=x11970.value;
IkReal x11969=(sj0*x11968);
cj4array[0]=(((cj1*sj2*x11969))+((cj2*sj1*x11969)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11971=IKsin(j4);
IkReal x11972=IKcos(j4);
IkReal x11973=(gconst10*r21);
IkReal x11974=(gconst11*r20);
IkReal x11975=((1.0)*x11971);
IkReal x11976=((1.0)*x11972);
evalcond[0]=((-1.0)*r02*x11971);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11976)));
evalcond[2]=((((-1.0)*x11974*x11975))+((x11971*x11973)));
evalcond[3]=((((-1.0)*gconst11*r10*x11975))+((gconst10*r11*x11971)));
evalcond[4]=(((x11972*x11974))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11973*x11976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11978=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11978.valid){
continue;
}
IkReal x11977=x11978.value;
cj4array[0]=(((cj1*cj2*x11977))+(((-1.0)*sj1*sj2*x11977)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11979=IKsin(j4);
IkReal x11980=IKcos(j4);
IkReal x11981=((1.0)*sj0);
IkReal x11982=(gconst10*x11979);
IkReal x11983=((1.0)*x11980);
IkReal x11984=((1.0)*gconst11*x11979);
evalcond[0]=((-1.0)*r02*x11979);
evalcond[1]=((((-1.0)*r02*x11983))+(((-1.0)*x11981)));
evalcond[2]=(((r21*x11982))+(((-1.0)*r20*x11984)));
evalcond[3]=((((-1.0)*r10*x11984))+((r11*x11982)));
evalcond[4]=(((gconst11*r10*x11980))+(((-1.0)*gconst10*r11*x11983))+(((-1.0)*cj2*sj1*x11981))+(((-1.0)*cj1*sj2*x11981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11985=IKPowWithIntegerCheck(r02,-1);
if(!x11985.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11985.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11986=IKsin(j4);
IkReal x11987=IKcos(j4);
IkReal x11988=(gconst10*r21);
IkReal x11989=((1.0)*sj0);
IkReal x11990=(gconst10*r11);
IkReal x11991=(gconst11*x11987);
IkReal x11992=((1.0)*x11987);
IkReal x11993=((1.0)*gconst11*x11986);
evalcond[0]=((-1.0)*r02*x11986);
evalcond[1]=(((x11986*x11988))+(((-1.0)*r20*x11993)));
evalcond[2]=((((-1.0)*r10*x11993))+((x11986*x11990)));
evalcond[3]=(((r20*x11991))+(((-1.0)*x11988*x11992))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x11990*x11992))+(((-1.0)*cj2*sj1*x11989))+(((-1.0)*cj1*sj2*x11989))+((r10*x11991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11994=((1.0)*gconst11);
CheckValue<IkReal> x11995 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11994))+((gconst10*r11*sj0))+(((-1.0)*cj0*r00*x11994))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11995.valid){
continue;
}
CheckValue<IkReal> x11996=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11995.value)+(((1.5707963267949)*(x11996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11997=IKsin(j4);
IkReal x11998=IKcos(j4);
IkReal x11999=((1.0)*cj2);
IkReal x12000=((1.0)*sj0);
IkReal x12001=(cj1*sj2);
IkReal x12002=(gconst10*x11997);
IkReal x12003=((1.0)*x11998);
IkReal x12004=(gconst11*x11998);
IkReal x12005=((1.0)*x11997);
IkReal x12006=(gconst11*x12005);
evalcond[0]=(((r21*x12002))+(((-1.0)*r20*x12006)));
evalcond[1]=((((-1.0)*r10*x12006))+cj0+(((-1.0)*r12*x12003))+((r11*x12002)));
evalcond[2]=(((r20*x12004))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12003))+(((-1.0)*cj1*x11999)));
evalcond[3]=((((-1.0)*x12000))+(((-1.0)*r00*x12006))+((r01*x12002))+(((-1.0)*r02*x12003)));
evalcond[4]=((((-1.0)*gconst10*r01*x12003))+((r00*x12004))+(((-1.0)*r02*x12005))+(((-1.0)*cj0*sj1*x11999))+(((-1.0)*cj0*x12001)));
evalcond[5]=((((-1.0)*gconst10*r11*x12003))+(((-1.0)*x12000*x12001))+(((-1.0)*r12*x12005))+((r10*x12004))+(((-1.0)*sj0*sj1*x11999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12007=(gconst10*r21);
IkReal x12008=(gconst11*r20);
IkReal x12009=(sj1*sj2);
IkReal x12010=(cj1*cj2);
CheckValue<IkReal> x12011 = IKatan2WithCheck(IkReal((((r22*x12009))+(((-1.0)*r22*x12010)))),IkReal(((((-1.0)*x12008*x12009))+((x12008*x12010))+(((-1.0)*x12007*x12010))+((x12007*x12009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12011.valid){
continue;
}
CheckValue<IkReal> x12012=IKPowWithIntegerCheck(IKsign(((x12007*x12007)+(r22*r22)+(x12008*x12008)+(((-2.0)*x12007*x12008)))),-1);
if(!x12012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12011.value)+(((1.5707963267949)*(x12012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12013=IKsin(j4);
IkReal x12014=IKcos(j4);
IkReal x12015=((1.0)*cj2);
IkReal x12016=((1.0)*sj0);
IkReal x12017=(cj1*sj2);
IkReal x12018=((1.0)*x12014);
IkReal x12019=(gconst10*x12013);
IkReal x12020=((1.0)*x12013);
IkReal x12021=(gconst11*x12014);
IkReal x12022=(gconst11*x12020);
evalcond[0]=((((-1.0)*r20*x12022))+((r21*x12019))+(((-1.0)*r22*x12018)));
evalcond[1]=(cj0+((r11*x12019))+(((-1.0)*r12*x12018))+(((-1.0)*r10*x12022)));
evalcond[2]=((((-1.0)*r02*x12018))+(((-1.0)*r00*x12022))+(((-1.0)*x12016))+((r01*x12019)));
evalcond[3]=((((-1.0)*gconst10*r21*x12018))+((r20*x12021))+(((-1.0)*cj1*x12015))+((sj1*sj2))+(((-1.0)*r22*x12020)));
evalcond[4]=((((-1.0)*cj0*sj1*x12015))+(((-1.0)*cj0*x12017))+((r00*x12021))+(((-1.0)*r02*x12020))+(((-1.0)*gconst10*r01*x12018)));
evalcond[5]=((((-1.0)*x12016*x12017))+(((-1.0)*sj0*sj1*x12015))+(((-1.0)*gconst10*r11*x12018))+(((-1.0)*r12*x12020))+((r10*x12021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12023=((1.0)*sj0);
IkReal x12024=((1.0)*gconst10);
CheckValue<IkReal> x12025 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12023)))),IkReal(((((-1.0)*gconst10*r11*x12023))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12025.valid){
continue;
}
CheckValue<IkReal> x12026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12024))+(((-1.0)*gconst11*r21)))),-1);
if(!x12026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12025.value)+(((1.5707963267949)*(x12026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12027=IKsin(j4);
IkReal x12028=IKcos(j4);
IkReal x12029=((1.0)*cj2);
IkReal x12030=((1.0)*sj0);
IkReal x12031=(cj1*sj2);
IkReal x12032=((1.0)*x12028);
IkReal x12033=(gconst10*x12027);
IkReal x12034=((1.0)*x12027);
IkReal x12035=(gconst11*x12028);
IkReal x12036=(gconst11*x12034);
evalcond[0]=((((-1.0)*r20*x12036))+((r21*x12033))+(((-1.0)*r22*x12032)));
evalcond[1]=(cj0+(((-1.0)*r12*x12032))+((r11*x12033))+(((-1.0)*r10*x12036)));
evalcond[2]=((((-1.0)*x12030))+((r01*x12033))+(((-1.0)*r02*x12032))+(((-1.0)*r00*x12036)));
evalcond[3]=((((-1.0)*cj1*x12029))+((r20*x12035))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12032))+(((-1.0)*r22*x12034)));
evalcond[4]=((((-1.0)*gconst10*r01*x12032))+((r00*x12035))+(((-1.0)*r02*x12034))+(((-1.0)*cj0*sj1*x12029))+(((-1.0)*cj0*x12031)));
evalcond[5]=((((-1.0)*x12030*x12031))+(((-1.0)*gconst10*r11*x12032))+(((-1.0)*r12*x12034))+((r10*x12035))+(((-1.0)*sj0*sj1*x12029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12037=((1.0)*gconst11);
CheckValue<IkReal> x12038=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12037)))),-1);
if(!x12038.valid){
continue;
}
CheckValue<IkReal> x12039 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12038.value)))+(x12039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12040=IKsin(j4);
IkReal x12041=IKcos(j4);
IkReal x12042=((1.0)*cj2);
IkReal x12043=((1.0)*sj0);
IkReal x12044=(cj1*sj2);
IkReal x12045=((1.0)*x12041);
IkReal x12046=(gconst10*x12040);
IkReal x12047=((1.0)*x12040);
IkReal x12048=(gconst11*x12041);
IkReal x12049=(gconst11*x12047);
evalcond[0]=((((-1.0)*r20*x12049))+((r21*x12046))+(((-1.0)*r22*x12045)));
evalcond[1]=((((-1.0)*r12*x12045))+cj0+((r11*x12046))+(((-1.0)*r10*x12049)));
evalcond[2]=((((-1.0)*r00*x12049))+(((-1.0)*x12043))+((r01*x12046))+(((-1.0)*r02*x12045)));
evalcond[3]=((((-1.0)*cj1*x12042))+((sj1*sj2))+((r20*x12048))+(((-1.0)*gconst10*r21*x12045))+(((-1.0)*r22*x12047)));
evalcond[4]=((((-1.0)*cj0*x12044))+(((-1.0)*gconst10*r01*x12045))+((r00*x12048))+(((-1.0)*r02*x12047))+(((-1.0)*cj0*sj1*x12042)));
evalcond[5]=(((r10*x12048))+(((-1.0)*r12*x12047))+(((-1.0)*sj0*sj1*x12042))+(((-1.0)*gconst10*r11*x12045))+(((-1.0)*x12043*x12044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12050=((-1.0)*r11);
CheckValue<IkReal> x12053 = IKatan2WithCheck(IkReal(x12050),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12053.valid){
continue;
}
IkReal x12051=((1.0)*(x12053.value));
IkReal x12052=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12051)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12051)));
IkReal gconst10=(x12050*x12052);
IkReal gconst11=((1.0)*r10*x12052);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12054=((-1.0)*r11);
CheckValue<IkReal> x12057 = IKatan2WithCheck(IkReal(x12054),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12057.valid){
continue;
}
IkReal x12055=((1.0)*(x12057.value));
IkReal x12056=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12055)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12055)));
IkReal gconst10=(x12054*x12056);
IkReal gconst11=((1.0)*r10*x12056);
IkReal x12058=r12*r12;
IkReal x12059=((1.0)*sj0);
IkReal x12060=(cj0*r02);
IkReal x12061=x11797;
j4eval[0]=((IKabs(((((-1.0)*x12060))+(((-1.0)*r12*x12059)))))+(IKabs((((sj0*x12058*x12061))+((r12*x12060*x12061))+(((-1.0)*x12059*x12061))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12062=((-1.0)*r11);
CheckValue<IkReal> x12065 = IKatan2WithCheck(IkReal(x12062),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12065.valid){
continue;
}
IkReal x12063=((1.0)*(x12065.value));
IkReal x12064=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12063)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12063)));
IkReal gconst10=(x12062*x12064);
IkReal gconst11=((1.0)*r10*x12064);
IkReal x12066=r12*r12;
IkReal x12067=((1.0)+(((-1.0)*x12066)));
IkReal x12068=(r22*sj1*sj2);
IkReal x12069=(cj1*cj2*r22);
CheckValue<IkReal> x12076=IKPowWithIntegerCheck(x12067,-1);
if(!x12076.valid){
continue;
}
IkReal x12070=x12076.value;
CheckValue<IkReal> x12077=IKPowWithIntegerCheck(((-1.0)+x12066),-1);
if(!x12077.valid){
continue;
}
IkReal x12071=x12077.value;
IkReal x12072=((1.0)*x12070);
if((x12067) < -0.00001)
continue;
IkReal x12073=IKsqrt(x12067);
IkReal x12074=(r12*x12071*x12073);
IkReal x12075=((((-2.0)*r10*r11*r20*r21*x12070))+(((-1.0)*(r22*r22)))+(((-1.0)*x12072*(r10*r10)*(r20*r20)))+(((-1.0)*x12072*(r11*r11)*(r21*r21))));
j4eval[0]=x12075;
j4eval[1]=((IKabs((((x12069*x12074))+(((-1.0)*x12068*x12074)))))+(IKabs(((((-1.0)*x12069))+x12068))));
j4eval[2]=IKsign(x12075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12078=((-1.0)*r11);
CheckValue<IkReal> x12081 = IKatan2WithCheck(IkReal(x12078),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12081.valid){
continue;
}
IkReal x12079=((1.0)*(x12081.value));
IkReal x12080=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12079)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12079)));
IkReal gconst10=(x12078*x12080);
IkReal gconst11=((1.0)*r10*x12080);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12082=((-1.0)*r11);
CheckValue<IkReal> x12085 = IKatan2WithCheck(IkReal(x12082),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12085.valid){
continue;
}
IkReal x12083=((1.0)*(x12085.value));
IkReal x12084=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12083)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12083)));
IkReal gconst10=(x12082*x12084);
IkReal gconst11=((1.0)*r10*x12084);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12086=((-1.0)*r11);
CheckValue<IkReal> x12089 = IKatan2WithCheck(IkReal(x12086),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12089.valid){
continue;
}
IkReal x12087=((1.0)*(x12089.value));
IkReal x12088=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12087)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12087)));
IkReal gconst10=(x12086*x12088);
IkReal gconst11=((1.0)*r10*x12088);
IkReal x12090=(cj1*r02*sj2);
IkReal x12091=(cj2*r02*sj1);
IkReal x12092=x11797;
IkReal x12093=(r12*x12092);
j4eval[0]=((IKabs((x12091+x12090)))+(IKabs((((x12090*x12093))+((x12091*x12093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12094=(cj1*sj2);
IkReal x12095=(cj2*sj1);
IkReal x12096=(gconst11*r00);
IkReal x12097=((1.0)*gconst10*r01);
CheckValue<IkReal> x12098=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12098.valid){
continue;
}
CheckValue<IkReal> x12099 = IKatan2WithCheck(IkReal(((((-1.0)*x12095*x12097))+((x12094*x12096))+((x12095*x12096))+(((-1.0)*x12094*x12097)))),IkReal((((r02*x12095))+((r02*x12094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12098.value)))+(x12099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12100=IKcos(j4);
IkReal x12101=IKsin(j4);
IkReal x12102=((1.0)*cj2);
IkReal x12103=((1.0)*x12100);
IkReal x12104=(gconst10*x12100);
IkReal x12105=(gconst10*x12101);
IkReal x12106=((1.0)*gconst11*x12101);
evalcond[0]=(((r02*x12101))+((r01*x12104))+(((-1.0)*gconst11*r00*x12103)));
evalcond[1]=((((-1.0)*r22*x12103))+(((-1.0)*r20*x12106))+((r21*x12105)));
evalcond[2]=((((-1.0)*r12*x12103))+(((-1.0)*r10*x12106))+((r11*x12105)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12106))+((r01*x12105))+(((-1.0)*r02*x12103)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x12102))+(((-1.0)*gconst11*r20*x12103))+((r22*x12101))+((r21*x12104)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12102))+((r12*x12101))+((r11*x12104))+(((-1.0)*gconst11*r10*x12103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12107=(gconst10*r01);
IkReal x12108=(gconst11*r00);
CheckValue<IkReal> x12109 = IKatan2WithCheck(IkReal((x12107+(((-1.0)*x12108)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12109.valid){
continue;
}
CheckValue<IkReal> x12110=IKPowWithIntegerCheck(IKsign(((x12107*x12107)+(r02*r02)+(((-2.0)*x12107*x12108))+(x12108*x12108))),-1);
if(!x12110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12109.value)+(((1.5707963267949)*(x12110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12111=IKcos(j4);
IkReal x12112=IKsin(j4);
IkReal x12113=((1.0)*cj2);
IkReal x12114=((1.0)*x12111);
IkReal x12115=(gconst10*x12111);
IkReal x12116=(gconst10*x12112);
IkReal x12117=((1.0)*gconst11*x12112);
evalcond[0]=(((r02*x12112))+((r01*x12115))+(((-1.0)*gconst11*r00*x12114)));
evalcond[1]=((((-1.0)*r22*x12114))+(((-1.0)*r20*x12117))+((r21*x12116)));
evalcond[2]=((((-1.0)*r12*x12114))+(((-1.0)*r10*x12117))+((r11*x12116)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12117))+((r01*x12116))+(((-1.0)*r02*x12114)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst11*r20*x12114))+(((-1.0)*cj1*x12113))+((r21*x12115))+((r22*x12112)));
evalcond[5]=((((-1.0)*gconst11*r10*x12114))+(((-1.0)*sj1*x12113))+(((-1.0)*cj1*sj2))+((r12*x12112))+((r11*x12115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
CheckValue<IkReal> x12119=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12118.value)+(((1.5707963267949)*(x12119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12120=IKcos(j4);
IkReal x12121=IKsin(j4);
IkReal x12122=((1.0)*cj2);
IkReal x12123=((1.0)*x12120);
IkReal x12124=(gconst10*x12120);
IkReal x12125=(gconst10*x12121);
IkReal x12126=((1.0)*gconst11*x12121);
evalcond[0]=(((r01*x12124))+(((-1.0)*gconst11*r00*x12123))+((r02*x12121)));
evalcond[1]=((((-1.0)*r20*x12126))+((r21*x12125))+(((-1.0)*r22*x12123)));
evalcond[2]=((((-1.0)*r12*x12123))+(((-1.0)*r10*x12126))+((r11*x12125)));
evalcond[3]=((-1.0)+((r01*x12125))+(((-1.0)*r02*x12123))+(((-1.0)*r00*x12126)));
evalcond[4]=(((r21*x12124))+(((-1.0)*cj1*x12122))+((sj1*sj2))+((r22*x12121))+(((-1.0)*gconst11*r20*x12123)));
evalcond[5]=((((-1.0)*sj1*x12122))+((r12*x12121))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12123))+((r11*x12124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12127=((-1.0)*r11);
CheckValue<IkReal> x12130 = IKatan2WithCheck(IkReal(x12127),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12130.valid){
continue;
}
IkReal x12128=((1.0)*(x12130.value));
IkReal x12129=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12128)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12128)));
IkReal gconst10=(x12127*x12129);
IkReal gconst11=((1.0)*r10*x12129);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12131=((-1.0)*r11);
CheckValue<IkReal> x12134 = IKatan2WithCheck(IkReal(x12131),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12134.valid){
continue;
}
IkReal x12132=((1.0)*(x12134.value));
IkReal x12133=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12132)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12132)));
IkReal gconst10=(x12131*x12133);
IkReal gconst11=((1.0)*r10*x12133);
IkReal x12135=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12139=IKPowWithIntegerCheck(x12135,-1);
if(!x12139.valid){
continue;
}
IkReal x12136=x12139.value;
IkReal x12137=((1.0)*x12136);
IkReal x12138=((((-1.0)*(r02*r02)))+(((-1.0)*x12137*(r00*r00)*(r10*r10)))+(((-1.0)*x12137*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12136)));
j4eval[0]=x12138;
j4eval[1]=r02;
j4eval[2]=x12135;
j4eval[3]=IKsign(x12138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12140=((-1.0)*r11);
CheckValue<IkReal> x12143 = IKatan2WithCheck(IkReal(x12140),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12143.valid){
continue;
}
IkReal x12141=((1.0)*(x12143.value));
IkReal x12142=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12141)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12141)));
IkReal gconst10=(x12140*x12142);
IkReal gconst11=((1.0)*r10*x12142);
IkReal x12144=r12*r12;
IkReal x12145=((1.0)*r02);
IkReal x12146=(cj1*sj2);
IkReal x12147=(cj2*sj1);
CheckValue<IkReal> x12151=IKPowWithIntegerCheck(((-1.0)+x12144),-1);
if(!x12151.valid){
continue;
}
IkReal x12148=x12151.value;
if((((1.0)+(((-1.0)*x12144)))) < -0.00001)
continue;
IkReal x12149=IKsqrt(((1.0)+(((-1.0)*x12144))));
IkReal x12150=(r12*x12148*x12149);
j4eval[0]=((IKabs(((((-1.0)*x12145*x12147))+(((-1.0)*x12145*x12146)))))+(IKabs(((((-1.0)*x12145*x12146*x12150))+(((-1.0)*x12145*x12147*x12150))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12152=(cj1*sj2);
IkReal x12153=(gconst10*r01);
IkReal x12154=(cj2*sj1);
IkReal x12155=((1.0)*r02);
IkReal x12156=((1.0)*gconst11*r00);
CheckValue<IkReal> x12157 = IKatan2WithCheck(IkReal(((((-1.0)*x12152*x12156))+((x12153*x12154))+(((-1.0)*x12154*x12156))+((x12152*x12153)))),IkReal(((((-1.0)*x12152*x12155))+(((-1.0)*x12154*x12155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12157.valid){
continue;
}
CheckValue<IkReal> x12158=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12157.value)+(((1.5707963267949)*(x12158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12159=IKcos(j4);
IkReal x12160=IKsin(j4);
IkReal x12161=((1.0)*x12159);
IkReal x12162=(gconst10*x12159);
IkReal x12163=(gconst10*x12160);
IkReal x12164=((1.0)*gconst11*x12160);
evalcond[0]=((((-1.0)*gconst11*r00*x12161))+((r02*x12160))+((r01*x12162)));
evalcond[1]=(((r21*x12163))+(((-1.0)*r22*x12161))+(((-1.0)*r20*x12164)));
evalcond[2]=((((-1.0)*r10*x12164))+((r11*x12163))+(((-1.0)*r12*x12161)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12164))+((r01*x12163))+(((-1.0)*r02*x12161)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12161))+((cj1*sj2))+((r11*x12162))+((r12*x12160)));
evalcond[5]=(((r21*x12162))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12161))+((r22*x12160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12165=(gconst10*r01);
IkReal x12166=(gconst11*r00);
CheckValue<IkReal> x12167=IKPowWithIntegerCheck(IKsign(((((2.0)*x12165*x12166))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12165*x12165)))+(((-1.0)*(x12166*x12166))))),-1);
if(!x12167.valid){
continue;
}
CheckValue<IkReal> x12168 = IKatan2WithCheck(IkReal(((((-1.0)*x12166))+x12165)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12167.value)))+(x12168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12169=IKcos(j4);
IkReal x12170=IKsin(j4);
IkReal x12171=((1.0)*x12169);
IkReal x12172=(gconst10*x12169);
IkReal x12173=(gconst10*x12170);
IkReal x12174=((1.0)*gconst11*x12170);
evalcond[0]=((((-1.0)*gconst11*r00*x12171))+((r01*x12172))+((r02*x12170)));
evalcond[1]=(((r21*x12173))+(((-1.0)*r22*x12171))+(((-1.0)*r20*x12174)));
evalcond[2]=((((-1.0)*r10*x12174))+((r11*x12173))+(((-1.0)*r12*x12171)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12174))+((r01*x12173))+(((-1.0)*r02*x12171)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12171))+((cj1*sj2))+((r11*x12172))+((r12*x12170)));
evalcond[5]=(((r21*x12172))+(((-1.0)*gconst11*r20*x12171))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12175=((1.0)*gconst11);
CheckValue<IkReal> x12176=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12175)))),-1);
if(!x12176.valid){
continue;
}
CheckValue<IkReal> x12177 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12176.value)))+(x12177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12178=IKcos(j4);
IkReal x12179=IKsin(j4);
IkReal x12180=((1.0)*x12178);
IkReal x12181=(gconst10*x12178);
IkReal x12182=(gconst10*x12179);
IkReal x12183=((1.0)*gconst11*x12179);
evalcond[0]=((((-1.0)*gconst11*r00*x12180))+((r01*x12181))+((r02*x12179)));
evalcond[1]=(((r21*x12182))+(((-1.0)*r22*x12180))+(((-1.0)*r20*x12183)));
evalcond[2]=(((r11*x12182))+(((-1.0)*r10*x12183))+(((-1.0)*r12*x12180)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12180))+(((-1.0)*r00*x12183))+((r01*x12182)));
evalcond[4]=(((cj2*sj1))+((r11*x12181))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12180))+((r12*x12179)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12181))+((r22*x12179))+(((-1.0)*gconst11*r20*x12180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12184=((-1.0)*r11);
IkReal x12185=((-1.0)*r10);
CheckValue<IkReal> x12187 = IKatan2WithCheck(IkReal(x12184),IkReal(x12185),IKFAST_ATAN2_MAGTHRESH);
if(!x12187.valid){
continue;
}
IkReal x12186=((1.0)*(x12187.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12186)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12185);
rxp1_1=(px*r21);
rxp1_2=(px*x12184);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12186)));
IkReal gconst10=x12184;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12188=((-1.0)*r11);
IkReal x12189=((-1.0)*r10);
CheckValue<IkReal> x12191 = IKatan2WithCheck(IkReal(x12188),IkReal(x12189),IKFAST_ATAN2_MAGTHRESH);
if(!x12191.valid){
continue;
}
IkReal x12190=((1.0)*(x12191.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12190)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12189);
rxp1_1=(px*r21);
rxp1_2=(px*x12188);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12190)));
IkReal gconst10=x12188;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12192=((-1.0)*r11);
IkReal x12193=((-1.0)*r10);
CheckValue<IkReal> x12195 = IKatan2WithCheck(IkReal(x12192),IkReal(x12193),IKFAST_ATAN2_MAGTHRESH);
if(!x12195.valid){
continue;
}
IkReal x12194=((1.0)*(x12195.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12194)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12193);
rxp1_1=(px*r21);
rxp1_2=(px*x12192);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12194)));
IkReal gconst10=x12192;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12198=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12198.valid){
continue;
}
IkReal x12196=x12198.value;
IkReal x12197=(sj0*x12196);
cj4array[0]=(((cj2*sj1*x12197))+((cj1*sj2*x12197)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12199=IKsin(j4);
IkReal x12200=IKcos(j4);
IkReal x12201=(gconst10*r21);
IkReal x12202=((1.0)*x12200);
IkReal x12203=((1.0)*gconst11*x12199);
evalcond[0]=(r02*x12199);
evalcond[1]=((((-1.0)*r02*x12202))+(((-1.0)*sj0)));
evalcond[2]=(((x12199*x12201))+(((-1.0)*r20*x12203)));
evalcond[3]=(((gconst10*r11*x12199))+(((-1.0)*r10*x12203)));
evalcond[4]=(((x12200*x12201))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12205=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12205.valid){
continue;
}
IkReal x12204=x12205.value;
cj4array[0]=(((cj1*cj2*x12204))+(((-1.0)*sj1*sj2*x12204)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12206=IKsin(j4);
IkReal x12207=IKcos(j4);
IkReal x12208=((1.0)*sj0);
IkReal x12209=(gconst10*x12206);
IkReal x12210=((1.0)*x12207);
IkReal x12211=((1.0)*gconst11*x12206);
evalcond[0]=(r02*x12206);
evalcond[1]=((((-1.0)*r02*x12210))+(((-1.0)*x12208)));
evalcond[2]=(((r21*x12209))+(((-1.0)*r20*x12211)));
evalcond[3]=((((-1.0)*r10*x12211))+((r11*x12209)));
evalcond[4]=((((-1.0)*gconst11*r10*x12210))+(((-1.0)*cj2*sj1*x12208))+(((-1.0)*cj1*sj2*x12208))+((gconst10*r11*x12207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12212=IKPowWithIntegerCheck(r02,-1);
if(!x12212.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12212.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12213=IKsin(j4);
IkReal x12214=IKcos(j4);
IkReal x12215=(gconst10*r21);
IkReal x12216=((1.0)*cj1);
IkReal x12217=(gconst10*r11);
IkReal x12218=((1.0)*gconst11*x12213);
IkReal x12219=((1.0)*gconst11*x12214);
evalcond[0]=(r02*x12213);
evalcond[1]=(((x12213*x12215))+(((-1.0)*r20*x12218)));
evalcond[2]=(((x12213*x12217))+(((-1.0)*r10*x12218)));
evalcond[3]=(((x12214*x12215))+((sj1*sj2))+(((-1.0)*cj2*x12216))+(((-1.0)*r20*x12219)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12216))+((x12214*x12217))+(((-1.0)*r10*x12219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12220=((1.0)*gconst11);
CheckValue<IkReal> x12221 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12220))+(((-1.0)*cj0*r00*x12220))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12221.valid){
continue;
}
CheckValue<IkReal> x12222=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12221.value)+(((1.5707963267949)*(x12222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12223=IKsin(j4);
IkReal x12224=IKcos(j4);
IkReal x12225=((1.0)*gconst11);
IkReal x12226=((1.0)*cj2);
IkReal x12227=((1.0)*sj0);
IkReal x12228=(cj1*sj2);
IkReal x12229=(gconst10*x12224);
IkReal x12230=(gconst10*x12223);
IkReal x12231=((1.0)*x12224);
evalcond[0]=((((-1.0)*r20*x12223*x12225))+((r21*x12230)));
evalcond[1]=((((-1.0)*r12*x12231))+cj0+((r11*x12230))+(((-1.0)*r10*x12223*x12225)));
evalcond[2]=((((-1.0)*cj1*x12226))+((sj1*sj2))+((r21*x12229))+(((-1.0)*r20*x12224*x12225)));
evalcond[3]=((((-1.0)*x12227))+((r01*x12230))+(((-1.0)*r00*x12223*x12225))+(((-1.0)*r02*x12231)));
evalcond[4]=(((r02*x12223))+(((-1.0)*r00*x12224*x12225))+((r01*x12229))+(((-1.0)*cj0*sj1*x12226))+(((-1.0)*cj0*x12228)));
evalcond[5]=(((r11*x12229))+(((-1.0)*sj0*sj1*x12226))+(((-1.0)*x12227*x12228))+((r12*x12223))+(((-1.0)*r10*x12224*x12225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12232=(gconst10*r21);
IkReal x12233=(gconst11*r20);
IkReal x12234=(sj1*sj2);
IkReal x12235=(cj1*cj2);
CheckValue<IkReal> x12236 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12235))+((r22*x12234)))),IkReal(((((-1.0)*x12232*x12235))+(((-1.0)*x12233*x12234))+((x12233*x12235))+((x12232*x12234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12236.valid){
continue;
}
CheckValue<IkReal> x12237=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12232*x12232)))+(((2.0)*x12232*x12233))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12233*x12233))))),-1);
if(!x12237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12236.value)+(((1.5707963267949)*(x12237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12238=IKsin(j4);
IkReal x12239=IKcos(j4);
IkReal x12240=((1.0)*cj2);
IkReal x12241=((1.0)*sj0);
IkReal x12242=(cj1*sj2);
IkReal x12243=((1.0)*x12239);
IkReal x12244=(gconst10*x12239);
IkReal x12245=(gconst10*x12238);
IkReal x12246=((1.0)*gconst11*x12238);
evalcond[0]=((((-1.0)*r20*x12246))+(((-1.0)*r22*x12243))+((r21*x12245)));
evalcond[1]=((((-1.0)*r12*x12243))+(((-1.0)*r10*x12246))+cj0+((r11*x12245)));
evalcond[2]=(((r01*x12245))+(((-1.0)*x12241))+(((-1.0)*r02*x12243))+(((-1.0)*r00*x12246)));
evalcond[3]=((((-1.0)*cj1*x12240))+((sj1*sj2))+((r22*x12238))+(((-1.0)*gconst11*r20*x12243))+((r21*x12244)));
evalcond[4]=((((-1.0)*cj0*sj1*x12240))+(((-1.0)*gconst11*r00*x12243))+((r01*x12244))+((r02*x12238))+(((-1.0)*cj0*x12242)));
evalcond[5]=(((r11*x12244))+((r12*x12238))+(((-1.0)*gconst11*r10*x12243))+(((-1.0)*sj0*sj1*x12240))+(((-1.0)*x12241*x12242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12247=((1.0)*sj0);
IkReal x12248=((1.0)*gconst10);
CheckValue<IkReal> x12249 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12247))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12247))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12248))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12249.valid){
continue;
}
CheckValue<IkReal> x12250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12248))+(((-1.0)*gconst11*r21)))),-1);
if(!x12250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12249.value)+(((1.5707963267949)*(x12250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12251=IKsin(j4);
IkReal x12252=IKcos(j4);
IkReal x12253=((1.0)*cj2);
IkReal x12254=((1.0)*sj0);
IkReal x12255=(cj1*sj2);
IkReal x12256=((1.0)*x12252);
IkReal x12257=(gconst10*x12252);
IkReal x12258=(gconst10*x12251);
IkReal x12259=((1.0)*gconst11*x12251);
evalcond[0]=((((-1.0)*r20*x12259))+((r21*x12258))+(((-1.0)*r22*x12256)));
evalcond[1]=(cj0+(((-1.0)*r12*x12256))+((r11*x12258))+(((-1.0)*r10*x12259)));
evalcond[2]=(((r01*x12258))+(((-1.0)*r02*x12256))+(((-1.0)*x12254))+(((-1.0)*r00*x12259)));
evalcond[3]=((((-1.0)*gconst11*r20*x12256))+((r22*x12251))+((sj1*sj2))+((r21*x12257))+(((-1.0)*cj1*x12253)));
evalcond[4]=((((-1.0)*gconst11*r00*x12256))+(((-1.0)*cj0*sj1*x12253))+((r01*x12257))+(((-1.0)*cj0*x12255))+((r02*x12251)));
evalcond[5]=(((r12*x12251))+((r11*x12257))+(((-1.0)*x12254*x12255))+(((-1.0)*gconst11*r10*x12256))+(((-1.0)*sj0*sj1*x12253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12260=((1.0)*gconst11);
CheckValue<IkReal> x12261 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12260))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12261.valid){
continue;
}
CheckValue<IkReal> x12262=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12260)))),-1);
if(!x12262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12261.value)+(((1.5707963267949)*(x12262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12263=IKsin(j4);
IkReal x12264=IKcos(j4);
IkReal x12265=((1.0)*cj2);
IkReal x12266=((1.0)*sj0);
IkReal x12267=(cj1*sj2);
IkReal x12268=((1.0)*x12264);
IkReal x12269=(gconst10*x12264);
IkReal x12270=(gconst10*x12263);
IkReal x12271=((1.0)*gconst11*x12263);
evalcond[0]=(((r21*x12270))+(((-1.0)*r22*x12268))+(((-1.0)*r20*x12271)));
evalcond[1]=((((-1.0)*r12*x12268))+cj0+(((-1.0)*r10*x12271))+((r11*x12270)));
evalcond[2]=((((-1.0)*r00*x12271))+(((-1.0)*r02*x12268))+(((-1.0)*x12266))+((r01*x12270)));
evalcond[3]=((((-1.0)*gconst11*r20*x12268))+((sj1*sj2))+((r21*x12269))+(((-1.0)*cj1*x12265))+((r22*x12263)));
evalcond[4]=((((-1.0)*gconst11*r00*x12268))+(((-1.0)*cj0*sj1*x12265))+((r01*x12269))+(((-1.0)*cj0*x12267))+((r02*x12263)));
evalcond[5]=(((r12*x12263))+((r11*x12269))+(((-1.0)*gconst11*r10*x12268))+(((-1.0)*x12266*x12267))+(((-1.0)*sj0*sj1*x12265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12272=((-1.0)*r11);
CheckValue<IkReal> x12275 = IKatan2WithCheck(IkReal(x12272),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12275.valid){
continue;
}
IkReal x12273=((1.0)*(x12275.value));
IkReal x12274=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12273)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12273)));
IkReal gconst10=(x12272*x12274);
IkReal gconst11=((1.0)*r10*x12274);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12276=gconst10*gconst10;
IkReal x12277=gconst11*gconst11;
IkReal x12278=(gconst10*r21);
IkReal x12279=(cj3*r00);
IkReal x12280=(r00*sj3);
IkReal x12281=((1.0)*gconst11);
IkReal x12282=(gconst10*r20);
IkReal x12283=(r01*sj3);
IkReal x12284=(cj3*gconst11*r01);
IkReal x12285=(r21*x12276);
IkReal x12286=(r20*x12277);
CheckValue<IkReal> x12287 = IKatan2WithCheck(IkReal((((r22*x12284))+((gconst10*r22*x12279)))),IkReal((((x12279*x12285))+((x12278*x12284))+(((-1.0)*x12279*x12281*x12282))+(((-1.0)*cj3*r01*x12286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12287.valid){
continue;
}
CheckValue<IkReal> x12288=IKPowWithIntegerCheck(IKsign((((x12283*x12285))+((x12280*x12286))+(((-1.0)*x12278*x12280*x12281))+(((-1.0)*x12281*x12282*x12283))+((r02*r22*sj3)))),-1);
if(!x12288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12287.value)+(((1.5707963267949)*(x12288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12289=IKsin(j4);
IkReal x12290=IKcos(j4);
IkReal x12291=(sj1*sj2);
IkReal x12292=(gconst10*sj3);
IkReal x12293=(cj3*gconst10);
IkReal x12294=(gconst11*r20);
IkReal x12295=(gconst11*r21);
IkReal x12296=(gconst11*r00);
IkReal x12297=(cj3*gconst11);
IkReal x12298=(gconst11*r10);
IkReal x12299=((1.0)*cj1);
IkReal x12300=(cj2*sj1);
IkReal x12301=(gconst11*sj3);
IkReal x12302=(cj2*x12299);
IkReal x12303=((1.0)*x12290);
IkReal x12304=((1.0)*x12289);
IkReal x12305=(gconst10*x12289);
IkReal x12306=(cj3*x12289);
IkReal x12307=(sj3*x12290);
evalcond[0]=(((r21*x12305))+(((-1.0)*x12294*x12304))+(((-1.0)*r22*x12303)));
evalcond[1]=(((r11*x12305))+(((-1.0)*x12298*x12304))+(((-1.0)*r12*x12303)));
evalcond[2]=((-1.0)+(((-1.0)*x12296*x12304))+(((-1.0)*r02*x12303))+((r01*x12305)));
evalcond[3]=(((r00*x12292))+(((-1.0)*cj3*x12296*x12303))+((r01*x12290*x12293))+((r01*x12301))+((r02*x12306)));
evalcond[4]=((((-1.0)*r01*x12292*x12303))+((r01*x12297))+((r00*x12293))+(((-1.0)*r02*sj3*x12304))+((x12296*x12307)));
evalcond[5]=(((r20*x12292))+((cj1*sj2))+((r21*x12290*x12293))+x12300+((sj3*x12295))+((r22*x12306))+(((-1.0)*cj3*x12294*x12303)));
evalcond[6]=(((r10*x12292))+((r11*x12301))+x12291+((r12*x12306))+((r11*x12290*x12293))+(((-1.0)*x12302))+(((-1.0)*r10*x12297*x12303)));
evalcond[7]=((((-1.0)*r22*sj3*x12304))+((r20*x12293))+((cj3*x12295))+x12291+((x12294*x12307))+(((-1.0)*x12302))+(((-1.0)*r21*x12292*x12303)));
evalcond[8]=((((-1.0)*r12*sj3*x12304))+((r10*x12293))+(((-1.0)*x12300))+((r11*x12297))+(((-1.0)*r11*x12292*x12303))+(((-1.0)*sj2*x12299))+((x12298*x12307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12308 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12308.valid){
continue;
}
CheckValue<IkReal> x12309=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12308.value)+(((1.5707963267949)*(x12309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12310=IKsin(j4);
IkReal x12311=IKcos(j4);
IkReal x12312=(sj1*sj2);
IkReal x12313=(gconst10*sj3);
IkReal x12314=(cj3*gconst10);
IkReal x12315=(gconst11*r20);
IkReal x12316=(gconst11*r21);
IkReal x12317=(gconst11*r00);
IkReal x12318=(cj3*gconst11);
IkReal x12319=(gconst11*r10);
IkReal x12320=((1.0)*cj1);
IkReal x12321=(cj2*sj1);
IkReal x12322=(gconst11*sj3);
IkReal x12323=(cj2*x12320);
IkReal x12324=((1.0)*x12311);
IkReal x12325=((1.0)*x12310);
IkReal x12326=(gconst10*x12310);
IkReal x12327=(cj3*x12310);
IkReal x12328=(sj3*x12311);
evalcond[0]=((((-1.0)*r22*x12324))+((r21*x12326))+(((-1.0)*x12315*x12325)));
evalcond[1]=((((-1.0)*x12319*x12325))+(((-1.0)*r12*x12324))+((r11*x12326)));
evalcond[2]=((-1.0)+((r01*x12326))+(((-1.0)*x12317*x12325))+(((-1.0)*r02*x12324)));
evalcond[3]=(((r01*x12322))+((r01*x12311*x12314))+(((-1.0)*cj3*x12317*x12324))+((r00*x12313))+((r02*x12327)));
evalcond[4]=(((x12317*x12328))+((r00*x12314))+(((-1.0)*r01*x12313*x12324))+((r01*x12318))+(((-1.0)*r02*sj3*x12325)));
evalcond[5]=(((sj3*x12316))+((cj1*sj2))+x12321+((r21*x12311*x12314))+((r22*x12327))+(((-1.0)*cj3*x12315*x12324))+((r20*x12313)));
evalcond[6]=(((r10*x12313))+(((-1.0)*r10*x12318*x12324))+x12312+(((-1.0)*x12323))+((r12*x12327))+((r11*x12311*x12314))+((r11*x12322)));
evalcond[7]=(x12312+((x12315*x12328))+(((-1.0)*x12323))+(((-1.0)*r21*x12313*x12324))+(((-1.0)*r22*sj3*x12325))+((r20*x12314))+((cj3*x12316)));
evalcond[8]=(((r10*x12314))+(((-1.0)*r11*x12313*x12324))+((r11*x12318))+((x12319*x12328))+(((-1.0)*r12*sj3*x12325))+(((-1.0)*sj2*x12320))+(((-1.0)*x12321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12329=((-1.0)*r11);
CheckValue<IkReal> x12332 = IKatan2WithCheck(IkReal(x12329),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12332.valid){
continue;
}
IkReal x12330=((1.0)*(x12332.value));
IkReal x12331=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12330)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12330)));
IkReal gconst10=(x12329*x12331);
IkReal gconst11=((1.0)*r10*x12331);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12333=gconst10*gconst10;
IkReal x12334=gconst11*gconst11;
IkReal x12335=(gconst10*r21);
IkReal x12336=(cj3*r00);
IkReal x12337=(r00*sj3);
IkReal x12338=((1.0)*gconst11);
IkReal x12339=(gconst10*r20);
IkReal x12340=(r01*sj3);
IkReal x12341=(cj3*gconst11*r01);
IkReal x12342=(r21*x12333);
IkReal x12343=(r20*x12334);
CheckValue<IkReal> x12344=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12335*x12337*x12338))+((x12340*x12342))+((x12337*x12343))+(((-1.0)*x12338*x12339*x12340))+((r02*r22*sj3)))),-1);
if(!x12344.valid){
continue;
}
CheckValue<IkReal> x12345 = IKatan2WithCheck(IkReal((((r22*x12341))+((gconst10*r22*x12336)))),IkReal((((x12336*x12342))+((x12335*x12341))+(((-1.0)*cj3*r01*x12343))+(((-1.0)*x12336*x12338*x12339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12344.value)))+(x12345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12346=IKsin(j4);
IkReal x12347=IKcos(j4);
IkReal x12348=(cj2*sj1);
IkReal x12349=(cj1*sj2);
IkReal x12350=(gconst10*sj3);
IkReal x12351=(cj3*gconst10);
IkReal x12352=(gconst11*r20);
IkReal x12353=(gconst11*r21);
IkReal x12354=(gconst11*r00);
IkReal x12355=(sj1*sj2);
IkReal x12356=(cj3*gconst11);
IkReal x12357=(gconst11*r10);
IkReal x12358=(cj1*cj2);
IkReal x12359=(gconst11*sj3);
IkReal x12360=((1.0)*x12347);
IkReal x12361=((1.0)*x12346);
IkReal x12362=(gconst10*x12346);
IkReal x12363=(cj3*x12346);
IkReal x12364=(sj3*x12347);
IkReal x12365=(x12349+x12348);
evalcond[0]=((((-1.0)*r22*x12360))+((r21*x12362))+(((-1.0)*x12352*x12361)));
evalcond[1]=(((r11*x12362))+(((-1.0)*x12357*x12361))+(((-1.0)*r12*x12360)));
evalcond[2]=((1.0)+(((-1.0)*x12354*x12361))+(((-1.0)*r02*x12360))+((r01*x12362)));
evalcond[3]=(((r01*x12359))+(((-1.0)*cj3*x12354*x12360))+((r00*x12350))+((r01*x12347*x12351))+((r02*x12363)));
evalcond[4]=((((-1.0)*r02*sj3*x12361))+(((-1.0)*r01*x12350*x12360))+((r01*x12356))+((r00*x12351))+((x12354*x12364)));
evalcond[5]=(((r20*x12350))+((r21*x12347*x12351))+x12365+((sj3*x12353))+(((-1.0)*cj3*x12352*x12360))+((r22*x12363)));
evalcond[6]=((((-1.0)*x12355))+((r11*x12347*x12351))+x12358+((r11*x12359))+(((-1.0)*r10*x12356*x12360))+((r10*x12350))+((r12*x12363)));
evalcond[7]=(x12365+((r11*x12356))+((x12357*x12364))+((r10*x12351))+(((-1.0)*r11*x12350*x12360))+(((-1.0)*r12*sj3*x12361)));
evalcond[8]=((((-1.0)*x12358))+(((-1.0)*r21*x12350*x12360))+((r20*x12351))+x12355+((cj3*x12353))+((x12352*x12364))+(((-1.0)*r22*sj3*x12361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12366=((1.0)*gconst11);
CheckValue<IkReal> x12367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12366))+(((-1.0)*gconst10*r20)))),-1);
if(!x12367.valid){
continue;
}
CheckValue<IkReal> x12368 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12367.value)))+(x12368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12369=IKsin(j4);
IkReal x12370=IKcos(j4);
IkReal x12371=(cj2*sj1);
IkReal x12372=(cj1*sj2);
IkReal x12373=(gconst10*sj3);
IkReal x12374=(cj3*gconst10);
IkReal x12375=(gconst11*r20);
IkReal x12376=(gconst11*r21);
IkReal x12377=(gconst11*r00);
IkReal x12378=(sj1*sj2);
IkReal x12379=(cj3*gconst11);
IkReal x12380=(gconst11*r10);
IkReal x12381=(cj1*cj2);
IkReal x12382=(gconst11*sj3);
IkReal x12383=((1.0)*x12370);
IkReal x12384=((1.0)*x12369);
IkReal x12385=(gconst10*x12369);
IkReal x12386=(cj3*x12369);
IkReal x12387=(sj3*x12370);
IkReal x12388=(x12372+x12371);
evalcond[0]=((((-1.0)*x12375*x12384))+((r21*x12385))+(((-1.0)*r22*x12383)));
evalcond[1]=(((r11*x12385))+(((-1.0)*x12380*x12384))+(((-1.0)*r12*x12383)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12383))+((r01*x12385))+(((-1.0)*x12377*x12384)));
evalcond[3]=(((r02*x12386))+((r01*x12382))+((r01*x12370*x12374))+(((-1.0)*cj3*x12377*x12383))+((r00*x12373)));
evalcond[4]=((((-1.0)*r02*sj3*x12384))+(((-1.0)*r01*x12373*x12383))+((x12377*x12387))+((r01*x12379))+((r00*x12374)));
evalcond[5]=(x12388+((sj3*x12376))+((r21*x12370*x12374))+(((-1.0)*cj3*x12375*x12383))+((r20*x12373))+((r22*x12386)));
evalcond[6]=(((r12*x12386))+((r11*x12382))+(((-1.0)*r10*x12379*x12383))+((r10*x12373))+x12381+((r11*x12370*x12374))+(((-1.0)*x12378)));
evalcond[7]=(((r11*x12379))+((x12380*x12387))+(((-1.0)*r11*x12373*x12383))+((r10*x12374))+x12388+(((-1.0)*r12*sj3*x12384)));
evalcond[8]=((((-1.0)*r21*x12373*x12383))+x12378+(((-1.0)*r22*sj3*x12384))+((cj3*x12376))+(((-1.0)*x12381))+((r20*x12374))+((x12375*x12387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12389=((-1.0)*r11);
IkReal x12390=((-1.0)*r10);
CheckValue<IkReal> x12392 = IKatan2WithCheck(IkReal(x12389),IkReal(x12390),IKFAST_ATAN2_MAGTHRESH);
if(!x12392.valid){
continue;
}
IkReal x12391=((1.0)*(x12392.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12391)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12390);
rxp1_1=(px*r21);
rxp1_2=(px*x12389);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12391)));
IkReal gconst10=x12389;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12393=((-1.0)*r11);
IkReal x12394=((-1.0)*r10);
CheckValue<IkReal> x12396 = IKatan2WithCheck(IkReal(x12393),IkReal(x12394),IKFAST_ATAN2_MAGTHRESH);
if(!x12396.valid){
continue;
}
IkReal x12395=((1.0)*(x12396.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12395)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12394);
rxp1_1=(px*r21);
rxp1_2=(px*x12393);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12395)));
IkReal gconst10=x12393;
IkReal gconst11=((1.0)*r10);
IkReal x12397=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x12397))+(((-1.0)*r11*r21*x12397)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12398=((-1.0)*r11);
IkReal x12399=((-1.0)*r10);
CheckValue<IkReal> x12401 = IKatan2WithCheck(IkReal(x12398),IkReal(x12399),IKFAST_ATAN2_MAGTHRESH);
if(!x12401.valid){
continue;
}
IkReal x12400=((1.0)*(x12401.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12400)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12399);
rxp1_1=(px*r21);
rxp1_2=(px*x12398);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12400)));
IkReal gconst10=x12398;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12403=IKPowWithIntegerCheck(r02,-1);
if(!x12403.valid){
continue;
}
IkReal x12402=x12403.value;
CheckValue<IkReal> x12404=IKPowWithIntegerCheck(cj3,-1);
if(!x12404.valid){
continue;
}
if( IKabs((x12402*(x12404.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12402)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12402*(x12404.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12402))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12402*(x12404.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12402));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12405=IKsin(j4);
IkReal x12406=IKcos(j4);
IkReal x12407=(cj3*r10);
IkReal x12408=((1.0)*gconst11);
IkReal x12409=(sj1*sj2);
IkReal x12410=(gconst11*sj3);
IkReal x12411=(cj3*r11);
IkReal x12412=(cj2*sj1);
IkReal x12413=(gconst10*r20);
IkReal x12414=(gconst10*sj3);
IkReal x12415=((1.0)*cj0);
IkReal x12416=((1.0)*sj0);
IkReal x12417=(cj1*sj2);
IkReal x12418=(cj3*r21);
IkReal x12419=((1.0)*cj1*cj2);
IkReal x12420=(r20*x12406);
IkReal x12421=(gconst10*x12405);
IkReal x12422=(gconst10*x12406);
IkReal x12423=(r02*x12405);
IkReal x12424=((1.0)*x12406);
evalcond[0]=((((-1.0)*x12416))+(((-1.0)*r02*x12424)));
evalcond[1]=(((r21*x12421))+(((-1.0)*r20*x12405*x12408)));
evalcond[2]=(cj0+(((-1.0)*r10*x12405*x12408))+((r11*x12421)));
evalcond[3]=((((-1.0)*cj1*cj2*x12415))+((cj3*x12423))+((cj0*x12409)));
evalcond[4]=((((-1.0)*x12415*x12417))+(((-1.0)*sj3*x12423))+(((-1.0)*x12412*x12415)));
evalcond[5]=(((sj3*x12413))+((r21*x12410))+(((-1.0)*cj3*x12408*x12420))+((x12418*x12422))+x12412+x12417);
evalcond[6]=(((cj3*x12413))+((gconst11*x12418))+(((-1.0)*r21*x12414*x12424))+(((-1.0)*x12419))+((x12410*x12420))+x12409);
evalcond[7]=(((r10*x12414))+(((-1.0)*cj1*cj2*x12416))+((r11*x12410))+((sj0*x12409))+((x12411*x12422))+(((-1.0)*x12406*x12407*x12408)));
evalcond[8]=((((-1.0)*x12416*x12417))+((gconst11*x12411))+((gconst10*x12407))+(((-1.0)*r11*x12414*x12424))+(((-1.0)*x12412*x12416))+((r10*x12406*x12410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12425=((1.0)*r20);
IkReal x12426=((1.0)*gconst11);
CheckValue<IkReal> x12427=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12426))),-1);
if(!x12427.valid){
continue;
}
CheckValue<IkReal> x12428=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12425))+((cj3*gconst10*r21))),-1);
if(!x12428.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12427.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12428.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12426))+(((-1.0)*gconst10*sj3*x12425)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12427.value)))+IKsqr(((x12428.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12426))+(((-1.0)*gconst10*sj3*x12425))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12427.value)), ((x12428.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12426))+(((-1.0)*gconst10*sj3*x12425))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12429=IKsin(j4);
IkReal x12430=IKcos(j4);
IkReal x12431=(cj3*r10);
IkReal x12432=((1.0)*gconst11);
IkReal x12433=(sj1*sj2);
IkReal x12434=(gconst11*sj3);
IkReal x12435=(cj3*r11);
IkReal x12436=(cj2*sj1);
IkReal x12437=(gconst10*r20);
IkReal x12438=(gconst10*sj3);
IkReal x12439=((1.0)*cj0);
IkReal x12440=((1.0)*sj0);
IkReal x12441=(cj1*sj2);
IkReal x12442=(cj3*r21);
IkReal x12443=((1.0)*cj1*cj2);
IkReal x12444=(r20*x12430);
IkReal x12445=(gconst10*x12429);
IkReal x12446=(gconst10*x12430);
IkReal x12447=(r02*x12429);
IkReal x12448=((1.0)*x12430);
evalcond[0]=((((-1.0)*r02*x12448))+(((-1.0)*x12440)));
evalcond[1]=(((r21*x12445))+(((-1.0)*r20*x12429*x12432)));
evalcond[2]=(cj0+((r11*x12445))+(((-1.0)*r10*x12429*x12432)));
evalcond[3]=(((cj0*x12433))+((cj3*x12447))+(((-1.0)*cj1*cj2*x12439)));
evalcond[4]=((((-1.0)*sj3*x12447))+(((-1.0)*x12436*x12439))+(((-1.0)*x12439*x12441)));
evalcond[5]=(((r21*x12434))+((x12442*x12446))+x12436+x12441+((sj3*x12437))+(((-1.0)*cj3*x12432*x12444)));
evalcond[6]=(((x12434*x12444))+(((-1.0)*r21*x12438*x12448))+(((-1.0)*x12443))+((cj3*x12437))+x12433+((gconst11*x12442)));
evalcond[7]=((((-1.0)*x12430*x12431*x12432))+((sj0*x12433))+((r10*x12438))+((x12435*x12446))+((r11*x12434))+(((-1.0)*cj1*cj2*x12440)));
evalcond[8]=((((-1.0)*x12440*x12441))+((r10*x12430*x12434))+((gconst10*x12431))+(((-1.0)*x12436*x12440))+((gconst11*x12435))+(((-1.0)*r11*x12438*x12448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12449=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12449.valid){
continue;
}
CheckValue<IkReal> x12450=IKPowWithIntegerCheck(r02,-1);
if(!x12450.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12449.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12450.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12449.value)))+IKsqr(((-1.0)*sj0*(x12450.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12449.value)), ((-1.0)*sj0*(x12450.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12451=IKsin(j4);
IkReal x12452=IKcos(j4);
IkReal x12453=(cj3*r10);
IkReal x12454=((1.0)*gconst11);
IkReal x12455=(sj1*sj2);
IkReal x12456=(gconst11*sj3);
IkReal x12457=(cj3*r11);
IkReal x12458=(cj2*sj1);
IkReal x12459=(gconst10*r20);
IkReal x12460=(gconst10*sj3);
IkReal x12461=((1.0)*cj0);
IkReal x12462=((1.0)*sj0);
IkReal x12463=(cj1*sj2);
IkReal x12464=(cj3*r21);
IkReal x12465=((1.0)*cj1*cj2);
IkReal x12466=(r20*x12452);
IkReal x12467=(gconst10*x12451);
IkReal x12468=(gconst10*x12452);
IkReal x12469=(r02*x12451);
IkReal x12470=((1.0)*x12452);
evalcond[0]=((((-1.0)*r02*x12470))+(((-1.0)*x12462)));
evalcond[1]=((((-1.0)*r20*x12451*x12454))+((r21*x12467)));
evalcond[2]=(cj0+((r11*x12467))+(((-1.0)*r10*x12451*x12454)));
evalcond[3]=(((cj3*x12469))+((cj0*x12455))+(((-1.0)*cj1*cj2*x12461)));
evalcond[4]=((((-1.0)*sj3*x12469))+(((-1.0)*x12458*x12461))+(((-1.0)*x12461*x12463)));
evalcond[5]=(((x12464*x12468))+(((-1.0)*cj3*x12454*x12466))+((sj3*x12459))+x12463+x12458+((r21*x12456)));
evalcond[6]=(((gconst11*x12464))+(((-1.0)*r21*x12460*x12470))+((cj3*x12459))+(((-1.0)*x12465))+((x12456*x12466))+x12455);
evalcond[7]=(((x12457*x12468))+((r11*x12456))+(((-1.0)*x12452*x12453*x12454))+((sj0*x12455))+(((-1.0)*cj1*cj2*x12462))+((r10*x12460)));
evalcond[8]=((((-1.0)*r11*x12460*x12470))+(((-1.0)*x12458*x12462))+(((-1.0)*x12462*x12463))+((r10*x12452*x12456))+((gconst10*x12453))+((gconst11*x12457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12471=((-1.0)*r11);
CheckValue<IkReal> x12474 = IKatan2WithCheck(IkReal(x12471),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12474.valid){
continue;
}
IkReal x12472=((1.0)*(x12474.value));
IkReal x12473=x11797;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12472)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12472)));
IkReal gconst10=(x12471*x12473);
IkReal gconst11=((1.0)*r10*x12473);
IkReal x12475=r12*r12;
IkReal x12476=((1.0)*sj0);
IkReal x12477=(cj0*r02);
IkReal x12478=x11797;
j4eval[0]=((IKabs(((((-1.0)*x12477))+(((-1.0)*r12*x12476)))))+(IKabs(((((-1.0)*x12476*x12478))+((r12*x12477*x12478))+((sj0*x12475*x12478))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12479=((1.0)*r12);
IkReal x12480=(sj1*sj2);
IkReal x12481=((1.0)*r21);
IkReal x12482=(cj3*gconst11);
IkReal x12483=(r11*sj3);
IkReal x12484=(gconst11*r20);
IkReal x12485=((1.0)*sj3);
IkReal x12486=(cj1*cj2);
IkReal x12487=(gconst10*r21*sj3);
IkReal x12488=(cj3*gconst10*r20);
CheckValue<IkReal> x12489=IKPowWithIntegerCheck((((gconst10*x12483*x12484))+(((-1.0)*x12481*x12483*(gconst10*gconst10)))+((gconst11*r10*x12487))+(((-1.0)*gconst11*r10*x12484*x12485))),-1);
if(!x12489.valid){
continue;
}
CheckValue<IkReal> x12490=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12481))+((sj3*x12484))),-1);
if(!x12490.valid){
continue;
}
if( IKabs(((x12489.value)*(((((-1.0)*x12479*x12488))+(((-1.0)*x12479*x12480))+((cj0*x12487))+((r12*x12486))+(((-1.0)*r21*x12479*x12482))+(((-1.0)*cj0*x12484*x12485)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12490.value)*(((((-1.0)*x12480))+(((-1.0)*x12488))+(((-1.0)*x12481*x12482))+x12486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12489.value)*(((((-1.0)*x12479*x12488))+(((-1.0)*x12479*x12480))+((cj0*x12487))+((r12*x12486))+(((-1.0)*r21*x12479*x12482))+(((-1.0)*cj0*x12484*x12485))))))+IKsqr(((x12490.value)*(((((-1.0)*x12480))+(((-1.0)*x12488))+(((-1.0)*x12481*x12482))+x12486))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12489.value)*(((((-1.0)*x12479*x12488))+(((-1.0)*x12479*x12480))+((cj0*x12487))+((r12*x12486))+(((-1.0)*r21*x12479*x12482))+(((-1.0)*cj0*x12484*x12485))))), ((x12490.value)*(((((-1.0)*x12480))+(((-1.0)*x12488))+(((-1.0)*x12481*x12482))+x12486))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12491=IKsin(j4);
IkReal x12492=IKcos(j4);
IkReal x12493=(cj3*r10);
IkReal x12494=(gconst11*r20);
IkReal x12495=(gconst11*sj3);
IkReal x12496=(sj1*sj2);
IkReal x12497=(cj3*r11);
IkReal x12498=(r10*sj3);
IkReal x12499=(gconst10*r01);
IkReal x12500=(gconst10*sj3);
IkReal x12501=(cj2*sj1);
IkReal x12502=((1.0)*sj0);
IkReal x12503=(cj1*sj2);
IkReal x12504=(gconst10*r21);
IkReal x12505=(cj3*gconst10);
IkReal x12506=(cj3*gconst11);
IkReal x12507=((1.0)*cj0);
IkReal x12508=((1.0)*x12491);
IkReal x12509=((1.0)*cj1*cj2);
IkReal x12510=(gconst11*x12492);
IkReal x12511=(sj3*x12492);
IkReal x12512=(gconst10*x12491);
IkReal x12513=((1.0)*x12492);
IkReal x12514=(cj3*x12492);
IkReal x12515=(cj3*x12491);
evalcond[0]=((((-1.0)*x12494*x12508))+((x12491*x12504)));
evalcond[1]=((((-1.0)*r12*x12513))+cj0+(((-1.0)*gconst11*r10*x12508))+((r11*x12512)));
evalcond[2]=((((-1.0)*gconst11*r00*x12508))+(((-1.0)*x12502))+(((-1.0)*r02*x12513))+((x12491*x12499)));
evalcond[3]=(((r20*x12500))+((r21*x12495))+((x12504*x12514))+x12501+x12503+(((-1.0)*cj3*x12494*x12513)));
evalcond[4]=((((-1.0)*x12509))+(((-1.0)*r21*x12500*x12513))+((r20*x12505))+((r21*x12506))+((x12494*x12511))+x12496);
evalcond[5]=(((r01*x12495))+((x12499*x12514))+((r00*x12500))+(((-1.0)*r00*x12506*x12513))+(((-1.0)*cj1*cj2*x12507))+((cj0*x12496))+((r02*x12515)));
evalcond[6]=(((r12*x12515))+((sj0*x12496))+(((-1.0)*cj1*cj2*x12502))+((gconst10*x12498))+(((-1.0)*x12493*x12510))+((gconst10*x12492*x12497))+((r11*x12495)));
evalcond[7]=((((-1.0)*r02*sj3*x12508))+((r00*x12492*x12495))+((r01*x12506))+((r00*x12505))+(((-1.0)*x12501*x12507))+(((-1.0)*x12499*x12511))+(((-1.0)*x12503*x12507)));
evalcond[8]=((((-1.0)*r11*x12500*x12513))+((gconst11*x12497))+((r10*x12492*x12495))+(((-1.0)*x12501*x12502))+(((-1.0)*r12*sj3*x12508))+((gconst10*x12493))+(((-1.0)*x12502*x12503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12516=((1.0)*sj0);
IkReal x12517=((1.0)*gconst10);
CheckValue<IkReal> x12518=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12517)))),-1);
if(!x12518.valid){
continue;
}
CheckValue<IkReal> x12519 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12516))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12517))+(((-1.0)*gconst10*r11*x12516))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12518.value)))+(x12519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12520=IKsin(j4);
IkReal x12521=IKcos(j4);
IkReal x12522=(cj3*r10);
IkReal x12523=(gconst11*r20);
IkReal x12524=(gconst11*sj3);
IkReal x12525=(sj1*sj2);
IkReal x12526=(cj3*r11);
IkReal x12527=(r10*sj3);
IkReal x12528=(gconst10*r01);
IkReal x12529=(gconst10*sj3);
IkReal x12530=(cj2*sj1);
IkReal x12531=((1.0)*sj0);
IkReal x12532=(cj1*sj2);
IkReal x12533=(gconst10*r21);
IkReal x12534=(cj3*gconst10);
IkReal x12535=(cj3*gconst11);
IkReal x12536=((1.0)*cj0);
IkReal x12537=((1.0)*x12520);
IkReal x12538=((1.0)*cj1*cj2);
IkReal x12539=(gconst11*x12521);
IkReal x12540=(sj3*x12521);
IkReal x12541=(gconst10*x12520);
IkReal x12542=((1.0)*x12521);
IkReal x12543=(cj3*x12521);
IkReal x12544=(cj3*x12520);
evalcond[0]=((((-1.0)*x12523*x12537))+((x12520*x12533)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12537))+((r11*x12541))+(((-1.0)*r12*x12542)));
evalcond[2]=(((x12520*x12528))+(((-1.0)*gconst11*r00*x12537))+(((-1.0)*x12531))+(((-1.0)*r02*x12542)));
evalcond[3]=((((-1.0)*cj3*x12523*x12542))+((x12533*x12543))+((r21*x12524))+((r20*x12529))+x12530+x12532);
evalcond[4]=(((x12523*x12540))+((r20*x12534))+((r21*x12535))+(((-1.0)*r21*x12529*x12542))+x12525+(((-1.0)*x12538)));
evalcond[5]=(((cj0*x12525))+(((-1.0)*cj1*cj2*x12536))+((r02*x12544))+((r01*x12524))+((r00*x12529))+(((-1.0)*r00*x12535*x12542))+((x12528*x12543)));
evalcond[6]=(((sj0*x12525))+((r12*x12544))+((gconst10*x12521*x12526))+(((-1.0)*cj1*cj2*x12531))+((gconst10*x12527))+(((-1.0)*x12522*x12539))+((r11*x12524)));
evalcond[7]=(((r00*x12534))+((r00*x12521*x12524))+(((-1.0)*x12530*x12536))+(((-1.0)*x12532*x12536))+(((-1.0)*x12528*x12540))+(((-1.0)*r02*sj3*x12537))+((r01*x12535)));
evalcond[8]=(((r10*x12521*x12524))+(((-1.0)*x12530*x12531))+((gconst11*x12526))+((gconst10*x12522))+(((-1.0)*r12*sj3*x12537))+(((-1.0)*r11*x12529*x12542))+(((-1.0)*x12531*x12532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12545=gconst10*gconst10;
IkReal x12546=r21*r21;
IkReal x12547=gconst11*gconst11;
IkReal x12548=r20*r20;
IkReal x12549=((1.0)*cj3);
IkReal x12550=(r20*sj3);
IkReal x12551=(gconst10*gconst11);
IkReal x12552=(cj2*sj1);
IkReal x12553=(gconst10*r21);
IkReal x12554=(cj1*sj2);
IkReal x12555=((1.0)*gconst11*r20);
CheckValue<IkReal> x12556=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12547*x12548*x12549))+(((-1.0)*x12545*x12546*x12549))+(((2.0)*cj3*r20*r21*x12551))+(((-1.0)*x12549*(r22*r22))))),-1);
if(!x12556.valid){
continue;
}
CheckValue<IkReal> x12557 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x12550))+((r22*x12552))+((r22*x12554)))),IkReal((((r21*x12545*x12550))+((sj3*x12546*x12551))+((x12553*x12554))+(((-1.0)*x12554*x12555))+(((-1.0)*sj3*x12548*x12551))+((x12552*x12553))+(((-1.0)*x12552*x12555))+(((-1.0)*r21*x12547*x12550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12556.value)))+(x12557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12558=IKsin(j4);
IkReal x12559=IKcos(j4);
IkReal x12560=(cj3*r10);
IkReal x12561=(gconst11*r20);
IkReal x12562=(gconst11*sj3);
IkReal x12563=(sj1*sj2);
IkReal x12564=(gconst11*r00);
IkReal x12565=(cj3*r11);
IkReal x12566=(gconst10*sj3);
IkReal x12567=(cj2*sj1);
IkReal x12568=(cj3*r01);
IkReal x12569=((1.0)*sj0);
IkReal x12570=(cj1*sj2);
IkReal x12571=(cj3*r21);
IkReal x12572=(cj3*gconst10);
IkReal x12573=((1.0)*cj0);
IkReal x12574=((1.0)*x12559);
IkReal x12575=((1.0)*x12558);
IkReal x12576=((1.0)*cj1*cj2);
IkReal x12577=(cj3*x12558);
IkReal x12578=(gconst10*x12558);
IkReal x12579=(gconst10*x12559);
evalcond[0]=(((r21*x12578))+(((-1.0)*x12561*x12575))+(((-1.0)*r22*x12574)));
evalcond[1]=((((-1.0)*gconst11*r10*x12575))+cj0+(((-1.0)*r12*x12574))+((r11*x12578)));
evalcond[2]=((((-1.0)*x12564*x12575))+(((-1.0)*r02*x12574))+((r01*x12578))+(((-1.0)*x12569)));
evalcond[3]=((((-1.0)*cj3*x12561*x12574))+((r22*x12577))+((r20*x12566))+((x12571*x12579))+((r21*x12562))+x12567+x12570);
evalcond[4]=(((gconst11*x12571))+(((-1.0)*r21*x12566*x12574))+(((-1.0)*x12576))+((sj3*x12559*x12561))+(((-1.0)*r22*sj3*x12575))+((r20*x12572))+x12563);
evalcond[5]=((((-1.0)*cj3*x12564*x12574))+((r02*x12577))+((x12568*x12579))+((r01*x12562))+((r00*x12566))+(((-1.0)*cj1*cj2*x12573))+((cj0*x12563)));
evalcond[6]=(((r11*x12562))+((sj0*x12563))+((x12565*x12579))+(((-1.0)*gconst11*x12560*x12574))+((r12*x12577))+((r10*x12566))+(((-1.0)*cj1*cj2*x12569)));
evalcond[7]=(((gconst11*x12568))+(((-1.0)*x12570*x12573))+(((-1.0)*x12567*x12573))+((r00*x12572))+((r00*x12559*x12562))+(((-1.0)*r02*sj3*x12575))+(((-1.0)*r01*x12566*x12574)));
evalcond[8]=(((r10*x12559*x12562))+(((-1.0)*x12567*x12569))+((gconst11*x12565))+(((-1.0)*r11*x12566*x12574))+(((-1.0)*x12569*x12570))+((gconst10*x12560))+(((-1.0)*r12*sj3*x12575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12580=((1.0)*sj0);
IkReal x12581=((1.0)*gconst10);
CheckValue<IkReal> x12582 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12580))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12580))+(((-1.0)*cj0*r01*x12581))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12582.valid){
continue;
}
CheckValue<IkReal> x12583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12581))+(((-1.0)*gconst11*r21)))),-1);
if(!x12583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12582.value)+(((1.5707963267949)*(x12583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12584=IKsin(j4);
IkReal x12585=IKcos(j4);
IkReal x12586=(cj3*r10);
IkReal x12587=(gconst11*r20);
IkReal x12588=(gconst11*sj3);
IkReal x12589=(sj1*sj2);
IkReal x12590=(gconst11*r00);
IkReal x12591=(cj3*r11);
IkReal x12592=(gconst10*sj3);
IkReal x12593=(cj2*sj1);
IkReal x12594=(cj3*r01);
IkReal x12595=((1.0)*sj0);
IkReal x12596=(cj1*sj2);
IkReal x12597=(cj3*r21);
IkReal x12598=(cj3*gconst10);
IkReal x12599=((1.0)*cj0);
IkReal x12600=((1.0)*x12585);
IkReal x12601=((1.0)*x12584);
IkReal x12602=((1.0)*cj1*cj2);
IkReal x12603=(cj3*x12584);
IkReal x12604=(gconst10*x12584);
IkReal x12605=(gconst10*x12585);
evalcond[0]=((((-1.0)*x12587*x12601))+(((-1.0)*r22*x12600))+((r21*x12604)));
evalcond[1]=(cj0+((r11*x12604))+(((-1.0)*gconst11*r10*x12601))+(((-1.0)*r12*x12600)));
evalcond[2]=(((r01*x12604))+(((-1.0)*x12590*x12601))+(((-1.0)*x12595))+(((-1.0)*r02*x12600)));
evalcond[3]=((((-1.0)*cj3*x12587*x12600))+((r21*x12588))+((r22*x12603))+((x12597*x12605))+x12596+x12593+((r20*x12592)));
evalcond[4]=((((-1.0)*r22*sj3*x12601))+((gconst11*x12597))+(((-1.0)*x12602))+((sj3*x12585*x12587))+(((-1.0)*r21*x12592*x12600))+x12589+((r20*x12598)));
evalcond[5]=(((r01*x12588))+((cj0*x12589))+((r00*x12592))+(((-1.0)*cj3*x12590*x12600))+(((-1.0)*cj1*cj2*x12599))+((r02*x12603))+((x12594*x12605)));
evalcond[6]=(((sj0*x12589))+((x12591*x12605))+(((-1.0)*gconst11*x12586*x12600))+((r12*x12603))+(((-1.0)*cj1*cj2*x12595))+((r11*x12588))+((r10*x12592)));
evalcond[7]=((((-1.0)*x12596*x12599))+((r00*x12598))+((gconst11*x12594))+(((-1.0)*r02*sj3*x12601))+(((-1.0)*x12593*x12599))+(((-1.0)*r01*x12592*x12600))+((r00*x12585*x12588)));
evalcond[8]=((((-1.0)*r11*x12592*x12600))+((gconst11*x12591))+(((-1.0)*x12595*x12596))+((r10*x12585*x12588))+((gconst10*x12586))+(((-1.0)*x12593*x12595))+(((-1.0)*r12*sj3*x12601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12606=((1.0)*gconst11);
CheckValue<IkReal> x12607=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12606)))),-1);
if(!x12607.valid){
continue;
}
CheckValue<IkReal> x12608 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12607.value)))+(x12608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12609=IKsin(j4);
IkReal x12610=IKcos(j4);
IkReal x12611=(cj3*r10);
IkReal x12612=(gconst11*r20);
IkReal x12613=(gconst11*sj3);
IkReal x12614=(sj1*sj2);
IkReal x12615=(gconst11*r00);
IkReal x12616=(cj3*r11);
IkReal x12617=(gconst10*sj3);
IkReal x12618=(cj2*sj1);
IkReal x12619=(cj3*r01);
IkReal x12620=((1.0)*sj0);
IkReal x12621=(cj1*sj2);
IkReal x12622=(cj3*r21);
IkReal x12623=(cj3*gconst10);
IkReal x12624=((1.0)*cj0);
IkReal x12625=((1.0)*x12610);
IkReal x12626=((1.0)*x12609);
IkReal x12627=((1.0)*cj1*cj2);
IkReal x12628=(cj3*x12609);
IkReal x12629=(gconst10*x12609);
IkReal x12630=(gconst10*x12610);
evalcond[0]=((((-1.0)*r22*x12625))+((r21*x12629))+(((-1.0)*x12612*x12626)));
evalcond[1]=(cj0+(((-1.0)*r12*x12625))+(((-1.0)*gconst11*r10*x12626))+((r11*x12629)));
evalcond[2]=((((-1.0)*x12620))+(((-1.0)*r02*x12625))+(((-1.0)*x12615*x12626))+((r01*x12629)));
evalcond[3]=((((-1.0)*cj3*x12612*x12625))+((r22*x12628))+((r21*x12613))+((x12622*x12630))+((r20*x12617))+x12621+x12618);
evalcond[4]=((((-1.0)*x12627))+((gconst11*x12622))+(((-1.0)*r21*x12617*x12625))+x12614+((r20*x12623))+((sj3*x12610*x12612))+(((-1.0)*r22*sj3*x12626)));
evalcond[5]=((((-1.0)*cj3*x12615*x12625))+((r02*x12628))+((x12619*x12630))+(((-1.0)*cj1*cj2*x12624))+((r00*x12617))+((r01*x12613))+((cj0*x12614)));
evalcond[6]=((((-1.0)*gconst11*x12611*x12625))+((sj0*x12614))+((x12616*x12630))+(((-1.0)*cj1*cj2*x12620))+((r11*x12613))+((r12*x12628))+((r10*x12617)));
evalcond[7]=((((-1.0)*r01*x12617*x12625))+(((-1.0)*x12621*x12624))+((gconst11*x12619))+((r00*x12610*x12613))+(((-1.0)*r02*sj3*x12626))+((r00*x12623))+(((-1.0)*x12618*x12624)));
evalcond[8]=((((-1.0)*r11*x12617*x12625))+(((-1.0)*x12620*x12621))+((gconst11*x12616))+((r10*x12610*x12613))+((gconst10*x12611))+(((-1.0)*x12618*x12620))+(((-1.0)*r12*sj3*x12626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12631=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12631;
j4eval[1]=IKsign(x12631);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12632=((1.0)*cj5);
IkReal x12633=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12632)));
j4eval[0]=x12633;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12632))+((r21*sj5))))));
j4eval[2]=IKsign(x12633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12634=cj5*cj5;
IkReal x12635=(cj3*r21);
IkReal x12636=(cj5*sj5);
IkReal x12637=((1.0)*cj3);
IkReal x12638=((((-1.0)*r12*r22*x12637))+(((-1.0)*r11*x12635))+((cj3*r11*r20*x12636))+(((-1.0)*r10*r20*x12634*x12637))+((r10*x12635*x12636))+((r11*x12634*x12635)));
j4eval[0]=x12638;
j4eval[1]=IKsign(x12638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12639=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12639;
j4eval[1]=IKsign(x12639);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12640=((1.0)*cj5);
IkReal x12641=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12640)));
j4eval[0]=x12641;
j4eval[1]=((IKabs(((((-1.0)*r20*x12640))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12642=cj5*cj5;
IkReal x12643=r11*r11;
IkReal x12644=(r11*sj5);
IkReal x12645=(cj5*r10);
IkReal x12646=((r12*r12)+x12643+((x12642*(r10*r10)))+(((-1.0)*x12642*x12643))+(((-2.0)*x12644*x12645)));
j4eval[0]=x12646;
j4eval[1]=IKsign(x12646);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12644))+x12645))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12647=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12647);
rxp1_1=(px*r21);
rxp1_2=(r11*x12647);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12648=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12648);
rxp1_1=(px*r21);
rxp1_2=(r11*x12648);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12649=((1.0)*sj1);
CheckValue<IkReal> x12650=IKPowWithIntegerCheck(r02,-1);
if(!x12650.valid){
continue;
}
CheckValue<IkReal> x12651=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12651.valid){
continue;
}
if( IKabs(((x12650.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12651.value)*(((((-1.0)*sj2*x12649))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12650.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12649))))))+IKsqr(((x12651.value)*(((((-1.0)*sj2*x12649))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12650.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12649))))), ((x12651.value)*(((((-1.0)*sj2*x12649))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12652=IKsin(j4);
IkReal x12653=IKcos(j4);
IkReal x12654=(cj5*r20);
IkReal x12655=((1.0)*cj2);
IkReal x12656=(cj5*r10);
IkReal x12657=((1.0)*x12652);
IkReal x12658=(sj5*x12652);
IkReal x12659=((1.0)*sj5*x12653);
evalcond[0]=((-1.0)*r02*x12653);
evalcond[1]=(((r21*x12658))+(((-1.0)*x12654*x12657)));
evalcond[2]=((((-1.0)*r11*x12659))+((x12653*x12656)));
evalcond[3]=((1.0)+(((-1.0)*x12656*x12657))+((r11*x12658)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12657))+(((-1.0)*sj1*x12655)));
evalcond[5]=((((-1.0)*cj1*x12655))+((sj1*sj2))+(((-1.0)*r21*x12659))+((x12653*x12654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12660=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12660.valid){
continue;
}
CheckValue<IkReal> x12661=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12661.valid){
continue;
}
if( IKabs(((-1.0)*(x12660.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12661.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12660.value)))+IKsqr(((x12661.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12660.value)), ((x12661.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12662=IKsin(j4);
IkReal x12663=IKcos(j4);
IkReal x12664=(cj5*r20);
IkReal x12665=((1.0)*cj2);
IkReal x12666=(cj5*r10);
IkReal x12667=((1.0)*x12662);
IkReal x12668=(sj5*x12662);
IkReal x12669=((1.0)*sj5*x12663);
evalcond[0]=((-1.0)*r02*x12663);
evalcond[1]=(((r21*x12668))+(((-1.0)*x12664*x12667)));
evalcond[2]=(((x12663*x12666))+(((-1.0)*r11*x12669)));
evalcond[3]=((1.0)+(((-1.0)*x12666*x12667))+((r11*x12668)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12667))+(((-1.0)*sj1*x12665)));
evalcond[5]=((((-1.0)*cj1*x12665))+((sj1*sj2))+((x12663*x12664))+(((-1.0)*r21*x12669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12670=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12670);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12670);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12671=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12671);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12671);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12672=IKPowWithIntegerCheck(r22,-1);
if(!x12672.valid){
continue;
}
CheckValue<IkReal> x12673=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12673.valid){
continue;
}
if( IKabs(((x12672.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12673.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12672.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12673.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12672.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12673.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12674=IKsin(j4);
IkReal x12675=IKcos(j4);
IkReal x12676=((1.0)*cj2);
IkReal x12677=(cj5*x12675);
IkReal x12678=(sj5*x12674);
IkReal x12679=((1.0)*sj5*x12675);
IkReal x12680=((1.0)*cj5*x12674);
evalcond[0]=((-1.0)*r22*x12675);
evalcond[1]=((((-1.0)*r00*x12680))+((r01*x12678)));
evalcond[2]=((((-1.0)*cj1*x12676))+(((-1.0)*r22*x12674))+((sj1*sj2)));
evalcond[3]=(((r10*x12677))+(((-1.0)*r11*x12679)));
evalcond[4]=((1.0)+((r11*x12678))+(((-1.0)*r10*x12680)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x12679))+((r00*x12677))+(((-1.0)*sj1*x12676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12681=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12681.valid){
continue;
}
CheckValue<IkReal> x12682=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12682.valid){
continue;
}
if( IKabs(((-1.0)*(x12681.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12682.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12681.value)))+IKsqr(((x12682.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12681.value)), ((x12682.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12683=IKsin(j4);
IkReal x12684=IKcos(j4);
IkReal x12685=((1.0)*cj2);
IkReal x12686=(cj5*x12684);
IkReal x12687=(sj5*x12683);
IkReal x12688=((1.0)*sj5*x12684);
IkReal x12689=((1.0)*cj5*x12683);
evalcond[0]=((-1.0)*r22*x12684);
evalcond[1]=(((r01*x12687))+(((-1.0)*r00*x12689)));
evalcond[2]=((((-1.0)*cj1*x12685))+((sj1*sj2))+(((-1.0)*r22*x12683)));
evalcond[3]=(((r10*x12686))+(((-1.0)*r11*x12688)));
evalcond[4]=((1.0)+((r11*x12687))+(((-1.0)*r10*x12689)));
evalcond[5]=((((-1.0)*sj1*x12685))+((r00*x12686))+(((-1.0)*r01*x12688))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12690=cj5*cj5;
IkReal x12691=r11*r11;
IkReal x12692=(cj5*r10);
IkReal x12693=(r11*sj5);
CheckValue<IkReal> x12694 = IKatan2WithCheck(IkReal((x12692+(((-1.0)*x12693)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12694.valid){
continue;
}
CheckValue<IkReal> x12695=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12692*x12693))+(((-1.0)*x12690*x12691))+((x12690*(r10*r10)))+x12691)),-1);
if(!x12695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12694.value)+(((1.5707963267949)*(x12695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12696=IKsin(j4);
IkReal x12697=IKcos(j4);
IkReal x12698=(cj5*r10);
IkReal x12699=(r01*sj5);
IkReal x12700=((1.0)*cj2);
IkReal x12701=(cj5*r00);
IkReal x12702=(cj5*r20);
IkReal x12703=((1.0)*x12697);
IkReal x12704=((1.0)*x12696);
IkReal x12705=(sj5*x12696);
evalcond[0]=((((-1.0)*x12702*x12704))+((r21*x12705))+(((-1.0)*r22*x12703)));
evalcond[1]=(((x12696*x12699))+(((-1.0)*x12701*x12704))+(((-1.0)*r02*x12703)));
evalcond[2]=(((x12697*x12698))+(((-1.0)*r11*sj5*x12703))+(((-1.0)*r12*x12704)));
evalcond[3]=((1.0)+(((-1.0)*x12698*x12704))+((r11*x12705))+(((-1.0)*r12*x12703)));
evalcond[4]=((((-1.0)*r21*sj5*x12703))+((x12697*x12702))+((sj1*sj2))+(((-1.0)*r22*x12704))+(((-1.0)*cj1*x12700)));
evalcond[5]=(((x12697*x12701))+(((-1.0)*sj1*x12700))+(((-1.0)*cj1*sj2))+(((-1.0)*x12699*x12703))+(((-1.0)*r02*x12704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12706=((1.0)*cj5);
CheckValue<IkReal> x12707 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12707.valid){
continue;
}
CheckValue<IkReal> x12708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12706))+(((-1.0)*r00*sj5)))),-1);
if(!x12708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12707.value)+(((1.5707963267949)*(x12708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12709=IKsin(j4);
IkReal x12710=IKcos(j4);
IkReal x12711=(cj5*r10);
IkReal x12712=(r01*sj5);
IkReal x12713=((1.0)*cj2);
IkReal x12714=(cj5*r00);
IkReal x12715=(cj5*r20);
IkReal x12716=((1.0)*x12710);
IkReal x12717=((1.0)*x12709);
IkReal x12718=(sj5*x12709);
evalcond[0]=(((r21*x12718))+(((-1.0)*x12715*x12717))+(((-1.0)*r22*x12716)));
evalcond[1]=(((x12709*x12712))+(((-1.0)*x12714*x12717))+(((-1.0)*r02*x12716)));
evalcond[2]=((((-1.0)*r12*x12717))+((x12710*x12711))+(((-1.0)*r11*sj5*x12716)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12716))+((r11*x12718))+(((-1.0)*x12711*x12717)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x12717))+((x12710*x12715))+(((-1.0)*cj1*x12713))+(((-1.0)*r21*sj5*x12716)));
evalcond[5]=((((-1.0)*sj1*x12713))+(((-1.0)*cj1*sj2))+(((-1.0)*x12712*x12716))+((x12710*x12714))+(((-1.0)*r02*x12717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12719=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12719.valid){
continue;
}
CheckValue<IkReal> x12720 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12719.value)))+(x12720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12721=IKsin(j4);
IkReal x12722=IKcos(j4);
IkReal x12723=(cj5*r10);
IkReal x12724=(r01*sj5);
IkReal x12725=((1.0)*cj2);
IkReal x12726=(cj5*r00);
IkReal x12727=(cj5*r20);
IkReal x12728=((1.0)*x12722);
IkReal x12729=((1.0)*x12721);
IkReal x12730=(sj5*x12721);
evalcond[0]=((((-1.0)*x12727*x12729))+((r21*x12730))+(((-1.0)*r22*x12728)));
evalcond[1]=(((x12721*x12724))+(((-1.0)*r02*x12728))+(((-1.0)*x12726*x12729)));
evalcond[2]=(((x12722*x12723))+(((-1.0)*r11*sj5*x12728))+(((-1.0)*r12*x12729)));
evalcond[3]=((1.0)+((r11*x12730))+(((-1.0)*x12723*x12729))+(((-1.0)*r12*x12728)));
evalcond[4]=(((x12722*x12727))+(((-1.0)*r22*x12729))+((sj1*sj2))+(((-1.0)*r21*sj5*x12728))+(((-1.0)*cj1*x12725)));
evalcond[5]=(((x12722*x12726))+(((-1.0)*r02*x12729))+(((-1.0)*sj1*x12725))+(((-1.0)*cj1*sj2))+(((-1.0)*x12724*x12728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12731=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12731;
j4eval[1]=IKsign(x12731);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12732=((1.0)*cj5);
IkReal x12733=((((-1.0)*r01*x12732))+(((-1.0)*r00*sj5)));
j4eval[0]=x12733;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12732)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12734=(sj1*sj2);
IkReal x12735=(cj5*r10);
IkReal x12736=(r11*sj5);
IkReal x12737=(cj1*cj2);
IkReal x12738=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12738;
j4eval[1]=((IKabs((((r12*x12737))+(((-1.0)*r12*x12734)))))+(IKabs((((x12734*x12736))+(((-1.0)*x12736*x12737))+((x12735*x12737))+(((-1.0)*x12734*x12735))))));
j4eval[2]=IKsign(x12738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12739=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12739);
rxp1_1=(px*r21);
rxp1_2=(r11*x12739);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12740=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12740);
rxp1_1=(px*r21);
rxp1_2=(r11*x12740);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12741=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12741)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12741)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12742=((1.0)*cj5);
CheckValue<IkReal> x12743=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12742))),-1);
if(!x12743.valid){
continue;
}
CheckValue<IkReal> x12744=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12742))),-1);
if(!x12744.valid){
continue;
}
if( IKabs(((-1.0)*(x12743.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12744.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12743.value)))+IKsqr(((x12744.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12743.value)), ((x12744.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12745=IKsin(j4);
IkReal x12746=IKcos(j4);
IkReal x12747=((1.0)*cj2);
IkReal x12748=(r21*sj5);
IkReal x12749=(r11*sj5);
IkReal x12750=((1.0)*cj5*x12745);
IkReal x12751=((1.0)*cj5*x12746);
evalcond[0]=((-1.0)*r02*x12746);
evalcond[1]=(((x12745*x12748))+(((-1.0)*r20*x12750)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12747))+((r02*x12745)));
evalcond[3]=((((-1.0)*r10*x12751))+((x12746*x12749)));
evalcond[4]=((1.0)+((x12745*x12749))+(((-1.0)*r10*x12750)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*cj1*x12747))+(((-1.0)*r20*x12751))+((x12746*x12748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12752=IKPowWithIntegerCheck(r02,-1);
if(!x12752.valid){
continue;
}
CheckValue<IkReal> x12753=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12753.valid){
continue;
}
if( IKabs(((x12752.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12753.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12752.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12753.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12752.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12753.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12754=IKsin(j4);
IkReal x12755=IKcos(j4);
IkReal x12756=((1.0)*cj2);
IkReal x12757=(r21*sj5);
IkReal x12758=(r11*sj5);
IkReal x12759=((1.0)*cj5*x12754);
IkReal x12760=((1.0)*cj5*x12755);
evalcond[0]=((-1.0)*r02*x12755);
evalcond[1]=(((x12754*x12757))+(((-1.0)*r20*x12759)));
evalcond[2]=((((-1.0)*sj1*x12756))+(((-1.0)*cj1*sj2))+((r02*x12754)));
evalcond[3]=((((-1.0)*r10*x12760))+((x12755*x12758)));
evalcond[4]=((1.0)+((x12754*x12758))+(((-1.0)*r10*x12759)));
evalcond[5]=((((-1.0)*r20*x12760))+((x12755*x12757))+((sj1*sj2))+(((-1.0)*cj1*x12756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12761=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12761;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12762=((1.0)*cj5);
IkReal x12763=((((-1.0)*r21*x12762))+(((-1.0)*r20*sj5)));
j4eval[0]=x12763;
j4eval[1]=((IKabs(((((-1.0)*r10*x12762))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12764=cj5*cj5;
IkReal x12765=(r11*r21);
IkReal x12766=((1.0)*r20);
IkReal x12767=(cj5*sj5);
IkReal x12768=((((-1.0)*r12*r22))+((x12764*x12765))+(((-1.0)*x12765))+((r10*r21*x12767))+((r11*r20*x12767))+(((-1.0)*r10*x12764*x12766)));
j4eval[0]=x12768;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12766))+((r21*sj5))))));
j4eval[2]=IKsign(x12768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12769=cj5*cj5;
IkReal x12770=(r21*sj5);
IkReal x12771=(r11*r21);
IkReal x12772=((1.0)*r20);
CheckValue<IkReal> x12773 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12772))+x12770)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12773.valid){
continue;
}
CheckValue<IkReal> x12774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12769*x12772))+(((-1.0)*r12*r22))+((cj5*r10*x12770))+(((-1.0)*x12771))+((x12769*x12771))+((cj5*r11*r20*sj5)))),-1);
if(!x12774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12773.value)+(((1.5707963267949)*(x12774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12775=IKcos(j4);
IkReal x12776=IKsin(j4);
IkReal x12777=(cj5*r00);
IkReal x12778=(cj5*r20);
IkReal x12779=(cj5*r10);
IkReal x12780=((1.0)*x12775);
IkReal x12781=((1.0)*x12776);
IkReal x12782=(sj5*x12775);
IkReal x12783=(sj5*x12776);
evalcond[0]=((((-1.0)*x12778*x12780))+((r21*x12782))+((r22*x12776)));
evalcond[1]=((((-1.0)*x12779*x12780))+((r11*x12782))+((r12*x12776)));
evalcond[2]=((((-1.0)*x12778*x12781))+((r21*x12783))+(((-1.0)*r22*x12780)));
evalcond[3]=(((r01*x12783))+(((-1.0)*x12777*x12781))+(((-1.0)*r02*x12780)));
evalcond[4]=((-1.0)+((r01*x12782))+(((-1.0)*x12777*x12780))+((r02*x12776)));
evalcond[5]=((1.0)+(((-1.0)*x12779*x12781))+((r11*x12783))+(((-1.0)*r12*x12780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12784=((1.0)*cj5);
CheckValue<IkReal> x12785 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12784)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12785.valid){
continue;
}
CheckValue<IkReal> x12786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12784))+(((-1.0)*r20*sj5)))),-1);
if(!x12786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12785.value)+(((1.5707963267949)*(x12786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12787=IKcos(j4);
IkReal x12788=IKsin(j4);
IkReal x12789=(cj5*r00);
IkReal x12790=(cj5*r20);
IkReal x12791=(cj5*r10);
IkReal x12792=((1.0)*x12787);
IkReal x12793=((1.0)*x12788);
IkReal x12794=(sj5*x12787);
IkReal x12795=(sj5*x12788);
evalcond[0]=(((r22*x12788))+((r21*x12794))+(((-1.0)*x12790*x12792)));
evalcond[1]=((((-1.0)*x12791*x12792))+((r11*x12794))+((r12*x12788)));
evalcond[2]=((((-1.0)*r22*x12792))+((r21*x12795))+(((-1.0)*x12790*x12793)));
evalcond[3]=((((-1.0)*x12789*x12793))+(((-1.0)*r02*x12792))+((r01*x12795)));
evalcond[4]=((-1.0)+(((-1.0)*x12789*x12792))+((r01*x12794))+((r02*x12788)));
evalcond[5]=((1.0)+(((-1.0)*x12791*x12793))+((r11*x12795))+(((-1.0)*r12*x12792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12796 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12796.valid){
continue;
}
CheckValue<IkReal> x12797=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12796.value)+(((1.5707963267949)*(x12797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12798=IKcos(j4);
IkReal x12799=IKsin(j4);
IkReal x12800=(cj5*r00);
IkReal x12801=(cj5*r20);
IkReal x12802=(cj5*r10);
IkReal x12803=((1.0)*x12798);
IkReal x12804=((1.0)*x12799);
IkReal x12805=(sj5*x12798);
IkReal x12806=(sj5*x12799);
evalcond[0]=(((r21*x12805))+(((-1.0)*x12801*x12803))+((r22*x12799)));
evalcond[1]=(((r11*x12805))+(((-1.0)*x12802*x12803))+((r12*x12799)));
evalcond[2]=(((r21*x12806))+(((-1.0)*r22*x12803))+(((-1.0)*x12801*x12804)));
evalcond[3]=((((-1.0)*x12800*x12804))+(((-1.0)*r02*x12803))+((r01*x12806)));
evalcond[4]=((-1.0)+((r02*x12799))+(((-1.0)*x12800*x12803))+((r01*x12805)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12803))+((r11*x12806))+(((-1.0)*x12802*x12804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12807=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12807;
j4eval[1]=IKsign(x12807);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12808=((1.0)*cj5);
IkReal x12809=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12808)));
j4eval[0]=x12809;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12808))))));
j4eval[2]=IKsign(x12809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12810=cj5*cj5;
IkReal x12811=(r11*r21);
IkReal x12812=((1.0)*r20);
IkReal x12813=(cj5*sj5);
IkReal x12814=(((x12810*x12811))+(((-1.0)*r12*r22))+((r11*r20*x12813))+(((-1.0)*x12811))+(((-1.0)*r10*x12810*x12812))+((r10*r21*x12813)));
j4eval[0]=x12814;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12812))+((r21*sj5))))));
j4eval[2]=IKsign(x12814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12815=cj5*cj5;
IkReal x12816=(r21*sj5);
IkReal x12817=(r11*r21);
IkReal x12818=((1.0)*r20);
CheckValue<IkReal> x12819=IKPowWithIntegerCheck(IKsign((((x12815*x12817))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12815*x12818))+(((-1.0)*x12817))+((cj5*r10*x12816))+((cj5*r11*r20*sj5)))),-1);
if(!x12819.valid){
continue;
}
CheckValue<IkReal> x12820 = IKatan2WithCheck(IkReal((x12816+(((-1.0)*cj5*x12818)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12819.value)))+(x12820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12821=IKcos(j4);
IkReal x12822=IKsin(j4);
IkReal x12823=(cj5*r00);
IkReal x12824=(cj5*r20);
IkReal x12825=(cj5*r10);
IkReal x12826=((1.0)*x12821);
IkReal x12827=((1.0)*x12822);
IkReal x12828=(sj5*x12821);
IkReal x12829=(sj5*x12822);
evalcond[0]=((((-1.0)*x12824*x12826))+((r22*x12822))+((r21*x12828)));
evalcond[1]=((((-1.0)*x12825*x12826))+((r12*x12822))+((r11*x12828)));
evalcond[2]=((((-1.0)*x12824*x12827))+(((-1.0)*r22*x12826))+((r21*x12829)));
evalcond[3]=((((-1.0)*r02*x12826))+((r01*x12829))+(((-1.0)*x12823*x12827)));
evalcond[4]=((1.0)+((r01*x12828))+((r02*x12822))+(((-1.0)*x12823*x12826)));
evalcond[5]=((1.0)+(((-1.0)*x12825*x12827))+(((-1.0)*r12*x12826))+((r11*x12829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12830=((1.0)*cj5);
CheckValue<IkReal> x12831 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12830)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12831.valid){
continue;
}
CheckValue<IkReal> x12832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12830)))),-1);
if(!x12832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12831.value)+(((1.5707963267949)*(x12832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12833=IKcos(j4);
IkReal x12834=IKsin(j4);
IkReal x12835=(cj5*r00);
IkReal x12836=(cj5*r20);
IkReal x12837=(cj5*r10);
IkReal x12838=((1.0)*x12833);
IkReal x12839=((1.0)*x12834);
IkReal x12840=(sj5*x12833);
IkReal x12841=(sj5*x12834);
evalcond[0]=(((r22*x12834))+(((-1.0)*x12836*x12838))+((r21*x12840)));
evalcond[1]=((((-1.0)*x12837*x12838))+((r12*x12834))+((r11*x12840)));
evalcond[2]=((((-1.0)*x12836*x12839))+(((-1.0)*r22*x12838))+((r21*x12841)));
evalcond[3]=(((r01*x12841))+(((-1.0)*r02*x12838))+(((-1.0)*x12835*x12839)));
evalcond[4]=((1.0)+((r01*x12840))+((r02*x12834))+(((-1.0)*x12835*x12838)));
evalcond[5]=((1.0)+(((-1.0)*x12837*x12839))+((r11*x12841))+(((-1.0)*r12*x12838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12842=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12842.valid){
continue;
}
CheckValue<IkReal> x12843 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12842.value)))+(x12843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12844=IKcos(j4);
IkReal x12845=IKsin(j4);
IkReal x12846=(cj5*r00);
IkReal x12847=(cj5*r20);
IkReal x12848=(cj5*r10);
IkReal x12849=((1.0)*x12844);
IkReal x12850=((1.0)*x12845);
IkReal x12851=(sj5*x12844);
IkReal x12852=(sj5*x12845);
evalcond[0]=(((r22*x12845))+((r21*x12851))+(((-1.0)*x12847*x12849)));
evalcond[1]=((((-1.0)*x12848*x12849))+((r11*x12851))+((r12*x12845)));
evalcond[2]=((((-1.0)*x12847*x12850))+(((-1.0)*r22*x12849))+((r21*x12852)));
evalcond[3]=((((-1.0)*r02*x12849))+((r01*x12852))+(((-1.0)*x12846*x12850)));
evalcond[4]=((1.0)+((r01*x12851))+((r02*x12845))+(((-1.0)*x12846*x12849)));
evalcond[5]=((1.0)+(((-1.0)*x12848*x12850))+(((-1.0)*r12*x12849))+((r11*x12852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12853=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12853;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12854=((1.0)*cj5);
IkReal x12855=((((-1.0)*r21*x12854))+(((-1.0)*r20*sj5)));
j4eval[0]=x12855;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12854))))));
j4eval[2]=IKsign(x12855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12856=cj5*cj5;
IkReal x12857=(r11*r21);
IkReal x12858=((1.0)*r20);
IkReal x12859=(cj5*sj5);
IkReal x12860=(((r11*r20*x12859))+((x12856*x12857))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12856*x12858))+(((-1.0)*x12857))+((r10*r21*x12859)));
j4eval[0]=x12860;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12858)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12861=cj5*cj5;
IkReal x12862=(r21*sj5);
IkReal x12863=(r11*r21);
IkReal x12864=((1.0)*r20);
CheckValue<IkReal> x12865=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12863))+(((-1.0)*r12*r22))+((cj5*r10*x12862))+((x12861*x12863))+(((-1.0)*r10*x12861*x12864))+((cj5*r11*r20*sj5)))),-1);
if(!x12865.valid){
continue;
}
CheckValue<IkReal> x12866 = IKatan2WithCheck(IkReal((x12862+(((-1.0)*cj5*x12864)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12865.value)))+(x12866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12867=IKcos(j4);
IkReal x12868=IKsin(j4);
IkReal x12869=(cj5*r00);
IkReal x12870=(cj5*r20);
IkReal x12871=(cj5*r10);
IkReal x12872=((1.0)*x12867);
IkReal x12873=((1.0)*x12868);
IkReal x12874=(sj5*x12867);
IkReal x12875=(sj5*x12868);
evalcond[0]=(((r21*x12874))+((r22*x12868))+(((-1.0)*x12870*x12872)));
evalcond[1]=(((r12*x12868))+(((-1.0)*x12871*x12872))+((r11*x12874)));
evalcond[2]=((((-1.0)*r22*x12872))+((r21*x12875))+(((-1.0)*x12870*x12873)));
evalcond[3]=(((r01*x12875))+(((-1.0)*r02*x12872))+(((-1.0)*x12869*x12873)));
evalcond[4]=((-1.0)+((r01*x12874))+(((-1.0)*x12869*x12872))+((r02*x12868)));
evalcond[5]=((1.0)+(((-1.0)*x12871*x12873))+(((-1.0)*r12*x12872))+((r11*x12875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12876=((1.0)*cj5);
CheckValue<IkReal> x12877 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12876)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12877.valid){
continue;
}
CheckValue<IkReal> x12878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12876))+(((-1.0)*r20*sj5)))),-1);
if(!x12878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12877.value)+(((1.5707963267949)*(x12878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12879=IKcos(j4);
IkReal x12880=IKsin(j4);
IkReal x12881=(cj5*r00);
IkReal x12882=(cj5*r20);
IkReal x12883=(cj5*r10);
IkReal x12884=((1.0)*x12879);
IkReal x12885=((1.0)*x12880);
IkReal x12886=(sj5*x12879);
IkReal x12887=(sj5*x12880);
evalcond[0]=(((r22*x12880))+(((-1.0)*x12882*x12884))+((r21*x12886)));
evalcond[1]=((((-1.0)*x12883*x12884))+((r12*x12880))+((r11*x12886)));
evalcond[2]=((((-1.0)*r22*x12884))+(((-1.0)*x12882*x12885))+((r21*x12887)));
evalcond[3]=((((-1.0)*r02*x12884))+((r01*x12887))+(((-1.0)*x12881*x12885)));
evalcond[4]=((-1.0)+((r01*x12886))+(((-1.0)*x12881*x12884))+((r02*x12880)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12884))+(((-1.0)*x12883*x12885))+((r11*x12887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12888 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12888.valid){
continue;
}
CheckValue<IkReal> x12889=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12888.value)+(((1.5707963267949)*(x12889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12890=IKcos(j4);
IkReal x12891=IKsin(j4);
IkReal x12892=(cj5*r00);
IkReal x12893=(cj5*r20);
IkReal x12894=(cj5*r10);
IkReal x12895=((1.0)*x12890);
IkReal x12896=((1.0)*x12891);
IkReal x12897=(sj5*x12890);
IkReal x12898=(sj5*x12891);
evalcond[0]=((((-1.0)*x12893*x12895))+((r21*x12897))+((r22*x12891)));
evalcond[1]=(((r12*x12891))+(((-1.0)*x12894*x12895))+((r11*x12897)));
evalcond[2]=((((-1.0)*x12893*x12896))+(((-1.0)*r22*x12895))+((r21*x12898)));
evalcond[3]=((((-1.0)*x12892*x12896))+((r01*x12898))+(((-1.0)*r02*x12895)));
evalcond[4]=((-1.0)+(((-1.0)*x12892*x12895))+((r01*x12897))+((r02*x12891)));
evalcond[5]=((1.0)+(((-1.0)*x12894*x12896))+((r11*x12898))+(((-1.0)*r12*x12895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12899=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12899;
j4eval[1]=IKsign(x12899);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12900=((1.0)*cj5);
IkReal x12901=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12900)));
j4eval[0]=x12901;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12900)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12902=cj5*cj5;
IkReal x12903=(r11*r21);
IkReal x12904=((1.0)*r20);
IkReal x12905=(cj5*sj5);
IkReal x12906=((((-1.0)*r12*r22))+(((-1.0)*x12903))+((r11*r20*x12905))+(((-1.0)*r10*x12902*x12904))+((x12902*x12903))+((r10*r21*x12905)));
j4eval[0]=x12906;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12904)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12907=cj5*cj5;
IkReal x12908=(r21*sj5);
IkReal x12909=(r11*r21);
IkReal x12910=((1.0)*r20);
CheckValue<IkReal> x12911 = IKatan2WithCheck(IkReal((x12908+(((-1.0)*cj5*x12910)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12911.valid){
continue;
}
CheckValue<IkReal> x12912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12909))+(((-1.0)*r10*x12907*x12910))+((x12907*x12909))+((cj5*r10*x12908))+((cj5*r11*r20*sj5)))),-1);
if(!x12912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12911.value)+(((1.5707963267949)*(x12912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12913=IKcos(j4);
IkReal x12914=IKsin(j4);
IkReal x12915=(cj5*r00);
IkReal x12916=(cj5*r20);
IkReal x12917=(cj5*r10);
IkReal x12918=((1.0)*x12913);
IkReal x12919=((1.0)*x12914);
IkReal x12920=(sj5*x12913);
IkReal x12921=(sj5*x12914);
evalcond[0]=((((-1.0)*x12916*x12918))+((r21*x12920))+((r22*x12914)));
evalcond[1]=(((r11*x12920))+((r12*x12914))+(((-1.0)*x12917*x12918)));
evalcond[2]=((((-1.0)*x12916*x12919))+(((-1.0)*r22*x12918))+((r21*x12921)));
evalcond[3]=((((-1.0)*r02*x12918))+(((-1.0)*x12915*x12919))+((r01*x12921)));
evalcond[4]=((1.0)+(((-1.0)*x12915*x12918))+((r02*x12914))+((r01*x12920)));
evalcond[5]=((1.0)+((r11*x12921))+(((-1.0)*x12917*x12919))+(((-1.0)*r12*x12918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12922=((1.0)*cj5);
CheckValue<IkReal> x12923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12922)))),-1);
if(!x12923.valid){
continue;
}
CheckValue<IkReal> x12924 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12922))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12923.value)))+(x12924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12925=IKcos(j4);
IkReal x12926=IKsin(j4);
IkReal x12927=(cj5*r00);
IkReal x12928=(cj5*r20);
IkReal x12929=(cj5*r10);
IkReal x12930=((1.0)*x12925);
IkReal x12931=((1.0)*x12926);
IkReal x12932=(sj5*x12925);
IkReal x12933=(sj5*x12926);
evalcond[0]=((((-1.0)*x12928*x12930))+((r22*x12926))+((r21*x12932)));
evalcond[1]=(((r11*x12932))+(((-1.0)*x12929*x12930))+((r12*x12926)));
evalcond[2]=((((-1.0)*x12928*x12931))+(((-1.0)*r22*x12930))+((r21*x12933)));
evalcond[3]=((((-1.0)*r02*x12930))+(((-1.0)*x12927*x12931))+((r01*x12933)));
evalcond[4]=((1.0)+(((-1.0)*x12927*x12930))+((r02*x12926))+((r01*x12932)));
evalcond[5]=((1.0)+((r11*x12933))+(((-1.0)*r12*x12930))+(((-1.0)*x12929*x12931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12934=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12934.valid){
continue;
}
CheckValue<IkReal> x12935 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12934.value)))+(x12935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12936=IKcos(j4);
IkReal x12937=IKsin(j4);
IkReal x12938=(cj5*r00);
IkReal x12939=(cj5*r20);
IkReal x12940=(cj5*r10);
IkReal x12941=((1.0)*x12936);
IkReal x12942=((1.0)*x12937);
IkReal x12943=(sj5*x12936);
IkReal x12944=(sj5*x12937);
evalcond[0]=((((-1.0)*x12939*x12941))+((r21*x12943))+((r22*x12937)));
evalcond[1]=(((r12*x12937))+((r11*x12943))+(((-1.0)*x12940*x12941)));
evalcond[2]=((((-1.0)*x12939*x12942))+((r21*x12944))+(((-1.0)*r22*x12941)));
evalcond[3]=(((r01*x12944))+(((-1.0)*r02*x12941))+(((-1.0)*x12938*x12942)));
evalcond[4]=((1.0)+((r02*x12937))+((r01*x12943))+(((-1.0)*x12938*x12941)));
evalcond[5]=((1.0)+((r11*x12944))+(((-1.0)*x12940*x12942))+(((-1.0)*r12*x12941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12945=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12945;
j4eval[1]=IKsign(x12945);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12946=((1.0)*cj5);
IkReal x12947=((((-1.0)*r11*x12946))+(((-1.0)*r10*sj5)));
j4eval[0]=x12947;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12946))))));
j4eval[2]=IKsign(x12947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12948=cj5*cj5;
IkReal x12949=(r11*r21);
IkReal x12950=((1.0)*r20);
IkReal x12951=(cj5*sj5);
IkReal x12952=((((-1.0)*r12*r22))+((r10*r21*x12951))+((r11*r20*x12951))+(((-1.0)*x12949))+((x12948*x12949))+(((-1.0)*r10*x12948*x12950)));
j4eval[0]=x12952;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12950))+((r21*sj5))))));
j4eval[2]=IKsign(x12952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12953=cj5*cj5;
IkReal x12954=(r21*sj5);
IkReal x12955=(r11*r21);
IkReal x12956=((1.0)*r20);
CheckValue<IkReal> x12957 = IKatan2WithCheck(IkReal((x12954+(((-1.0)*cj5*x12956)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12957.valid){
continue;
}
CheckValue<IkReal> x12958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12953*x12956))+(((-1.0)*r12*r22))+((x12953*x12955))+(((-1.0)*x12955))+((cj5*r10*x12954))+((cj5*r11*r20*sj5)))),-1);
if(!x12958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12957.value)+(((1.5707963267949)*(x12958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12959=IKcos(j4);
IkReal x12960=IKsin(j4);
IkReal x12961=(cj5*r00);
IkReal x12962=(cj5*r20);
IkReal x12963=(cj5*r10);
IkReal x12964=((1.0)*x12959);
IkReal x12965=((1.0)*x12960);
IkReal x12966=(sj5*x12959);
IkReal x12967=(sj5*x12960);
evalcond[0]=((((-1.0)*x12962*x12964))+((r22*x12960))+((r21*x12966)));
evalcond[1]=(((r11*x12966))+((r12*x12960))+(((-1.0)*x12963*x12964)));
evalcond[2]=((((-1.0)*x12962*x12965))+(((-1.0)*r22*x12964))+((r21*x12967)));
evalcond[3]=(((r01*x12967))+(((-1.0)*x12961*x12965))+(((-1.0)*r02*x12964)));
evalcond[4]=((1.0)+((r01*x12966))+((r02*x12960))+(((-1.0)*x12961*x12964)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12964))+((r11*x12967))+(((-1.0)*x12963*x12965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12968=((1.0)*cj5);
CheckValue<IkReal> x12969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12968)))),-1);
if(!x12969.valid){
continue;
}
CheckValue<IkReal> x12970 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12968)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12969.value)))+(x12970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12971=IKcos(j4);
IkReal x12972=IKsin(j4);
IkReal x12973=(cj5*r00);
IkReal x12974=(cj5*r20);
IkReal x12975=(cj5*r10);
IkReal x12976=((1.0)*x12971);
IkReal x12977=((1.0)*x12972);
IkReal x12978=(sj5*x12971);
IkReal x12979=(sj5*x12972);
evalcond[0]=((((-1.0)*x12974*x12976))+((r22*x12972))+((r21*x12978)));
evalcond[1]=((((-1.0)*x12975*x12976))+((r11*x12978))+((r12*x12972)));
evalcond[2]=((((-1.0)*x12974*x12977))+(((-1.0)*r22*x12976))+((r21*x12979)));
evalcond[3]=(((r01*x12979))+(((-1.0)*r02*x12976))+(((-1.0)*x12973*x12977)));
evalcond[4]=((1.0)+((r01*x12978))+((r02*x12972))+(((-1.0)*x12973*x12976)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12976))+(((-1.0)*x12975*x12977))+((r11*x12979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12980=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12980.valid){
continue;
}
CheckValue<IkReal> x12981 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12980.value)))+(x12981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12982=IKcos(j4);
IkReal x12983=IKsin(j4);
IkReal x12984=(cj5*r00);
IkReal x12985=(cj5*r20);
IkReal x12986=(cj5*r10);
IkReal x12987=((1.0)*x12982);
IkReal x12988=((1.0)*x12983);
IkReal x12989=(sj5*x12982);
IkReal x12990=(sj5*x12983);
evalcond[0]=(((r22*x12983))+((r21*x12989))+(((-1.0)*x12985*x12987)));
evalcond[1]=(((r11*x12989))+((r12*x12983))+(((-1.0)*x12986*x12987)));
evalcond[2]=((((-1.0)*r22*x12987))+((r21*x12990))+(((-1.0)*x12985*x12988)));
evalcond[3]=(((r01*x12990))+(((-1.0)*r02*x12987))+(((-1.0)*x12984*x12988)));
evalcond[4]=((1.0)+((r01*x12989))+(((-1.0)*x12984*x12987))+((r02*x12983)));
evalcond[5]=((1.0)+((r11*x12990))+(((-1.0)*r12*x12987))+(((-1.0)*x12986*x12988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12991=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12991;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12992=((1.0)*cj5);
IkReal x12993=((((-1.0)*r21*x12992))+(((-1.0)*r20*sj5)));
j4eval[0]=x12993;
j4eval[1]=((IKabs(((((-1.0)*r10*x12992))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12994=cj5*cj5;
IkReal x12995=(r11*r21);
IkReal x12996=((1.0)*r20);
IkReal x12997=(cj5*sj5);
IkReal x12998=((((-1.0)*r10*x12994*x12996))+((r10*r21*x12997))+(((-1.0)*r12*r22))+((x12994*x12995))+((r11*r20*x12997))+(((-1.0)*x12995)));
j4eval[0]=x12998;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12996)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12998);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12999=cj5*cj5;
IkReal x13000=(r21*sj5);
IkReal x13001=(r11*r21);
IkReal x13002=((1.0)*r20);
CheckValue<IkReal> x13003 = IKatan2WithCheck(IkReal((x13000+(((-1.0)*cj5*x13002)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13003.valid){
continue;
}
CheckValue<IkReal> x13004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x13000))+(((-1.0)*x13001))+((x12999*x13001))+(((-1.0)*r10*x12999*x13002))+((cj5*r11*r20*sj5)))),-1);
if(!x13004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13003.value)+(((1.5707963267949)*(x13004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13005=IKcos(j4);
IkReal x13006=IKsin(j4);
IkReal x13007=(cj5*r00);
IkReal x13008=(cj5*r20);
IkReal x13009=(cj5*r10);
IkReal x13010=((1.0)*x13005);
IkReal x13011=((1.0)*x13006);
IkReal x13012=(sj5*x13005);
IkReal x13013=(sj5*x13006);
evalcond[0]=(((r21*x13012))+(((-1.0)*x13008*x13010))+((r22*x13006)));
evalcond[1]=((((-1.0)*x13009*x13010))+((r12*x13006))+((r11*x13012)));
evalcond[2]=((((-1.0)*r22*x13010))+((r21*x13013))+(((-1.0)*x13008*x13011)));
evalcond[3]=(((r01*x13013))+(((-1.0)*x13007*x13011))+(((-1.0)*r02*x13010)));
evalcond[4]=((-1.0)+((r01*x13012))+((r02*x13006))+(((-1.0)*x13007*x13010)));
evalcond[5]=((1.0)+(((-1.0)*x13009*x13011))+((r11*x13013))+(((-1.0)*r12*x13010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13014=((1.0)*cj5);
CheckValue<IkReal> x13015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13014))+(((-1.0)*r20*sj5)))),-1);
if(!x13015.valid){
continue;
}
CheckValue<IkReal> x13016 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13014))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13015.value)))+(x13016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13017=IKcos(j4);
IkReal x13018=IKsin(j4);
IkReal x13019=(cj5*r00);
IkReal x13020=(cj5*r20);
IkReal x13021=(cj5*r10);
IkReal x13022=((1.0)*x13017);
IkReal x13023=((1.0)*x13018);
IkReal x13024=(sj5*x13017);
IkReal x13025=(sj5*x13018);
evalcond[0]=(((r21*x13024))+((r22*x13018))+(((-1.0)*x13020*x13022)));
evalcond[1]=((((-1.0)*x13021*x13022))+((r11*x13024))+((r12*x13018)));
evalcond[2]=((((-1.0)*r22*x13022))+((r21*x13025))+(((-1.0)*x13020*x13023)));
evalcond[3]=(((r01*x13025))+(((-1.0)*x13019*x13023))+(((-1.0)*r02*x13022)));
evalcond[4]=((-1.0)+((r01*x13024))+(((-1.0)*x13019*x13022))+((r02*x13018)));
evalcond[5]=((1.0)+(((-1.0)*x13021*x13023))+((r11*x13025))+(((-1.0)*r12*x13022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13026 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13026.valid){
continue;
}
CheckValue<IkReal> x13027=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13026.value)+(((1.5707963267949)*(x13027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13028=IKcos(j4);
IkReal x13029=IKsin(j4);
IkReal x13030=(cj5*r00);
IkReal x13031=(cj5*r20);
IkReal x13032=(cj5*r10);
IkReal x13033=((1.0)*x13028);
IkReal x13034=((1.0)*x13029);
IkReal x13035=(sj5*x13028);
IkReal x13036=(sj5*x13029);
evalcond[0]=((((-1.0)*x13031*x13033))+((r21*x13035))+((r22*x13029)));
evalcond[1]=(((r11*x13035))+(((-1.0)*x13032*x13033))+((r12*x13029)));
evalcond[2]=((((-1.0)*x13031*x13034))+(((-1.0)*r22*x13033))+((r21*x13036)));
evalcond[3]=((((-1.0)*x13030*x13034))+(((-1.0)*r02*x13033))+((r01*x13036)));
evalcond[4]=((-1.0)+(((-1.0)*x13030*x13033))+((r02*x13029))+((r01*x13035)));
evalcond[5]=((1.0)+((r11*x13036))+(((-1.0)*x13032*x13034))+(((-1.0)*r12*x13033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13037=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13037;
j4eval[1]=IKsign(x13037);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13038=((1.0)*cj5);
IkReal x13039=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13038)));
j4eval[0]=x13039;
j4eval[1]=((IKabs(((((-1.0)*r20*x13038))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13040=cj5*cj5;
IkReal x13041=(r11*r21);
IkReal x13042=((1.0)*r20);
IkReal x13043=(cj5*sj5);
IkReal x13044=((((-1.0)*x13041))+((r11*r20*x13043))+(((-1.0)*r12*r22))+((r10*r21*x13043))+((x13040*x13041))+(((-1.0)*r10*x13040*x13042)));
j4eval[0]=x13044;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x13042))+((r21*sj5))))));
j4eval[2]=IKsign(x13044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13045=cj5*cj5;
IkReal x13046=(r21*sj5);
IkReal x13047=(r11*r21);
IkReal x13048=((1.0)*r20);
CheckValue<IkReal> x13049 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13048))+x13046)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13049.valid){
continue;
}
CheckValue<IkReal> x13050=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13047))+(((-1.0)*r12*r22))+((x13045*x13047))+((cj5*r10*x13046))+(((-1.0)*r10*x13045*x13048))+((cj5*r11*r20*sj5)))),-1);
if(!x13050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13049.value)+(((1.5707963267949)*(x13050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13051=IKcos(j4);
IkReal x13052=IKsin(j4);
IkReal x13053=(cj5*r00);
IkReal x13054=(cj5*r20);
IkReal x13055=(cj5*r10);
IkReal x13056=((1.0)*x13051);
IkReal x13057=((1.0)*x13052);
IkReal x13058=(sj5*x13051);
IkReal x13059=(sj5*x13052);
evalcond[0]=((((-1.0)*x13054*x13056))+((r21*x13058))+((r22*x13052)));
evalcond[1]=(((r12*x13052))+(((-1.0)*x13055*x13056))+((r11*x13058)));
evalcond[2]=((((-1.0)*x13054*x13057))+((r21*x13059))+(((-1.0)*r22*x13056)));
evalcond[3]=((((-1.0)*r02*x13056))+((r01*x13059))+(((-1.0)*x13053*x13057)));
evalcond[4]=((1.0)+((r02*x13052))+((r01*x13058))+(((-1.0)*x13053*x13056)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13056))+(((-1.0)*x13055*x13057))+((r11*x13059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13060=((1.0)*cj5);
CheckValue<IkReal> x13061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13060)))),-1);
if(!x13061.valid){
continue;
}
CheckValue<IkReal> x13062 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13060))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13061.value)))+(x13062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13063=IKcos(j4);
IkReal x13064=IKsin(j4);
IkReal x13065=(cj5*r00);
IkReal x13066=(cj5*r20);
IkReal x13067=(cj5*r10);
IkReal x13068=((1.0)*x13063);
IkReal x13069=((1.0)*x13064);
IkReal x13070=(sj5*x13063);
IkReal x13071=(sj5*x13064);
evalcond[0]=(((r21*x13070))+(((-1.0)*x13066*x13068))+((r22*x13064)));
evalcond[1]=(((r12*x13064))+((r11*x13070))+(((-1.0)*x13067*x13068)));
evalcond[2]=(((r21*x13071))+(((-1.0)*x13066*x13069))+(((-1.0)*r22*x13068)));
evalcond[3]=(((r01*x13071))+(((-1.0)*r02*x13068))+(((-1.0)*x13065*x13069)));
evalcond[4]=((1.0)+((r02*x13064))+((r01*x13070))+(((-1.0)*x13065*x13068)));
evalcond[5]=((1.0)+((r11*x13071))+(((-1.0)*r12*x13068))+(((-1.0)*x13067*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13072=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13072.valid){
continue;
}
CheckValue<IkReal> x13073 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13072.value)))+(x13073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13074=IKcos(j4);
IkReal x13075=IKsin(j4);
IkReal x13076=(cj5*r00);
IkReal x13077=(cj5*r20);
IkReal x13078=(cj5*r10);
IkReal x13079=((1.0)*x13074);
IkReal x13080=((1.0)*x13075);
IkReal x13081=(sj5*x13074);
IkReal x13082=(sj5*x13075);
evalcond[0]=((((-1.0)*x13077*x13079))+((r22*x13075))+((r21*x13081)));
evalcond[1]=(((r11*x13081))+((r12*x13075))+(((-1.0)*x13078*x13079)));
evalcond[2]=((((-1.0)*x13077*x13080))+(((-1.0)*r22*x13079))+((r21*x13082)));
evalcond[3]=((((-1.0)*r02*x13079))+(((-1.0)*x13076*x13080))+((r01*x13082)));
evalcond[4]=((1.0)+(((-1.0)*x13076*x13079))+((r02*x13075))+((r01*x13081)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13079))+((r11*x13082))+(((-1.0)*x13078*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13083=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13083;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13084=((1.0)*cj5);
IkReal x13085=((((-1.0)*r21*x13084))+(((-1.0)*r20*sj5)));
j4eval[0]=x13085;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13084))))));
j4eval[2]=IKsign(x13085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13086=cj5*cj5;
IkReal x13087=(r11*r21);
IkReal x13088=((1.0)*r20);
IkReal x13089=(cj5*sj5);
IkReal x13090=((((-1.0)*r10*x13086*x13088))+(((-1.0)*r12*r22))+((r11*r20*x13089))+((x13086*x13087))+((r10*r21*x13089))+(((-1.0)*x13087)));
j4eval[0]=x13090;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13088)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13091=cj5*cj5;
IkReal x13092=(r21*sj5);
IkReal x13093=(r11*r21);
IkReal x13094=((1.0)*r20);
CheckValue<IkReal> x13095=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13092))+(((-1.0)*r12*r22))+((x13091*x13093))+(((-1.0)*x13093))+(((-1.0)*r10*x13091*x13094))+((cj5*r11*r20*sj5)))),-1);
if(!x13095.valid){
continue;
}
CheckValue<IkReal> x13096 = IKatan2WithCheck(IkReal((x13092+(((-1.0)*cj5*x13094)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13095.value)))+(x13096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13097=IKcos(j4);
IkReal x13098=IKsin(j4);
IkReal x13099=(cj5*r00);
IkReal x13100=(cj5*r20);
IkReal x13101=(cj5*r10);
IkReal x13102=((1.0)*x13097);
IkReal x13103=((1.0)*x13098);
IkReal x13104=(sj5*x13097);
IkReal x13105=(sj5*x13098);
evalcond[0]=((((-1.0)*x13100*x13102))+((r22*x13098))+((r21*x13104)));
evalcond[1]=((((-1.0)*x13101*x13102))+((r12*x13098))+((r11*x13104)));
evalcond[2]=((((-1.0)*x13100*x13103))+((r21*x13105))+(((-1.0)*r22*x13102)));
evalcond[3]=(((r01*x13105))+(((-1.0)*x13099*x13103))+(((-1.0)*r02*x13102)));
evalcond[4]=((-1.0)+((r02*x13098))+((r01*x13104))+(((-1.0)*x13099*x13102)));
evalcond[5]=((1.0)+(((-1.0)*x13101*x13103))+(((-1.0)*r12*x13102))+((r11*x13105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13106=((1.0)*cj5);
CheckValue<IkReal> x13107 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13106)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13107.valid){
continue;
}
CheckValue<IkReal> x13108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13106))+(((-1.0)*r20*sj5)))),-1);
if(!x13108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13107.value)+(((1.5707963267949)*(x13108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13109=IKcos(j4);
IkReal x13110=IKsin(j4);
IkReal x13111=(cj5*r00);
IkReal x13112=(cj5*r20);
IkReal x13113=(cj5*r10);
IkReal x13114=((1.0)*x13109);
IkReal x13115=((1.0)*x13110);
IkReal x13116=(sj5*x13109);
IkReal x13117=(sj5*x13110);
evalcond[0]=(((r22*x13110))+(((-1.0)*x13112*x13114))+((r21*x13116)));
evalcond[1]=(((r12*x13110))+(((-1.0)*x13113*x13114))+((r11*x13116)));
evalcond[2]=((((-1.0)*x13112*x13115))+((r21*x13117))+(((-1.0)*r22*x13114)));
evalcond[3]=((((-1.0)*r02*x13114))+(((-1.0)*x13111*x13115))+((r01*x13117)));
evalcond[4]=((-1.0)+((r02*x13110))+(((-1.0)*x13111*x13114))+((r01*x13116)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13114))+(((-1.0)*x13113*x13115))+((r11*x13117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13118 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13118.valid){
continue;
}
CheckValue<IkReal> x13119=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13118.value)+(((1.5707963267949)*(x13119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13120=IKcos(j4);
IkReal x13121=IKsin(j4);
IkReal x13122=(cj5*r00);
IkReal x13123=(cj5*r20);
IkReal x13124=(cj5*r10);
IkReal x13125=((1.0)*x13120);
IkReal x13126=((1.0)*x13121);
IkReal x13127=(sj5*x13120);
IkReal x13128=(sj5*x13121);
evalcond[0]=((((-1.0)*x13123*x13125))+((r22*x13121))+((r21*x13127)));
evalcond[1]=((((-1.0)*x13124*x13125))+((r11*x13127))+((r12*x13121)));
evalcond[2]=((((-1.0)*x13123*x13126))+(((-1.0)*r22*x13125))+((r21*x13128)));
evalcond[3]=((((-1.0)*r02*x13125))+((r01*x13128))+(((-1.0)*x13122*x13126)));
evalcond[4]=((-1.0)+((r01*x13127))+(((-1.0)*x13122*x13125))+((r02*x13121)));
evalcond[5]=((1.0)+(((-1.0)*x13124*x13126))+((r11*x13128))+(((-1.0)*r12*x13125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13129=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13129);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13129);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13130=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13130);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13130);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13131=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13131))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13131)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13132=((1.0)*cj5);
CheckValue<IkReal> x13133=IKPowWithIntegerCheck(((((-1.0)*r10*x13132))+((r11*sj5))),-1);
if(!x13133.valid){
continue;
}
CheckValue<IkReal> x13134=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13132))),-1);
if(!x13134.valid){
continue;
}
if( IKabs(((-1.0)*(x13133.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13134.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13133.value)))+IKsqr(((x13134.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13133.value)), ((x13134.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13135=IKsin(j4);
IkReal x13136=IKcos(j4);
IkReal x13137=((1.0)*cj5);
IkReal x13138=((1.0)*cj2);
IkReal x13139=(sj5*x13136);
IkReal x13140=(sj5*x13135);
evalcond[0]=((-1.0)*r22*x13136);
evalcond[1]=((((-1.0)*cj1*x13138))+((sj1*sj2))+((r22*x13135)));
evalcond[2]=((((-1.0)*r00*x13135*x13137))+((r01*x13140)));
evalcond[3]=(((r11*x13139))+(((-1.0)*r10*x13136*x13137)));
evalcond[4]=((1.0)+((r11*x13140))+(((-1.0)*r10*x13135*x13137)));
evalcond[5]=(((r01*x13139))+(((-1.0)*r00*x13136*x13137))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13141=IKPowWithIntegerCheck(r22,-1);
if(!x13141.valid){
continue;
}
CheckValue<IkReal> x13142=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13142.valid){
continue;
}
if( IKabs(((x13141.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13142.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13141.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13142.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13141.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13142.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13143=IKsin(j4);
IkReal x13144=IKcos(j4);
IkReal x13145=((1.0)*cj5);
IkReal x13146=((1.0)*cj2);
IkReal x13147=(sj5*x13144);
IkReal x13148=(sj5*x13143);
evalcond[0]=((-1.0)*r22*x13144);
evalcond[1]=(((r22*x13143))+((sj1*sj2))+(((-1.0)*cj1*x13146)));
evalcond[2]=((((-1.0)*r00*x13143*x13145))+((r01*x13148)));
evalcond[3]=(((r11*x13147))+(((-1.0)*r10*x13144*x13145)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13143*x13145))+((r11*x13148)));
evalcond[5]=((((-1.0)*sj1*x13146))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13144*x13145))+((r01*x13147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13149=(sj1*sj2);
IkReal x13150=(cj5*r10);
IkReal x13151=(r11*sj5);
IkReal x13152=(cj1*cj2);
CheckValue<IkReal> x13153=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13153.valid){
continue;
}
CheckValue<IkReal> x13154 = IKatan2WithCheck(IkReal((((x13149*x13151))+(((-1.0)*x13151*x13152))+((x13150*x13152))+(((-1.0)*x13149*x13150)))),IkReal((((r12*x13152))+(((-1.0)*r12*x13149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13153.value)))+(x13154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13155=IKcos(j4);
IkReal x13156=IKsin(j4);
IkReal x13157=(cj5*r00);
IkReal x13158=(cj5*r10);
IkReal x13159=(r21*sj5);
IkReal x13160=((1.0)*cj2);
IkReal x13161=(cj5*r20);
IkReal x13162=((1.0)*x13155);
IkReal x13163=((1.0)*x13156);
IkReal x13164=(sj5*x13156);
IkReal x13165=(sj5*x13155);
evalcond[0]=((((-1.0)*x13158*x13162))+((r11*x13165))+((r12*x13156)));
evalcond[1]=((((-1.0)*r22*x13162))+(((-1.0)*x13161*x13163))+((x13156*x13159)));
evalcond[2]=((((-1.0)*x13157*x13163))+((r01*x13164))+(((-1.0)*r02*x13162)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13162))+(((-1.0)*x13158*x13163))+((r11*x13164)));
evalcond[4]=((((-1.0)*cj1*x13160))+((sj1*sj2))+((x13155*x13159))+(((-1.0)*x13161*x13162))+((r22*x13156)));
evalcond[5]=((((-1.0)*x13157*x13162))+((r02*x13156))+((r01*x13165))+(((-1.0)*sj1*x13160))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13166=((1.0)*cj5);
CheckValue<IkReal> x13167 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13166))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13167.valid){
continue;
}
CheckValue<IkReal> x13168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13166))+(((-1.0)*r00*sj5)))),-1);
if(!x13168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13167.value)+(((1.5707963267949)*(x13168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13169=IKcos(j4);
IkReal x13170=IKsin(j4);
IkReal x13171=(cj5*r00);
IkReal x13172=(cj5*r10);
IkReal x13173=(r21*sj5);
IkReal x13174=((1.0)*cj2);
IkReal x13175=(cj5*r20);
IkReal x13176=((1.0)*x13169);
IkReal x13177=((1.0)*x13170);
IkReal x13178=(sj5*x13170);
IkReal x13179=(sj5*x13169);
evalcond[0]=((((-1.0)*x13172*x13176))+((r12*x13170))+((r11*x13179)));
evalcond[1]=(((x13170*x13173))+(((-1.0)*r22*x13176))+(((-1.0)*x13175*x13177)));
evalcond[2]=(((r01*x13178))+(((-1.0)*r02*x13176))+(((-1.0)*x13171*x13177)));
evalcond[3]=((1.0)+(((-1.0)*x13172*x13177))+(((-1.0)*r12*x13176))+((r11*x13178)));
evalcond[4]=((((-1.0)*cj1*x13174))+((sj1*sj2))+((r22*x13170))+(((-1.0)*x13175*x13176))+((x13169*x13173)));
evalcond[5]=(((r01*x13179))+(((-1.0)*sj1*x13174))+(((-1.0)*cj1*sj2))+((r02*x13170))+(((-1.0)*x13171*x13176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13180=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13180.valid){
continue;
}
CheckValue<IkReal> x13181 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13180.value)))+(x13181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13182=IKcos(j4);
IkReal x13183=IKsin(j4);
IkReal x13184=(cj5*r00);
IkReal x13185=(cj5*r10);
IkReal x13186=(r21*sj5);
IkReal x13187=((1.0)*cj2);
IkReal x13188=(cj5*r20);
IkReal x13189=((1.0)*x13182);
IkReal x13190=((1.0)*x13183);
IkReal x13191=(sj5*x13183);
IkReal x13192=(sj5*x13182);
evalcond[0]=(((r12*x13183))+((r11*x13192))+(((-1.0)*x13185*x13189)));
evalcond[1]=(((x13183*x13186))+(((-1.0)*x13188*x13190))+(((-1.0)*r22*x13189)));
evalcond[2]=((((-1.0)*r02*x13189))+((r01*x13191))+(((-1.0)*x13184*x13190)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13189))+((r11*x13191))+(((-1.0)*x13185*x13190)));
evalcond[4]=(((r22*x13183))+((x13182*x13186))+(((-1.0)*x13188*x13189))+((sj1*sj2))+(((-1.0)*cj1*x13187)));
evalcond[5]=(((r02*x13183))+(((-1.0)*cj1*sj2))+((r01*x13192))+(((-1.0)*sj1*x13187))+(((-1.0)*x13184*x13189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13193=((-1.0)*r00);
IkReal x13195 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13195)==0){
continue;
}
IkReal x13194=pow(x13195,-0.5);
CheckValue<IkReal> x13196 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13193),IKFAST_ATAN2_MAGTHRESH);
if(!x13196.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13196.value));
IkReal gconst19=(r01*x13194);
IkReal gconst20=(x13193*x13194);
CheckValue<IkReal> x13197 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13197.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13198=((-1.0)*r00);
IkReal x13199=x13194;
CheckValue<IkReal> x13201 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13198),IKFAST_ATAN2_MAGTHRESH);
if(!x13201.valid){
continue;
}
IkReal x13200=((-1.0)*(x13201.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13200;
IkReal gconst18=x13200;
IkReal gconst19=(r01*x13199);
IkReal gconst20=(x13198*x13199);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13202=((-1.0)*r00);
IkReal x13203=x13194;
CheckValue<IkReal> x13205 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13202),IKFAST_ATAN2_MAGTHRESH);
if(!x13205.valid){
continue;
}
IkReal x13204=((-1.0)*(x13205.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13204;
IkReal gconst18=x13204;
IkReal gconst19=(r01*x13203);
IkReal gconst20=(x13202*x13203);
CheckValue<IkReal> x13213=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13213.valid){
continue;
}
IkReal x13206=x13213.value;
IkReal x13207=(sj3*x13206);
IkReal x13208=(r11*x13207);
IkReal x13209=(r21*x13207);
IkReal x13210=(r20*x13207);
IkReal x13211=(r10*x13207);
IkReal x13212=(r00*r01*x13207);
j4eval[0]=IKsign((((r21*x13208*(r01*r01)))+((r10*x13210*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r10*x13209))+((r00*r01*r20*x13208))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13214=gconst19*gconst19;
IkReal x13215=gconst20*gconst20;
IkReal x13216=(gconst20*sj3);
IkReal x13217=((1.0)*cj3);
IkReal x13218=(r10*sj3);
IkReal x13219=(gconst19*r21);
IkReal x13220=(r11*r20);
IkReal x13221=(cj3*gconst20);
IkReal x13222=((1.0)*r10*r20);
IkReal x13223=(r21*x13214);
CheckValue<IkReal> x13224 = IKatan2WithCheck(IkReal((((gconst19*r22*x13218))+((r11*r22*x13216)))),IkReal((((x13218*x13223))+((r11*x13216*x13219))+(((-1.0)*sj3*x13215*x13220))+(((-1.0)*gconst19*x13216*x13222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13224.valid){
continue;
}
CheckValue<IkReal> x13225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13217*x13223))+(((-1.0)*r12*r22*x13217))+((r10*x13219*x13221))+((gconst19*x13220*x13221))+(((-1.0)*r10*r20*x13215*x13217)))),-1);
if(!x13225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13224.value)+(((1.5707963267949)*(x13225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13226=IKsin(j4);
IkReal x13227=IKcos(j4);
IkReal x13228=(sj1*sj2);
IkReal x13229=(gconst20*sj3);
IkReal x13230=(gconst19*r21);
IkReal x13231=(gconst20*r10);
IkReal x13232=(cj3*gconst19);
IkReal x13233=(gconst19*sj3);
IkReal x13234=((1.0)*cj1);
IkReal x13235=(cj3*gconst20);
IkReal x13236=(cj2*sj1);
IkReal x13237=(cj2*x13234);
IkReal x13238=((1.0)*x13227);
IkReal x13239=((1.0)*x13226);
IkReal x13240=(cj3*x13226);
IkReal x13241=(gconst19*x13226);
evalcond[0]=((((-1.0)*gconst20*r20*x13239))+((x13226*x13230))+(((-1.0)*r22*x13238)));
evalcond[1]=((((-1.0)*r02*x13238))+((r01*x13241))+(((-1.0)*gconst20*r00*x13239)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13238))+((r11*x13241))+(((-1.0)*x13231*x13239)));
evalcond[3]=(((r11*x13227*x13232))+((r10*x13233))+((r11*x13229))+((r12*x13240))+(((-1.0)*cj3*x13231*x13238)));
evalcond[4]=(((r10*x13232))+(((-1.0)*r11*x13233*x13238))+((r10*x13227*x13229))+((r11*x13235))+(((-1.0)*r12*sj3*x13239)));
evalcond[5]=(((r20*x13233))+((r21*x13229))+((cj1*sj2))+((r22*x13240))+((cj3*x13227*x13230))+(((-1.0)*r20*x13235*x13238))+x13236);
evalcond[6]=((((-1.0)*r00*x13235*x13238))+((r01*x13227*x13232))+((r02*x13240))+((r01*x13229))+x13228+(((-1.0)*x13237))+((r00*x13233)));
evalcond[7]=(((r20*x13232))+(((-1.0)*r22*sj3*x13239))+((r21*x13235))+((r20*x13227*x13229))+(((-1.0)*sj3*x13230*x13238))+x13228+(((-1.0)*x13237)));
evalcond[8]=(((r01*x13235))+((r00*x13227*x13229))+(((-1.0)*r01*x13233*x13238))+(((-1.0)*x13236))+(((-1.0)*r02*sj3*x13239))+(((-1.0)*sj2*x13234))+((r00*x13232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13242=gconst19*gconst19;
IkReal x13243=gconst20*gconst20;
IkReal x13244=(r21*sj3);
IkReal x13245=(cj3*r11);
IkReal x13246=(gconst19*gconst20);
IkReal x13247=((1.0)*r10);
IkReal x13248=(cj3*r10);
IkReal x13249=(r20*x13243);
CheckValue<IkReal> x13250=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13244*x13246*x13247))+((r12*r22*sj3))+((r10*sj3*x13249))+(((-1.0)*r11*r20*sj3*x13246))+((r11*x13242*x13244)))),-1);
if(!x13250.valid){
continue;
}
CheckValue<IkReal> x13251 = IKatan2WithCheck(IkReal((((gconst19*r22*x13248))+((gconst20*r22*x13245)))),IkReal(((((-1.0)*cj3*r20*x13246*x13247))+(((-1.0)*x13245*x13249))+((r21*x13242*x13248))+((r21*x13245*x13246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13250.value)))+(x13251.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13252=IKsin(j4);
IkReal x13253=IKcos(j4);
IkReal x13254=(sj1*sj2);
IkReal x13255=(gconst20*sj3);
IkReal x13256=(gconst19*r21);
IkReal x13257=(gconst20*r10);
IkReal x13258=(cj3*gconst19);
IkReal x13259=(gconst19*sj3);
IkReal x13260=((1.0)*cj1);
IkReal x13261=(cj3*gconst20);
IkReal x13262=(cj2*sj1);
IkReal x13263=(cj2*x13260);
IkReal x13264=((1.0)*x13253);
IkReal x13265=((1.0)*x13252);
IkReal x13266=(cj3*x13252);
IkReal x13267=(gconst19*x13252);
evalcond[0]=(((x13252*x13256))+(((-1.0)*r22*x13264))+(((-1.0)*gconst20*r20*x13265)));
evalcond[1]=((((-1.0)*gconst20*r00*x13265))+((r01*x13267))+(((-1.0)*r02*x13264)));
evalcond[2]=((1.0)+((r11*x13267))+(((-1.0)*r12*x13264))+(((-1.0)*x13257*x13265)));
evalcond[3]=(((r10*x13259))+((r12*x13266))+((r11*x13255))+((r11*x13253*x13258))+(((-1.0)*cj3*x13257*x13264)));
evalcond[4]=(((r11*x13261))+((r10*x13258))+((r10*x13253*x13255))+(((-1.0)*r12*sj3*x13265))+(((-1.0)*r11*x13259*x13264)));
evalcond[5]=(((r21*x13255))+(((-1.0)*r20*x13261*x13264))+((cj1*sj2))+((r22*x13266))+x13262+((r20*x13259))+((cj3*x13253*x13256)));
evalcond[6]=(((r01*x13253*x13258))+(((-1.0)*x13263))+(((-1.0)*r00*x13261*x13264))+((r01*x13255))+((r00*x13259))+((r02*x13266))+x13254);
evalcond[7]=((((-1.0)*x13263))+((r21*x13261))+((r20*x13253*x13255))+(((-1.0)*r22*sj3*x13265))+(((-1.0)*sj3*x13256*x13264))+x13254+((r20*x13258)));
evalcond[8]=((((-1.0)*x13262))+(((-1.0)*sj2*x13260))+((r01*x13261))+(((-1.0)*r02*sj3*x13265))+((r00*x13258))+(((-1.0)*r01*x13259*x13264))+((r00*x13253*x13255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13268 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13268.valid){
continue;
}
CheckValue<IkReal> x13269=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13268.value)+(((1.5707963267949)*(x13269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13270=IKsin(j4);
IkReal x13271=IKcos(j4);
IkReal x13272=(sj1*sj2);
IkReal x13273=(gconst20*sj3);
IkReal x13274=(gconst19*r21);
IkReal x13275=(gconst20*r10);
IkReal x13276=(cj3*gconst19);
IkReal x13277=(gconst19*sj3);
IkReal x13278=((1.0)*cj1);
IkReal x13279=(cj3*gconst20);
IkReal x13280=(cj2*sj1);
IkReal x13281=(cj2*x13278);
IkReal x13282=((1.0)*x13271);
IkReal x13283=((1.0)*x13270);
IkReal x13284=(cj3*x13270);
IkReal x13285=(gconst19*x13270);
evalcond[0]=((((-1.0)*r22*x13282))+(((-1.0)*gconst20*r20*x13283))+((x13270*x13274)));
evalcond[1]=((((-1.0)*gconst20*r00*x13283))+(((-1.0)*r02*x13282))+((r01*x13285)));
evalcond[2]=((1.0)+((r11*x13285))+(((-1.0)*x13275*x13283))+(((-1.0)*r12*x13282)));
evalcond[3]=(((r12*x13284))+((r11*x13273))+((r11*x13271*x13276))+((r10*x13277))+(((-1.0)*cj3*x13275*x13282)));
evalcond[4]=(((r11*x13279))+((r10*x13276))+(((-1.0)*r11*x13277*x13282))+(((-1.0)*r12*sj3*x13283))+((r10*x13271*x13273)));
evalcond[5]=(((r21*x13273))+((r20*x13277))+((cj1*sj2))+((cj3*x13271*x13274))+((r22*x13284))+x13280+(((-1.0)*r20*x13279*x13282)));
evalcond[6]=(((r01*x13273))+((r00*x13277))+((r02*x13284))+((r01*x13271*x13276))+(((-1.0)*r00*x13279*x13282))+x13272+(((-1.0)*x13281)));
evalcond[7]=(((r21*x13279))+((r20*x13276))+(((-1.0)*r22*sj3*x13283))+(((-1.0)*sj3*x13274*x13282))+x13272+((r20*x13271*x13273))+(((-1.0)*x13281)));
evalcond[8]=(((r01*x13279))+(((-1.0)*sj2*x13278))+((r00*x13276))+(((-1.0)*x13280))+(((-1.0)*r01*x13277*x13282))+((r00*x13271*x13273))+(((-1.0)*r02*sj3*x13283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13286=((-1.0)*r01);
IkReal x13288 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13288)==0){
continue;
}
IkReal x13287=pow(x13288,-0.5);
CheckValue<IkReal> x13289 = IKatan2WithCheck(IkReal(x13286),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13289.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13289.value))));
IkReal gconst22=(x13286*x13287);
IkReal gconst23=((1.0)*r00*x13287);
CheckValue<IkReal> x13290 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13290.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13290.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13291=((-1.0)*r01);
CheckValue<IkReal> x13294 = IKatan2WithCheck(IkReal(x13291),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13294.valid){
continue;
}
IkReal x13292=((1.0)*(x13294.value));
IkReal x13293=x13287;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13292)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13292)));
IkReal gconst22=(x13291*x13293);
IkReal gconst23=((1.0)*r00*x13293);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13295=((-1.0)*r01);
CheckValue<IkReal> x13298 = IKatan2WithCheck(IkReal(x13295),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13298.valid){
continue;
}
IkReal x13296=((1.0)*(x13298.value));
IkReal x13297=x13287;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13296)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13296)));
IkReal gconst22=(x13295*x13297);
IkReal gconst23=((1.0)*r00*x13297);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13299=gconst22*gconst22;
IkReal x13300=gconst23*gconst23;
IkReal x13301=(r21*sj3);
IkReal x13302=((1.0)*cj3);
IkReal x13303=(gconst23*r11);
IkReal x13304=(r22*sj3);
IkReal x13305=(gconst22*r10);
IkReal x13306=((1.0)*r20*sj3);
CheckValue<IkReal> x13307 = IKatan2WithCheck(IkReal((((x13303*x13304))+((x13304*x13305)))),IkReal(((((-1.0)*gconst23*x13305*x13306))+(((-1.0)*r11*x13300*x13306))+((gconst22*x13301*x13303))+((r10*x13299*x13301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13307.valid){
continue;
}
CheckValue<IkReal> x13308=IKPowWithIntegerCheck(IKsign((((cj3*gconst23*r21*x13305))+((cj3*gconst22*r20*x13303))+(((-1.0)*r10*r20*x13300*x13302))+(((-1.0)*r11*r21*x13299*x13302))+(((-1.0)*r12*r22*x13302)))),-1);
if(!x13308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13307.value)+(((1.5707963267949)*(x13308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13309=IKsin(j4);
IkReal x13310=IKcos(j4);
IkReal x13311=(sj1*sj2);
IkReal x13312=(gconst23*sj3);
IkReal x13313=(gconst22*sj3);
IkReal x13314=(cj2*sj1);
IkReal x13315=((1.0)*cj1);
IkReal x13316=(cj3*gconst23);
IkReal x13317=(cj3*gconst22);
IkReal x13318=(cj2*x13315);
IkReal x13319=((1.0)*x13310);
IkReal x13320=(cj3*x13309);
IkReal x13321=(gconst22*x13309);
IkReal x13322=((1.0)*sj3*x13309);
IkReal x13323=(x13310*x13317);
IkReal x13324=((1.0)*gconst23*x13309);
evalcond[0]=(((r21*x13321))+(((-1.0)*r20*x13324))+(((-1.0)*r22*x13319)));
evalcond[1]=((((-1.0)*r00*x13324))+(((-1.0)*r02*x13319))+((r01*x13321)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13324))+((r11*x13321))+(((-1.0)*r12*x13319)));
evalcond[3]=(((r12*x13320))+((r11*x13312))+((r10*x13313))+((r11*x13323))+(((-1.0)*r10*x13316*x13319)));
evalcond[4]=((((-1.0)*r11*x13313*x13319))+(((-1.0)*r12*x13322))+((r11*x13316))+((r10*x13317))+((r10*x13310*x13312)));
evalcond[5]=(((r20*x13313))+((cj1*sj2))+(((-1.0)*r20*x13316*x13319))+((r21*x13323))+((r21*x13312))+x13314+((r22*x13320)));
evalcond[6]=(((r02*x13320))+(((-1.0)*r00*x13316*x13319))+((r01*x13312))+((r00*x13313))+((r01*x13323))+(((-1.0)*x13318))+x13311);
evalcond[7]=((((-1.0)*r22*x13322))+(((-1.0)*r21*x13313*x13319))+((r20*x13317))+((r20*x13310*x13312))+(((-1.0)*x13318))+((r21*x13316))+x13311);
evalcond[8]=((((-1.0)*r02*x13322))+(((-1.0)*sj2*x13315))+(((-1.0)*r01*x13313*x13319))+((r01*x13316))+((r00*x13317))+((r00*x13310*x13312))+(((-1.0)*x13314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13325=((1.0)*gconst23);
CheckValue<IkReal> x13326=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13325)))),-1);
if(!x13326.valid){
continue;
}
CheckValue<IkReal> x13327 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13326.value)))+(x13327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13328=IKsin(j4);
IkReal x13329=IKcos(j4);
IkReal x13330=(sj1*sj2);
IkReal x13331=(gconst23*sj3);
IkReal x13332=(gconst22*sj3);
IkReal x13333=(cj2*sj1);
IkReal x13334=((1.0)*cj1);
IkReal x13335=(cj3*gconst23);
IkReal x13336=(cj3*gconst22);
IkReal x13337=(cj2*x13334);
IkReal x13338=((1.0)*x13329);
IkReal x13339=(cj3*x13328);
IkReal x13340=(gconst22*x13328);
IkReal x13341=((1.0)*sj3*x13328);
IkReal x13342=(x13329*x13336);
IkReal x13343=((1.0)*gconst23*x13328);
evalcond[0]=((((-1.0)*r22*x13338))+((r21*x13340))+(((-1.0)*r20*x13343)));
evalcond[1]=(((r01*x13340))+(((-1.0)*r00*x13343))+(((-1.0)*r02*x13338)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13338))+(((-1.0)*r10*x13343))+((r11*x13340)));
evalcond[3]=(((r10*x13332))+(((-1.0)*r10*x13335*x13338))+((r11*x13342))+((r12*x13339))+((r11*x13331)));
evalcond[4]=((((-1.0)*r11*x13332*x13338))+((r10*x13336))+((r10*x13329*x13331))+(((-1.0)*r12*x13341))+((r11*x13335)));
evalcond[5]=(((r22*x13339))+((cj1*sj2))+((r21*x13342))+((r20*x13332))+((r21*x13331))+(((-1.0)*r20*x13335*x13338))+x13333);
evalcond[6]=((((-1.0)*x13337))+((r02*x13339))+((r00*x13332))+((r01*x13331))+(((-1.0)*r00*x13335*x13338))+((r01*x13342))+x13330);
evalcond[7]=((((-1.0)*x13337))+((r20*x13336))+(((-1.0)*r21*x13332*x13338))+((r21*x13335))+((r20*x13329*x13331))+(((-1.0)*r22*x13341))+x13330);
evalcond[8]=((((-1.0)*sj2*x13334))+(((-1.0)*x13333))+(((-1.0)*r01*x13332*x13338))+(((-1.0)*r02*x13341))+((r00*x13336))+((r01*x13335))+((r00*x13329*x13331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13344=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13344.valid){
continue;
}
CheckValue<IkReal> x13345 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13344.value)))+(x13345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13346=IKsin(j4);
IkReal x13347=IKcos(j4);
IkReal x13348=(sj1*sj2);
IkReal x13349=(gconst23*sj3);
IkReal x13350=(gconst22*sj3);
IkReal x13351=(cj2*sj1);
IkReal x13352=((1.0)*cj1);
IkReal x13353=(cj3*gconst23);
IkReal x13354=(cj3*gconst22);
IkReal x13355=(cj2*x13352);
IkReal x13356=((1.0)*x13347);
IkReal x13357=(cj3*x13346);
IkReal x13358=(gconst22*x13346);
IkReal x13359=((1.0)*sj3*x13346);
IkReal x13360=(x13347*x13354);
IkReal x13361=((1.0)*gconst23*x13346);
evalcond[0]=((((-1.0)*r22*x13356))+(((-1.0)*r20*x13361))+((r21*x13358)));
evalcond[1]=((((-1.0)*r02*x13356))+(((-1.0)*r00*x13361))+((r01*x13358)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13361))+(((-1.0)*r12*x13356))+((r11*x13358)));
evalcond[3]=(((r11*x13360))+(((-1.0)*r10*x13353*x13356))+((r10*x13350))+((r11*x13349))+((r12*x13357)));
evalcond[4]=((((-1.0)*r12*x13359))+((r10*x13347*x13349))+((r10*x13354))+((r11*x13353))+(((-1.0)*r11*x13350*x13356)));
evalcond[5]=(((r22*x13357))+((cj1*sj2))+((r20*x13350))+(((-1.0)*r20*x13353*x13356))+((r21*x13349))+((r21*x13360))+x13351);
evalcond[6]=(((r02*x13357))+((r01*x13360))+(((-1.0)*r00*x13353*x13356))+((r00*x13350))+((r01*x13349))+(((-1.0)*x13355))+x13348);
evalcond[7]=((((-1.0)*r22*x13359))+((r20*x13347*x13349))+((r20*x13354))+((r21*x13353))+(((-1.0)*x13355))+x13348+(((-1.0)*r21*x13350*x13356)));
evalcond[8]=((((-1.0)*r02*x13359))+((r00*x13347*x13349))+(((-1.0)*x13351))+(((-1.0)*r01*x13350*x13356))+((r01*x13353))+((r00*x13354))+(((-1.0)*sj2*x13352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13363 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13363)==0){
continue;
}
IkReal x13362=pow(x13363,-0.5);
CheckValue<IkReal> x13364 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13364.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13364.value));
IkReal gconst25=((-1.0)*r21*x13362);
IkReal gconst26=(r20*x13362);
CheckValue<IkReal> x13365 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13365.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13365.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13368 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13368.valid){
continue;
}
IkReal x13366=((-1.0)*(x13368.value));
IkReal x13367=x13362;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13366;
IkReal gconst24=x13366;
IkReal gconst25=((-1.0)*r21*x13367);
IkReal gconst26=(r20*x13367);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13371 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13371.valid){
continue;
}
IkReal x13369=((-1.0)*(x13371.value));
IkReal x13370=x13362;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13369;
IkReal gconst24=x13369;
IkReal gconst25=((-1.0)*r21*x13370);
IkReal gconst26=(r20*x13370);
CheckValue<IkReal> x13379=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13379.valid){
continue;
}
IkReal x13372=x13379.value;
IkReal x13373=(sj3*x13372);
IkReal x13374=(r11*x13373);
IkReal x13375=(r00*x13373);
IkReal x13376=(r01*x13373);
IkReal x13377=(r10*x13373);
IkReal x13378=(r20*r21*x13373);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x13375*(r20*r20)))+((r01*x13374*(r21*r21)))+((r00*r20*r21*x13374))+((r10*r20*r21*x13376))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13380=gconst25*gconst25;
IkReal x13381=gconst26*gconst26;
IkReal x13382=(r00*r11);
IkReal x13383=(r01*r10);
IkReal x13384=(r02*sj3);
IkReal x13385=(gconst25*r10);
IkReal x13386=(gconst26*r11);
IkReal x13387=((1.0)*sj3);
IkReal x13388=((1.0)*cj3);
IkReal x13389=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13390 = IKatan2WithCheck(IkReal((((x13384*x13385))+((x13384*x13386)))),IkReal((((gconst25*r01*sj3*x13386))+((sj3*x13380*x13383))+(((-1.0)*x13381*x13382*x13387))+(((-1.0)*gconst26*r00*x13385*x13387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13390.valid){
continue;
}
CheckValue<IkReal> x13391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x13388))+((x13383*x13389))+((x13382*x13389))+(((-1.0)*r00*r10*x13381*x13388))+(((-1.0)*r01*r11*x13380*x13388)))),-1);
if(!x13391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13390.value)+(((1.5707963267949)*(x13391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13392=IKsin(j4);
IkReal x13393=IKcos(j4);
IkReal x13394=(sj1*sj2);
IkReal x13395=(gconst26*sj3);
IkReal x13396=(gconst25*sj3);
IkReal x13397=(gconst26*r10);
IkReal x13398=(gconst25*r11);
IkReal x13399=(cj3*gconst25);
IkReal x13400=((1.0)*cj2);
IkReal x13401=(cj1*sj2);
IkReal x13402=(gconst26*r00);
IkReal x13403=(gconst26*r20);
IkReal x13404=(cj3*gconst26);
IkReal x13405=(cj1*x13400);
IkReal x13406=((1.0)*x13393);
IkReal x13407=((1.0)*x13392);
IkReal x13408=(cj3*x13392);
IkReal x13409=(gconst25*x13392);
evalcond[0]=(((r21*x13409))+(((-1.0)*x13403*x13407))+(((-1.0)*r22*x13406)));
evalcond[1]=((((-1.0)*r02*x13406))+((r01*x13409))+(((-1.0)*x13402*x13407)));
evalcond[2]=((1.0)+((x13392*x13398))+(((-1.0)*x13397*x13407))+(((-1.0)*r12*x13406)));
evalcond[3]=(((r11*x13395))+((r10*x13396))+((cj3*x13393*x13398))+((r12*x13408))+(((-1.0)*cj3*x13397*x13406)));
evalcond[4]=(((r10*x13399))+((r11*x13404))+(((-1.0)*r11*x13396*x13406))+((r10*x13393*x13395))+(((-1.0)*r12*sj3*x13407)));
evalcond[5]=(x13401+((cj2*sj1))+((r21*x13395))+((r20*x13396))+((r22*x13408))+(((-1.0)*cj3*x13403*x13406))+((r21*x13393*x13399)));
evalcond[6]=((((-1.0)*cj3*x13402*x13406))+((r00*x13396))+(((-1.0)*x13405))+((r01*x13395))+((r02*x13408))+((r01*x13393*x13399))+x13394);
evalcond[7]=((((-1.0)*r22*sj3*x13407))+((r20*x13393*x13395))+((r20*x13399))+((r21*x13404))+(((-1.0)*x13405))+(((-1.0)*r21*x13396*x13406))+x13394);
evalcond[8]=(((r01*x13404))+(((-1.0)*r01*x13396*x13406))+(((-1.0)*r02*sj3*x13407))+(((-1.0)*sj1*x13400))+((r00*x13393*x13395))+((r00*x13399))+(((-1.0)*x13401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13410=gconst26*gconst26;
IkReal x13411=gconst25*gconst25;
IkReal x13412=(r01*r10);
IkReal x13413=(cj3*r11);
IkReal x13414=(gconst25*gconst26);
IkReal x13415=(cj3*r10);
IkReal x13416=(r00*x13410);
IkReal x13417=((1.0)*sj3*x13414);
CheckValue<IkReal> x13418 = IKatan2WithCheck(IkReal((((gconst25*r02*x13415))+((gconst26*r02*x13413)))),IkReal(((((-1.0)*x13413*x13416))+((cj3*x13411*x13412))+(((-1.0)*r00*x13414*x13415))+((r01*x13413*x13414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13418.valid){
continue;
}
CheckValue<IkReal> x13419=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13416))+((r02*r12*sj3))+(((-1.0)*x13412*x13417))+((r01*r11*sj3*x13411))+(((-1.0)*r00*r11*x13417)))),-1);
if(!x13419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13418.value)+(((1.5707963267949)*(x13419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13420=IKsin(j4);
IkReal x13421=IKcos(j4);
IkReal x13422=(sj1*sj2);
IkReal x13423=(gconst26*sj3);
IkReal x13424=(gconst25*sj3);
IkReal x13425=(gconst26*r10);
IkReal x13426=(gconst25*r11);
IkReal x13427=(cj3*gconst25);
IkReal x13428=((1.0)*cj2);
IkReal x13429=(cj1*sj2);
IkReal x13430=(gconst26*r00);
IkReal x13431=(gconst26*r20);
IkReal x13432=(cj3*gconst26);
IkReal x13433=(cj1*x13428);
IkReal x13434=((1.0)*x13421);
IkReal x13435=((1.0)*x13420);
IkReal x13436=(cj3*x13420);
IkReal x13437=(gconst25*x13420);
evalcond[0]=((((-1.0)*r22*x13434))+(((-1.0)*x13431*x13435))+((r21*x13437)));
evalcond[1]=(((r01*x13437))+(((-1.0)*x13430*x13435))+(((-1.0)*r02*x13434)));
evalcond[2]=((1.0)+((x13420*x13426))+(((-1.0)*r12*x13434))+(((-1.0)*x13425*x13435)));
evalcond[3]=(((cj3*x13421*x13426))+((r11*x13423))+(((-1.0)*cj3*x13425*x13434))+((r12*x13436))+((r10*x13424)));
evalcond[4]=((((-1.0)*r11*x13424*x13434))+((r11*x13432))+((r10*x13421*x13423))+(((-1.0)*r12*sj3*x13435))+((r10*x13427)));
evalcond[5]=(x13429+((cj2*sj1))+((r21*x13421*x13427))+((r22*x13436))+((r21*x13423))+(((-1.0)*cj3*x13431*x13434))+((r20*x13424)));
evalcond[6]=(x13422+((r01*x13421*x13427))+(((-1.0)*x13433))+((r02*x13436))+(((-1.0)*cj3*x13430*x13434))+((r00*x13424))+((r01*x13423)));
evalcond[7]=(x13422+(((-1.0)*r21*x13424*x13434))+(((-1.0)*x13433))+((r20*x13421*x13423))+((r21*x13432))+(((-1.0)*r22*sj3*x13435))+((r20*x13427)));
evalcond[8]=((((-1.0)*r01*x13424*x13434))+((r01*x13432))+(((-1.0)*x13429))+(((-1.0)*sj1*x13428))+(((-1.0)*r02*sj3*x13435))+((r00*x13421*x13423))+((r00*x13427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13438=((1.0)*gconst26);
CheckValue<IkReal> x13439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13438))+(((-1.0)*gconst25*r00)))),-1);
if(!x13439.valid){
continue;
}
CheckValue<IkReal> x13440 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13438))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13439.value)))+(x13440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13441=IKsin(j4);
IkReal x13442=IKcos(j4);
IkReal x13443=(sj1*sj2);
IkReal x13444=(gconst26*sj3);
IkReal x13445=(gconst25*sj3);
IkReal x13446=(gconst26*r10);
IkReal x13447=(gconst25*r11);
IkReal x13448=(cj3*gconst25);
IkReal x13449=((1.0)*cj2);
IkReal x13450=(cj1*sj2);
IkReal x13451=(gconst26*r00);
IkReal x13452=(gconst26*r20);
IkReal x13453=(cj3*gconst26);
IkReal x13454=(cj1*x13449);
IkReal x13455=((1.0)*x13442);
IkReal x13456=((1.0)*x13441);
IkReal x13457=(cj3*x13441);
IkReal x13458=(gconst25*x13441);
evalcond[0]=((((-1.0)*r22*x13455))+((r21*x13458))+(((-1.0)*x13452*x13456)));
evalcond[1]=((((-1.0)*r02*x13455))+(((-1.0)*x13451*x13456))+((r01*x13458)));
evalcond[2]=((1.0)+(((-1.0)*x13446*x13456))+((x13441*x13447))+(((-1.0)*r12*x13455)));
evalcond[3]=(((r12*x13457))+(((-1.0)*cj3*x13446*x13455))+((cj3*x13442*x13447))+((r10*x13445))+((r11*x13444)));
evalcond[4]=(((r11*x13453))+(((-1.0)*r11*x13445*x13455))+(((-1.0)*r12*sj3*x13456))+((r10*x13448))+((r10*x13442*x13444)));
evalcond[5]=(x13450+((cj2*sj1))+(((-1.0)*cj3*x13452*x13455))+((r21*x13442*x13448))+((r20*x13445))+((r22*x13457))+((r21*x13444)));
evalcond[6]=(x13443+(((-1.0)*cj3*x13451*x13455))+(((-1.0)*x13454))+((r00*x13445))+((r01*x13444))+((r02*x13457))+((r01*x13442*x13448)));
evalcond[7]=(x13443+((r21*x13453))+((r20*x13442*x13444))+(((-1.0)*x13454))+((r20*x13448))+(((-1.0)*r21*x13445*x13455))+(((-1.0)*r22*sj3*x13456)));
evalcond[8]=((((-1.0)*r01*x13445*x13455))+(((-1.0)*r02*sj3*x13456))+(((-1.0)*x13450))+((r00*x13448))+((r00*x13442*x13444))+((r01*x13453))+(((-1.0)*sj1*x13449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13460 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13460)==0){
continue;
}
IkReal x13459=pow(x13460,-0.5);
CheckValue<IkReal> x13461 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13461.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13461.value))));
IkReal gconst28=((1.0)*r21*x13459);
IkReal gconst29=((-1.0)*r20*x13459);
CheckValue<IkReal> x13462 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13462.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13462.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13465 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13465.valid){
continue;
}
IkReal x13463=((1.0)*(x13465.value));
IkReal x13464=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13463)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13463)));
IkReal gconst28=((1.0)*r21*x13464);
IkReal gconst29=((-1.0)*r20*x13464);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13468 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13468.valid){
continue;
}
IkReal x13466=((1.0)*(x13468.value));
IkReal x13467=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13466)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13466)));
IkReal gconst28=((1.0)*r21*x13467);
IkReal gconst29=((-1.0)*r20*x13467);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
IkReal x13469=((1.0)*(x13471.value));
IkReal x13470=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13469)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13469)));
IkReal gconst28=((1.0)*r21*x13470);
IkReal gconst29=((-1.0)*r20*x13470);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13474 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13474.valid){
continue;
}
IkReal x13472=((1.0)*(x13474.value));
IkReal x13473=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13472)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13472)));
IkReal gconst28=((1.0)*r21*x13473);
IkReal gconst29=((-1.0)*r20*x13473);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13477.valid){
continue;
}
IkReal x13475=((1.0)*(x13477.value));
IkReal x13476=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13475)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13475)));
IkReal gconst28=((1.0)*r21*x13476);
IkReal gconst29=((-1.0)*r20*x13476);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13480.valid){
continue;
}
IkReal x13478=((1.0)*(x13480.value));
IkReal x13479=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13478)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13478)));
IkReal gconst28=((1.0)*r21*x13479);
IkReal gconst29=((-1.0)*r20*x13479);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13481=(gconst29*r10);
IkReal x13482=(gconst28*r11);
CheckValue<IkReal> x13483 = IKatan2WithCheck(IkReal((x13481+(((-1.0)*x13482)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13483.valid){
continue;
}
CheckValue<IkReal> x13484=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13482*x13482)+(((-2.0)*x13481*x13482))+(x13481*x13481))),-1);
if(!x13484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13483.value)+(((1.5707963267949)*(x13484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13485=IKsin(j4);
IkReal x13486=IKcos(j4);
IkReal x13487=(gconst28*r11);
IkReal x13488=((1.0)*cj2);
IkReal x13489=((1.0)*x13486);
IkReal x13490=(gconst29*x13486);
IkReal x13491=(gconst28*x13485);
IkReal x13492=((1.0)*x13485);
IkReal x13493=(gconst29*x13492);
evalcond[0]=((((-1.0)*r20*x13493))+(((-1.0)*r22*x13489))+((r21*x13491)));
evalcond[1]=((((-1.0)*r00*x13493))+(((-1.0)*r02*x13489))+((r01*x13491)));
evalcond[2]=((((-1.0)*r12*x13492))+((r10*x13490))+(((-1.0)*x13487*x13489)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13489))+(((-1.0)*r10*x13493))+((x13485*x13487)));
evalcond[4]=((((-1.0)*r22*x13492))+((sj1*sj2))+((r20*x13490))+(((-1.0)*cj1*x13488))+(((-1.0)*gconst28*r21*x13489)));
evalcond[5]=((((-1.0)*sj1*x13488))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13492))+((r00*x13490))+(((-1.0)*gconst28*r01*x13489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13494=((1.0)*gconst29);
CheckValue<IkReal> x13495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13494))+(((-1.0)*gconst28*r00)))),-1);
if(!x13495.valid){
continue;
}
CheckValue<IkReal> x13496 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13494))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13495.value)))+(x13496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13497=IKsin(j4);
IkReal x13498=IKcos(j4);
IkReal x13499=(gconst28*r11);
IkReal x13500=((1.0)*cj2);
IkReal x13501=((1.0)*x13498);
IkReal x13502=(gconst29*x13498);
IkReal x13503=(gconst28*x13497);
IkReal x13504=((1.0)*x13497);
IkReal x13505=(gconst29*x13504);
evalcond[0]=((((-1.0)*r20*x13505))+((r21*x13503))+(((-1.0)*r22*x13501)));
evalcond[1]=((((-1.0)*r00*x13505))+(((-1.0)*r02*x13501))+((r01*x13503)));
evalcond[2]=(((r10*x13502))+(((-1.0)*r12*x13504))+(((-1.0)*x13499*x13501)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13501))+((x13497*x13499))+(((-1.0)*r10*x13505)));
evalcond[4]=(((r20*x13502))+((sj1*sj2))+(((-1.0)*cj1*x13500))+(((-1.0)*gconst28*r21*x13501))+(((-1.0)*r22*x13504)));
evalcond[5]=((((-1.0)*sj1*x13500))+(((-1.0)*gconst28*r01*x13501))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13504))+((r00*x13502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13506=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13506.valid){
continue;
}
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13506.value)))+(x13507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13508=IKsin(j4);
IkReal x13509=IKcos(j4);
IkReal x13510=(gconst28*r11);
IkReal x13511=((1.0)*cj2);
IkReal x13512=((1.0)*x13509);
IkReal x13513=(gconst29*x13509);
IkReal x13514=(gconst28*x13508);
IkReal x13515=((1.0)*x13508);
IkReal x13516=(gconst29*x13515);
evalcond[0]=(((r21*x13514))+(((-1.0)*r22*x13512))+(((-1.0)*r20*x13516)));
evalcond[1]=((((-1.0)*r00*x13516))+((r01*x13514))+(((-1.0)*r02*x13512)));
evalcond[2]=((((-1.0)*r12*x13515))+(((-1.0)*x13510*x13512))+((r10*x13513)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13512))+((x13508*x13510))+(((-1.0)*r10*x13516)));
evalcond[4]=((((-1.0)*r22*x13515))+((r20*x13513))+(((-1.0)*cj1*x13511))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13512)));
evalcond[5]=((((-1.0)*sj1*x13511))+(((-1.0)*gconst28*r01*x13512))+(((-1.0)*cj1*sj2))+((r00*x13513))+(((-1.0)*r02*x13515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13519 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13519.valid){
continue;
}
IkReal x13517=((1.0)*(x13519.value));
IkReal x13518=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13517)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13517)));
IkReal gconst28=((1.0)*r21*x13518);
IkReal gconst29=((-1.0)*r20*x13518);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13522 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13522.valid){
continue;
}
IkReal x13520=((1.0)*(x13522.value));
IkReal x13521=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13520)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13520)));
IkReal gconst28=((1.0)*r21*x13521);
IkReal gconst29=((-1.0)*r20*x13521);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13525 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13525.valid){
continue;
}
IkReal x13523=((1.0)*(x13525.value));
IkReal x13524=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13523)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13523)));
IkReal gconst28=((1.0)*r21*x13524);
IkReal gconst29=((-1.0)*r20*x13524);
IkReal x13526=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13530=IKPowWithIntegerCheck(x13526,-1);
if(!x13530.valid){
continue;
}
IkReal x13527=x13530.value;
IkReal x13528=((1.0)*x13527);
IkReal x13529=((((-1.0)*x13528*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13527))+(((-1.0)*x13528*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13529;
j4eval[1]=r12;
j4eval[2]=x13526;
j4eval[3]=IKsign(x13529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13531=(gconst28*r11);
IkReal x13532=(gconst29*r10);
CheckValue<IkReal> x13533=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13531*x13531)))+(((2.0)*x13531*x13532))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13532*x13532))))),-1);
if(!x13533.valid){
continue;
}
CheckValue<IkReal> x13534 = IKatan2WithCheck(IkReal((x13531+(((-1.0)*x13532)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13533.value)))+(x13534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13535=IKcos(j4);
IkReal x13536=IKsin(j4);
IkReal x13537=(gconst29*r10);
IkReal x13538=(gconst29*r20);
IkReal x13539=(gconst28*r21);
IkReal x13540=((1.0)*cj2);
IkReal x13541=(gconst29*r00);
IkReal x13542=((1.0)*x13535);
IkReal x13543=((1.0)*x13536);
IkReal x13544=(gconst28*x13535);
IkReal x13545=(gconst28*x13536);
evalcond[0]=(((r11*x13544))+((r12*x13536))+(((-1.0)*x13537*x13542)));
evalcond[1]=(((x13536*x13539))+(((-1.0)*x13538*x13543))+(((-1.0)*r22*x13542)));
evalcond[2]=(((r01*x13545))+(((-1.0)*r02*x13542))+(((-1.0)*x13541*x13543)));
evalcond[3]=((1.0)+((r11*x13545))+(((-1.0)*r12*x13542))+(((-1.0)*x13537*x13543)));
evalcond[4]=(((sj1*sj2))+((x13535*x13539))+((r22*x13536))+(((-1.0)*x13538*x13542))+(((-1.0)*cj1*x13540)));
evalcond[5]=(((r01*x13544))+((r02*x13536))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13540))+(((-1.0)*x13541*x13542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13546=((1.0)*gconst29);
CheckValue<IkReal> x13547=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13546))+(((-1.0)*gconst28*r00)))),-1);
if(!x13547.valid){
continue;
}
CheckValue<IkReal> x13548 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13547.value)))+(x13548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13549=IKcos(j4);
IkReal x13550=IKsin(j4);
IkReal x13551=(gconst29*r10);
IkReal x13552=(gconst29*r20);
IkReal x13553=(gconst28*r21);
IkReal x13554=((1.0)*cj2);
IkReal x13555=(gconst29*r00);
IkReal x13556=((1.0)*x13549);
IkReal x13557=((1.0)*x13550);
IkReal x13558=(gconst28*x13549);
IkReal x13559=(gconst28*x13550);
evalcond[0]=(((r12*x13550))+(((-1.0)*x13551*x13556))+((r11*x13558)));
evalcond[1]=(((x13550*x13553))+(((-1.0)*x13552*x13557))+(((-1.0)*r22*x13556)));
evalcond[2]=(((r01*x13559))+(((-1.0)*x13555*x13557))+(((-1.0)*r02*x13556)));
evalcond[3]=((1.0)+(((-1.0)*x13551*x13557))+((r11*x13559))+(((-1.0)*r12*x13556)));
evalcond[4]=(((r22*x13550))+((sj1*sj2))+(((-1.0)*cj1*x13554))+(((-1.0)*x13552*x13556))+((x13549*x13553)));
evalcond[5]=(((r01*x13558))+(((-1.0)*x13555*x13556))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13554))+((r02*x13550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13560=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13560.valid){
continue;
}
CheckValue<IkReal> x13561 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13560.value)))+(x13561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13562=IKcos(j4);
IkReal x13563=IKsin(j4);
IkReal x13564=(gconst29*r10);
IkReal x13565=(gconst29*r20);
IkReal x13566=(gconst28*r21);
IkReal x13567=((1.0)*cj2);
IkReal x13568=(gconst29*r00);
IkReal x13569=((1.0)*x13562);
IkReal x13570=((1.0)*x13563);
IkReal x13571=(gconst28*x13562);
IkReal x13572=(gconst28*x13563);
evalcond[0]=((((-1.0)*x13564*x13569))+((r11*x13571))+((r12*x13563)));
evalcond[1]=(((x13563*x13566))+(((-1.0)*x13565*x13570))+(((-1.0)*r22*x13569)));
evalcond[2]=((((-1.0)*x13568*x13570))+(((-1.0)*r02*x13569))+((r01*x13572)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13569))+((r11*x13572))+(((-1.0)*x13564*x13570)));
evalcond[4]=(((x13562*x13566))+((sj1*sj2))+(((-1.0)*cj1*x13567))+((r22*x13563))+(((-1.0)*x13565*x13569)));
evalcond[5]=((((-1.0)*x13568*x13569))+(((-1.0)*sj1*x13567))+(((-1.0)*cj1*sj2))+((r02*x13563))+((r01*x13571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13575 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13575.valid){
continue;
}
IkReal x13573=((1.0)*(x13575.value));
IkReal x13574=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13573)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13573)));
IkReal gconst28=((1.0)*r21*x13574);
IkReal gconst29=((-1.0)*r20*x13574);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13578 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13578.valid){
continue;
}
IkReal x13576=((1.0)*(x13578.value));
IkReal x13577=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13576)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13576)));
IkReal gconst28=((1.0)*r21*x13577);
IkReal gconst29=((-1.0)*r20*x13577);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13581 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13581.valid){
continue;
}
IkReal x13579=((1.0)*(x13581.value));
IkReal x13580=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13579)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13579)));
IkReal gconst28=((1.0)*r21*x13580);
IkReal gconst29=((-1.0)*r20*x13580);
IkReal x13582=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13586=IKPowWithIntegerCheck(x13582,-1);
if(!x13586.valid){
continue;
}
IkReal x13583=x13586.value;
IkReal x13584=((1.0)*x13583);
IkReal x13585=((((-1.0)*x13584*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13583))+(((-1.0)*(r12*r12)))+(((-1.0)*x13584*(r10*r10)*(r20*r20))));
j4eval[0]=x13585;
j4eval[1]=r12;
j4eval[2]=x13582;
j4eval[3]=IKsign(x13585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13587=(gconst28*r11);
IkReal x13588=(gconst29*r10);
CheckValue<IkReal> x13589=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13587*x13587)))+(((-1.0)*(x13588*x13588)))+(((-1.0)*(r12*r12)))+(((2.0)*x13587*x13588)))),-1);
if(!x13589.valid){
continue;
}
CheckValue<IkReal> x13590 = IKatan2WithCheck(IkReal((x13587+(((-1.0)*x13588)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13589.value)))+(x13590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13591=IKcos(j4);
IkReal x13592=IKsin(j4);
IkReal x13593=(gconst29*r10);
IkReal x13594=(gconst29*r20);
IkReal x13595=(gconst28*r21);
IkReal x13596=(gconst29*r00);
IkReal x13597=((1.0)*x13591);
IkReal x13598=((1.0)*x13592);
IkReal x13599=(gconst28*x13591);
IkReal x13600=(gconst28*x13592);
evalcond[0]=(((r11*x13599))+(((-1.0)*x13593*x13597))+((r12*x13592)));
evalcond[1]=(((x13592*x13595))+(((-1.0)*r22*x13597))+(((-1.0)*x13594*x13598)));
evalcond[2]=((((-1.0)*x13596*x13598))+(((-1.0)*r02*x13597))+((r01*x13600)));
evalcond[3]=((1.0)+((r11*x13600))+(((-1.0)*r12*x13597))+(((-1.0)*x13593*x13598)));
evalcond[4]=(((cj2*sj1))+((r22*x13592))+((cj1*sj2))+((x13591*x13595))+(((-1.0)*x13594*x13597)));
evalcond[5]=((((-1.0)*x13596*x13597))+((r01*x13599))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13601=((1.0)*gconst29);
CheckValue<IkReal> x13602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13601))+(((-1.0)*gconst28*r00)))),-1);
if(!x13602.valid){
continue;
}
CheckValue<IkReal> x13603 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13602.value)))+(x13603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13604=IKcos(j4);
IkReal x13605=IKsin(j4);
IkReal x13606=(gconst29*r10);
IkReal x13607=(gconst29*r20);
IkReal x13608=(gconst28*r21);
IkReal x13609=(gconst29*r00);
IkReal x13610=((1.0)*x13604);
IkReal x13611=((1.0)*x13605);
IkReal x13612=(gconst28*x13604);
IkReal x13613=(gconst28*x13605);
evalcond[0]=((((-1.0)*x13606*x13610))+((r12*x13605))+((r11*x13612)));
evalcond[1]=(((x13605*x13608))+(((-1.0)*x13607*x13611))+(((-1.0)*r22*x13610)));
evalcond[2]=((((-1.0)*x13609*x13611))+(((-1.0)*r02*x13610))+((r01*x13613)));
evalcond[3]=((1.0)+(((-1.0)*x13606*x13611))+((r11*x13613))+(((-1.0)*r12*x13610)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13605))+((x13604*x13608))+(((-1.0)*x13607*x13610)));
evalcond[5]=((((-1.0)*x13609*x13610))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13612))+((r02*x13605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13614=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13614.valid){
continue;
}
CheckValue<IkReal> x13615 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13614.value)))+(x13615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13616=IKcos(j4);
IkReal x13617=IKsin(j4);
IkReal x13618=(gconst29*r10);
IkReal x13619=(gconst29*r20);
IkReal x13620=(gconst28*r21);
IkReal x13621=(gconst29*r00);
IkReal x13622=((1.0)*x13616);
IkReal x13623=((1.0)*x13617);
IkReal x13624=(gconst28*x13616);
IkReal x13625=(gconst28*x13617);
evalcond[0]=(((r11*x13624))+((r12*x13617))+(((-1.0)*x13618*x13622)));
evalcond[1]=(((x13617*x13620))+(((-1.0)*r22*x13622))+(((-1.0)*x13619*x13623)));
evalcond[2]=((((-1.0)*x13621*x13623))+((r01*x13625))+(((-1.0)*r02*x13622)));
evalcond[3]=((1.0)+((r11*x13625))+(((-1.0)*r12*x13622))+(((-1.0)*x13618*x13623)));
evalcond[4]=(((cj2*sj1))+((x13616*x13620))+((cj1*sj2))+(((-1.0)*x13619*x13622))+((r22*x13617)));
evalcond[5]=((((-1.0)*x13621*x13622))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13624))+((r02*x13617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13628 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13628.valid){
continue;
}
IkReal x13626=((1.0)*(x13628.value));
IkReal x13627=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13626)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13626)));
IkReal gconst28=((1.0)*r21*x13627);
IkReal gconst29=((-1.0)*r20*x13627);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13631 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13631.valid){
continue;
}
IkReal x13629=((1.0)*(x13631.value));
IkReal x13630=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13629)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13629)));
IkReal gconst28=((1.0)*r21*x13630);
IkReal gconst29=((-1.0)*r20*x13630);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13634 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13634.valid){
continue;
}
IkReal x13632=((1.0)*(x13634.value));
IkReal x13633=x13459;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13632)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13632)));
IkReal gconst28=((1.0)*r21*x13633);
IkReal gconst29=((-1.0)*r20*x13633);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13635=(gconst29*r10);
IkReal x13636=(gconst28*r11);
CheckValue<IkReal> x13637=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13635*x13636))+(x13636*x13636)+(x13635*x13635))),-1);
if(!x13637.valid){
continue;
}
CheckValue<IkReal> x13638 = IKatan2WithCheck(IkReal(((((-1.0)*x13636))+x13635)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13637.value)))+(x13638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13639=IKsin(j4);
IkReal x13640=IKcos(j4);
IkReal x13641=(gconst28*r11);
IkReal x13642=((1.0)*x13640);
IkReal x13643=(gconst29*x13640);
IkReal x13644=(gconst28*x13639);
IkReal x13645=((1.0)*x13639);
IkReal x13646=(gconst29*x13645);
evalcond[0]=((((-1.0)*r20*x13646))+(((-1.0)*r22*x13642))+((r21*x13644)));
evalcond[1]=((((-1.0)*r00*x13646))+((r01*x13644))+(((-1.0)*r02*x13642)));
evalcond[2]=((((-1.0)*r12*x13645))+(((-1.0)*x13641*x13642))+((r10*x13643)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13646))+((x13639*x13641))+(((-1.0)*r12*x13642)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13642))+((cj1*sj2))+((r20*x13643))+(((-1.0)*r22*x13645)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13643))+(((-1.0)*gconst28*r01*x13642))+(((-1.0)*r02*x13645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13647=((1.0)*gconst29);
CheckValue<IkReal> x13648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13647)))),-1);
if(!x13648.valid){
continue;
}
CheckValue<IkReal> x13649 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13647))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13648.value)))+(x13649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13650=IKsin(j4);
IkReal x13651=IKcos(j4);
IkReal x13652=(gconst28*r11);
IkReal x13653=((1.0)*x13651);
IkReal x13654=(gconst29*x13651);
IkReal x13655=(gconst28*x13650);
IkReal x13656=((1.0)*x13650);
IkReal x13657=(gconst29*x13656);
evalcond[0]=((((-1.0)*r20*x13657))+(((-1.0)*r22*x13653))+((r21*x13655)));
evalcond[1]=((((-1.0)*r00*x13657))+((r01*x13655))+(((-1.0)*r02*x13653)));
evalcond[2]=(((r10*x13654))+(((-1.0)*r12*x13656))+(((-1.0)*x13652*x13653)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13653))+(((-1.0)*r10*x13657))+((x13650*x13652)));
evalcond[4]=(((r20*x13654))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13656))+(((-1.0)*gconst28*r21*x13653)));
evalcond[5]=(((r00*x13654))+(((-1.0)*gconst28*r01*x13653))+(((-1.0)*r02*x13656))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13658=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13658.valid){
continue;
}
CheckValue<IkReal> x13659 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13658.value)))+(x13659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13660=IKsin(j4);
IkReal x13661=IKcos(j4);
IkReal x13662=(gconst28*r11);
IkReal x13663=((1.0)*x13661);
IkReal x13664=(gconst29*x13661);
IkReal x13665=(gconst28*x13660);
IkReal x13666=((1.0)*x13660);
IkReal x13667=(gconst29*x13666);
evalcond[0]=((((-1.0)*r22*x13663))+(((-1.0)*r20*x13667))+((r21*x13665)));
evalcond[1]=((((-1.0)*r00*x13667))+((r01*x13665))+(((-1.0)*r02*x13663)));
evalcond[2]=((((-1.0)*r12*x13666))+(((-1.0)*x13662*x13663))+((r10*x13664)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13663))+((x13660*x13662))+(((-1.0)*r10*x13667)));
evalcond[4]=((((-1.0)*r22*x13666))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13663))+((r20*x13664)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13664))+(((-1.0)*r02*x13666))+(((-1.0)*gconst28*r01*x13663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13668=gconst28*gconst28;
IkReal x13669=gconst29*gconst29;
IkReal x13670=(r11*r21);
IkReal x13671=(gconst29*sj3);
IkReal x13672=((1.0)*cj3);
IkReal x13673=(r10*r20);
IkReal x13674=(r10*r21);
IkReal x13675=(r11*r20);
IkReal x13676=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13677 = IKatan2WithCheck(IkReal((((r11*r22*x13671))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*gconst28*x13671*x13673))+((gconst28*x13670*x13671))+(((-1.0)*sj3*x13669*x13675))+((sj3*x13668*x13674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13677.valid){
continue;
}
CheckValue<IkReal> x13678=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13668*x13670*x13672))+((x13675*x13676))+((x13674*x13676))+(((-1.0)*x13669*x13672*x13673))+(((-1.0)*r12*r22*x13672)))),-1);
if(!x13678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13677.value)+(((1.5707963267949)*(x13678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13679=IKsin(j4);
IkReal x13680=IKcos(j4);
IkReal x13681=(sj1*sj2);
IkReal x13682=(gconst29*r20);
IkReal x13683=(gconst28*r20);
IkReal x13684=((1.0)*cj2);
IkReal x13685=(r11*sj3);
IkReal x13686=(cj1*sj2);
IkReal x13687=(gconst29*r01);
IkReal x13688=(gconst29*r10);
IkReal x13689=(cj3*gconst28);
IkReal x13690=(cj3*gconst29);
IkReal x13691=(gconst28*sj3);
IkReal x13692=(gconst29*r00);
IkReal x13693=(cj1*x13684);
IkReal x13694=((1.0)*x13680);
IkReal x13695=((1.0)*x13679);
IkReal x13696=(gconst28*x13679);
IkReal x13697=(cj3*x13679);
IkReal x13698=(sj3*x13680);
evalcond[0]=(((r21*x13696))+(((-1.0)*r22*x13694))+(((-1.0)*x13682*x13695)));
evalcond[1]=(((r01*x13696))+(((-1.0)*r02*x13694))+(((-1.0)*x13692*x13695)));
evalcond[2]=((1.0)+(((-1.0)*x13688*x13695))+((r11*x13696))+(((-1.0)*r12*x13694)));
evalcond[3]=(((gconst29*x13685))+((r10*x13691))+((r11*x13680*x13689))+(((-1.0)*cj3*x13688*x13694))+((r12*x13697)));
evalcond[4]=((((-1.0)*gconst28*x13685*x13694))+((x13688*x13698))+(((-1.0)*r12*sj3*x13695))+((r10*x13689))+((r11*x13690)));
evalcond[5]=(((cj2*sj1))+x13686+((gconst29*r21*sj3))+((r22*x13697))+((sj3*x13683))+((r21*x13680*x13689))+(((-1.0)*cj3*x13682*x13694)));
evalcond[6]=(((r00*x13691))+x13681+(((-1.0)*x13693))+(((-1.0)*r00*x13690*x13694))+((r02*x13697))+((sj3*x13687))+((r01*x13680*x13689)));
evalcond[7]=((((-1.0)*r22*sj3*x13695))+x13681+(((-1.0)*x13693))+((cj3*x13683))+(((-1.0)*r21*x13691*x13694))+((r21*x13690))+((x13682*x13698)));
evalcond[8]=(((x13692*x13698))+(((-1.0)*sj1*x13684))+((cj3*x13687))+(((-1.0)*x13686))+((r00*x13689))+(((-1.0)*r01*x13691*x13694))+(((-1.0)*r02*sj3*x13695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13699=((1.0)*gconst29);
CheckValue<IkReal> x13700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13699)))),-1);
if(!x13700.valid){
continue;
}
CheckValue<IkReal> x13701 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13699))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13700.value)))+(x13701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13702=IKsin(j4);
IkReal x13703=IKcos(j4);
IkReal x13704=(sj1*sj2);
IkReal x13705=(gconst29*r20);
IkReal x13706=(gconst28*r20);
IkReal x13707=((1.0)*cj2);
IkReal x13708=(r11*sj3);
IkReal x13709=(cj1*sj2);
IkReal x13710=(gconst29*r01);
IkReal x13711=(gconst29*r10);
IkReal x13712=(cj3*gconst28);
IkReal x13713=(cj3*gconst29);
IkReal x13714=(gconst28*sj3);
IkReal x13715=(gconst29*r00);
IkReal x13716=(cj1*x13707);
IkReal x13717=((1.0)*x13703);
IkReal x13718=((1.0)*x13702);
IkReal x13719=(gconst28*x13702);
IkReal x13720=(cj3*x13702);
IkReal x13721=(sj3*x13703);
evalcond[0]=(((r21*x13719))+(((-1.0)*r22*x13717))+(((-1.0)*x13705*x13718)));
evalcond[1]=(((r01*x13719))+(((-1.0)*r02*x13717))+(((-1.0)*x13715*x13718)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13717))+((r11*x13719))+(((-1.0)*x13711*x13718)));
evalcond[3]=((((-1.0)*cj3*x13711*x13717))+((r12*x13720))+((gconst29*x13708))+((r11*x13703*x13712))+((r10*x13714)));
evalcond[4]=(((x13711*x13721))+(((-1.0)*gconst28*x13708*x13717))+((r10*x13712))+((r11*x13713))+(((-1.0)*r12*sj3*x13718)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13706))+(((-1.0)*cj3*x13705*x13717))+x13709+((r22*x13720))+((r21*x13703*x13712)));
evalcond[6]=(((sj3*x13710))+x13704+((r00*x13714))+((r01*x13703*x13712))+((r02*x13720))+(((-1.0)*x13716))+(((-1.0)*r00*x13713*x13717)));
evalcond[7]=(((r21*x13713))+x13704+((x13705*x13721))+((cj3*x13706))+(((-1.0)*r22*sj3*x13718))+(((-1.0)*r21*x13714*x13717))+(((-1.0)*x13716)));
evalcond[8]=((((-1.0)*r01*x13714*x13717))+((x13715*x13721))+(((-1.0)*sj1*x13707))+(((-1.0)*x13709))+((cj3*x13710))+((r00*x13712))+(((-1.0)*r02*sj3*x13718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13722=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13722.valid){
continue;
}
CheckValue<IkReal> x13723 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13722.value)))+(x13723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13724=IKsin(j4);
IkReal x13725=IKcos(j4);
IkReal x13726=(sj1*sj2);
IkReal x13727=(gconst29*r20);
IkReal x13728=(gconst28*r20);
IkReal x13729=((1.0)*cj2);
IkReal x13730=(r11*sj3);
IkReal x13731=(cj1*sj2);
IkReal x13732=(gconst29*r01);
IkReal x13733=(gconst29*r10);
IkReal x13734=(cj3*gconst28);
IkReal x13735=(cj3*gconst29);
IkReal x13736=(gconst28*sj3);
IkReal x13737=(gconst29*r00);
IkReal x13738=(cj1*x13729);
IkReal x13739=((1.0)*x13725);
IkReal x13740=((1.0)*x13724);
IkReal x13741=(gconst28*x13724);
IkReal x13742=(cj3*x13724);
IkReal x13743=(sj3*x13725);
evalcond[0]=((((-1.0)*r22*x13739))+(((-1.0)*x13727*x13740))+((r21*x13741)));
evalcond[1]=(((r01*x13741))+(((-1.0)*r02*x13739))+(((-1.0)*x13737*x13740)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13739))+(((-1.0)*x13733*x13740))+((r11*x13741)));
evalcond[3]=(((r10*x13736))+((r11*x13725*x13734))+(((-1.0)*cj3*x13733*x13739))+((r12*x13742))+((gconst29*x13730)));
evalcond[4]=(((r10*x13734))+(((-1.0)*gconst28*x13730*x13739))+((r11*x13735))+(((-1.0)*r12*sj3*x13740))+((x13733*x13743)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13731+((r21*x13725*x13734))+((r22*x13742))+(((-1.0)*cj3*x13727*x13739))+((sj3*x13728)));
evalcond[6]=(((r00*x13736))+(((-1.0)*r00*x13735*x13739))+x13726+(((-1.0)*x13738))+((sj3*x13732))+((r01*x13725*x13734))+((r02*x13742)));
evalcond[7]=((((-1.0)*r21*x13736*x13739))+x13726+(((-1.0)*x13738))+((r21*x13735))+(((-1.0)*r22*sj3*x13740))+((x13727*x13743))+((cj3*x13728)));
evalcond[8]=(((r00*x13734))+(((-1.0)*r02*sj3*x13740))+(((-1.0)*sj1*x13729))+(((-1.0)*r01*x13736*x13739))+(((-1.0)*x13731))+((cj3*x13732))+((x13737*x13743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13744=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13744);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13744);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13745=(r11*sj5);
IkReal x13746=((1.0)*cj5*r10);
j4eval[0]=(x13745+(((-1.0)*x13746)));
j4eval[1]=((((-1.0)*cj3*x13746))+((cj3*x13745)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13747=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13748=(cj5*r10);
IkReal x13749=(r11*sj5);
j4eval[0]=(x13749+(((-1.0)*x13748)));
j4eval[1]=((((-1.0)*sj3*x13749))+((sj3*x13748)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13750=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13750);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13750);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13751=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13751);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13751);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13752=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13752)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13752)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13753=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13753);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13753);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13754=((1.0)*sj1);
CheckValue<IkReal> x13755=IKPowWithIntegerCheck(r22,-1);
if(!x13755.valid){
continue;
}
CheckValue<IkReal> x13756=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13756.valid){
continue;
}
if( IKabs(((x13755.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13754)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13756.value)*((((cj1*cj2))+(((-1.0)*sj2*x13754)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13755.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13754))))))+IKsqr(((x13756.value)*((((cj1*cj2))+(((-1.0)*sj2*x13754))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13755.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13754))))), ((x13756.value)*((((cj1*cj2))+(((-1.0)*sj2*x13754))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13757=IKsin(j4);
IkReal x13758=IKcos(j4);
IkReal x13759=((1.0)*cj5);
IkReal x13760=(sj5*x13758);
IkReal x13761=(sj5*x13757);
evalcond[0]=((-1.0)*r22*x13758);
evalcond[1]=(((cj2*sj1))+((r22*x13757))+((cj1*sj2)));
evalcond[2]=(((r01*x13761))+(((-1.0)*r00*x13757*x13759)));
evalcond[3]=(((r11*x13760))+(((-1.0)*r10*x13758*x13759)));
evalcond[4]=((1.0)+((r11*x13761))+(((-1.0)*r10*x13757*x13759)));
evalcond[5]=(((r01*x13760))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13758*x13759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13762=((1.0)*cj5);
CheckValue<IkReal> x13763=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13762))),-1);
if(!x13763.valid){
continue;
}
CheckValue<IkReal> x13764=IKPowWithIntegerCheck(((((-1.0)*r00*x13762))+((r01*sj5))),-1);
if(!x13764.valid){
continue;
}
if( IKabs(((-1.0)*(x13763.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13764.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13763.value)))+IKsqr(((x13764.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13763.value)), ((x13764.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13765=IKsin(j4);
IkReal x13766=IKcos(j4);
IkReal x13767=((1.0)*cj5);
IkReal x13768=(sj5*x13766);
IkReal x13769=(sj5*x13765);
evalcond[0]=((-1.0)*r22*x13766);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13765)));
evalcond[2]=(((r01*x13769))+(((-1.0)*r00*x13765*x13767)));
evalcond[3]=(((r11*x13768))+(((-1.0)*r10*x13766*x13767)));
evalcond[4]=((1.0)+((r11*x13769))+(((-1.0)*r10*x13765*x13767)));
evalcond[5]=((((-1.0)*r00*x13766*x13767))+((r01*x13768))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13770=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13770);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13770);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13771=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13771);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13771);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13772=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13772.valid){
continue;
}
CheckValue<IkReal> x13773=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13773.valid){
continue;
}
if( IKabs(((-1.0)*(x13772.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13773.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13772.value)))+IKsqr(((x13773.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13772.value)), ((x13773.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13774=IKsin(j4);
IkReal x13775=IKcos(j4);
IkReal x13776=(cj5*x13775);
IkReal x13777=(sj5*x13774);
IkReal x13778=((1.0)*cj5*x13774);
IkReal x13779=((1.0)*sj5*x13775);
evalcond[0]=((-1.0)*r22*x13775);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13774))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13778))+((r01*x13777)));
evalcond[3]=(((r10*x13776))+(((-1.0)*r11*x13779)));
evalcond[4]=((1.0)+((r11*x13777))+(((-1.0)*r10*x13778)));
evalcond[5]=((((-1.0)*r01*x13779))+((r00*x13776))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13780=IKPowWithIntegerCheck(r22,-1);
if(!x13780.valid){
continue;
}
CheckValue<IkReal> x13781=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13781.valid){
continue;
}
if( IKabs(((x13780.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13781.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13780.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13781.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13780.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13781.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13782=IKsin(j4);
IkReal x13783=IKcos(j4);
IkReal x13784=(cj5*x13783);
IkReal x13785=(sj5*x13782);
IkReal x13786=((1.0)*cj5*x13782);
IkReal x13787=((1.0)*sj5*x13783);
evalcond[0]=((-1.0)*r22*x13783);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13782))+((cj1*sj2)));
evalcond[2]=(((r01*x13785))+(((-1.0)*r00*x13786)));
evalcond[3]=((((-1.0)*r11*x13787))+((r10*x13784)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13786))+((r11*x13785)));
evalcond[5]=(((r00*x13784))+(((-1.0)*r01*x13787))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13788=((1.0)*r10);
CheckValue<IkReal> x13789=IKPowWithIntegerCheck(cj3,-1);
if(!x13789.valid){
continue;
}
CheckValue<IkReal> x13790=IKPowWithIntegerCheck(r22,-1);
if(!x13790.valid){
continue;
}
CheckValue<IkReal> x13791=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13788))+((cj3*r11*sj5))),-1);
if(!x13791.valid){
continue;
}
if( IKabs(((x13789.value)*(x13790.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13791.value)*(((((-1.0)*sj3*sj5*x13788))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13789.value)*(x13790.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13791.value)*(((((-1.0)*sj3*sj5*x13788))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13789.value)*(x13790.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13791.value)*(((((-1.0)*sj3*sj5*x13788))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13792=IKsin(j4);
IkReal x13793=IKcos(j4);
IkReal x13794=(sj1*sj2);
IkReal x13795=(r11*sj5);
IkReal x13796=(r00*sj3);
IkReal x13797=(cj5*r01);
IkReal x13798=((1.0)*cj1);
IkReal x13799=(cj3*sj5);
IkReal x13800=(cj5*r11);
IkReal x13801=(r10*sj3);
IkReal x13802=(cj2*sj1);
IkReal x13803=((1.0)*cj5);
IkReal x13804=((1.0)*sj3);
IkReal x13805=(r01*sj5);
IkReal x13806=(cj2*x13798);
IkReal x13807=(cj3*x13793);
IkReal x13808=(r22*x13792);
IkReal x13809=(cj5*x13793);
IkReal x13810=(x13792*x13803);
evalcond[0]=((-1.0)*r22*x13793);
evalcond[1]=(x13802+((cj1*sj2))+((cj3*x13808)));
evalcond[2]=(((x13792*x13805))+(((-1.0)*r00*x13810)));
evalcond[3]=((1.0)+((x13792*x13795))+(((-1.0)*r10*x13810)));
evalcond[4]=((((-1.0)*x13806))+x13794+(((-1.0)*x13804*x13808)));
evalcond[5]=(((x13795*x13807))+((sj5*x13801))+(((-1.0)*r10*x13803*x13807))+((sj3*x13800)));
evalcond[6]=((((-1.0)*x13793*x13795*x13804))+((cj3*x13800))+((r10*x13799))+((x13801*x13809)));
evalcond[7]=((((-1.0)*x13806))+x13794+((r01*x13793*x13799))+(((-1.0)*r00*x13803*x13807))+((sj3*x13797))+((sj5*x13796)));
evalcond[8]=(((r00*x13799))+(((-1.0)*x13802))+(((-1.0)*x13793*x13804*x13805))+(((-1.0)*sj2*x13798))+((x13796*x13809))+((cj3*x13797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13811=(cj5*r10);
IkReal x13812=((1.0)*r11);
CheckValue<IkReal> x13813=IKPowWithIntegerCheck(((((-1.0)*x13811))+((r11*sj5))),-1);
if(!x13813.valid){
continue;
}
CheckValue<IkReal> x13814=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13812))+((sj3*x13811))),-1);
if(!x13814.valid){
continue;
}
if( IKabs(((-1.0)*(x13813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13814.value)*(((((-1.0)*cj3*cj5*x13812))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13813.value)))+IKsqr(((x13814.value)*(((((-1.0)*cj3*cj5*x13812))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13813.value)), ((x13814.value)*(((((-1.0)*cj3*cj5*x13812))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13815=IKsin(j4);
IkReal x13816=IKcos(j4);
IkReal x13817=(sj1*sj2);
IkReal x13818=(r11*sj5);
IkReal x13819=(r00*sj3);
IkReal x13820=(cj5*r01);
IkReal x13821=((1.0)*cj1);
IkReal x13822=(cj3*sj5);
IkReal x13823=(cj5*r11);
IkReal x13824=(r10*sj3);
IkReal x13825=(cj2*sj1);
IkReal x13826=((1.0)*cj5);
IkReal x13827=((1.0)*sj3);
IkReal x13828=(r01*sj5);
IkReal x13829=(cj2*x13821);
IkReal x13830=(cj3*x13816);
IkReal x13831=(r22*x13815);
IkReal x13832=(cj5*x13816);
IkReal x13833=(x13815*x13826);
evalcond[0]=((-1.0)*r22*x13816);
evalcond[1]=(x13825+((cj1*sj2))+((cj3*x13831)));
evalcond[2]=(((x13815*x13828))+(((-1.0)*r00*x13833)));
evalcond[3]=((1.0)+((x13815*x13818))+(((-1.0)*r10*x13833)));
evalcond[4]=((((-1.0)*x13829))+x13817+(((-1.0)*x13827*x13831)));
evalcond[5]=(((x13818*x13830))+((sj3*x13823))+((sj5*x13824))+(((-1.0)*r10*x13826*x13830)));
evalcond[6]=(((r10*x13822))+(((-1.0)*x13816*x13818*x13827))+((cj3*x13823))+((x13824*x13832)));
evalcond[7]=((((-1.0)*x13829))+x13817+((r01*x13816*x13822))+((sj3*x13820))+((sj5*x13819))+(((-1.0)*r00*x13826*x13830)));
evalcond[8]=((((-1.0)*x13816*x13827*x13828))+((x13819*x13832))+((r00*x13822))+(((-1.0)*sj2*x13821))+(((-1.0)*x13825))+((cj3*x13820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13834=((1.0)*sj3);
IkReal x13835=(r11*sj5);
IkReal x13836=((1.0)*cj5*r10);
CheckValue<IkReal> x13837=IKPowWithIntegerCheck(((((-1.0)*x13836))+x13835),-1);
if(!x13837.valid){
continue;
}
CheckValue<IkReal> x13838=IKPowWithIntegerCheck(((((-1.0)*cj3*x13836))+((cj3*x13835))),-1);
if(!x13838.valid){
continue;
}
if( IKabs(((-1.0)*(x13837.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13838.value)*(((((-1.0)*r10*sj5*x13834))+(((-1.0)*cj5*r11*x13834)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13837.value)))+IKsqr(((x13838.value)*(((((-1.0)*r10*sj5*x13834))+(((-1.0)*cj5*r11*x13834))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13837.value)), ((x13838.value)*(((((-1.0)*r10*sj5*x13834))+(((-1.0)*cj5*r11*x13834))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13839=IKsin(j4);
IkReal x13840=IKcos(j4);
IkReal x13841=(sj1*sj2);
IkReal x13842=(r11*sj5);
IkReal x13843=(r00*sj3);
IkReal x13844=(cj5*r01);
IkReal x13845=((1.0)*cj1);
IkReal x13846=(cj3*sj5);
IkReal x13847=(cj5*r11);
IkReal x13848=(r10*sj3);
IkReal x13849=(cj2*sj1);
IkReal x13850=((1.0)*cj5);
IkReal x13851=((1.0)*sj3);
IkReal x13852=(r01*sj5);
IkReal x13853=(cj2*x13845);
IkReal x13854=(cj3*x13840);
IkReal x13855=(r22*x13839);
IkReal x13856=(cj5*x13840);
IkReal x13857=(x13839*x13850);
evalcond[0]=((-1.0)*r22*x13840);
evalcond[1]=(x13849+((cj1*sj2))+((cj3*x13855)));
evalcond[2]=(((x13839*x13852))+(((-1.0)*r00*x13857)));
evalcond[3]=((1.0)+((x13839*x13842))+(((-1.0)*r10*x13857)));
evalcond[4]=(x13841+(((-1.0)*x13851*x13855))+(((-1.0)*x13853)));
evalcond[5]=(((sj5*x13848))+((sj3*x13847))+((x13842*x13854))+(((-1.0)*r10*x13850*x13854)));
evalcond[6]=(((x13848*x13856))+(((-1.0)*x13840*x13842*x13851))+((r10*x13846))+((cj3*x13847)));
evalcond[7]=(x13841+((sj5*x13843))+((sj3*x13844))+((r01*x13840*x13846))+(((-1.0)*r00*x13850*x13854))+(((-1.0)*x13853)));
evalcond[8]=((((-1.0)*x13840*x13851*x13852))+(((-1.0)*sj2*x13845))+((x13843*x13856))+(((-1.0)*x13849))+((cj3*x13844))+((r00*x13846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13858=cj5*cj5;
IkReal x13859=((1.0)*cj3);
IkReal x13860=(r10*r21);
IkReal x13861=(cj5*sj5);
IkReal x13862=(r11*r21);
IkReal x13863=(r11*r20);
IkReal x13864=(r22*sj3);
IkReal x13865=(r10*r20);
IkReal x13866=((1.0)*sj3*x13858);
CheckValue<IkReal> x13867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13859))+((cj3*x13860*x13861))+(((-1.0)*x13859*x13862))+((cj3*x13861*x13863))+((cj3*x13858*x13862))+(((-1.0)*x13858*x13859*x13865)))),-1);
if(!x13867.valid){
continue;
}
CheckValue<IkReal> x13868 = IKatan2WithCheck(IkReal((((cj5*r11*x13864))+((r10*sj5*x13864)))),IkReal(((((-1.0)*x13863*x13866))+((sj3*x13860))+(((-1.0)*x13860*x13866))+(((-1.0)*sj3*x13861*x13865))+((sj3*x13861*x13862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13867.value)))+(x13868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13869=IKsin(j4);
IkReal x13870=IKcos(j4);
IkReal x13871=(sj1*sj2);
IkReal x13872=(cj5*sj3);
IkReal x13873=(cj5*r10);
IkReal x13874=(r00*sj5);
IkReal x13875=(r11*sj5);
IkReal x13876=(cj3*cj5);
IkReal x13877=((1.0)*cj1);
IkReal x13878=(cj3*sj5);
IkReal x13879=(r21*sj5);
IkReal x13880=(cj2*sj1);
IkReal x13881=(sj3*sj5);
IkReal x13882=(r01*sj5);
IkReal x13883=(cj2*x13877);
IkReal x13884=((1.0)*x13870);
IkReal x13885=((1.0)*x13869);
IkReal x13886=(cj3*x13869);
IkReal x13887=(cj3*x13870);
evalcond[0]=((((-1.0)*cj5*r20*x13885))+(((-1.0)*r22*x13884))+((x13869*x13879)));
evalcond[1]=((((-1.0)*r02*x13884))+((x13869*x13882))+(((-1.0)*cj5*r00*x13885)));
evalcond[2]=((1.0)+(((-1.0)*x13873*x13885))+((x13869*x13875))+(((-1.0)*r12*x13884)));
evalcond[3]=(((r10*x13881))+((r11*x13872))+((r12*x13886))+(((-1.0)*cj3*x13873*x13884))+((x13875*x13887)));
evalcond[4]=(((r10*x13870*x13872))+((r11*x13876))+(((-1.0)*sj3*x13875*x13884))+((r10*x13878))+(((-1.0)*r12*sj3*x13885)));
evalcond[5]=(x13880+((cj1*sj2))+((r21*x13872))+(((-1.0)*r20*x13876*x13884))+((r20*x13881))+((r21*x13870*x13878))+((r22*x13886)));
evalcond[6]=(((sj3*x13874))+(((-1.0)*r00*x13876*x13884))+x13871+((r02*x13886))+((r01*x13872))+((r01*x13870*x13878))+(((-1.0)*x13883)));
evalcond[7]=((((-1.0)*r22*sj3*x13885))+x13871+((r21*x13876))+((r20*x13878))+(((-1.0)*sj3*x13879*x13884))+((r20*x13870*x13872))+(((-1.0)*x13883)));
evalcond[8]=((((-1.0)*r01*x13881*x13884))+((cj3*x13874))+(((-1.0)*sj2*x13877))+((r01*x13876))+((r00*x13870*x13872))+(((-1.0)*x13880))+(((-1.0)*r02*sj3*x13885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13888=((1.0)*cj5);
CheckValue<IkReal> x13889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13888))+(((-1.0)*r00*sj5)))),-1);
if(!x13889.valid){
continue;
}
CheckValue<IkReal> x13890 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13889.value)))+(x13890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13891=IKsin(j4);
IkReal x13892=IKcos(j4);
IkReal x13893=(sj1*sj2);
IkReal x13894=(cj5*sj3);
IkReal x13895=(cj5*r10);
IkReal x13896=(r00*sj5);
IkReal x13897=(r11*sj5);
IkReal x13898=(cj3*cj5);
IkReal x13899=((1.0)*cj1);
IkReal x13900=(cj3*sj5);
IkReal x13901=(r21*sj5);
IkReal x13902=(cj2*sj1);
IkReal x13903=(sj3*sj5);
IkReal x13904=(r01*sj5);
IkReal x13905=(cj2*x13899);
IkReal x13906=((1.0)*x13892);
IkReal x13907=((1.0)*x13891);
IkReal x13908=(cj3*x13891);
IkReal x13909=(cj3*x13892);
evalcond[0]=((((-1.0)*cj5*r20*x13907))+(((-1.0)*r22*x13906))+((x13891*x13901)));
evalcond[1]=((((-1.0)*cj5*r00*x13907))+((x13891*x13904))+(((-1.0)*r02*x13906)));
evalcond[2]=((1.0)+((x13891*x13897))+(((-1.0)*r12*x13906))+(((-1.0)*x13895*x13907)));
evalcond[3]=(((r10*x13903))+((r12*x13908))+(((-1.0)*cj3*x13895*x13906))+((r11*x13894))+((x13897*x13909)));
evalcond[4]=(((r10*x13900))+(((-1.0)*r12*sj3*x13907))+((r10*x13892*x13894))+((r11*x13898))+(((-1.0)*sj3*x13897*x13906)));
evalcond[5]=(((r22*x13908))+(((-1.0)*r20*x13898*x13906))+((cj1*sj2))+x13902+((r20*x13903))+((r21*x13892*x13900))+((r21*x13894)));
evalcond[6]=((((-1.0)*r00*x13898*x13906))+((r02*x13908))+x13893+((sj3*x13896))+((r01*x13894))+(((-1.0)*x13905))+((r01*x13892*x13900)));
evalcond[7]=((((-1.0)*r22*sj3*x13907))+x13893+(((-1.0)*sj3*x13901*x13906))+((r20*x13892*x13894))+((r20*x13900))+((r21*x13898))+(((-1.0)*x13905)));
evalcond[8]=((((-1.0)*sj2*x13899))+((r00*x13892*x13894))+(((-1.0)*r01*x13903*x13906))+((cj3*x13896))+(((-1.0)*x13902))+(((-1.0)*r02*sj3*x13907))+((r01*x13898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13910=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13910.valid){
continue;
}
CheckValue<IkReal> x13911 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13910.value)))+(x13911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13912=IKsin(j4);
IkReal x13913=IKcos(j4);
IkReal x13914=(sj1*sj2);
IkReal x13915=(cj5*sj3);
IkReal x13916=(cj5*r10);
IkReal x13917=(r00*sj5);
IkReal x13918=(r11*sj5);
IkReal x13919=(cj3*cj5);
IkReal x13920=((1.0)*cj1);
IkReal x13921=(cj3*sj5);
IkReal x13922=(r21*sj5);
IkReal x13923=(cj2*sj1);
IkReal x13924=(sj3*sj5);
IkReal x13925=(r01*sj5);
IkReal x13926=(cj2*x13920);
IkReal x13927=((1.0)*x13913);
IkReal x13928=((1.0)*x13912);
IkReal x13929=(cj3*x13912);
IkReal x13930=(cj3*x13913);
evalcond[0]=((((-1.0)*r22*x13927))+(((-1.0)*cj5*r20*x13928))+((x13912*x13922)));
evalcond[1]=((((-1.0)*cj5*r00*x13928))+((x13912*x13925))+(((-1.0)*r02*x13927)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13927))+(((-1.0)*x13916*x13928))+((x13912*x13918)));
evalcond[3]=(((r10*x13924))+((x13918*x13930))+((r11*x13915))+((r12*x13929))+(((-1.0)*cj3*x13916*x13927)));
evalcond[4]=(((r10*x13921))+((r10*x13913*x13915))+(((-1.0)*sj3*x13918*x13927))+(((-1.0)*r12*sj3*x13928))+((r11*x13919)));
evalcond[5]=(((r20*x13924))+((cj1*sj2))+(((-1.0)*r20*x13919*x13927))+x13923+((r22*x13929))+((r21*x13915))+((r21*x13913*x13921)));
evalcond[6]=(x13914+(((-1.0)*r00*x13919*x13927))+(((-1.0)*x13926))+((sj3*x13917))+((r01*x13915))+((r01*x13913*x13921))+((r02*x13929)));
evalcond[7]=(((r20*x13921))+x13914+(((-1.0)*sj3*x13922*x13927))+(((-1.0)*x13926))+((r21*x13919))+(((-1.0)*r22*sj3*x13928))+((r20*x13913*x13915)));
evalcond[8]=((((-1.0)*sj2*x13920))+(((-1.0)*r01*x13924*x13927))+(((-1.0)*x13923))+((r00*x13913*x13915))+((cj3*x13917))+((r01*x13919))+(((-1.0)*r02*sj3*x13928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13931=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13931;
j4eval[1]=IKsign(x13931);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13932=((1.0)*cj5);
IkReal x13933=((((-1.0)*r21*x13932))+(((-1.0)*r20*sj5)));
j4eval[0]=x13933;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13932))))));
j4eval[2]=IKsign(x13933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13934=cj5*cj5;
IkReal x13935=(cj3*r21);
IkReal x13936=(cj5*sj5);
IkReal x13937=((1.0)*cj3);
IkReal x13938=((((-1.0)*r12*r22*x13937))+((r11*x13934*x13935))+(((-1.0)*r11*x13935))+((cj3*r11*r20*x13936))+(((-1.0)*r10*r20*x13934*x13937))+((r10*x13935*x13936)));
j4eval[0]=x13938;
j4eval[1]=IKsign(x13938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13939=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13939;
j4eval[1]=IKsign(x13939);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13940=((1.0)*cj5);
IkReal x13941=((((-1.0)*r21*x13940))+(((-1.0)*r20*sj5)));
j4eval[0]=x13941;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13940))))));
j4eval[2]=IKsign(x13941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13942=cj5*cj5;
IkReal x13943=r11*r11;
IkReal x13944=(cj5*r10);
IkReal x13945=(r11*sj5);
IkReal x13946=((((-1.0)*x13943))+(((-1.0)*x13942*(r10*r10)))+(((2.0)*x13944*x13945))+((x13942*x13943))+(((-1.0)*(r12*r12))));
j4eval[0]=x13946;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13945))+x13944))));
j4eval[2]=IKsign(x13946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13947=cj5*cj5;
IkReal x13948=r11*r11;
IkReal x13949=(cj5*r10);
IkReal x13950=(r11*sj5);
CheckValue<IkReal> x13951 = IKatan2WithCheck(IkReal((x13949+(((-1.0)*x13950)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13951.valid){
continue;
}
CheckValue<IkReal> x13952=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13948))+(((-1.0)*x13947*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13947*x13948))+(((2.0)*x13949*x13950)))),-1);
if(!x13952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13951.value)+(((1.5707963267949)*(x13952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13953=IKsin(j4);
IkReal x13954=IKcos(j4);
IkReal x13955=(cj5*r10);
IkReal x13956=(r01*sj5);
IkReal x13957=(cj5*r00);
IkReal x13958=(cj5*r20);
IkReal x13959=((1.0)*x13954);
IkReal x13960=((1.0)*x13953);
IkReal x13961=(sj5*x13953);
evalcond[0]=((((-1.0)*r22*x13959))+((r21*x13961))+(((-1.0)*x13958*x13960)));
evalcond[1]=((((-1.0)*r02*x13959))+((x13953*x13956))+(((-1.0)*x13957*x13960)));
evalcond[2]=((((-1.0)*r11*sj5*x13959))+(((-1.0)*r12*x13960))+((x13954*x13955)));
evalcond[3]=((-1.0)+(((-1.0)*x13955*x13960))+((r11*x13961))+(((-1.0)*r12*x13959)));
evalcond[4]=((((-1.0)*r02*x13960))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13956*x13959))+((x13954*x13957)));
evalcond[5]=((((-1.0)*r21*sj5*x13959))+(((-1.0)*r22*x13960))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13954*x13958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13962=((1.0)*cj5);
CheckValue<IkReal> x13963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13962))+(((-1.0)*r20*sj5)))),-1);
if(!x13963.valid){
continue;
}
CheckValue<IkReal> x13964 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13963.value)))+(x13964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13965=IKsin(j4);
IkReal x13966=IKcos(j4);
IkReal x13967=(cj5*r10);
IkReal x13968=(r01*sj5);
IkReal x13969=(cj5*r00);
IkReal x13970=(cj5*r20);
IkReal x13971=((1.0)*x13966);
IkReal x13972=((1.0)*x13965);
IkReal x13973=(sj5*x13965);
evalcond[0]=((((-1.0)*r22*x13971))+(((-1.0)*x13970*x13972))+((r21*x13973)));
evalcond[1]=((((-1.0)*r02*x13971))+(((-1.0)*x13969*x13972))+((x13965*x13968)));
evalcond[2]=((((-1.0)*r12*x13972))+(((-1.0)*r11*sj5*x13971))+((x13966*x13967)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13971))+((r11*x13973))+(((-1.0)*x13967*x13972)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13972))+(((-1.0)*x13968*x13971))+((cj1*sj2))+((x13966*x13969)));
evalcond[5]=((((-1.0)*r22*x13972))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13971))+((x13966*x13970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13974 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13974.valid){
continue;
}
CheckValue<IkReal> x13975=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13974.value)+(((1.5707963267949)*(x13975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13976=IKsin(j4);
IkReal x13977=IKcos(j4);
IkReal x13978=(cj5*r10);
IkReal x13979=(r01*sj5);
IkReal x13980=(cj5*r00);
IkReal x13981=(cj5*r20);
IkReal x13982=((1.0)*x13977);
IkReal x13983=((1.0)*x13976);
IkReal x13984=(sj5*x13976);
evalcond[0]=(((r21*x13984))+(((-1.0)*r22*x13982))+(((-1.0)*x13981*x13983)));
evalcond[1]=((((-1.0)*r02*x13982))+((x13976*x13979))+(((-1.0)*x13980*x13983)));
evalcond[2]=((((-1.0)*r11*sj5*x13982))+(((-1.0)*r12*x13983))+((x13977*x13978)));
evalcond[3]=((-1.0)+((r11*x13984))+(((-1.0)*x13978*x13983))+(((-1.0)*r12*x13982)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13979*x13982))+((x13977*x13980))+((cj1*sj2))+(((-1.0)*r02*x13983)));
evalcond[5]=(((x13977*x13981))+(((-1.0)*r21*sj5*x13982))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13985=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13985;
j4eval[1]=IKsign(x13985);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13986=((1.0)*cj5);
IkReal x13987=((((-1.0)*r21*x13986))+(((-1.0)*r20*sj5)));
j4eval[0]=x13987;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13986))))));
j4eval[2]=IKsign(x13987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13988=cj5*cj5;
IkReal x13989=r11*r11;
IkReal x13990=(r11*sj5);
IkReal x13991=(cj5*r10);
IkReal x13992=((r12*r12)+x13989+((x13988*(r10*r10)))+(((-1.0)*x13988*x13989))+(((-2.0)*x13990*x13991)));
j4eval[0]=x13992;
j4eval[1]=IKsign(x13992);
j4eval[2]=((IKabs(r12))+(IKabs((x13990+(((-1.0)*x13991))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13993=cj5*cj5;
IkReal x13994=r11*r11;
IkReal x13995=(cj5*r10);
IkReal x13996=(r11*sj5);
CheckValue<IkReal> x13997=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x13993*(r10*r10)))+x13994+(((-2.0)*x13995*x13996))+(((-1.0)*x13993*x13994)))),-1);
if(!x13997.valid){
continue;
}
CheckValue<IkReal> x13998 = IKatan2WithCheck(IkReal((x13996+(((-1.0)*x13995)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13997.value)))+(x13998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13999=IKcos(j4);
IkReal x14000=IKsin(j4);
IkReal x14001=(cj5*r00);
IkReal x14002=(cj5*r10);
IkReal x14003=(r21*sj5);
IkReal x14004=(cj5*r20);
IkReal x14005=((1.0)*x13999);
IkReal x14006=((1.0)*x14000);
IkReal x14007=(sj5*x14000);
IkReal x14008=(sj5*x13999);
evalcond[0]=(((r11*x14008))+((r12*x14000))+(((-1.0)*x14002*x14005)));
evalcond[1]=(((x14000*x14003))+(((-1.0)*x14004*x14006))+(((-1.0)*r22*x14005)));
evalcond[2]=((((-1.0)*r02*x14005))+((r01*x14007))+(((-1.0)*x14001*x14006)));
evalcond[3]=((-1.0)+((r11*x14007))+(((-1.0)*x14002*x14006))+(((-1.0)*r12*x14005)));
evalcond[4]=(((cj2*sj1))+((r02*x14000))+((cj1*sj2))+((r01*x14008))+(((-1.0)*x14001*x14005)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x14000))+(((-1.0)*x14004*x14005))+((x13999*x14003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14009=((1.0)*cj5);
CheckValue<IkReal> x14010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14009))+(((-1.0)*r20*sj5)))),-1);
if(!x14010.valid){
continue;
}
CheckValue<IkReal> x14011 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14009))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14010.value)))+(x14011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14012=IKcos(j4);
IkReal x14013=IKsin(j4);
IkReal x14014=(cj5*r00);
IkReal x14015=(cj5*r10);
IkReal x14016=(r21*sj5);
IkReal x14017=(cj5*r20);
IkReal x14018=((1.0)*x14012);
IkReal x14019=((1.0)*x14013);
IkReal x14020=(sj5*x14013);
IkReal x14021=(sj5*x14012);
evalcond[0]=(((r11*x14021))+(((-1.0)*x14015*x14018))+((r12*x14013)));
evalcond[1]=((((-1.0)*x14017*x14019))+((x14013*x14016))+(((-1.0)*r22*x14018)));
evalcond[2]=(((r01*x14020))+(((-1.0)*r02*x14018))+(((-1.0)*x14014*x14019)));
evalcond[3]=((-1.0)+((r11*x14020))+(((-1.0)*x14015*x14019))+(((-1.0)*r12*x14018)));
evalcond[4]=(((cj2*sj1))+((r01*x14021))+(((-1.0)*x14014*x14018))+((r02*x14013))+((cj1*sj2)));
evalcond[5]=(((x14012*x14016))+(((-1.0)*cj1*cj2))+((r22*x14013))+((sj1*sj2))+(((-1.0)*x14017*x14018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14022 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14022.valid){
continue;
}
CheckValue<IkReal> x14023=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14022.value)+(((1.5707963267949)*(x14023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14024=IKcos(j4);
IkReal x14025=IKsin(j4);
IkReal x14026=(cj5*r00);
IkReal x14027=(cj5*r10);
IkReal x14028=(r21*sj5);
IkReal x14029=(cj5*r20);
IkReal x14030=((1.0)*x14024);
IkReal x14031=((1.0)*x14025);
IkReal x14032=(sj5*x14025);
IkReal x14033=(sj5*x14024);
evalcond[0]=(((r11*x14033))+((r12*x14025))+(((-1.0)*x14027*x14030)));
evalcond[1]=(((x14025*x14028))+(((-1.0)*x14029*x14031))+(((-1.0)*r22*x14030)));
evalcond[2]=(((r01*x14032))+(((-1.0)*r02*x14030))+(((-1.0)*x14026*x14031)));
evalcond[3]=((-1.0)+((r11*x14032))+(((-1.0)*r12*x14030))+(((-1.0)*x14027*x14031)));
evalcond[4]=(((r01*x14033))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14026*x14030))+((r02*x14025)));
evalcond[5]=(((x14024*x14028))+((r22*x14025))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14029*x14030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14035 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14035)==0){
continue;
}
IkReal x14034=pow(x14035,-0.5);
CheckValue<IkReal> x14036 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14036.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14036.value));
IkReal gconst37=((-1.0)*r01*x14034);
IkReal gconst38=(r00*x14034);
CheckValue<IkReal> x14037 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14037.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14037.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14040 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14040.valid){
continue;
}
IkReal x14038=((-1.0)*(x14040.value));
IkReal x14039=x14034;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14038;
IkReal gconst36=x14038;
IkReal gconst37=((-1.0)*r01*x14039);
IkReal gconst38=(r00*x14039);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14043 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14043.valid){
continue;
}
IkReal x14041=((-1.0)*(x14043.value));
IkReal x14042=x14034;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14041;
IkReal gconst36=x14041;
IkReal gconst37=((-1.0)*r01*x14042);
IkReal gconst38=(r00*x14042);
CheckValue<IkReal> x14051=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14051.valid){
continue;
}
IkReal x14044=x14051.value;
IkReal x14045=(sj3*x14044);
IkReal x14046=(r11*x14045);
IkReal x14047=(r21*x14045);
IkReal x14048=(r20*x14045);
IkReal x14049=(r10*x14045);
IkReal x14050=(r00*r01*x14045);
j4eval[0]=IKsign((((r00*r01*r10*x14047))+((r00*r01*r20*x14046))+((r12*r22*sj3))+((r10*x14048*(r00*r00)))+((r21*x14046*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14052=gconst38*gconst38;
IkReal x14053=gconst37*gconst37;
IkReal x14054=((1.0)*cj3);
IkReal x14055=(r11*r20);
IkReal x14056=(r10*sj3);
IkReal x14057=(gconst37*gconst38);
IkReal x14058=(r11*sj3);
IkReal x14059=(r21*x14053);
IkReal x14060=(cj3*x14057);
CheckValue<IkReal> x14061=IKPowWithIntegerCheck(IKsign((((r10*r21*x14060))+(((-1.0)*r10*r20*x14052*x14054))+(((-1.0)*r12*r22*x14054))+(((-1.0)*r11*x14054*x14059))+((x14055*x14060)))),-1);
if(!x14061.valid){
continue;
}
CheckValue<IkReal> x14062 = IKatan2WithCheck(IkReal((((gconst37*r22*x14056))+((gconst38*r22*x14058)))),IkReal((((r21*x14057*x14058))+(((-1.0)*r20*x14056*x14057))+((x14056*x14059))+(((-1.0)*sj3*x14052*x14055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14061.value)))+(x14062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14063=IKsin(j4);
IkReal x14064=IKcos(j4);
IkReal x14065=(cj2*sj1);
IkReal x14066=(cj1*sj2);
IkReal x14067=(gconst38*r21);
IkReal x14068=(cj3*r20);
IkReal x14069=(gconst38*r10);
IkReal x14070=(cj3*gconst37);
IkReal x14071=(sj1*sj2);
IkReal x14072=(gconst38*r00);
IkReal x14073=(cj1*cj2);
IkReal x14074=(gconst37*sj3);
IkReal x14075=(gconst38*r20);
IkReal x14076=(gconst38*r01);
IkReal x14077=(gconst38*r11);
IkReal x14078=((1.0)*x14064);
IkReal x14079=((1.0)*x14063);
IkReal x14080=(cj3*x14063);
IkReal x14081=(sj3*x14064);
IkReal x14082=(gconst37*x14063);
IkReal x14083=(x14065+x14066);
evalcond[0]=((((-1.0)*r22*x14078))+(((-1.0)*x14075*x14079))+((r21*x14082)));
evalcond[1]=((((-1.0)*x14072*x14079))+((r01*x14082))+(((-1.0)*r02*x14078)));
evalcond[2]=((-1.0)+((r11*x14082))+(((-1.0)*r12*x14078))+(((-1.0)*x14069*x14079)));
evalcond[3]=(((r11*x14064*x14070))+((sj3*x14077))+((r10*x14074))+(((-1.0)*cj3*x14069*x14078))+((r12*x14080)));
evalcond[4]=(((x14069*x14081))+(((-1.0)*r11*x14074*x14078))+((r10*x14070))+(((-1.0)*r12*sj3*x14079))+((cj3*x14077)));
evalcond[5]=(((sj3*x14067))+((r22*x14080))+((r20*x14074))+x14083+((r21*x14064*x14070))+(((-1.0)*gconst38*x14068*x14078)));
evalcond[6]=(((sj3*x14076))+((r02*x14080))+((r00*x14074))+(((-1.0)*cj3*x14072*x14078))+(((-1.0)*x14071))+((r01*x14064*x14070))+x14073);
evalcond[7]=((((-1.0)*r02*sj3*x14079))+((x14072*x14081))+(((-1.0)*r01*x14074*x14078))+((r00*x14070))+x14083+((cj3*x14076)));
evalcond[8]=(((cj3*x14067))+(((-1.0)*r22*sj3*x14079))+((gconst37*x14068))+((x14075*x14081))+(((-1.0)*r21*x14074*x14078))+(((-1.0)*x14073))+x14071);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14084=gconst38*gconst38;
IkReal x14085=gconst37*gconst37;
IkReal x14086=(gconst37*r10);
IkReal x14087=(cj3*r22);
IkReal x14088=((1.0)*gconst38);
IkReal x14089=(r21*sj3);
IkReal x14090=(gconst38*r11);
IkReal x14091=(cj3*r20);
IkReal x14092=(cj3*r21);
IkReal x14093=(r20*sj3);
CheckValue<IkReal> x14094 = IKatan2WithCheck(IkReal((((x14087*x14090))+((x14086*x14087)))),IkReal((((gconst37*x14090*x14092))+((r10*x14085*x14092))+(((-1.0)*r11*x14084*x14091))+(((-1.0)*x14086*x14088*x14091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14094.valid){
continue;
}
CheckValue<IkReal> x14095=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14086*x14088*x14089))+(((-1.0)*gconst37*r11*x14088*x14093))+((r10*x14084*x14093))+((r12*r22*sj3))+((r11*x14085*x14089)))),-1);
if(!x14095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14094.value)+(((1.5707963267949)*(x14095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14096=IKsin(j4);
IkReal x14097=IKcos(j4);
IkReal x14098=(cj2*sj1);
IkReal x14099=(cj1*sj2);
IkReal x14100=(gconst38*r21);
IkReal x14101=(cj3*r20);
IkReal x14102=(gconst38*r10);
IkReal x14103=(cj3*gconst37);
IkReal x14104=(sj1*sj2);
IkReal x14105=(gconst38*r00);
IkReal x14106=(cj1*cj2);
IkReal x14107=(gconst37*sj3);
IkReal x14108=(gconst38*r20);
IkReal x14109=(gconst38*r01);
IkReal x14110=(gconst38*r11);
IkReal x14111=((1.0)*x14097);
IkReal x14112=((1.0)*x14096);
IkReal x14113=(cj3*x14096);
IkReal x14114=(sj3*x14097);
IkReal x14115=(gconst37*x14096);
IkReal x14116=(x14099+x14098);
evalcond[0]=((((-1.0)*x14108*x14112))+(((-1.0)*r22*x14111))+((r21*x14115)));
evalcond[1]=((((-1.0)*x14105*x14112))+((r01*x14115))+(((-1.0)*r02*x14111)));
evalcond[2]=((-1.0)+((r11*x14115))+(((-1.0)*r12*x14111))+(((-1.0)*x14102*x14112)));
evalcond[3]=(((sj3*x14110))+((r11*x14097*x14103))+(((-1.0)*cj3*x14102*x14111))+((r10*x14107))+((r12*x14113)));
evalcond[4]=(((x14102*x14114))+((cj3*x14110))+((r10*x14103))+(((-1.0)*r11*x14107*x14111))+(((-1.0)*r12*sj3*x14112)));
evalcond[5]=(((sj3*x14100))+((r22*x14113))+((r21*x14097*x14103))+x14116+((r20*x14107))+(((-1.0)*gconst38*x14101*x14111)));
evalcond[6]=(((r02*x14113))+((sj3*x14109))+((r00*x14107))+(((-1.0)*x14104))+((r01*x14097*x14103))+x14106+(((-1.0)*cj3*x14105*x14111)));
evalcond[7]=(((r00*x14103))+((cj3*x14109))+(((-1.0)*r02*sj3*x14112))+((x14105*x14114))+(((-1.0)*r01*x14107*x14111))+x14116);
evalcond[8]=((((-1.0)*r21*x14107*x14111))+((cj3*x14100))+((x14108*x14114))+(((-1.0)*x14106))+x14104+((gconst37*x14101))+(((-1.0)*r22*sj3*x14112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14117=((1.0)*gconst38);
CheckValue<IkReal> x14118=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14117)))),-1);
if(!x14118.valid){
continue;
}
CheckValue<IkReal> x14119 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14117))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14118.value)))+(x14119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14120=IKsin(j4);
IkReal x14121=IKcos(j4);
IkReal x14122=(cj2*sj1);
IkReal x14123=(cj1*sj2);
IkReal x14124=(gconst38*r21);
IkReal x14125=(cj3*r20);
IkReal x14126=(gconst38*r10);
IkReal x14127=(cj3*gconst37);
IkReal x14128=(sj1*sj2);
IkReal x14129=(gconst38*r00);
IkReal x14130=(cj1*cj2);
IkReal x14131=(gconst37*sj3);
IkReal x14132=(gconst38*r20);
IkReal x14133=(gconst38*r01);
IkReal x14134=(gconst38*r11);
IkReal x14135=((1.0)*x14121);
IkReal x14136=((1.0)*x14120);
IkReal x14137=(cj3*x14120);
IkReal x14138=(sj3*x14121);
IkReal x14139=(gconst37*x14120);
IkReal x14140=(x14123+x14122);
evalcond[0]=(((r21*x14139))+(((-1.0)*x14132*x14136))+(((-1.0)*r22*x14135)));
evalcond[1]=((((-1.0)*r02*x14135))+(((-1.0)*x14129*x14136))+((r01*x14139)));
evalcond[2]=((-1.0)+((r11*x14139))+(((-1.0)*r12*x14135))+(((-1.0)*x14126*x14136)));
evalcond[3]=(((sj3*x14134))+((r10*x14131))+((r12*x14137))+((r11*x14121*x14127))+(((-1.0)*cj3*x14126*x14135)));
evalcond[4]=(((x14126*x14138))+(((-1.0)*r11*x14131*x14135))+(((-1.0)*r12*sj3*x14136))+((r10*x14127))+((cj3*x14134)));
evalcond[5]=(((r20*x14131))+(((-1.0)*gconst38*x14125*x14135))+((r22*x14137))+x14140+((r21*x14121*x14127))+((sj3*x14124)));
evalcond[6]=(((sj3*x14133))+((r02*x14137))+((r01*x14121*x14127))+(((-1.0)*x14128))+x14130+(((-1.0)*cj3*x14129*x14135))+((r00*x14131)));
evalcond[7]=((((-1.0)*r02*sj3*x14136))+((r00*x14127))+((x14129*x14138))+x14140+(((-1.0)*r01*x14131*x14135))+((cj3*x14133)));
evalcond[8]=((((-1.0)*x14130))+((cj3*x14124))+(((-1.0)*r22*sj3*x14136))+((x14132*x14138))+x14128+(((-1.0)*r21*x14131*x14135))+((gconst37*x14125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14142 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14142)==0){
continue;
}
IkReal x14141=pow(x14142,-0.5);
CheckValue<IkReal> x14143 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14143.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14143.value))));
IkReal gconst40=((1.0)*r01*x14141);
IkReal gconst41=((-1.0)*r00*x14141);
CheckValue<IkReal> x14144 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14144.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14144.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14147 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14147.valid){
continue;
}
IkReal x14145=((1.0)*(x14147.value));
IkReal x14146=x14141;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14145)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14145)));
IkReal gconst40=((1.0)*r01*x14146);
IkReal gconst41=((-1.0)*r00*x14146);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14150 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14150.valid){
continue;
}
IkReal x14148=((1.0)*(x14150.value));
IkReal x14149=x14141;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14148)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14148)));
IkReal gconst40=((1.0)*r01*x14149);
IkReal gconst41=((-1.0)*r00*x14149);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14151=gconst41*gconst41;
IkReal x14152=gconst40*gconst40;
IkReal x14153=(gconst40*r10);
IkReal x14154=(r22*sj3);
IkReal x14155=(r11*sj3);
IkReal x14156=((1.0)*cj3);
IkReal x14157=(gconst41*r21);
IkReal x14158=(gconst41*r20);
IkReal x14159=(r21*x14152);
IkReal x14160=((1.0)*r20*x14151);
CheckValue<IkReal> x14161=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14158))+(((-1.0)*r11*x14156*x14159))+(((-1.0)*r10*r20*x14151*x14156))+(((-1.0)*r12*r22*x14156))+((cj3*x14153*x14157)))),-1);
if(!x14161.valid){
continue;
}
CheckValue<IkReal> x14162 = IKatan2WithCheck(IkReal((((x14153*x14154))+((gconst41*r11*x14154)))),IkReal((((gconst40*x14155*x14157))+((r10*sj3*x14159))+(((-1.0)*sj3*x14153*x14158))+(((-1.0)*x14155*x14160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14161.value)))+(x14162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14163=IKsin(j4);
IkReal x14164=IKcos(j4);
IkReal x14165=(cj2*sj1);
IkReal x14166=(cj1*sj2);
IkReal x14167=(gconst40*sj3);
IkReal x14168=(gconst41*sj3);
IkReal x14169=(gconst41*r20);
IkReal x14170=(cj3*gconst41);
IkReal x14171=(sj1*sj2);
IkReal x14172=(cj1*cj2);
IkReal x14173=(cj3*gconst40);
IkReal x14174=((1.0)*x14164);
IkReal x14175=((1.0)*x14163);
IkReal x14176=(cj3*x14163);
IkReal x14177=(gconst40*x14163);
IkReal x14178=(x14165+x14166);
IkReal x14179=(x14164*x14173);
evalcond[0]=((((-1.0)*x14169*x14175))+((r21*x14177))+(((-1.0)*r22*x14174)));
evalcond[1]=(((r01*x14177))+(((-1.0)*r02*x14174))+(((-1.0)*gconst41*r00*x14175)));
evalcond[2]=((-1.0)+((r11*x14177))+(((-1.0)*gconst41*r10*x14175))+(((-1.0)*r12*x14174)));
evalcond[3]=(((r10*x14167))+((r11*x14179))+((r12*x14176))+((r11*x14168))+(((-1.0)*r10*x14170*x14174)));
evalcond[4]=((((-1.0)*r12*sj3*x14175))+((r11*x14170))+(((-1.0)*r11*x14167*x14174))+((r10*x14164*x14168))+((r10*x14173)));
evalcond[5]=(((r22*x14176))+(((-1.0)*cj3*x14169*x14174))+((r21*x14179))+x14178+((r21*x14168))+((r20*x14167)));
evalcond[6]=(((r01*x14179))+(((-1.0)*x14171))+(((-1.0)*r00*x14170*x14174))+((r02*x14176))+((r00*x14167))+((r01*x14168))+x14172);
evalcond[7]=(((r00*x14164*x14168))+((r01*x14170))+((r00*x14173))+x14178+(((-1.0)*r01*x14167*x14174))+(((-1.0)*r02*sj3*x14175)));
evalcond[8]=((((-1.0)*r21*x14167*x14174))+((r21*x14170))+((r20*x14173))+(((-1.0)*x14172))+x14171+(((-1.0)*r22*sj3*x14175))+((r20*x14164*x14168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14180=((1.0)*gconst41);
CheckValue<IkReal> x14181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14180))+(((-1.0)*gconst40*r20)))),-1);
if(!x14181.valid){
continue;
}
CheckValue<IkReal> x14182 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14180))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14181.value)))+(x14182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14183=IKsin(j4);
IkReal x14184=IKcos(j4);
IkReal x14185=(cj2*sj1);
IkReal x14186=(cj1*sj2);
IkReal x14187=(gconst40*sj3);
IkReal x14188=(gconst41*sj3);
IkReal x14189=(gconst41*r20);
IkReal x14190=(cj3*gconst41);
IkReal x14191=(sj1*sj2);
IkReal x14192=(cj1*cj2);
IkReal x14193=(cj3*gconst40);
IkReal x14194=((1.0)*x14184);
IkReal x14195=((1.0)*x14183);
IkReal x14196=(cj3*x14183);
IkReal x14197=(gconst40*x14183);
IkReal x14198=(x14186+x14185);
IkReal x14199=(x14184*x14193);
evalcond[0]=((((-1.0)*r22*x14194))+((r21*x14197))+(((-1.0)*x14189*x14195)));
evalcond[1]=((((-1.0)*gconst41*r00*x14195))+(((-1.0)*r02*x14194))+((r01*x14197)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14194))+((r11*x14197))+(((-1.0)*gconst41*r10*x14195)));
evalcond[3]=(((r11*x14199))+((r12*x14196))+((r11*x14188))+(((-1.0)*r10*x14190*x14194))+((r10*x14187)));
evalcond[4]=(((r10*x14193))+(((-1.0)*r12*sj3*x14195))+(((-1.0)*r11*x14187*x14194))+((r11*x14190))+((r10*x14184*x14188)));
evalcond[5]=(((r20*x14187))+(((-1.0)*cj3*x14189*x14194))+((r22*x14196))+((r21*x14188))+x14198+((r21*x14199)));
evalcond[6]=((((-1.0)*x14191))+((r02*x14196))+((r01*x14188))+((r00*x14187))+((r01*x14199))+(((-1.0)*r00*x14190*x14194))+x14192);
evalcond[7]=(((r01*x14190))+((r00*x14193))+x14198+(((-1.0)*r02*sj3*x14195))+((r00*x14184*x14188))+(((-1.0)*r01*x14187*x14194)));
evalcond[8]=((((-1.0)*x14192))+(((-1.0)*r22*sj3*x14195))+((r20*x14184*x14188))+x14191+((r21*x14190))+(((-1.0)*r21*x14187*x14194))+((r20*x14193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14200 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14200.valid){
continue;
}
CheckValue<IkReal> x14201=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14200.value)+(((1.5707963267949)*(x14201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14202=IKsin(j4);
IkReal x14203=IKcos(j4);
IkReal x14204=(cj2*sj1);
IkReal x14205=(cj1*sj2);
IkReal x14206=(gconst40*sj3);
IkReal x14207=(gconst41*sj3);
IkReal x14208=(gconst41*r20);
IkReal x14209=(cj3*gconst41);
IkReal x14210=(sj1*sj2);
IkReal x14211=(cj1*cj2);
IkReal x14212=(cj3*gconst40);
IkReal x14213=((1.0)*x14203);
IkReal x14214=((1.0)*x14202);
IkReal x14215=(cj3*x14202);
IkReal x14216=(gconst40*x14202);
IkReal x14217=(x14204+x14205);
IkReal x14218=(x14203*x14212);
evalcond[0]=((((-1.0)*x14208*x14214))+(((-1.0)*r22*x14213))+((r21*x14216)));
evalcond[1]=((((-1.0)*gconst41*r00*x14214))+(((-1.0)*r02*x14213))+((r01*x14216)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14213))+((r11*x14216))+(((-1.0)*gconst41*r10*x14214)));
evalcond[3]=(((r11*x14218))+((r12*x14215))+((r10*x14206))+(((-1.0)*r10*x14209*x14213))+((r11*x14207)));
evalcond[4]=(((r10*x14203*x14207))+((r10*x14212))+(((-1.0)*r11*x14206*x14213))+(((-1.0)*r12*sj3*x14214))+((r11*x14209)));
evalcond[5]=(((r22*x14215))+((r20*x14206))+((r21*x14207))+(((-1.0)*cj3*x14208*x14213))+((r21*x14218))+x14217);
evalcond[6]=((((-1.0)*r00*x14209*x14213))+((r01*x14218))+((r00*x14206))+(((-1.0)*x14210))+((r01*x14207))+((r02*x14215))+x14211);
evalcond[7]=((((-1.0)*r02*sj3*x14214))+(((-1.0)*r01*x14206*x14213))+((r00*x14203*x14207))+((r00*x14212))+((r01*x14209))+x14217);
evalcond[8]=(((r20*x14203*x14207))+((r21*x14209))+(((-1.0)*r22*sj3*x14214))+(((-1.0)*x14211))+(((-1.0)*r21*x14206*x14213))+((r20*x14212))+x14210);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14219=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14219);
rxp1_1=(px*r21);
rxp1_2=(r11*x14219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14220=(r11*sj5);
IkReal x14221=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14221))+x14220);
j4eval[1]=(((cj3*x14220))+(((-1.0)*cj3*x14221)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14222=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14222);
rxp1_1=(px*r21);
rxp1_2=(r11*x14222);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14223=(cj5*r10);
IkReal x14224=(r11*sj5);
j4eval[0]=((((-1.0)*x14223))+x14224);
j4eval[1]=((((-1.0)*sj3*x14224))+((sj3*x14223)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14225=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14225);
rxp1_1=(px*r21);
rxp1_2=(r11*x14225);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14226=((1.0)*r10);
CheckValue<IkReal> x14227=IKPowWithIntegerCheck(cj3,-1);
if(!x14227.valid){
continue;
}
CheckValue<IkReal> x14228=IKPowWithIntegerCheck(r02,-1);
if(!x14228.valid){
continue;
}
CheckValue<IkReal> x14229=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14226))),-1);
if(!x14229.valid){
continue;
}
if( IKabs(((x14227.value)*(x14228.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14229.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14226)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14227.value)*(x14228.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14229.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14226))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14227.value)*(x14228.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14229.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14226))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14230=IKsin(j4);
IkReal x14231=IKcos(j4);
IkReal x14232=(cj2*sj1);
IkReal x14233=(cj1*sj2);
IkReal x14234=(cj5*r10);
IkReal x14235=(sj1*sj2);
IkReal x14236=(cj5*sj3);
IkReal x14237=(r11*sj5);
IkReal x14238=(cj3*sj5);
IkReal x14239=(r21*sj5);
IkReal x14240=(cj1*cj2);
IkReal x14241=(cj3*cj5);
IkReal x14242=(sj3*sj5);
IkReal x14243=((1.0)*x14230);
IkReal x14244=(r20*x14231);
IkReal x14245=(cj3*x14231);
IkReal x14246=(sj3*x14231);
IkReal x14247=(x14233+x14232);
evalcond[0]=((-1.0)*r02*x14231);
evalcond[1]=((((-1.0)*cj5*r20*x14243))+((x14230*x14239)));
evalcond[2]=((((-1.0)*x14235))+((cj3*r02*x14230))+x14240);
evalcond[3]=((((-1.0)*r02*sj3*x14243))+x14247);
evalcond[4]=((-1.0)+(((-1.0)*x14234*x14243))+((x14230*x14237)));
evalcond[5]=(((x14237*x14245))+(((-1.0)*x14234*x14245))+((r10*x14242))+((r11*x14236)));
evalcond[6]=((((-1.0)*x14237*x14246))+((r10*x14238))+((x14234*x14246))+((r11*x14241)));
evalcond[7]=((((-1.0)*x14241*x14244))+((r21*x14231*x14238))+((r21*x14236))+((r20*x14242))+x14247);
evalcond[8]=(((r21*x14241))+(((-1.0)*x14240))+((x14236*x14244))+((r20*x14238))+(((-1.0)*x14239*x14246))+x14235);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14248=(cj5*r10);
IkReal x14249=((1.0)*r11);
CheckValue<IkReal> x14250=IKPowWithIntegerCheck(((((-1.0)*x14248))+((r11*sj5))),-1);
if(!x14250.valid){
continue;
}
CheckValue<IkReal> x14251=IKPowWithIntegerCheck((((sj3*x14248))+(((-1.0)*sj3*sj5*x14249))),-1);
if(!x14251.valid){
continue;
}
if( IKabs(x14250.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14251.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14249)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14250.value)+IKsqr(((x14251.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14249))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14250.value, ((x14251.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14249))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14252=IKsin(j4);
IkReal x14253=IKcos(j4);
IkReal x14254=(cj2*sj1);
IkReal x14255=(cj1*sj2);
IkReal x14256=(cj5*r10);
IkReal x14257=(sj1*sj2);
IkReal x14258=(cj5*sj3);
IkReal x14259=(r11*sj5);
IkReal x14260=(cj3*sj5);
IkReal x14261=(r21*sj5);
IkReal x14262=(cj1*cj2);
IkReal x14263=(cj3*cj5);
IkReal x14264=(sj3*sj5);
IkReal x14265=((1.0)*x14252);
IkReal x14266=(r20*x14253);
IkReal x14267=(cj3*x14253);
IkReal x14268=(sj3*x14253);
IkReal x14269=(x14255+x14254);
evalcond[0]=((-1.0)*r02*x14253);
evalcond[1]=((((-1.0)*cj5*r20*x14265))+((x14252*x14261)));
evalcond[2]=(((cj3*r02*x14252))+x14262+(((-1.0)*x14257)));
evalcond[3]=((((-1.0)*r02*sj3*x14265))+x14269);
evalcond[4]=((-1.0)+(((-1.0)*x14256*x14265))+((x14252*x14259)));
evalcond[5]=((((-1.0)*x14256*x14267))+((r11*x14258))+((x14259*x14267))+((r10*x14264)));
evalcond[6]=(((x14256*x14268))+((r11*x14263))+(((-1.0)*x14259*x14268))+((r10*x14260)));
evalcond[7]=(((r21*x14258))+((r20*x14264))+(((-1.0)*x14263*x14266))+((r21*x14253*x14260))+x14269);
evalcond[8]=(((r21*x14263))+(((-1.0)*x14262))+((r20*x14260))+((x14258*x14266))+(((-1.0)*x14261*x14268))+x14257);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14270=((1.0)*r10);
IkReal x14271=(r11*sj5);
CheckValue<IkReal> x14272=IKPowWithIntegerCheck((x14271+(((-1.0)*cj5*x14270))),-1);
if(!x14272.valid){
continue;
}
CheckValue<IkReal> x14273=IKPowWithIntegerCheck((((cj3*x14271))+(((-1.0)*cj3*cj5*x14270))),-1);
if(!x14273.valid){
continue;
}
if( IKabs(x14272.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14273.value)*(((((-1.0)*sj3*sj5*x14270))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14272.value)+IKsqr(((x14273.value)*(((((-1.0)*sj3*sj5*x14270))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14272.value, ((x14273.value)*(((((-1.0)*sj3*sj5*x14270))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14274=IKsin(j4);
IkReal x14275=IKcos(j4);
IkReal x14276=(cj2*sj1);
IkReal x14277=(cj1*sj2);
IkReal x14278=(cj5*r10);
IkReal x14279=(sj1*sj2);
IkReal x14280=(cj5*sj3);
IkReal x14281=(r11*sj5);
IkReal x14282=(cj3*sj5);
IkReal x14283=(r21*sj5);
IkReal x14284=(cj1*cj2);
IkReal x14285=(cj3*cj5);
IkReal x14286=(sj3*sj5);
IkReal x14287=((1.0)*x14274);
IkReal x14288=(r20*x14275);
IkReal x14289=(cj3*x14275);
IkReal x14290=(sj3*x14275);
IkReal x14291=(x14277+x14276);
evalcond[0]=((-1.0)*r02*x14275);
evalcond[1]=((((-1.0)*cj5*r20*x14287))+((x14274*x14283)));
evalcond[2]=((((-1.0)*x14279))+((cj3*r02*x14274))+x14284);
evalcond[3]=((((-1.0)*r02*sj3*x14287))+x14291);
evalcond[4]=((-1.0)+(((-1.0)*x14278*x14287))+((x14274*x14281)));
evalcond[5]=(((x14281*x14289))+((r10*x14286))+((r11*x14280))+(((-1.0)*x14278*x14289)));
evalcond[6]=(((r10*x14282))+((x14278*x14290))+((r11*x14285))+(((-1.0)*x14281*x14290)));
evalcond[7]=(((r21*x14280))+((r21*x14275*x14282))+(((-1.0)*x14285*x14288))+x14291+((r20*x14286)));
evalcond[8]=(((r21*x14285))+((x14280*x14288))+(((-1.0)*x14284))+(((-1.0)*x14283*x14290))+x14279+((r20*x14282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14292=cj5*cj5;
IkReal x14293=((1.0)*cj3);
IkReal x14294=(r10*r21);
IkReal x14295=(cj5*sj5);
IkReal x14296=(r11*r21);
IkReal x14297=(r11*r20);
IkReal x14298=(r22*sj3);
IkReal x14299=(r10*r20);
IkReal x14300=((1.0)*sj3*x14292);
CheckValue<IkReal> x14301 = IKatan2WithCheck(IkReal((((r10*sj5*x14298))+((cj5*r11*x14298)))),IkReal((((sj3*x14295*x14296))+(((-1.0)*x14294*x14300))+(((-1.0)*x14297*x14300))+((sj3*x14294))+(((-1.0)*sj3*x14295*x14299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14301.valid){
continue;
}
CheckValue<IkReal> x14302=IKPowWithIntegerCheck(IKsign((((cj3*x14292*x14296))+((cj3*x14295*x14297))+(((-1.0)*x14293*x14296))+((cj3*x14294*x14295))+(((-1.0)*x14292*x14293*x14299))+(((-1.0)*r12*r22*x14293)))),-1);
if(!x14302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14301.value)+(((1.5707963267949)*(x14302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14303=IKsin(j4);
IkReal x14304=IKcos(j4);
IkReal x14305=(cj2*sj1);
IkReal x14306=(cj1*sj2);
IkReal x14307=(cj5*sj3);
IkReal x14308=(cj5*r10);
IkReal x14309=(r00*sj5);
IkReal x14310=(sj1*sj2);
IkReal x14311=(r11*sj5);
IkReal x14312=(cj3*cj5);
IkReal x14313=(cj3*sj5);
IkReal x14314=(r21*sj5);
IkReal x14315=(cj1*cj2);
IkReal x14316=(sj3*sj5);
IkReal x14317=(r01*sj5);
IkReal x14318=((1.0)*x14304);
IkReal x14319=((1.0)*x14303);
IkReal x14320=(cj3*x14303);
IkReal x14321=(cj3*x14304);
IkReal x14322=(x14305+x14306);
evalcond[0]=((((-1.0)*r22*x14318))+(((-1.0)*cj5*r20*x14319))+((x14303*x14314)));
evalcond[1]=((((-1.0)*r02*x14318))+((x14303*x14317))+(((-1.0)*cj5*r00*x14319)));
evalcond[2]=((-1.0)+(((-1.0)*x14308*x14319))+((x14303*x14311))+(((-1.0)*r12*x14318)));
evalcond[3]=(((x14311*x14321))+((r11*x14307))+(((-1.0)*cj3*x14308*x14318))+((r12*x14320))+((r10*x14316)));
evalcond[4]=(((r11*x14312))+(((-1.0)*r12*sj3*x14319))+(((-1.0)*sj3*x14311*x14318))+((r10*x14304*x14307))+((r10*x14313)));
evalcond[5]=(((r21*x14304*x14313))+((r20*x14316))+x14322+((r21*x14307))+(((-1.0)*r20*x14312*x14318))+((r22*x14320)));
evalcond[6]=(((r01*x14304*x14313))+((r02*x14320))+((r01*x14307))+(((-1.0)*x14310))+(((-1.0)*r00*x14312*x14318))+x14315+((sj3*x14309)));
evalcond[7]=((((-1.0)*r01*x14316*x14318))+(((-1.0)*r02*sj3*x14319))+((r00*x14304*x14307))+((r01*x14312))+x14322+((cj3*x14309)));
evalcond[8]=(((r20*x14304*x14307))+(((-1.0)*x14315))+((r20*x14313))+(((-1.0)*sj3*x14314*x14318))+((r21*x14312))+x14310+(((-1.0)*r22*sj3*x14319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14323=((1.0)*cj5);
CheckValue<IkReal> x14324 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14324.valid){
continue;
}
CheckValue<IkReal> x14325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14323))+(((-1.0)*r20*sj5)))),-1);
if(!x14325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14324.value)+(((1.5707963267949)*(x14325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14326=IKsin(j4);
IkReal x14327=IKcos(j4);
IkReal x14328=(cj2*sj1);
IkReal x14329=(cj1*sj2);
IkReal x14330=(cj5*sj3);
IkReal x14331=(cj5*r10);
IkReal x14332=(r00*sj5);
IkReal x14333=(sj1*sj2);
IkReal x14334=(r11*sj5);
IkReal x14335=(cj3*cj5);
IkReal x14336=(cj3*sj5);
IkReal x14337=(r21*sj5);
IkReal x14338=(cj1*cj2);
IkReal x14339=(sj3*sj5);
IkReal x14340=(r01*sj5);
IkReal x14341=((1.0)*x14327);
IkReal x14342=((1.0)*x14326);
IkReal x14343=(cj3*x14326);
IkReal x14344=(cj3*x14327);
IkReal x14345=(x14329+x14328);
evalcond[0]=(((x14326*x14337))+(((-1.0)*r22*x14341))+(((-1.0)*cj5*r20*x14342)));
evalcond[1]=(((x14326*x14340))+(((-1.0)*cj5*r00*x14342))+(((-1.0)*r02*x14341)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14341))+((x14326*x14334))+(((-1.0)*x14331*x14342)));
evalcond[3]=(((r11*x14330))+((x14334*x14344))+((r12*x14343))+(((-1.0)*cj3*x14331*x14341))+((r10*x14339)));
evalcond[4]=(((r10*x14327*x14330))+((r11*x14335))+(((-1.0)*sj3*x14334*x14341))+(((-1.0)*r12*sj3*x14342))+((r10*x14336)));
evalcond[5]=(((r20*x14339))+((r22*x14343))+((r21*x14327*x14336))+x14345+(((-1.0)*r20*x14335*x14341))+((r21*x14330)));
evalcond[6]=((((-1.0)*r00*x14335*x14341))+(((-1.0)*x14333))+((r01*x14330))+((r02*x14343))+((r01*x14327*x14336))+x14338+((sj3*x14332)));
evalcond[7]=((((-1.0)*r01*x14339*x14341))+((r00*x14327*x14330))+(((-1.0)*r02*sj3*x14342))+((r01*x14335))+x14345+((cj3*x14332)));
evalcond[8]=(((r20*x14336))+((r20*x14327*x14330))+(((-1.0)*sj3*x14337*x14341))+(((-1.0)*x14338))+x14333+((r21*x14335))+(((-1.0)*r22*sj3*x14342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14346 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14346.valid){
continue;
}
CheckValue<IkReal> x14347=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14346.value)+(((1.5707963267949)*(x14347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14348=IKsin(j4);
IkReal x14349=IKcos(j4);
IkReal x14350=(cj2*sj1);
IkReal x14351=(cj1*sj2);
IkReal x14352=(cj5*sj3);
IkReal x14353=(cj5*r10);
IkReal x14354=(r00*sj5);
IkReal x14355=(sj1*sj2);
IkReal x14356=(r11*sj5);
IkReal x14357=(cj3*cj5);
IkReal x14358=(cj3*sj5);
IkReal x14359=(r21*sj5);
IkReal x14360=(cj1*cj2);
IkReal x14361=(sj3*sj5);
IkReal x14362=(r01*sj5);
IkReal x14363=((1.0)*x14349);
IkReal x14364=((1.0)*x14348);
IkReal x14365=(cj3*x14348);
IkReal x14366=(cj3*x14349);
IkReal x14367=(x14350+x14351);
evalcond[0]=((((-1.0)*r22*x14363))+(((-1.0)*cj5*r20*x14364))+((x14348*x14359)));
evalcond[1]=(((x14348*x14362))+(((-1.0)*r02*x14363))+(((-1.0)*cj5*r00*x14364)));
evalcond[2]=((-1.0)+((x14348*x14356))+(((-1.0)*x14353*x14364))+(((-1.0)*r12*x14363)));
evalcond[3]=(((r10*x14361))+((x14356*x14366))+((r11*x14352))+(((-1.0)*cj3*x14353*x14363))+((r12*x14365)));
evalcond[4]=(((r10*x14349*x14352))+((r11*x14357))+(((-1.0)*r12*sj3*x14364))+((r10*x14358))+(((-1.0)*sj3*x14356*x14363)));
evalcond[5]=((((-1.0)*r20*x14357*x14363))+((r20*x14361))+((r21*x14349*x14358))+((r21*x14352))+x14367+((r22*x14365)));
evalcond[6]=(((sj3*x14354))+((r02*x14365))+(((-1.0)*r00*x14357*x14363))+(((-1.0)*x14355))+((r01*x14352))+x14360+((r01*x14349*x14358)));
evalcond[7]=(((cj3*x14354))+(((-1.0)*r01*x14361*x14363))+((r00*x14349*x14352))+((r01*x14357))+(((-1.0)*r02*sj3*x14364))+x14367);
evalcond[8]=(((r20*x14358))+(((-1.0)*sj3*x14359*x14363))+(((-1.0)*x14360))+((r21*x14357))+((r20*x14349*x14352))+x14355+(((-1.0)*r22*sj3*x14364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14368=((-1.0)*r00);
IkReal x14370 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14370)==0){
continue;
}
IkReal x14369=pow(x14370,-0.5);
CheckValue<IkReal> x14371 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14368),IKFAST_ATAN2_MAGTHRESH);
if(!x14371.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14371.value));
IkReal gconst13=(r01*x14369);
IkReal gconst14=(x14368*x14369);
CheckValue<IkReal> x14372 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14372.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14372.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14373=((-1.0)*r00);
IkReal x14374=x14369;
CheckValue<IkReal> x14376 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14373),IKFAST_ATAN2_MAGTHRESH);
if(!x14376.valid){
continue;
}
IkReal x14375=((-1.0)*(x14376.value));
sj5=gconst13;
cj5=gconst14;
j5=x14375;
IkReal gconst12=x14375;
IkReal gconst13=(r01*x14374);
IkReal gconst14=(x14373*x14374);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14377=((1.0)*sj0);
IkReal x14378=((1.0)*cj0);
CheckValue<IkReal> x14379 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14377))+(((-1.0)*r02*x14378)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14377))+(((-1.0)*gconst13*r01*x14378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14379.valid){
continue;
}
CheckValue<IkReal> x14380=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14379.value)+(((1.5707963267949)*(x14380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14381=IKsin(j4);
IkReal x14382=IKcos(j4);
IkReal x14383=((1.0)*r22);
IkReal x14384=((1.0)*r12);
IkReal x14385=(gconst13*sj3);
IkReal x14386=(gconst13*r01);
IkReal x14387=(sj1*sj2);
IkReal x14388=(gconst14*sj3);
IkReal x14389=(cj2*sj1);
IkReal x14390=((1.0)*sj0);
IkReal x14391=(cj3*gconst13);
IkReal x14392=(cj3*gconst14);
IkReal x14393=((1.0)*cj0);
IkReal x14394=((1.0)*gconst14);
IkReal x14395=(cj1*sj2);
IkReal x14396=(sj3*x14381);
IkReal x14397=((1.0)*cj1*cj2);
IkReal x14398=(cj3*x14382);
IkReal x14399=(cj3*x14381);
IkReal x14400=(gconst13*x14381);
IkReal x14401=((1.0)*x14382);
IkReal x14402=(x14381*x14394);
evalcond[0]=(((r21*x14400))+(((-1.0)*x14382*x14383))+(((-1.0)*r20*x14402)));
evalcond[1]=(cj0+((r11*x14400))+(((-1.0)*r10*x14402))+(((-1.0)*x14382*x14384)));
evalcond[2]=((((-1.0)*r02*x14401))+(((-1.0)*r00*x14402))+((x14381*x14386))+(((-1.0)*x14390)));
evalcond[3]=(((r20*x14385))+((r21*x14382*x14391))+((r21*x14388))+((r22*x14399))+(((-1.0)*r20*x14392*x14401))+x14389+x14395);
evalcond[4]=(((r21*x14392))+(((-1.0)*x14383*x14396))+((r20*x14382*x14388))+(((-1.0)*r21*x14385*x14401))+x14387+((r20*x14391))+(((-1.0)*x14397)));
evalcond[5]=(((cj0*x14387))+(((-1.0)*cj1*cj2*x14393))+((r00*x14385))+((r01*x14388))+((x14386*x14398))+(((-1.0)*r00*x14392*x14401))+((r02*x14399)));
evalcond[6]=((((-1.0)*cj1*cj2*x14390))+((sj0*x14387))+((r12*x14399))+((r10*x14385))+((r11*x14388))+((r11*x14382*x14391))+(((-1.0)*r10*x14392*x14401)));
evalcond[7]=(((r01*x14392))+(((-1.0)*x14393*x14395))+((r00*x14391))+(((-1.0)*r01*x14385*x14401))+(((-1.0)*x14389*x14393))+(((-1.0)*r02*x14396))+((r00*x14382*x14388)));
evalcond[8]=((((-1.0)*x14390*x14395))+(((-1.0)*x14384*x14396))+(((-1.0)*r11*x14385*x14401))+((r10*x14382*x14388))+((r10*x14391))+((r11*x14392))+(((-1.0)*x14389*x14390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14403=((1.0)*gconst14);
CheckValue<IkReal> x14404=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14403)))),-1);
if(!x14404.valid){
continue;
}
CheckValue<IkReal> x14405 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x14403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14404.value)))+(x14405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14406=IKsin(j4);
IkReal x14407=IKcos(j4);
IkReal x14408=((1.0)*r22);
IkReal x14409=((1.0)*r12);
IkReal x14410=(gconst13*sj3);
IkReal x14411=(gconst13*r01);
IkReal x14412=(sj1*sj2);
IkReal x14413=(gconst14*sj3);
IkReal x14414=(cj2*sj1);
IkReal x14415=((1.0)*sj0);
IkReal x14416=(cj3*gconst13);
IkReal x14417=(cj3*gconst14);
IkReal x14418=((1.0)*cj0);
IkReal x14419=((1.0)*gconst14);
IkReal x14420=(cj1*sj2);
IkReal x14421=(sj3*x14406);
IkReal x14422=((1.0)*cj1*cj2);
IkReal x14423=(cj3*x14407);
IkReal x14424=(cj3*x14406);
IkReal x14425=(gconst13*x14406);
IkReal x14426=((1.0)*x14407);
IkReal x14427=(x14406*x14419);
evalcond[0]=((((-1.0)*x14407*x14408))+((r21*x14425))+(((-1.0)*r20*x14427)));
evalcond[1]=((((-1.0)*r10*x14427))+cj0+((r11*x14425))+(((-1.0)*x14407*x14409)));
evalcond[2]=((((-1.0)*x14415))+(((-1.0)*r02*x14426))+(((-1.0)*r00*x14427))+((x14406*x14411)));
evalcond[3]=(((r21*x14413))+(((-1.0)*r20*x14417*x14426))+((r21*x14407*x14416))+x14420+x14414+((r22*x14424))+((r20*x14410)));
evalcond[4]=(((r20*x14407*x14413))+((r21*x14417))+(((-1.0)*r21*x14410*x14426))+x14412+(((-1.0)*x14408*x14421))+(((-1.0)*x14422))+((r20*x14416)));
evalcond[5]=((((-1.0)*cj1*cj2*x14418))+((cj0*x14412))+((x14411*x14423))+((r00*x14410))+((r01*x14413))+(((-1.0)*r00*x14417*x14426))+((r02*x14424)));
evalcond[6]=((((-1.0)*cj1*cj2*x14415))+((r11*x14407*x14416))+((r11*x14413))+((r12*x14424))+((sj0*x14412))+(((-1.0)*r10*x14417*x14426))+((r10*x14410)));
evalcond[7]=((((-1.0)*r01*x14410*x14426))+(((-1.0)*x14418*x14420))+((r00*x14416))+((r01*x14417))+(((-1.0)*x14414*x14418))+((r00*x14407*x14413))+(((-1.0)*r02*x14421)));
evalcond[8]=(((r11*x14417))+(((-1.0)*r11*x14410*x14426))+(((-1.0)*x14414*x14415))+(((-1.0)*x14409*x14421))+(((-1.0)*x14415*x14420))+((r10*x14407*x14413))+((r10*x14416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14428=((-1.0)*r01);
IkReal x14430 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14430)==0){
continue;
}
IkReal x14429=pow(x14430,-0.5);
CheckValue<IkReal> x14431 = IKatan2WithCheck(IkReal(x14428),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14431.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14431.value))));
IkReal gconst16=(x14428*x14429);
IkReal gconst17=((1.0)*r00*x14429);
CheckValue<IkReal> x14432 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14432.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14432.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14433=((-1.0)*r01);
CheckValue<IkReal> x14436 = IKatan2WithCheck(IkReal(x14433),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14436.valid){
continue;
}
IkReal x14434=((1.0)*(x14436.value));
IkReal x14435=x14429;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14434)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14434)));
IkReal gconst16=(x14433*x14435);
IkReal gconst17=((1.0)*r00*x14435);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14437=((-1.0)*r01);
CheckValue<IkReal> x14440 = IKatan2WithCheck(IkReal(x14437),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14440.valid){
continue;
}
IkReal x14438=((1.0)*(x14440.value));
IkReal x14439=x14429;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14438)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14438)));
IkReal gconst16=(x14437*x14439);
IkReal gconst17=((1.0)*r00*x14439);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14441=((-1.0)*r01);
CheckValue<IkReal> x14444 = IKatan2WithCheck(IkReal(x14441),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14444.valid){
continue;
}
IkReal x14442=((1.0)*(x14444.value));
IkReal x14443=x14429;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14442)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14442)));
IkReal gconst16=(x14441*x14443);
IkReal gconst17=((1.0)*r00*x14443);
IkReal x14445=r02*r02;
IkReal x14446=(r12*sj0);
IkReal x14447=((1.0)*cj0);
IkReal x14448=x14429;
j4eval[0]=((IKabs(((((-1.0)*x14446))+(((-1.0)*r02*x14447)))))+(IKabs((((r02*x14446*x14448))+((cj0*x14445*x14448))+(((-1.0)*x14447*x14448))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14449=((-1.0)*r01);
CheckValue<IkReal> x14452 = IKatan2WithCheck(IkReal(x14449),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14452.valid){
continue;
}
IkReal x14450=((1.0)*(x14452.value));
IkReal x14451=x14429;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14450)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14450)));
IkReal gconst16=(x14449*x14451);
IkReal gconst17=((1.0)*r00*x14451);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14453=((-1.0)*r01);
CheckValue<IkReal> x14456 = IKatan2WithCheck(IkReal(x14453),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14456.valid){
continue;
}
IkReal x14454=((1.0)*(x14456.value));
IkReal x14455=x14429;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14454)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14454)));
IkReal gconst16=(x14453*x14455);
IkReal gconst17=((1.0)*r00*x14455);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14457=gconst16*gconst16;
IkReal x14458=gconst17*gconst17;
IkReal x14459=(r11*sj3);
IkReal x14460=(cj3*r10);
IkReal x14461=((1.0)*cj3);
IkReal x14462=(r10*sj3);
IkReal x14463=(gconst16*gconst17);
IkReal x14464=(r21*x14457);
IkReal x14465=((1.0)*r20*x14458);
CheckValue<IkReal> x14466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14461))+((cj3*r11*r20*x14463))+(((-1.0)*x14460*x14465))+((r21*x14460*x14463))+(((-1.0)*r11*x14461*x14464)))),-1);
if(!x14466.valid){
continue;
}
CheckValue<IkReal> x14467 = IKatan2WithCheck(IkReal((((gconst16*r22*x14462))+((gconst17*r22*x14459)))),IkReal((((x14462*x14464))+(((-1.0)*r20*x14462*x14463))+((r21*x14459*x14463))+(((-1.0)*x14459*x14465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14466.value)))+(x14467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14468=IKsin(j4);
IkReal x14469=IKcos(j4);
IkReal x14470=(cj2*sj1);
IkReal x14471=(cj1*sj2);
IkReal x14472=(gconst16*r21);
IkReal x14473=(cj3*gconst17);
IkReal x14474=(gconst16*r20);
IkReal x14475=(sj1*sj2);
IkReal x14476=(gconst17*r20);
IkReal x14477=(gconst17*sj3);
IkReal x14478=(gconst16*r10);
IkReal x14479=(cj1*cj2);
IkReal x14480=(gconst16*sj3);
IkReal x14481=((1.0)*x14469);
IkReal x14482=((1.0)*x14468);
IkReal x14483=(gconst16*x14468);
IkReal x14484=(cj3*x14469);
IkReal x14485=(cj3*x14468);
IkReal x14486=(x14471+x14470);
evalcond[0]=((((-1.0)*r22*x14481))+((x14468*x14472))+(((-1.0)*x14476*x14482)));
evalcond[1]=((((-1.0)*gconst17*r00*x14482))+(((-1.0)*r02*x14481))+((r01*x14483)));
evalcond[2]=((-1.0)+((r11*x14483))+(((-1.0)*gconst17*r10*x14482))+(((-1.0)*r12*x14481)));
evalcond[3]=(((sj3*x14478))+(((-1.0)*r10*x14473*x14481))+((r12*x14485))+((r11*x14477))+((gconst16*r11*x14484)));
evalcond[4]=((((-1.0)*r11*x14480*x14481))+((r11*x14473))+(((-1.0)*r12*sj3*x14482))+((r10*x14469*x14477))+((cj3*x14478)));
evalcond[5]=(((x14472*x14484))+((sj3*x14474))+((r21*x14477))+((r22*x14485))+(((-1.0)*r20*x14473*x14481))+x14486);
evalcond[6]=(((r02*x14485))+((r01*x14477))+(((-1.0)*x14475))+x14479+((r00*x14480))+(((-1.0)*r00*x14473*x14481))+((gconst16*r01*x14484)));
evalcond[7]=((((-1.0)*r02*sj3*x14482))+((r01*x14473))+(((-1.0)*r01*x14480*x14481))+x14486+((r00*x14469*x14477))+((cj3*gconst16*r00)));
evalcond[8]=(((sj3*x14469*x14476))+((r21*x14473))+(((-1.0)*r22*sj3*x14482))+(((-1.0)*sj3*x14472*x14481))+(((-1.0)*x14479))+x14475+((cj3*x14474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14487=((1.0)*gconst17);
CheckValue<IkReal> x14488=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14487)))),-1);
if(!x14488.valid){
continue;
}
CheckValue<IkReal> x14489 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14488.value)))+(x14489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14490=IKsin(j4);
IkReal x14491=IKcos(j4);
IkReal x14492=(cj2*sj1);
IkReal x14493=(cj1*sj2);
IkReal x14494=(gconst16*r21);
IkReal x14495=(cj3*gconst17);
IkReal x14496=(gconst16*r20);
IkReal x14497=(sj1*sj2);
IkReal x14498=(gconst17*r20);
IkReal x14499=(gconst17*sj3);
IkReal x14500=(gconst16*r10);
IkReal x14501=(cj1*cj2);
IkReal x14502=(gconst16*sj3);
IkReal x14503=((1.0)*x14491);
IkReal x14504=((1.0)*x14490);
IkReal x14505=(gconst16*x14490);
IkReal x14506=(cj3*x14491);
IkReal x14507=(cj3*x14490);
IkReal x14508=(x14493+x14492);
evalcond[0]=(((x14490*x14494))+(((-1.0)*r22*x14503))+(((-1.0)*x14498*x14504)));
evalcond[1]=((((-1.0)*r02*x14503))+(((-1.0)*gconst17*r00*x14504))+((r01*x14505)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14503))+((r11*x14505))+(((-1.0)*gconst17*r10*x14504)));
evalcond[3]=(((r11*x14499))+((gconst16*r11*x14506))+(((-1.0)*r10*x14495*x14503))+((sj3*x14500))+((r12*x14507)));
evalcond[4]=(((cj3*x14500))+((r11*x14495))+((r10*x14491*x14499))+(((-1.0)*r11*x14502*x14503))+(((-1.0)*r12*sj3*x14504)));
evalcond[5]=(((r21*x14499))+((sj3*x14496))+((x14494*x14506))+((r22*x14507))+(((-1.0)*r20*x14495*x14503))+x14508);
evalcond[6]=((((-1.0)*x14497))+((r02*x14507))+(((-1.0)*r00*x14495*x14503))+x14501+((gconst16*r01*x14506))+((r00*x14502))+((r01*x14499)));
evalcond[7]=(x14508+(((-1.0)*r01*x14502*x14503))+((r01*x14495))+((r00*x14491*x14499))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14504)));
evalcond[8]=(((r21*x14495))+(((-1.0)*x14501))+((sj3*x14491*x14498))+x14497+((cj3*x14496))+(((-1.0)*sj3*x14494*x14503))+(((-1.0)*r22*sj3*x14504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14509=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14509.valid){
continue;
}
CheckValue<IkReal> x14510 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14509.value)))+(x14510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14511=IKsin(j4);
IkReal x14512=IKcos(j4);
IkReal x14513=(cj2*sj1);
IkReal x14514=(cj1*sj2);
IkReal x14515=(gconst16*r21);
IkReal x14516=(cj3*gconst17);
IkReal x14517=(gconst16*r20);
IkReal x14518=(sj1*sj2);
IkReal x14519=(gconst17*r20);
IkReal x14520=(gconst17*sj3);
IkReal x14521=(gconst16*r10);
IkReal x14522=(cj1*cj2);
IkReal x14523=(gconst16*sj3);
IkReal x14524=((1.0)*x14512);
IkReal x14525=((1.0)*x14511);
IkReal x14526=(gconst16*x14511);
IkReal x14527=(cj3*x14512);
IkReal x14528=(cj3*x14511);
IkReal x14529=(x14514+x14513);
evalcond[0]=((((-1.0)*r22*x14524))+(((-1.0)*x14519*x14525))+((x14511*x14515)));
evalcond[1]=((((-1.0)*gconst17*r00*x14525))+((r01*x14526))+(((-1.0)*r02*x14524)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14525))+((r11*x14526))+(((-1.0)*r12*x14524)));
evalcond[3]=(((sj3*x14521))+((r11*x14520))+((r12*x14528))+(((-1.0)*r10*x14516*x14524))+((gconst16*r11*x14527)));
evalcond[4]=((((-1.0)*r12*sj3*x14525))+((r10*x14512*x14520))+((r11*x14516))+((cj3*x14521))+(((-1.0)*r11*x14523*x14524)));
evalcond[5]=(((r22*x14528))+((sj3*x14517))+((x14515*x14527))+(((-1.0)*r20*x14516*x14524))+x14529+((r21*x14520)));
evalcond[6]=(((gconst16*r01*x14527))+((r01*x14520))+((r00*x14523))+(((-1.0)*r00*x14516*x14524))+x14522+((r02*x14528))+(((-1.0)*x14518)));
evalcond[7]=(((r01*x14516))+(((-1.0)*r01*x14523*x14524))+((r00*x14512*x14520))+x14529+(((-1.0)*r02*sj3*x14525))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14522))+((cj3*x14517))+(((-1.0)*sj3*x14515*x14524))+x14518+(((-1.0)*r22*sj3*x14525))+((sj3*x14512*x14519))+((r21*x14516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14530=((-1.0)*r01);
CheckValue<IkReal> x14533 = IKatan2WithCheck(IkReal(x14530),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14533.valid){
continue;
}
IkReal x14531=((1.0)*(x14533.value));
IkReal x14532=x14429;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14531)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14531)));
IkReal gconst16=(x14530*x14532);
IkReal gconst17=((1.0)*r00*x14532);
IkReal x14534=r02*r02;
IkReal x14535=(r12*sj0);
IkReal x14536=((1.0)*cj0);
IkReal x14537=x14429;
j4eval[0]=((IKabs((((r02*x14535*x14537))+(((-1.0)*x14536*x14537))+((cj0*x14534*x14537)))))+(IKabs(((((-1.0)*x14535))+(((-1.0)*r02*x14536))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14538=((1.0)*r12);
IkReal x14539=(sj1*sj2);
IkReal x14540=(cj1*cj2);
IkReal x14541=((1.0)*sj3);
IkReal x14542=(gconst16*r21);
IkReal x14543=(cj3*gconst16*r20);
IkReal x14544=(gconst17*r20*sj3);
IkReal x14545=(cj3*gconst17*r21);
CheckValue<IkReal> x14546=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11*x14541*x14542))+((gconst16*r11*x14544))+(((-1.0)*r10*r20*x14541*(gconst17*gconst17)))+((gconst17*r10*sj3*x14542))),-1);
if(!x14546.valid){
continue;
}
CheckValue<IkReal> x14547=IKPowWithIntegerCheck((x14544+(((-1.0)*x14541*x14542))),-1);
if(!x14547.valid){
continue;
}
if( IKabs(((x14546.value)*((((r12*x14540))+((cj0*sj3*x14542))+(((-1.0)*x14538*x14539))+(((-1.0)*cj0*gconst17*r20*x14541))+(((-1.0)*x14538*x14543))+(((-1.0)*x14538*x14545)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14547.value)*(((((-1.0)*x14539))+(((-1.0)*x14545))+(((-1.0)*x14543))+x14540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14546.value)*((((r12*x14540))+((cj0*sj3*x14542))+(((-1.0)*x14538*x14539))+(((-1.0)*cj0*gconst17*r20*x14541))+(((-1.0)*x14538*x14543))+(((-1.0)*x14538*x14545))))))+IKsqr(((x14547.value)*(((((-1.0)*x14539))+(((-1.0)*x14545))+(((-1.0)*x14543))+x14540))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14546.value)*((((r12*x14540))+((cj0*sj3*x14542))+(((-1.0)*x14538*x14539))+(((-1.0)*cj0*gconst17*r20*x14541))+(((-1.0)*x14538*x14543))+(((-1.0)*x14538*x14545))))), ((x14547.value)*(((((-1.0)*x14539))+(((-1.0)*x14545))+(((-1.0)*x14543))+x14540))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14548=IKsin(j4);
IkReal x14549=IKcos(j4);
IkReal x14550=((1.0)*gconst17);
IkReal x14551=(gconst17*sj3);
IkReal x14552=(gconst16*r21);
IkReal x14553=(cj3*gconst17);
IkReal x14554=(sj1*sj2);
IkReal x14555=((1.0)*sj0);
IkReal x14556=(gconst16*sj3);
IkReal x14557=(cj3*gconst16);
IkReal x14558=(cj2*sj1);
IkReal x14559=((1.0)*cj0);
IkReal x14560=((1.0)*sj3);
IkReal x14561=(cj1*sj2);
IkReal x14562=(cj3*x14549);
IkReal x14563=(gconst16*x14548);
IkReal x14564=((1.0)*x14549);
IkReal x14565=((1.0)*cj1*cj2);
IkReal x14566=(r02*x14548);
IkReal x14567=(r12*x14548);
evalcond[0]=(((x14548*x14552))+(((-1.0)*r20*x14548*x14550)));
evalcond[1]=(cj0+(((-1.0)*r12*x14564))+((r11*x14563))+(((-1.0)*r10*x14548*x14550)));
evalcond[2]=(((r01*x14563))+(((-1.0)*r02*x14564))+(((-1.0)*x14555))+(((-1.0)*r00*x14548*x14550)));
evalcond[3]=(((r20*x14556))+x14558+x14561+(((-1.0)*r20*x14550*x14562))+((x14552*x14562))+((r21*x14551)));
evalcond[4]=(((r20*x14549*x14551))+(((-1.0)*x14549*x14552*x14560))+((r20*x14557))+(((-1.0)*x14565))+x14554+((r21*x14553)));
evalcond[5]=((((-1.0)*cj1*cj2*x14559))+(((-1.0)*r00*x14550*x14562))+((r01*x14549*x14557))+((cj3*x14566))+((r01*x14551))+((r00*x14556))+((cj0*x14554)));
evalcond[6]=((((-1.0)*r10*x14550*x14562))+(((-1.0)*cj1*cj2*x14555))+((sj0*x14554))+((cj3*x14567))+((r10*x14556))+((r11*x14551))+((r11*x14549*x14557)));
evalcond[7]=((((-1.0)*x14559*x14561))+((r00*x14549*x14551))+(((-1.0)*x14558*x14559))+(((-1.0)*x14560*x14566))+((r01*x14553))+((r00*x14557))+(((-1.0)*r01*x14556*x14564)));
evalcond[8]=(((r10*x14557))+(((-1.0)*x14560*x14567))+((r11*x14553))+(((-1.0)*x14555*x14561))+(((-1.0)*r11*x14556*x14564))+(((-1.0)*x14555*x14558))+((r10*x14549*x14551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14568=((1.0)*sj0);
IkReal x14569=((1.0)*cj0);
CheckValue<IkReal> x14570=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14570.valid){
continue;
}
CheckValue<IkReal> x14571 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14569))+(((-1.0)*r12*x14568)))),IkReal(((((-1.0)*gconst16*r01*x14569))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14570.value)))+(x14571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14572=IKsin(j4);
IkReal x14573=IKcos(j4);
IkReal x14574=((1.0)*gconst17);
IkReal x14575=(gconst17*sj3);
IkReal x14576=(gconst16*r21);
IkReal x14577=(cj3*gconst17);
IkReal x14578=(sj1*sj2);
IkReal x14579=((1.0)*sj0);
IkReal x14580=(gconst16*sj3);
IkReal x14581=(cj3*gconst16);
IkReal x14582=(cj2*sj1);
IkReal x14583=((1.0)*cj0);
IkReal x14584=((1.0)*sj3);
IkReal x14585=(cj1*sj2);
IkReal x14586=(cj3*x14573);
IkReal x14587=(gconst16*x14572);
IkReal x14588=((1.0)*x14573);
IkReal x14589=((1.0)*cj1*cj2);
IkReal x14590=(r02*x14572);
IkReal x14591=(r12*x14572);
evalcond[0]=(((x14572*x14576))+(((-1.0)*r20*x14572*x14574)));
evalcond[1]=(cj0+(((-1.0)*r12*x14588))+(((-1.0)*r10*x14572*x14574))+((r11*x14587)));
evalcond[2]=((((-1.0)*r00*x14572*x14574))+(((-1.0)*r02*x14588))+(((-1.0)*x14579))+((r01*x14587)));
evalcond[3]=(((r21*x14575))+((r20*x14580))+x14585+x14582+((x14576*x14586))+(((-1.0)*r20*x14574*x14586)));
evalcond[4]=(((r21*x14577))+((r20*x14581))+(((-1.0)*x14589))+x14578+(((-1.0)*x14573*x14576*x14584))+((r20*x14573*x14575)));
evalcond[5]=(((cj0*x14578))+((cj3*x14590))+((r01*x14573*x14581))+(((-1.0)*r00*x14574*x14586))+(((-1.0)*cj1*cj2*x14583))+((r00*x14580))+((r01*x14575)));
evalcond[6]=((((-1.0)*r10*x14574*x14586))+((cj3*x14591))+((r11*x14573*x14581))+(((-1.0)*cj1*cj2*x14579))+((r10*x14580))+((r11*x14575))+((sj0*x14578)));
evalcond[7]=((((-1.0)*x14583*x14585))+(((-1.0)*x14584*x14590))+((r00*x14573*x14575))+((r00*x14581))+(((-1.0)*r01*x14580*x14588))+(((-1.0)*x14582*x14583))+((r01*x14577)));
evalcond[8]=((((-1.0)*x14584*x14591))+(((-1.0)*r11*x14580*x14588))+((r10*x14581))+((r11*x14577))+((r10*x14573*x14575))+(((-1.0)*x14579*x14582))+(((-1.0)*x14579*x14585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14592=((1.0)*sj0);
IkReal x14593=((1.0)*cj0);
CheckValue<IkReal> x14594=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14594.valid){
continue;
}
CheckValue<IkReal> x14595 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14593))+(((-1.0)*r12*x14592)))),IkReal(((((-1.0)*gconst16*r01*x14593))+(((-1.0)*gconst16*r11*x14592))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14594.value)))+(x14595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14596=IKsin(j4);
IkReal x14597=IKcos(j4);
IkReal x14598=(cj3*gconst17);
IkReal x14599=(gconst16*r21);
IkReal x14600=(gconst17*sj3);
IkReal x14601=(gconst16*r20);
IkReal x14602=(sj1*sj2);
IkReal x14603=(gconst16*r10);
IkReal x14604=(cj2*sj1);
IkReal x14605=(gconst16*sj3);
IkReal x14606=((1.0)*cj0);
IkReal x14607=((1.0)*sj0);
IkReal x14608=(cj1*sj2);
IkReal x14609=((1.0)*x14597);
IkReal x14610=(gconst16*x14596);
IkReal x14611=(cj3*x14597);
IkReal x14612=(cj3*x14596);
IkReal x14613=((1.0)*cj1*cj2);
IkReal x14614=((1.0)*gconst17*x14596);
IkReal x14615=((1.0)*sj3*x14596);
evalcond[0]=((((-1.0)*r20*x14614))+(((-1.0)*r22*x14609))+((x14596*x14599)));
evalcond[1]=(cj0+(((-1.0)*r10*x14614))+(((-1.0)*r12*x14609))+((r11*x14610)));
evalcond[2]=(((r01*x14610))+(((-1.0)*r00*x14614))+(((-1.0)*r02*x14609))+(((-1.0)*x14607)));
evalcond[3]=(((r21*x14600))+(((-1.0)*r20*x14598*x14609))+((r22*x14612))+x14608+x14604+((x14599*x14611))+((sj3*x14601)));
evalcond[4]=((((-1.0)*r22*x14615))+((r21*x14598))+((cj3*x14601))+x14602+((r20*x14597*x14600))+(((-1.0)*x14613))+(((-1.0)*sj3*x14599*x14609)));
evalcond[5]=(((gconst16*r01*x14611))+((r02*x14612))+((cj0*x14602))+((r01*x14600))+(((-1.0)*cj1*cj2*x14606))+((r00*x14605))+(((-1.0)*r00*x14598*x14609)));
evalcond[6]=(((gconst16*r11*x14611))+((sj0*x14602))+(((-1.0)*r10*x14598*x14609))+(((-1.0)*cj1*cj2*x14607))+((r11*x14600))+((sj3*x14603))+((r12*x14612)));
evalcond[7]=((((-1.0)*x14604*x14606))+(((-1.0)*r01*x14605*x14609))+(((-1.0)*x14606*x14608))+((r01*x14598))+(((-1.0)*r02*x14615))+((cj3*gconst16*r00))+((r00*x14597*x14600)));
evalcond[8]=((((-1.0)*x14604*x14607))+(((-1.0)*r11*x14605*x14609))+((r10*x14597*x14600))+(((-1.0)*x14607*x14608))+(((-1.0)*r12*x14615))+((cj3*x14603))+((r11*x14598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14616=((1.0)*gconst17);
CheckValue<IkReal> x14617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14616)))),-1);
if(!x14617.valid){
continue;
}
CheckValue<IkReal> x14618 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14617.value)))+(x14618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14619=IKsin(j4);
IkReal x14620=IKcos(j4);
IkReal x14621=(cj3*gconst17);
IkReal x14622=(gconst16*r21);
IkReal x14623=(gconst17*sj3);
IkReal x14624=(gconst16*r20);
IkReal x14625=(sj1*sj2);
IkReal x14626=(gconst16*r10);
IkReal x14627=(cj2*sj1);
IkReal x14628=(gconst16*sj3);
IkReal x14629=((1.0)*cj0);
IkReal x14630=((1.0)*sj0);
IkReal x14631=(cj1*sj2);
IkReal x14632=((1.0)*x14620);
IkReal x14633=(gconst16*x14619);
IkReal x14634=(cj3*x14620);
IkReal x14635=(cj3*x14619);
IkReal x14636=((1.0)*cj1*cj2);
IkReal x14637=((1.0)*gconst17*x14619);
IkReal x14638=((1.0)*sj3*x14619);
evalcond[0]=((((-1.0)*r22*x14632))+(((-1.0)*r20*x14637))+((x14619*x14622)));
evalcond[1]=(cj0+((r11*x14633))+(((-1.0)*r10*x14637))+(((-1.0)*r12*x14632)));
evalcond[2]=((((-1.0)*x14630))+(((-1.0)*r00*x14637))+((r01*x14633))+(((-1.0)*r02*x14632)));
evalcond[3]=(((sj3*x14624))+((r22*x14635))+((r21*x14623))+(((-1.0)*r20*x14621*x14632))+((x14622*x14634))+x14631+x14627);
evalcond[4]=((((-1.0)*r22*x14638))+((r21*x14621))+((cj3*x14624))+(((-1.0)*x14636))+(((-1.0)*sj3*x14622*x14632))+((r20*x14620*x14623))+x14625);
evalcond[5]=(((r02*x14635))+((gconst16*r01*x14634))+(((-1.0)*r00*x14621*x14632))+((cj0*x14625))+((r00*x14628))+((r01*x14623))+(((-1.0)*cj1*cj2*x14629)));
evalcond[6]=(((sj3*x14626))+((gconst16*r11*x14634))+((r11*x14623))+((r12*x14635))+(((-1.0)*cj1*cj2*x14630))+(((-1.0)*r10*x14621*x14632))+((sj0*x14625)));
evalcond[7]=(((r00*x14620*x14623))+(((-1.0)*x14629*x14631))+(((-1.0)*r01*x14628*x14632))+((r01*x14621))+((cj3*gconst16*r00))+(((-1.0)*x14627*x14629))+(((-1.0)*r02*x14638)));
evalcond[8]=((((-1.0)*x14627*x14630))+(((-1.0)*r11*x14628*x14632))+((cj3*x14626))+((r10*x14620*x14623))+((r11*x14621))+(((-1.0)*x14630*x14631))+(((-1.0)*r12*x14638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14639=((1.0)*gconst17);
CheckValue<IkReal> x14640=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14639)))),-1);
if(!x14640.valid){
continue;
}
CheckValue<IkReal> x14641 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14639))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14640.value)))+(x14641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14642=IKsin(j4);
IkReal x14643=IKcos(j4);
IkReal x14644=(cj3*gconst17);
IkReal x14645=(gconst16*r21);
IkReal x14646=(gconst17*sj3);
IkReal x14647=(gconst16*r20);
IkReal x14648=(sj1*sj2);
IkReal x14649=(gconst16*r10);
IkReal x14650=(cj2*sj1);
IkReal x14651=(gconst16*sj3);
IkReal x14652=((1.0)*cj0);
IkReal x14653=((1.0)*sj0);
IkReal x14654=(cj1*sj2);
IkReal x14655=((1.0)*x14643);
IkReal x14656=(gconst16*x14642);
IkReal x14657=(cj3*x14643);
IkReal x14658=(cj3*x14642);
IkReal x14659=((1.0)*cj1*cj2);
IkReal x14660=((1.0)*gconst17*x14642);
IkReal x14661=((1.0)*sj3*x14642);
evalcond[0]=(((x14642*x14645))+(((-1.0)*r22*x14655))+(((-1.0)*r20*x14660)));
evalcond[1]=(cj0+(((-1.0)*r12*x14655))+(((-1.0)*r10*x14660))+((r11*x14656)));
evalcond[2]=(((r01*x14656))+(((-1.0)*r02*x14655))+(((-1.0)*r00*x14660))+(((-1.0)*x14653)));
evalcond[3]=(((r22*x14658))+((sj3*x14647))+((r21*x14646))+((x14645*x14657))+x14650+x14654+(((-1.0)*r20*x14644*x14655)));
evalcond[4]=((((-1.0)*sj3*x14645*x14655))+(((-1.0)*r22*x14661))+((r21*x14644))+x14648+((r20*x14643*x14646))+(((-1.0)*x14659))+((cj3*x14647)));
evalcond[5]=(((gconst16*r01*x14657))+((cj0*x14648))+(((-1.0)*r00*x14644*x14655))+((r01*x14646))+((r00*x14651))+(((-1.0)*cj1*cj2*x14652))+((r02*x14658)));
evalcond[6]=(((r11*x14646))+((r12*x14658))+((sj0*x14648))+((sj3*x14649))+(((-1.0)*r10*x14644*x14655))+(((-1.0)*cj1*cj2*x14653))+((gconst16*r11*x14657)));
evalcond[7]=(((r00*x14643*x14646))+((r01*x14644))+(((-1.0)*x14650*x14652))+(((-1.0)*r01*x14651*x14655))+(((-1.0)*r02*x14661))+(((-1.0)*x14652*x14654))+((cj3*gconst16*r00)));
evalcond[8]=(((r11*x14644))+(((-1.0)*r11*x14651*x14655))+(((-1.0)*x14653*x14654))+(((-1.0)*r12*x14661))+(((-1.0)*x14650*x14653))+((r10*x14643*x14646))+((cj3*x14649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14662=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14662;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14663=((1.0)*cj5);
IkReal x14664=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14663)));
j4eval[0]=x14664;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14663))))));
j4eval[2]=IKsign(x14664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14665=cj5*cj5;
IkReal x14666=(cj3*r01);
IkReal x14667=(cj5*sj5);
IkReal x14668=((1.0)*cj3);
IkReal x14669=(((cj3*r00*r21*x14667))+(((-1.0)*r21*x14666))+((r20*x14666*x14667))+(((-1.0)*r02*r22*x14668))+((r21*x14665*x14666))+(((-1.0)*r00*r20*x14665*x14668)));
j4eval[0]=x14669;
j4eval[1]=IKsign(x14669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14670=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14670;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14671=((1.0)*cj5);
IkReal x14672=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14671)));
j4eval[0]=x14672;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14671)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14673=cj5*cj5;
IkReal x14674=r01*r01;
IkReal x14675=(r01*sj5);
IkReal x14676=(cj5*r00);
IkReal x14677=((((-1.0)*(r02*r02)))+(((-1.0)*x14674))+(((2.0)*x14675*x14676))+((x14673*x14674))+(((-1.0)*x14673*(r00*r00))));
j4eval[0]=x14677;
j4eval[1]=IKsign(x14677);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14675))+x14676))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14678=cj5*cj5;
IkReal x14679=r01*r01;
IkReal x14680=(r01*sj5);
IkReal x14681=(cj5*r00);
CheckValue<IkReal> x14682=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14678*(r00*r00)))+(((2.0)*x14680*x14681))+(((-1.0)*(r02*r02)))+(((-1.0)*x14679))+((x14678*x14679)))),-1);
if(!x14682.valid){
continue;
}
CheckValue<IkReal> x14683 = IKatan2WithCheck(IkReal((x14681+(((-1.0)*x14680)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14682.value)))+(x14683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14684=IKsin(j4);
IkReal x14685=IKcos(j4);
IkReal x14686=(cj5*r10);
IkReal x14687=(r01*sj5);
IkReal x14688=((1.0)*cj2);
IkReal x14689=(cj5*r00);
IkReal x14690=(cj5*r20);
IkReal x14691=((1.0)*x14685);
IkReal x14692=((1.0)*x14684);
IkReal x14693=(sj5*x14684);
evalcond[0]=((((-1.0)*r22*x14691))+(((-1.0)*x14690*x14692))+((r21*x14693)));
evalcond[1]=(((r11*x14693))+(((-1.0)*x14686*x14692))+(((-1.0)*r12*x14691)));
evalcond[2]=(((x14685*x14689))+(((-1.0)*r02*x14692))+(((-1.0)*x14687*x14691)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14691))+((x14684*x14687))+(((-1.0)*x14689*x14692)));
evalcond[4]=((((-1.0)*cj1*x14688))+(((-1.0)*r21*sj5*x14691))+((x14685*x14690))+((sj1*sj2))+(((-1.0)*r22*x14692)));
evalcond[5]=(((x14685*x14686))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14691))+(((-1.0)*sj1*x14688))+(((-1.0)*r12*x14692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14694=((1.0)*cj5);
CheckValue<IkReal> x14695 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14695.valid){
continue;
}
CheckValue<IkReal> x14696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14694)))),-1);
if(!x14696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14695.value)+(((1.5707963267949)*(x14696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14697=IKsin(j4);
IkReal x14698=IKcos(j4);
IkReal x14699=(cj5*r10);
IkReal x14700=(r01*sj5);
IkReal x14701=((1.0)*cj2);
IkReal x14702=(cj5*r00);
IkReal x14703=(cj5*r20);
IkReal x14704=((1.0)*x14698);
IkReal x14705=((1.0)*x14697);
IkReal x14706=(sj5*x14697);
evalcond[0]=(((r21*x14706))+(((-1.0)*x14703*x14705))+(((-1.0)*r22*x14704)));
evalcond[1]=((((-1.0)*x14699*x14705))+(((-1.0)*r12*x14704))+((r11*x14706)));
evalcond[2]=(((x14698*x14702))+(((-1.0)*x14700*x14704))+(((-1.0)*r02*x14705)));
evalcond[3]=((-1.0)+(((-1.0)*x14702*x14705))+((x14697*x14700))+(((-1.0)*r02*x14704)));
evalcond[4]=(((x14698*x14703))+((sj1*sj2))+(((-1.0)*cj1*x14701))+(((-1.0)*r21*sj5*x14704))+(((-1.0)*r22*x14705)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14701))+(((-1.0)*r12*x14705))+(((-1.0)*r11*sj5*x14704))+((x14698*x14699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14707=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14707.valid){
continue;
}
CheckValue<IkReal> x14708 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14707.value)))+(x14708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14709=IKsin(j4);
IkReal x14710=IKcos(j4);
IkReal x14711=(cj5*r10);
IkReal x14712=(r01*sj5);
IkReal x14713=((1.0)*cj2);
IkReal x14714=(cj5*r00);
IkReal x14715=(cj5*r20);
IkReal x14716=((1.0)*x14710);
IkReal x14717=((1.0)*x14709);
IkReal x14718=(sj5*x14709);
evalcond[0]=(((r21*x14718))+(((-1.0)*r22*x14716))+(((-1.0)*x14715*x14717)));
evalcond[1]=(((r11*x14718))+(((-1.0)*x14711*x14717))+(((-1.0)*r12*x14716)));
evalcond[2]=(((x14710*x14714))+(((-1.0)*r02*x14717))+(((-1.0)*x14712*x14716)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14716))+(((-1.0)*x14714*x14717))+((x14709*x14712)));
evalcond[4]=(((x14710*x14715))+(((-1.0)*r22*x14717))+((sj1*sj2))+(((-1.0)*cj1*x14713))+(((-1.0)*r21*sj5*x14716)));
evalcond[5]=((((-1.0)*sj1*x14713))+((x14710*x14711))+(((-1.0)*r11*sj5*x14716))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14719=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14719;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14720=((1.0)*cj5);
IkReal x14721=((((-1.0)*r11*x14720))+(((-1.0)*r10*sj5)));
j4eval[0]=x14721;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14720))+((r21*sj5))))));
j4eval[2]=IKsign(x14721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14722=cj5*cj5;
IkReal x14723=r01*r01;
IkReal x14724=(cj5*r00);
IkReal x14725=(r01*sj5);
IkReal x14726=((((-1.0)*x14722*x14723))+((x14722*(r00*r00)))+x14723+(r02*r02)+(((-2.0)*x14724*x14725)));
j4eval[0]=x14726;
j4eval[1]=IKsign(x14726);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14724))+x14725))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14727=cj5*cj5;
IkReal x14728=r01*r01;
IkReal x14729=(r01*sj5);
IkReal x14730=(cj5*r00);
CheckValue<IkReal> x14731 = IKatan2WithCheck(IkReal(((((-1.0)*x14730))+x14729)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14731.valid){
continue;
}
CheckValue<IkReal> x14732=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14727*x14728))+((x14727*(r00*r00)))+(((-2.0)*x14729*x14730))+x14728+(r02*r02))),-1);
if(!x14732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14731.value)+(((1.5707963267949)*(x14732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14733=IKcos(j4);
IkReal x14734=IKsin(j4);
IkReal x14735=(cj5*r00);
IkReal x14736=(cj5*r10);
IkReal x14737=(r21*sj5);
IkReal x14738=((1.0)*cj2);
IkReal x14739=(cj5*r20);
IkReal x14740=((1.0)*x14733);
IkReal x14741=((1.0)*x14734);
IkReal x14742=(sj5*x14734);
IkReal x14743=(sj5*x14733);
evalcond[0]=(((r02*x14734))+((r01*x14743))+(((-1.0)*x14735*x14740)));
evalcond[1]=(((x14734*x14737))+(((-1.0)*x14739*x14741))+(((-1.0)*r22*x14740)));
evalcond[2]=((((-1.0)*x14736*x14741))+((r11*x14742))+(((-1.0)*r12*x14740)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14740))+((r01*x14742))+(((-1.0)*x14735*x14741)));
evalcond[4]=(((x14733*x14737))+(((-1.0)*x14739*x14740))+((sj1*sj2))+(((-1.0)*cj1*x14738))+((r22*x14734)));
evalcond[5]=((((-1.0)*x14736*x14740))+(((-1.0)*sj1*x14738))+((r11*x14743))+(((-1.0)*cj1*sj2))+((r12*x14734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14744=((1.0)*cj5);
CheckValue<IkReal> x14745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14744)))),-1);
if(!x14745.valid){
continue;
}
CheckValue<IkReal> x14746 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14745.value)))+(x14746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14747=IKcos(j4);
IkReal x14748=IKsin(j4);
IkReal x14749=(cj5*r00);
IkReal x14750=(cj5*r10);
IkReal x14751=(r21*sj5);
IkReal x14752=((1.0)*cj2);
IkReal x14753=(cj5*r20);
IkReal x14754=((1.0)*x14747);
IkReal x14755=((1.0)*x14748);
IkReal x14756=(sj5*x14748);
IkReal x14757=(sj5*x14747);
evalcond[0]=((((-1.0)*x14749*x14754))+((r01*x14757))+((r02*x14748)));
evalcond[1]=((((-1.0)*x14753*x14755))+((x14748*x14751))+(((-1.0)*r22*x14754)));
evalcond[2]=((((-1.0)*r12*x14754))+(((-1.0)*x14750*x14755))+((r11*x14756)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14754))+(((-1.0)*x14749*x14755))+((r01*x14756)));
evalcond[4]=((((-1.0)*x14753*x14754))+((r22*x14748))+(((-1.0)*cj1*x14752))+((sj1*sj2))+((x14747*x14751)));
evalcond[5]=(((r12*x14748))+(((-1.0)*sj1*x14752))+(((-1.0)*cj1*sj2))+(((-1.0)*x14750*x14754))+((r11*x14757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14758=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14758.valid){
continue;
}
CheckValue<IkReal> x14759 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14758.value)))+(x14759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14760=IKcos(j4);
IkReal x14761=IKsin(j4);
IkReal x14762=(cj5*r00);
IkReal x14763=(cj5*r10);
IkReal x14764=(r21*sj5);
IkReal x14765=((1.0)*cj2);
IkReal x14766=(cj5*r20);
IkReal x14767=((1.0)*x14760);
IkReal x14768=((1.0)*x14761);
IkReal x14769=(sj5*x14761);
IkReal x14770=(sj5*x14760);
evalcond[0]=(((r01*x14770))+((r02*x14761))+(((-1.0)*x14762*x14767)));
evalcond[1]=(((x14761*x14764))+(((-1.0)*x14766*x14768))+(((-1.0)*r22*x14767)));
evalcond[2]=((((-1.0)*x14763*x14768))+(((-1.0)*r12*x14767))+((r11*x14769)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14767))+((r01*x14769))+(((-1.0)*x14762*x14768)));
evalcond[4]=(((sj1*sj2))+((x14760*x14764))+(((-1.0)*x14766*x14767))+(((-1.0)*cj1*x14765))+((r22*x14761)));
evalcond[5]=((((-1.0)*sj1*x14765))+((r11*x14770))+(((-1.0)*x14763*x14767))+(((-1.0)*cj1*sj2))+((r12*x14761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14772 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14772)==0){
continue;
}
IkReal x14771=pow(x14772,-0.5);
CheckValue<IkReal> x14773 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14773.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14773.value));
IkReal gconst49=((-1.0)*r21*x14771);
IkReal gconst50=(r20*x14771);
CheckValue<IkReal> x14774 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14774.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14774.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14777 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14777.valid){
continue;
}
IkReal x14775=((-1.0)*(x14777.value));
IkReal x14776=x14771;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14775;
IkReal gconst48=x14775;
IkReal gconst49=((-1.0)*r21*x14776);
IkReal gconst50=(r20*x14776);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14780 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14780.valid){
continue;
}
IkReal x14778=((-1.0)*(x14780.value));
IkReal x14779=x14771;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14778;
IkReal gconst48=x14778;
IkReal gconst49=((-1.0)*r21*x14779);
IkReal gconst50=(r20*x14779);
CheckValue<IkReal> x14788=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14788.valid){
continue;
}
IkReal x14781=x14788.value;
IkReal x14782=(sj3*x14781);
IkReal x14783=(r11*x14782);
IkReal x14784=(r00*x14782);
IkReal x14785=(r01*x14782);
IkReal x14786=(r10*x14782);
IkReal x14787=(r20*r21*x14782);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x14784*(r20*r20)))+((r01*x14783*(r21*r21)))+((r00*r20*r21*x14783))+((r10*r20*r21*x14785))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14789=gconst49*gconst49;
IkReal x14790=gconst50*gconst50;
IkReal x14791=((1.0)*cj3);
IkReal x14792=(gconst50*r01);
IkReal x14793=(gconst49*r10);
IkReal x14794=(r12*sj3);
IkReal x14795=(gconst49*r00);
IkReal x14796=(r00*sj3);
IkReal x14797=(r11*x14789);
IkReal x14798=(r10*x14790);
CheckValue<IkReal> x14799 = IKatan2WithCheck(IkReal((((x14792*x14794))+((x14794*x14795)))),IkReal((((x14796*x14797))+(((-1.0)*gconst50*x14793*x14796))+((gconst49*r11*sj3*x14792))+(((-1.0)*r01*sj3*x14798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14799.valid){
continue;
}
CheckValue<IkReal> x14800=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14795))+(((-1.0)*r00*x14791*x14798))+(((-1.0)*r02*r12*x14791))+((cj3*x14792*x14793))+(((-1.0)*r01*x14791*x14797)))),-1);
if(!x14800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14799.value)+(((1.5707963267949)*(x14800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14801=IKsin(j4);
IkReal x14802=IKcos(j4);
IkReal x14803=(sj1*sj2);
IkReal x14804=(gconst50*r20);
IkReal x14805=(gconst50*sj3);
IkReal x14806=(cj3*r01);
IkReal x14807=(gconst50*r10);
IkReal x14808=(gconst49*sj3);
IkReal x14809=((1.0)*cj2);
IkReal x14810=(cj1*sj2);
IkReal x14811=(cj3*r11);
IkReal x14812=(gconst50*r00);
IkReal x14813=(cj3*r21);
IkReal x14814=(cj3*gconst49);
IkReal x14815=(cj1*x14809);
IkReal x14816=((1.0)*x14802);
IkReal x14817=((1.0)*x14801);
IkReal x14818=(gconst49*x14801);
IkReal x14819=(gconst49*x14802);
IkReal x14820=(cj3*x14801);
evalcond[0]=((((-1.0)*r22*x14816))+((r21*x14818))+(((-1.0)*x14804*x14817)));
evalcond[1]=((((-1.0)*x14807*x14817))+(((-1.0)*r12*x14816))+((r11*x14818)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14816))+((r01*x14818))+(((-1.0)*x14812*x14817)));
evalcond[3]=(((r02*x14820))+(((-1.0)*cj3*x14812*x14816))+((x14806*x14819))+((r01*x14805))+((r00*x14808)));
evalcond[4]=((((-1.0)*r02*sj3*x14817))+(((-1.0)*r01*x14808*x14816))+((r00*x14814))+((r00*x14802*x14805))+((gconst50*x14806)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x14804*x14816))+((r21*x14805))+x14810+((x14813*x14819))+((r22*x14820))+((r20*x14808)));
evalcond[6]=(x14803+((r10*x14808))+(((-1.0)*x14815))+((x14811*x14819))+((r12*x14820))+(((-1.0)*cj3*x14807*x14816))+((r11*x14805)));
evalcond[7]=(x14803+(((-1.0)*x14815))+((sj3*x14802*x14804))+(((-1.0)*r21*x14808*x14816))+(((-1.0)*r22*sj3*x14817))+((r20*x14814))+((gconst50*x14813)));
evalcond[8]=(((r10*x14814))+(((-1.0)*r11*x14808*x14816))+(((-1.0)*r12*sj3*x14817))+(((-1.0)*x14810))+((r10*x14802*x14805))+(((-1.0)*sj1*x14809))+((gconst50*x14811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14821=gconst49*gconst49;
IkReal x14822=gconst50*gconst50;
IkReal x14823=(cj3*r12);
IkReal x14824=(gconst49*r00);
IkReal x14825=(r01*r11);
IkReal x14826=(r00*r11);
IkReal x14827=(cj3*gconst50);
IkReal x14828=((1.0)*r01*r10);
IkReal x14829=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14830=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*r10*sj3*x14822))+(((-1.0)*gconst50*r11*sj3*x14824))+((sj3*x14821*x14825))+(((-1.0)*x14828*x14829)))),-1);
if(!x14830.valid){
continue;
}
CheckValue<IkReal> x14831 = IKatan2WithCheck(IkReal((((x14823*x14824))+((gconst50*r01*x14823)))),IkReal(((((-1.0)*cj3*x14822*x14828))+(((-1.0)*r10*x14824*x14827))+((gconst49*x14825*x14827))+((cj3*x14821*x14826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14830.value)))+(x14831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14832=IKsin(j4);
IkReal x14833=IKcos(j4);
IkReal x14834=(sj1*sj2);
IkReal x14835=(gconst50*r20);
IkReal x14836=(gconst50*sj3);
IkReal x14837=(cj3*r01);
IkReal x14838=(gconst50*r10);
IkReal x14839=(gconst49*sj3);
IkReal x14840=((1.0)*cj2);
IkReal x14841=(cj1*sj2);
IkReal x14842=(cj3*r11);
IkReal x14843=(gconst50*r00);
IkReal x14844=(cj3*r21);
IkReal x14845=(cj3*gconst49);
IkReal x14846=(cj1*x14840);
IkReal x14847=((1.0)*x14833);
IkReal x14848=((1.0)*x14832);
IkReal x14849=(gconst49*x14832);
IkReal x14850=(gconst49*x14833);
IkReal x14851=(cj3*x14832);
evalcond[0]=((((-1.0)*x14835*x14848))+(((-1.0)*r22*x14847))+((r21*x14849)));
evalcond[1]=((((-1.0)*x14838*x14848))+((r11*x14849))+(((-1.0)*r12*x14847)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14847))+((r01*x14849))+(((-1.0)*x14843*x14848)));
evalcond[3]=(((x14837*x14850))+(((-1.0)*cj3*x14843*x14847))+((r02*x14851))+((r01*x14836))+((r00*x14839)));
evalcond[4]=(((gconst50*x14837))+(((-1.0)*r02*sj3*x14848))+(((-1.0)*r01*x14839*x14847))+((r00*x14845))+((r00*x14833*x14836)));
evalcond[5]=(((cj2*sj1))+((x14844*x14850))+x14841+((r20*x14839))+((r21*x14836))+(((-1.0)*cj3*x14835*x14847))+((r22*x14851)));
evalcond[6]=(x14834+((r11*x14836))+(((-1.0)*cj3*x14838*x14847))+(((-1.0)*x14846))+((r10*x14839))+((r12*x14851))+((x14842*x14850)));
evalcond[7]=(((r20*x14845))+x14834+(((-1.0)*r21*x14839*x14847))+(((-1.0)*x14846))+((gconst50*x14844))+((sj3*x14833*x14835))+(((-1.0)*r22*sj3*x14848)));
evalcond[8]=((((-1.0)*x14841))+(((-1.0)*sj1*x14840))+((r10*x14833*x14836))+((gconst50*x14842))+((r10*x14845))+(((-1.0)*r11*x14839*x14847))+(((-1.0)*r12*sj3*x14848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14852=((1.0)*gconst50);
CheckValue<IkReal> x14853=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14852)))),-1);
if(!x14853.valid){
continue;
}
CheckValue<IkReal> x14854 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14853.value)))+(x14854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14855=IKsin(j4);
IkReal x14856=IKcos(j4);
IkReal x14857=(sj1*sj2);
IkReal x14858=(gconst50*r20);
IkReal x14859=(gconst50*sj3);
IkReal x14860=(cj3*r01);
IkReal x14861=(gconst50*r10);
IkReal x14862=(gconst49*sj3);
IkReal x14863=((1.0)*cj2);
IkReal x14864=(cj1*sj2);
IkReal x14865=(cj3*r11);
IkReal x14866=(gconst50*r00);
IkReal x14867=(cj3*r21);
IkReal x14868=(cj3*gconst49);
IkReal x14869=(cj1*x14863);
IkReal x14870=((1.0)*x14856);
IkReal x14871=((1.0)*x14855);
IkReal x14872=(gconst49*x14855);
IkReal x14873=(gconst49*x14856);
IkReal x14874=(cj3*x14855);
evalcond[0]=((((-1.0)*r22*x14870))+(((-1.0)*x14858*x14871))+((r21*x14872)));
evalcond[1]=(((r11*x14872))+(((-1.0)*r12*x14870))+(((-1.0)*x14861*x14871)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14870))+(((-1.0)*x14866*x14871))+((r01*x14872)));
evalcond[3]=((((-1.0)*cj3*x14866*x14870))+((r00*x14862))+((r01*x14859))+((r02*x14874))+((x14860*x14873)));
evalcond[4]=(((r00*x14856*x14859))+(((-1.0)*r01*x14862*x14870))+((gconst50*x14860))+((r00*x14868))+(((-1.0)*r02*sj3*x14871)));
evalcond[5]=(((r21*x14859))+((cj2*sj1))+((x14867*x14873))+((r22*x14874))+((r20*x14862))+x14864+(((-1.0)*cj3*x14858*x14870)));
evalcond[6]=(((x14865*x14873))+((r12*x14874))+x14857+((r11*x14859))+((r10*x14862))+(((-1.0)*x14869))+(((-1.0)*cj3*x14861*x14870)));
evalcond[7]=(((r20*x14868))+(((-1.0)*r22*sj3*x14871))+x14857+((gconst50*x14867))+((sj3*x14856*x14858))+(((-1.0)*x14869))+(((-1.0)*r21*x14862*x14870)));
evalcond[8]=((((-1.0)*r11*x14862*x14870))+(((-1.0)*r12*sj3*x14871))+(((-1.0)*sj1*x14863))+((r10*x14856*x14859))+((gconst50*x14865))+((r10*x14868))+(((-1.0)*x14864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14876 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14876)==0){
continue;
}
IkReal x14875=pow(x14876,-0.5);
CheckValue<IkReal> x14877 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14877.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14877.value))));
IkReal gconst52=((1.0)*r21*x14875);
IkReal gconst53=((-1.0)*r20*x14875);
CheckValue<IkReal> x14878 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14878.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14878.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14881 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14881.valid){
continue;
}
IkReal x14879=((1.0)*(x14881.value));
IkReal x14880=x14875;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14879)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14879)));
IkReal gconst52=((1.0)*r21*x14880);
IkReal gconst53=((-1.0)*r20*x14880);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14884 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14884.valid){
continue;
}
IkReal x14882=((1.0)*(x14884.value));
IkReal x14883=x14875;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14882)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14882)));
IkReal gconst52=((1.0)*r21*x14883);
IkReal gconst53=((-1.0)*r20*x14883);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14887 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14887.valid){
continue;
}
IkReal x14885=((1.0)*(x14887.value));
IkReal x14886=x14875;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14885)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14885)));
IkReal gconst52=((1.0)*r21*x14886);
IkReal gconst53=((-1.0)*r20*x14886);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14888=gconst52*gconst52;
IkReal x14889=gconst53*gconst53;
IkReal x14890=(gconst53*r01);
IkReal x14891=(cj3*r20);
IkReal x14892=(r22*sj3);
IkReal x14893=((1.0)*cj3);
IkReal x14894=(gconst52*sj3);
IkReal x14895=((1.0)*r00);
IkReal x14896=(gconst52*r00);
IkReal x14897=(r21*x14888);
CheckValue<IkReal> x14898=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14889*x14891*x14895))+((gconst52*x14890*x14891))+((cj3*gconst53*r21*x14896))+(((-1.0)*r01*x14893*x14897))+(((-1.0)*r02*r22*x14893)))),-1);
if(!x14898.valid){
continue;
}
CheckValue<IkReal> x14899 = IKatan2WithCheck(IkReal((((x14890*x14892))+((x14892*x14896)))),IkReal((((r00*sj3*x14897))+(((-1.0)*r01*r20*sj3*x14889))+((r21*x14890*x14894))+(((-1.0)*gconst53*r20*x14894*x14895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14898.value)))+(x14899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14900=IKsin(j4);
IkReal x14901=IKcos(j4);
IkReal x14902=(sj1*sj2);
IkReal x14903=((1.0)*cj1);
IkReal x14904=(cj3*gconst52);
IkReal x14905=(gconst53*sj3);
IkReal x14906=(cj3*gconst53);
IkReal x14907=(cj2*sj1);
IkReal x14908=(gconst52*sj3);
IkReal x14909=(cj2*x14903);
IkReal x14910=((1.0)*x14901);
IkReal x14911=((1.0)*x14900);
IkReal x14912=(gconst52*x14900);
IkReal x14913=(cj3*x14900);
evalcond[0]=(((r21*x14912))+(((-1.0)*r22*x14910))+(((-1.0)*gconst53*r20*x14911)));
evalcond[1]=((((-1.0)*r12*x14910))+((r11*x14912))+(((-1.0)*gconst53*r10*x14911)));
evalcond[2]=((-1.0)+((r01*x14912))+(((-1.0)*r02*x14910))+(((-1.0)*gconst53*r00*x14911)));
evalcond[3]=(((r00*x14908))+((r01*x14905))+((r01*x14901*x14904))+((r02*x14913))+(((-1.0)*r00*x14906*x14910)));
evalcond[4]=(((r00*x14904))+((r01*x14906))+((r00*x14901*x14905))+(((-1.0)*r02*sj3*x14911))+(((-1.0)*r01*x14908*x14910)));
evalcond[5]=(((r22*x14913))+((r21*x14905))+x14907+((cj1*sj2))+(((-1.0)*r20*x14906*x14910))+((r21*x14901*x14904))+((r20*x14908)));
evalcond[6]=((((-1.0)*r10*x14906*x14910))+((r11*x14905))+x14902+(((-1.0)*x14909))+((r12*x14913))+((r11*x14901*x14904))+((r10*x14908)));
evalcond[7]=(((r21*x14906))+x14902+(((-1.0)*x14909))+(((-1.0)*r22*sj3*x14911))+((r20*x14901*x14905))+(((-1.0)*r21*x14908*x14910))+((r20*x14904)));
evalcond[8]=((((-1.0)*r12*sj3*x14911))+((r11*x14906))+(((-1.0)*x14907))+(((-1.0)*r11*x14908*x14910))+((r10*x14901*x14905))+((r10*x14904))+(((-1.0)*sj2*x14903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14914=((1.0)*gconst53);
CheckValue<IkReal> x14915 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14915.valid){
continue;
}
CheckValue<IkReal> x14916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14914))+(((-1.0)*gconst52*r10)))),-1);
if(!x14916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14915.value)+(((1.5707963267949)*(x14916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14917=IKsin(j4);
IkReal x14918=IKcos(j4);
IkReal x14919=(sj1*sj2);
IkReal x14920=((1.0)*cj1);
IkReal x14921=(cj3*gconst52);
IkReal x14922=(gconst53*sj3);
IkReal x14923=(cj3*gconst53);
IkReal x14924=(cj2*sj1);
IkReal x14925=(gconst52*sj3);
IkReal x14926=(cj2*x14920);
IkReal x14927=((1.0)*x14918);
IkReal x14928=((1.0)*x14917);
IkReal x14929=(gconst52*x14917);
IkReal x14930=(cj3*x14917);
evalcond[0]=(((r21*x14929))+(((-1.0)*r22*x14927))+(((-1.0)*gconst53*r20*x14928)));
evalcond[1]=((((-1.0)*r12*x14927))+((r11*x14929))+(((-1.0)*gconst53*r10*x14928)));
evalcond[2]=((-1.0)+((r01*x14929))+(((-1.0)*gconst53*r00*x14928))+(((-1.0)*r02*x14927)));
evalcond[3]=((((-1.0)*r00*x14923*x14927))+((r01*x14922))+((r00*x14925))+((r02*x14930))+((r01*x14918*x14921)));
evalcond[4]=((((-1.0)*r02*sj3*x14928))+((r01*x14923))+(((-1.0)*r01*x14925*x14927))+((r00*x14921))+((r00*x14918*x14922)));
evalcond[5]=(x14924+((cj1*sj2))+((r21*x14918*x14921))+((r21*x14922))+((r22*x14930))+(((-1.0)*r20*x14923*x14927))+((r20*x14925)));
evalcond[6]=(x14919+((r10*x14925))+(((-1.0)*x14926))+((r11*x14918*x14921))+((r11*x14922))+((r12*x14930))+(((-1.0)*r10*x14923*x14927)));
evalcond[7]=((((-1.0)*r21*x14925*x14927))+x14919+((r20*x14918*x14922))+(((-1.0)*r22*sj3*x14928))+((r21*x14923))+(((-1.0)*x14926))+((r20*x14921)));
evalcond[8]=((((-1.0)*x14924))+(((-1.0)*r12*sj3*x14928))+((r10*x14918*x14922))+((r10*x14921))+(((-1.0)*r11*x14925*x14927))+(((-1.0)*sj2*x14920))+((r11*x14923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14931 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14931.valid){
continue;
}
CheckValue<IkReal> x14932=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14931.value)+(((1.5707963267949)*(x14932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14933=IKsin(j4);
IkReal x14934=IKcos(j4);
IkReal x14935=(sj1*sj2);
IkReal x14936=((1.0)*cj1);
IkReal x14937=(cj3*gconst52);
IkReal x14938=(gconst53*sj3);
IkReal x14939=(cj3*gconst53);
IkReal x14940=(cj2*sj1);
IkReal x14941=(gconst52*sj3);
IkReal x14942=(cj2*x14936);
IkReal x14943=((1.0)*x14934);
IkReal x14944=((1.0)*x14933);
IkReal x14945=(gconst52*x14933);
IkReal x14946=(cj3*x14933);
evalcond[0]=((((-1.0)*gconst53*r20*x14944))+((r21*x14945))+(((-1.0)*r22*x14943)));
evalcond[1]=((((-1.0)*r12*x14943))+(((-1.0)*gconst53*r10*x14944))+((r11*x14945)));
evalcond[2]=((-1.0)+((r01*x14945))+(((-1.0)*r02*x14943))+(((-1.0)*gconst53*r00*x14944)));
evalcond[3]=((((-1.0)*r00*x14939*x14943))+((r00*x14941))+((r01*x14938))+((r02*x14946))+((r01*x14934*x14937)));
evalcond[4]=((((-1.0)*r01*x14941*x14943))+((r00*x14934*x14938))+(((-1.0)*r02*sj3*x14944))+((r01*x14939))+((r00*x14937)));
evalcond[5]=(x14940+((r22*x14946))+((cj1*sj2))+(((-1.0)*r20*x14939*x14943))+((r21*x14938))+((r21*x14934*x14937))+((r20*x14941)));
evalcond[6]=(((r12*x14946))+x14935+((r10*x14941))+((r11*x14934*x14937))+(((-1.0)*x14942))+(((-1.0)*r10*x14939*x14943))+((r11*x14938)));
evalcond[7]=((((-1.0)*r21*x14941*x14943))+x14935+((r20*x14934*x14938))+((r21*x14939))+(((-1.0)*x14942))+(((-1.0)*r22*sj3*x14944))+((r20*x14937)));
evalcond[8]=(((r10*x14934*x14938))+(((-1.0)*r12*sj3*x14944))+((r10*x14937))+(((-1.0)*x14940))+(((-1.0)*sj2*x14936))+(((-1.0)*r11*x14941*x14943))+((r11*x14939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14947=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14947);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14947);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14948=(r01*sj5);
IkReal x14949=((1.0)*cj5*r00);
j4eval[0]=(x14948+(((-1.0)*x14949)));
j4eval[1]=((((-1.0)*cj3*x14949))+((cj3*x14948)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14950=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14950);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14950);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14951=(cj5*r00);
IkReal x14952=(r01*sj5);
j4eval[0]=(x14952+(((-1.0)*x14951)));
j4eval[1]=(((sj3*x14951))+(((-1.0)*sj3*x14952)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14953=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14953);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14953);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14954=((1.0)*r00);
CheckValue<IkReal> x14955=IKPowWithIntegerCheck(cj3,-1);
if(!x14955.valid){
continue;
}
CheckValue<IkReal> x14956=IKPowWithIntegerCheck(r22,-1);
if(!x14956.valid){
continue;
}
CheckValue<IkReal> x14957=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14954))),-1);
if(!x14957.valid){
continue;
}
if( IKabs(((x14955.value)*(x14956.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14957.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14954)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14955.value)*(x14956.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14957.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14954))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14955.value)*(x14956.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14957.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14954))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14958=IKsin(j4);
IkReal x14959=IKcos(j4);
IkReal x14960=(sj1*sj2);
IkReal x14961=(cj5*sj3);
IkReal x14962=(r11*sj5);
IkReal x14963=(cj3*cj5);
IkReal x14964=((1.0)*cj1);
IkReal x14965=(cj3*sj5);
IkReal x14966=(sj3*sj5);
IkReal x14967=(cj2*sj1);
IkReal x14968=(r01*sj5);
IkReal x14969=((1.0)*sj3);
IkReal x14970=(cj2*x14964);
IkReal x14971=(r10*x14959);
IkReal x14972=(r22*x14958);
IkReal x14973=(cj3*x14959);
IkReal x14974=((1.0)*cj5*x14958);
evalcond[0]=((-1.0)*r22*x14959);
evalcond[1]=(x14967+((cj3*x14972))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14974))+((x14958*x14962)));
evalcond[3]=((-1.0)+((x14958*x14968))+(((-1.0)*r00*x14974)));
evalcond[4]=(x14960+(((-1.0)*x14970))+(((-1.0)*x14969*x14972)));
evalcond[5]=(((r01*x14961))+(((-1.0)*r00*x14959*x14963))+((r01*x14959*x14965))+((r00*x14966)));
evalcond[6]=(((r01*x14963))+(((-1.0)*r01*x14959*x14966))+((r00*x14959*x14961))+((r00*x14965)));
evalcond[7]=(x14960+(((-1.0)*x14963*x14971))+(((-1.0)*x14970))+((r11*x14961))+((x14962*x14973))+((r10*x14966)));
evalcond[8]=((((-1.0)*sj2*x14964))+(((-1.0)*x14967))+((r11*x14963))+(((-1.0)*x14959*x14962*x14969))+((r10*x14965))+((x14961*x14971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14975=((1.0)*cj3);
IkReal x14976=(cj5*r00);
IkReal x14977=(r01*sj5);
CheckValue<IkReal> x14978=IKPowWithIntegerCheck(((((-1.0)*x14976))+x14977),-1);
if(!x14978.valid){
continue;
}
CheckValue<IkReal> x14979=IKPowWithIntegerCheck(((((-1.0)*sj3*x14977))+((sj3*x14976))),-1);
if(!x14979.valid){
continue;
}
if( IKabs(x14978.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14979.value)*(((((-1.0)*cj5*r01*x14975))+(((-1.0)*r00*sj5*x14975)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14978.value)+IKsqr(((x14979.value)*(((((-1.0)*cj5*r01*x14975))+(((-1.0)*r00*sj5*x14975))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14978.value, ((x14979.value)*(((((-1.0)*cj5*r01*x14975))+(((-1.0)*r00*sj5*x14975))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14980=IKsin(j4);
IkReal x14981=IKcos(j4);
IkReal x14982=(sj1*sj2);
IkReal x14983=(cj5*sj3);
IkReal x14984=(r11*sj5);
IkReal x14985=(cj3*cj5);
IkReal x14986=((1.0)*cj1);
IkReal x14987=(cj3*sj5);
IkReal x14988=(sj3*sj5);
IkReal x14989=(cj2*sj1);
IkReal x14990=(r01*sj5);
IkReal x14991=((1.0)*sj3);
IkReal x14992=(cj2*x14986);
IkReal x14993=(r10*x14981);
IkReal x14994=(r22*x14980);
IkReal x14995=(cj3*x14981);
IkReal x14996=((1.0)*cj5*x14980);
evalcond[0]=((-1.0)*r22*x14981);
evalcond[1]=(x14989+((cj1*sj2))+((cj3*x14994)));
evalcond[2]=(((x14980*x14984))+(((-1.0)*r10*x14996)));
evalcond[3]=((-1.0)+((x14980*x14990))+(((-1.0)*r00*x14996)));
evalcond[4]=((((-1.0)*x14992))+(((-1.0)*x14991*x14994))+x14982);
evalcond[5]=(((r00*x14988))+((r01*x14983))+(((-1.0)*r00*x14981*x14985))+((r01*x14981*x14987)));
evalcond[6]=(((r00*x14987))+((r01*x14985))+(((-1.0)*r01*x14981*x14988))+((r00*x14981*x14983)));
evalcond[7]=(((x14984*x14995))+(((-1.0)*x14992))+x14982+((r10*x14988))+(((-1.0)*x14985*x14993))+((r11*x14983)));
evalcond[8]=((((-1.0)*sj2*x14986))+((r10*x14987))+((x14983*x14993))+(((-1.0)*x14981*x14984*x14991))+((r11*x14985))+(((-1.0)*x14989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14997=((1.0)*sj3);
IkReal x14998=(r01*sj5);
IkReal x14999=((1.0)*cj5*r00);
CheckValue<IkReal> x15000=IKPowWithIntegerCheck(((((-1.0)*x14999))+x14998),-1);
if(!x15000.valid){
continue;
}
CheckValue<IkReal> x15001=IKPowWithIntegerCheck(((((-1.0)*cj3*x14999))+((cj3*x14998))),-1);
if(!x15001.valid){
continue;
}
if( IKabs(x15000.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15001.value)*(((((-1.0)*cj5*r01*x14997))+(((-1.0)*r00*sj5*x14997)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15000.value)+IKsqr(((x15001.value)*(((((-1.0)*cj5*r01*x14997))+(((-1.0)*r00*sj5*x14997))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15000.value, ((x15001.value)*(((((-1.0)*cj5*r01*x14997))+(((-1.0)*r00*sj5*x14997))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15002=IKsin(j4);
IkReal x15003=IKcos(j4);
IkReal x15004=(sj1*sj2);
IkReal x15005=(cj5*sj3);
IkReal x15006=(r11*sj5);
IkReal x15007=(cj3*cj5);
IkReal x15008=((1.0)*cj1);
IkReal x15009=(cj3*sj5);
IkReal x15010=(sj3*sj5);
IkReal x15011=(cj2*sj1);
IkReal x15012=(r01*sj5);
IkReal x15013=((1.0)*sj3);
IkReal x15014=(cj2*x15008);
IkReal x15015=(r10*x15003);
IkReal x15016=(r22*x15002);
IkReal x15017=(cj3*x15003);
IkReal x15018=((1.0)*cj5*x15002);
evalcond[0]=((-1.0)*r22*x15003);
evalcond[1]=(((cj3*x15016))+((cj1*sj2))+x15011);
evalcond[2]=((((-1.0)*r10*x15018))+((x15002*x15006)));
evalcond[3]=((-1.0)+((x15002*x15012))+(((-1.0)*r00*x15018)));
evalcond[4]=((((-1.0)*x15014))+(((-1.0)*x15013*x15016))+x15004);
evalcond[5]=(((r01*x15005))+(((-1.0)*r00*x15003*x15007))+((r00*x15010))+((r01*x15003*x15009)));
evalcond[6]=(((r00*x15003*x15005))+((r01*x15007))+((r00*x15009))+(((-1.0)*r01*x15003*x15010)));
evalcond[7]=((((-1.0)*x15014))+((r10*x15010))+x15004+((r11*x15005))+((x15006*x15017))+(((-1.0)*x15007*x15015)));
evalcond[8]=((((-1.0)*x15011))+(((-1.0)*x15003*x15006*x15013))+(((-1.0)*sj2*x15008))+((x15005*x15015))+((r10*x15009))+((r11*x15007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15019=cj5*cj5;
IkReal x15020=(cj3*r20);
IkReal x15021=(r21*sj3);
IkReal x15022=((1.0)*cj3);
IkReal x15023=(r01*r21);
IkReal x15024=(r01*sj3);
IkReal x15025=(r00*sj5);
IkReal x15026=(cj5*r01*sj5);
IkReal x15027=((1.0)*x15019);
CheckValue<IkReal> x15028 = IKatan2WithCheck(IkReal((((r22*sj3*x15025))+((cj5*r22*x15024)))),IkReal((((r00*x15021))+(((-1.0)*cj5*r20*sj3*x15025))+((x15021*x15026))+(((-1.0)*r00*x15021*x15027))+(((-1.0)*r20*x15024*x15027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15028.valid){
continue;
}
CheckValue<IkReal> x15029=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x15025))+(((-1.0)*r02*r22*x15022))+(((-1.0)*r00*x15020*x15027))+(((-1.0)*x15022*x15023))+((x15020*x15026))+((cj3*x15019*x15023)))),-1);
if(!x15029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15028.value)+(((1.5707963267949)*(x15029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15030=IKsin(j4);
IkReal x15031=IKcos(j4);
IkReal x15032=(sj1*sj2);
IkReal x15033=(r11*sj5);
IkReal x15034=(cj5*r10);
IkReal x15035=(cj5*r01);
IkReal x15036=(cj5*r00);
IkReal x15037=((1.0)*cj1);
IkReal x15038=(cj3*sj5);
IkReal x15039=(r21*sj5);
IkReal x15040=(cj5*sj3);
IkReal x15041=(sj3*sj5);
IkReal x15042=(cj2*sj1);
IkReal x15043=(r01*sj5);
IkReal x15044=(cj3*cj5);
IkReal x15045=(cj5*r20);
IkReal x15046=(cj2*x15037);
IkReal x15047=((1.0)*x15031);
IkReal x15048=((1.0)*x15030);
IkReal x15049=(cj3*x15031);
IkReal x15050=(sj3*x15031);
IkReal x15051=(cj3*x15030);
evalcond[0]=((((-1.0)*x15045*x15048))+(((-1.0)*r22*x15047))+((x15030*x15039)));
evalcond[1]=((((-1.0)*x15034*x15048))+((x15030*x15033))+(((-1.0)*r12*x15047)));
evalcond[2]=((-1.0)+(((-1.0)*x15036*x15048))+(((-1.0)*r02*x15047))+((x15030*x15043)));
evalcond[3]=((((-1.0)*cj3*x15036*x15047))+((sj3*x15035))+((r00*x15041))+((r02*x15051))+((r01*x15031*x15038)));
evalcond[4]=(((r00*x15038))+(((-1.0)*r01*x15041*x15047))+((x15036*x15050))+((cj3*x15035))+(((-1.0)*r02*sj3*x15048)));
evalcond[5]=(((cj1*sj2))+x15042+((r20*x15041))+((r22*x15051))+((r21*x15031*x15038))+((r21*x15040))+(((-1.0)*r20*x15044*x15047)));
evalcond[6]=((((-1.0)*x15046))+((x15033*x15049))+((r11*x15040))+x15032+((r10*x15041))+((r12*x15051))+(((-1.0)*cj3*x15034*x15047)));
evalcond[7]=((((-1.0)*x15046))+(((-1.0)*sj3*x15039*x15047))+((r20*x15031*x15040))+(((-1.0)*r22*sj3*x15048))+x15032+((r20*x15038))+((r21*x15044)));
evalcond[8]=(((x15034*x15050))+(((-1.0)*sj2*x15037))+(((-1.0)*sj3*x15033*x15047))+((r11*x15044))+(((-1.0)*r12*sj3*x15048))+((r10*x15038))+(((-1.0)*x15042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15052=((1.0)*cj5);
CheckValue<IkReal> x15053 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15053.valid){
continue;
}
CheckValue<IkReal> x15054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15052)))),-1);
if(!x15054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15053.value)+(((1.5707963267949)*(x15054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15055=IKsin(j4);
IkReal x15056=IKcos(j4);
IkReal x15057=(sj1*sj2);
IkReal x15058=(r11*sj5);
IkReal x15059=(cj5*r10);
IkReal x15060=(cj5*r01);
IkReal x15061=(cj5*r00);
IkReal x15062=((1.0)*cj1);
IkReal x15063=(cj3*sj5);
IkReal x15064=(r21*sj5);
IkReal x15065=(cj5*sj3);
IkReal x15066=(sj3*sj5);
IkReal x15067=(cj2*sj1);
IkReal x15068=(r01*sj5);
IkReal x15069=(cj3*cj5);
IkReal x15070=(cj5*r20);
IkReal x15071=(cj2*x15062);
IkReal x15072=((1.0)*x15056);
IkReal x15073=((1.0)*x15055);
IkReal x15074=(cj3*x15056);
IkReal x15075=(sj3*x15056);
IkReal x15076=(cj3*x15055);
evalcond[0]=(((x15055*x15064))+(((-1.0)*r22*x15072))+(((-1.0)*x15070*x15073)));
evalcond[1]=((((-1.0)*r12*x15072))+((x15055*x15058))+(((-1.0)*x15059*x15073)));
evalcond[2]=((-1.0)+(((-1.0)*x15061*x15073))+((x15055*x15068))+(((-1.0)*r02*x15072)));
evalcond[3]=(((r02*x15076))+((sj3*x15060))+((r00*x15066))+((r01*x15056*x15063))+(((-1.0)*cj3*x15061*x15072)));
evalcond[4]=(((x15061*x15075))+((r00*x15063))+((cj3*x15060))+(((-1.0)*r01*x15066*x15072))+(((-1.0)*r02*sj3*x15073)));
evalcond[5]=(((r21*x15065))+((r20*x15066))+((r22*x15076))+((cj1*sj2))+x15067+(((-1.0)*r20*x15069*x15072))+((r21*x15056*x15063)));
evalcond[6]=((((-1.0)*cj3*x15059*x15072))+(((-1.0)*x15071))+((r12*x15076))+((x15058*x15074))+x15057+((r11*x15065))+((r10*x15066)));
evalcond[7]=((((-1.0)*x15071))+((r21*x15069))+(((-1.0)*r22*sj3*x15073))+((r20*x15063))+x15057+(((-1.0)*sj3*x15064*x15072))+((r20*x15056*x15065)));
evalcond[8]=((((-1.0)*sj2*x15062))+(((-1.0)*r12*sj3*x15073))+((x15059*x15075))+(((-1.0)*x15067))+((r11*x15069))+(((-1.0)*sj3*x15058*x15072))+((r10*x15063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15077=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15077.valid){
continue;
}
CheckValue<IkReal> x15078 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15077.value)))+(x15078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15079=IKsin(j4);
IkReal x15080=IKcos(j4);
IkReal x15081=(sj1*sj2);
IkReal x15082=(r11*sj5);
IkReal x15083=(cj5*r10);
IkReal x15084=(cj5*r01);
IkReal x15085=(cj5*r00);
IkReal x15086=((1.0)*cj1);
IkReal x15087=(cj3*sj5);
IkReal x15088=(r21*sj5);
IkReal x15089=(cj5*sj3);
IkReal x15090=(sj3*sj5);
IkReal x15091=(cj2*sj1);
IkReal x15092=(r01*sj5);
IkReal x15093=(cj3*cj5);
IkReal x15094=(cj5*r20);
IkReal x15095=(cj2*x15086);
IkReal x15096=((1.0)*x15080);
IkReal x15097=((1.0)*x15079);
IkReal x15098=(cj3*x15080);
IkReal x15099=(sj3*x15080);
IkReal x15100=(cj3*x15079);
evalcond[0]=((((-1.0)*r22*x15096))+((x15079*x15088))+(((-1.0)*x15094*x15097)));
evalcond[1]=(((x15079*x15082))+(((-1.0)*r12*x15096))+(((-1.0)*x15083*x15097)));
evalcond[2]=((-1.0)+((x15079*x15092))+(((-1.0)*r02*x15096))+(((-1.0)*x15085*x15097)));
evalcond[3]=(((r01*x15080*x15087))+((r00*x15090))+((sj3*x15084))+((r02*x15100))+(((-1.0)*cj3*x15085*x15096)));
evalcond[4]=((((-1.0)*r02*sj3*x15097))+((x15085*x15099))+((r00*x15087))+(((-1.0)*r01*x15090*x15096))+((cj3*x15084)));
evalcond[5]=(((r22*x15100))+((r20*x15090))+((cj1*sj2))+x15091+((r21*x15080*x15087))+((r21*x15089))+(((-1.0)*r20*x15093*x15096)));
evalcond[6]=(((r12*x15100))+x15081+((r10*x15090))+((r11*x15089))+(((-1.0)*x15095))+(((-1.0)*cj3*x15083*x15096))+((x15082*x15098)));
evalcond[7]=((((-1.0)*r22*sj3*x15097))+((r21*x15093))+x15081+((r20*x15080*x15089))+((r20*x15087))+(((-1.0)*sj3*x15088*x15096))+(((-1.0)*x15095)));
evalcond[8]=((((-1.0)*r12*sj3*x15097))+(((-1.0)*sj2*x15086))+(((-1.0)*x15091))+((r11*x15093))+((x15083*x15099))+(((-1.0)*sj3*x15082*x15096))+((r10*x15087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15101=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15101;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15102=((1.0)*cj5);
IkReal x15103=((((-1.0)*r21*x15102))+(((-1.0)*r20*sj5)));
j4eval[0]=x15103;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15102))+((r11*sj5))))));
j4eval[2]=IKsign(x15103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15104=cj5*cj5;
IkReal x15105=(cj3*r01);
IkReal x15106=(cj5*sj5);
IkReal x15107=((1.0)*cj3);
IkReal x15108=(((r20*x15105*x15106))+(((-1.0)*r00*r20*x15104*x15107))+(((-1.0)*r02*r22*x15107))+(((-1.0)*r21*x15105))+((r21*x15104*x15105))+((cj3*r00*r21*x15106)));
j4eval[0]=x15108;
j4eval[1]=IKsign(x15108);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15109=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15109;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15110=((1.0)*cj5);
IkReal x15111=((((-1.0)*r21*x15110))+(((-1.0)*r20*sj5)));
j4eval[0]=x15111;
j4eval[1]=((IKabs(((((-1.0)*r10*x15110))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15112=cj5*cj5;
IkReal x15113=r01*r01;
IkReal x15114=(cj5*r00);
IkReal x15115=(r01*sj5);
IkReal x15116=((((-1.0)*x15112*x15113))+x15113+(r02*r02)+(((-2.0)*x15114*x15115))+((x15112*(r00*r00))));
j4eval[0]=x15116;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15115))+x15114))));
j4eval[2]=IKsign(x15116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15117=cj5*cj5;
IkReal x15118=r01*r01;
IkReal x15119=(r01*sj5);
IkReal x15120=(cj5*r00);
CheckValue<IkReal> x15121=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15117*x15118))+((x15117*(r00*r00)))+x15118+(((-2.0)*x15119*x15120))+(r02*r02))),-1);
if(!x15121.valid){
continue;
}
CheckValue<IkReal> x15122 = IKatan2WithCheck(IkReal(((((-1.0)*x15119))+x15120)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15121.value)))+(x15122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15123=IKsin(j4);
IkReal x15124=IKcos(j4);
IkReal x15125=(cj5*r10);
IkReal x15126=(r01*sj5);
IkReal x15127=(cj5*r00);
IkReal x15128=(cj5*r20);
IkReal x15129=((1.0)*x15124);
IkReal x15130=((1.0)*x15123);
IkReal x15131=(sj5*x15123);
evalcond[0]=(((r21*x15131))+(((-1.0)*x15128*x15130))+(((-1.0)*r22*x15129)));
evalcond[1]=((((-1.0)*r12*x15129))+(((-1.0)*x15125*x15130))+((r11*x15131)));
evalcond[2]=((((-1.0)*r02*x15130))+((x15124*x15127))+(((-1.0)*x15126*x15129)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15129))+(((-1.0)*x15127*x15130))+((x15123*x15126)));
evalcond[4]=(((cj2*sj1))+((x15124*x15125))+((cj1*sj2))+(((-1.0)*r12*x15130))+(((-1.0)*r11*sj5*x15129)));
evalcond[5]=((((-1.0)*r21*sj5*x15129))+((x15124*x15128))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15132=((1.0)*cj5);
CheckValue<IkReal> x15133 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15132))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15133.valid){
continue;
}
CheckValue<IkReal> x15134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15132))+(((-1.0)*r20*sj5)))),-1);
if(!x15134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15133.value)+(((1.5707963267949)*(x15134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15135=IKsin(j4);
IkReal x15136=IKcos(j4);
IkReal x15137=(cj5*r10);
IkReal x15138=(r01*sj5);
IkReal x15139=(cj5*r00);
IkReal x15140=(cj5*r20);
IkReal x15141=((1.0)*x15136);
IkReal x15142=((1.0)*x15135);
IkReal x15143=(sj5*x15135);
evalcond[0]=((((-1.0)*x15140*x15142))+((r21*x15143))+(((-1.0)*r22*x15141)));
evalcond[1]=(((r11*x15143))+(((-1.0)*x15137*x15142))+(((-1.0)*r12*x15141)));
evalcond[2]=((((-1.0)*r02*x15142))+((x15136*x15139))+(((-1.0)*x15138*x15141)));
evalcond[3]=((1.0)+(((-1.0)*x15139*x15142))+(((-1.0)*r02*x15141))+((x15135*x15138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15136*x15137))+(((-1.0)*r11*sj5*x15141))+(((-1.0)*r12*x15142)));
evalcond[5]=(((x15136*x15140))+(((-1.0)*r21*sj5*x15141))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15144 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15144.valid){
continue;
}
CheckValue<IkReal> x15145=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15144.value)+(((1.5707963267949)*(x15145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15146=IKsin(j4);
IkReal x15147=IKcos(j4);
IkReal x15148=(cj5*r10);
IkReal x15149=(r01*sj5);
IkReal x15150=(cj5*r00);
IkReal x15151=(cj5*r20);
IkReal x15152=((1.0)*x15147);
IkReal x15153=((1.0)*x15146);
IkReal x15154=(sj5*x15146);
evalcond[0]=(((r21*x15154))+(((-1.0)*r22*x15152))+(((-1.0)*x15151*x15153)));
evalcond[1]=((((-1.0)*x15148*x15153))+(((-1.0)*r12*x15152))+((r11*x15154)));
evalcond[2]=((((-1.0)*r02*x15153))+(((-1.0)*x15149*x15152))+((x15147*x15150)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15152))+((x15146*x15149))+(((-1.0)*x15150*x15153)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15147*x15148))+(((-1.0)*r12*x15153))+(((-1.0)*r11*sj5*x15152)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15153))+((x15147*x15151))+(((-1.0)*r21*sj5*x15152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15155=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15155;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15156=((1.0)*cj5);
IkReal x15157=((((-1.0)*r21*x15156))+(((-1.0)*r20*sj5)));
j4eval[0]=x15157;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15156))+((r11*sj5))))));
j4eval[2]=IKsign(x15157);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15158=cj5*cj5;
IkReal x15159=r01*r01;
IkReal x15160=(r01*sj5);
IkReal x15161=(cj5*r00);
IkReal x15162=((((-1.0)*(r02*r02)))+(((-1.0)*x15158*(r00*r00)))+(((2.0)*x15160*x15161))+((x15158*x15159))+(((-1.0)*x15159)));
j4eval[0]=x15162;
j4eval[1]=IKsign(x15162);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15161))+x15160))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15163=cj5*cj5;
IkReal x15164=r01*r01;
IkReal x15165=(r01*sj5);
IkReal x15166=(cj5*r00);
CheckValue<IkReal> x15167=IKPowWithIntegerCheck(IKsign((((x15163*x15164))+(((-1.0)*(r02*r02)))+(((-1.0)*x15164))+(((-1.0)*x15163*(r00*r00)))+(((2.0)*x15165*x15166)))),-1);
if(!x15167.valid){
continue;
}
CheckValue<IkReal> x15168 = IKatan2WithCheck(IkReal(((((-1.0)*x15166))+x15165)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15167.value)))+(x15168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15169=IKcos(j4);
IkReal x15170=IKsin(j4);
IkReal x15171=(cj5*r00);
IkReal x15172=(cj5*r10);
IkReal x15173=(r21*sj5);
IkReal x15174=(cj5*r20);
IkReal x15175=((1.0)*x15169);
IkReal x15176=((1.0)*x15170);
IkReal x15177=(sj5*x15170);
IkReal x15178=(sj5*x15169);
evalcond[0]=(((r02*x15170))+(((-1.0)*x15171*x15175))+((r01*x15178)));
evalcond[1]=(((x15170*x15173))+(((-1.0)*x15174*x15176))+(((-1.0)*r22*x15175)));
evalcond[2]=(((r11*x15177))+(((-1.0)*r12*x15175))+(((-1.0)*x15172*x15176)));
evalcond[3]=((1.0)+(((-1.0)*x15171*x15176))+(((-1.0)*r02*x15175))+((r01*x15177)));
evalcond[4]=(((cj2*sj1))+((r11*x15178))+((cj1*sj2))+((r12*x15170))+(((-1.0)*x15172*x15175)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15169*x15173))+(((-1.0)*x15174*x15175))+((r22*x15170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15179=((1.0)*cj5);
CheckValue<IkReal> x15180 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15180.valid){
continue;
}
CheckValue<IkReal> x15181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15179))+(((-1.0)*r20*sj5)))),-1);
if(!x15181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15180.value)+(((1.5707963267949)*(x15181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15182=IKcos(j4);
IkReal x15183=IKsin(j4);
IkReal x15184=(cj5*r00);
IkReal x15185=(cj5*r10);
IkReal x15186=(r21*sj5);
IkReal x15187=(cj5*r20);
IkReal x15188=((1.0)*x15182);
IkReal x15189=((1.0)*x15183);
IkReal x15190=(sj5*x15183);
IkReal x15191=(sj5*x15182);
evalcond[0]=((((-1.0)*x15184*x15188))+((r02*x15183))+((r01*x15191)));
evalcond[1]=(((x15183*x15186))+(((-1.0)*x15187*x15189))+(((-1.0)*r22*x15188)));
evalcond[2]=((((-1.0)*x15185*x15189))+((r11*x15190))+(((-1.0)*r12*x15188)));
evalcond[3]=((1.0)+(((-1.0)*x15184*x15189))+(((-1.0)*r02*x15188))+((r01*x15190)));
evalcond[4]=((((-1.0)*x15185*x15188))+((cj2*sj1))+((r11*x15191))+((cj1*sj2))+((r12*x15183)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15182*x15186))+(((-1.0)*x15187*x15188))+((r22*x15183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15192 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15192.valid){
continue;
}
CheckValue<IkReal> x15193=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15192.value)+(((1.5707963267949)*(x15193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15194=IKcos(j4);
IkReal x15195=IKsin(j4);
IkReal x15196=(cj5*r00);
IkReal x15197=(cj5*r10);
IkReal x15198=(r21*sj5);
IkReal x15199=(cj5*r20);
IkReal x15200=((1.0)*x15194);
IkReal x15201=((1.0)*x15195);
IkReal x15202=(sj5*x15195);
IkReal x15203=(sj5*x15194);
evalcond[0]=((((-1.0)*x15196*x15200))+((r01*x15203))+((r02*x15195)));
evalcond[1]=((((-1.0)*x15199*x15201))+(((-1.0)*r22*x15200))+((x15195*x15198)));
evalcond[2]=(((r11*x15202))+(((-1.0)*x15197*x15201))+(((-1.0)*r12*x15200)));
evalcond[3]=((1.0)+(((-1.0)*x15196*x15201))+((r01*x15202))+(((-1.0)*r02*x15200)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15203))+(((-1.0)*x15197*x15200))+((r12*x15195)));
evalcond[5]=((((-1.0)*x15199*x15200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15195))+((x15194*x15198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15205 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15205)==0){
continue;
}
IkReal x15204=pow(x15205,-0.5);
CheckValue<IkReal> x15206 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15206.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15206.value));
IkReal gconst61=((-1.0)*r11*x15204);
IkReal gconst62=(r10*x15204);
CheckValue<IkReal> x15207 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15207.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15207.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15210 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15210.valid){
continue;
}
IkReal x15208=((-1.0)*(x15210.value));
IkReal x15209=x15204;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15208;
IkReal gconst60=x15208;
IkReal gconst61=((-1.0)*r11*x15209);
IkReal gconst62=(r10*x15209);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15213 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15213.valid){
continue;
}
IkReal x15211=((-1.0)*(x15213.value));
IkReal x15212=x15204;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15211;
IkReal gconst60=x15211;
IkReal gconst61=((-1.0)*r11*x15212);
IkReal gconst62=(r10*x15212);
CheckValue<IkReal> x15221=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15221.valid){
continue;
}
IkReal x15214=x15221.value;
IkReal x15215=(sj3*x15214);
IkReal x15216=(r20*x15215);
IkReal x15217=(r00*x15215);
IkReal x15218=(r01*x15215);
IkReal x15219=(r21*x15215);
IkReal x15220=(r10*r11*x15215);
j4eval[0]=IKsign((((r21*x15218*(r11*r11)))+((r00*x15216*(r10*r10)))+((r10*r11*r21*x15217))+((r01*r10*r11*x15216))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15222=gconst61*gconst61;
IkReal x15223=gconst62*gconst62;
IkReal x15224=(cj3*r01);
IkReal x15225=(r22*sj3);
IkReal x15226=(gconst61*r00);
IkReal x15227=((1.0)*cj3);
IkReal x15228=(gconst62*r01);
IkReal x15229=((1.0)*sj3);
IkReal x15230=(gconst61*gconst62*r20);
IkReal x15231=(r21*x15222);
IkReal x15232=(r20*x15223);
CheckValue<IkReal> x15233 = IKatan2WithCheck(IkReal((((x15225*x15226))+((x15225*x15228)))),IkReal((((r00*sj3*x15231))+((gconst61*r21*sj3*x15228))+(((-1.0)*gconst62*r20*x15226*x15229))+(((-1.0)*r01*x15229*x15232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15233.valid){
continue;
}
CheckValue<IkReal> x15234=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15224*x15231))+((cj3*gconst62*r21*x15226))+((x15224*x15230))+(((-1.0)*r00*x15227*x15232))+(((-1.0)*r02*r22*x15227)))),-1);
if(!x15234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15233.value)+(((1.5707963267949)*(x15234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15235=IKsin(j4);
IkReal x15236=IKcos(j4);
IkReal x15237=(cj2*sj1);
IkReal x15238=(cj1*sj2);
IkReal x15239=(gconst61*sj3);
IkReal x15240=(cj3*gconst61);
IkReal x15241=(cj3*gconst62);
IkReal x15242=(sj1*sj2);
IkReal x15243=(gconst62*sj3);
IkReal x15244=(cj1*cj2);
IkReal x15245=((1.0)*x15236);
IkReal x15246=((1.0)*x15235);
IkReal x15247=(gconst61*x15235);
IkReal x15248=(cj3*x15235);
IkReal x15249=(x15238+x15237);
evalcond[0]=((((-1.0)*gconst62*r20*x15246))+((r21*x15247))+(((-1.0)*r22*x15245)));
evalcond[1]=((((-1.0)*gconst62*r10*x15246))+(((-1.0)*r12*x15245))+((r11*x15247)));
evalcond[2]=((1.0)+((r01*x15247))+(((-1.0)*r02*x15245))+(((-1.0)*gconst62*r00*x15246)));
evalcond[3]=(((r00*x15239))+((r01*x15243))+(((-1.0)*r00*x15241*x15245))+((r01*x15236*x15240))+((r02*x15248)));
evalcond[4]=((((-1.0)*r01*x15239*x15245))+((r01*x15241))+((r00*x15240))+(((-1.0)*r02*sj3*x15246))+((r00*x15236*x15243)));
evalcond[5]=(x15249+((r21*x15243))+(((-1.0)*r20*x15241*x15245))+((r22*x15248))+((r21*x15236*x15240))+((r20*x15239)));
evalcond[6]=((((-1.0)*x15242))+(((-1.0)*r10*x15241*x15245))+x15244+((r10*x15239))+((r12*x15248))+((r11*x15236*x15240))+((r11*x15243)));
evalcond[7]=((((-1.0)*r11*x15239*x15245))+(((-1.0)*r12*sj3*x15246))+x15249+((r10*x15240))+((r10*x15236*x15243))+((r11*x15241)));
evalcond[8]=(((r20*x15236*x15243))+(((-1.0)*x15244))+x15242+((r21*x15241))+(((-1.0)*r22*sj3*x15246))+(((-1.0)*r21*x15239*x15245))+((r20*x15240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15250=gconst61*gconst61;
IkReal x15251=gconst62*gconst62;
IkReal x15252=(cj3*r22);
IkReal x15253=(gconst62*r01);
IkReal x15254=(gconst61*r00);
IkReal x15255=((1.0)*r20);
IkReal x15256=(cj3*r21);
IkReal x15257=(r21*sj3);
CheckValue<IkReal> x15258 = IKatan2WithCheck(IkReal((((x15252*x15254))+((x15252*x15253)))),IkReal(((((-1.0)*cj3*gconst62*x15254*x15255))+((gconst61*x15253*x15256))+((r00*x15250*x15256))+(((-1.0)*cj3*r01*x15251*x15255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15258.valid){
continue;
}
CheckValue<IkReal> x15259=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15251))+(((-1.0)*gconst62*x15254*x15257))+(((-1.0)*gconst61*sj3*x15253*x15255))+((r01*x15250*x15257))+((r02*r22*sj3)))),-1);
if(!x15259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15258.value)+(((1.5707963267949)*(x15259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15260=IKsin(j4);
IkReal x15261=IKcos(j4);
IkReal x15262=(cj2*sj1);
IkReal x15263=(cj1*sj2);
IkReal x15264=(gconst61*sj3);
IkReal x15265=(cj3*gconst61);
IkReal x15266=(cj3*gconst62);
IkReal x15267=(sj1*sj2);
IkReal x15268=(gconst62*sj3);
IkReal x15269=(cj1*cj2);
IkReal x15270=((1.0)*x15261);
IkReal x15271=((1.0)*x15260);
IkReal x15272=(gconst61*x15260);
IkReal x15273=(cj3*x15260);
IkReal x15274=(x15263+x15262);
evalcond[0]=((((-1.0)*gconst62*r20*x15271))+(((-1.0)*r22*x15270))+((r21*x15272)));
evalcond[1]=(((r11*x15272))+(((-1.0)*r12*x15270))+(((-1.0)*gconst62*r10*x15271)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15271))+(((-1.0)*r02*x15270))+((r01*x15272)));
evalcond[3]=((((-1.0)*r00*x15266*x15270))+((r02*x15273))+((r01*x15268))+((r00*x15264))+((r01*x15261*x15265)));
evalcond[4]=(((r00*x15261*x15268))+(((-1.0)*r02*sj3*x15271))+(((-1.0)*r01*x15264*x15270))+((r01*x15266))+((r00*x15265)));
evalcond[5]=(((r20*x15264))+(((-1.0)*r20*x15266*x15270))+((r22*x15273))+x15274+((r21*x15261*x15265))+((r21*x15268)));
evalcond[6]=(((r12*x15273))+x15269+(((-1.0)*r10*x15266*x15270))+((r10*x15264))+(((-1.0)*x15267))+((r11*x15261*x15265))+((r11*x15268)));
evalcond[7]=((((-1.0)*r11*x15264*x15270))+x15274+(((-1.0)*r12*sj3*x15271))+((r10*x15265))+((r11*x15266))+((r10*x15261*x15268)));
evalcond[8]=(((r20*x15265))+x15267+(((-1.0)*r22*sj3*x15271))+(((-1.0)*r21*x15264*x15270))+((r20*x15261*x15268))+(((-1.0)*x15269))+((r21*x15266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15275=((1.0)*gconst62);
CheckValue<IkReal> x15276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15275))+(((-1.0)*gconst61*r20)))),-1);
if(!x15276.valid){
continue;
}
CheckValue<IkReal> x15277 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15275))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15276.value)))+(x15277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15278=IKsin(j4);
IkReal x15279=IKcos(j4);
IkReal x15280=(cj2*sj1);
IkReal x15281=(cj1*sj2);
IkReal x15282=(gconst61*sj3);
IkReal x15283=(cj3*gconst61);
IkReal x15284=(cj3*gconst62);
IkReal x15285=(sj1*sj2);
IkReal x15286=(gconst62*sj3);
IkReal x15287=(cj1*cj2);
IkReal x15288=((1.0)*x15279);
IkReal x15289=((1.0)*x15278);
IkReal x15290=(gconst61*x15278);
IkReal x15291=(cj3*x15278);
IkReal x15292=(x15281+x15280);
evalcond[0]=((((-1.0)*gconst62*r20*x15289))+((r21*x15290))+(((-1.0)*r22*x15288)));
evalcond[1]=((((-1.0)*r12*x15288))+((r11*x15290))+(((-1.0)*gconst62*r10*x15289)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15289))+(((-1.0)*r02*x15288))+((r01*x15290)));
evalcond[3]=(((r01*x15286))+((r00*x15282))+((r01*x15279*x15283))+(((-1.0)*r00*x15284*x15288))+((r02*x15291)));
evalcond[4]=((((-1.0)*r01*x15282*x15288))+((r01*x15284))+((r00*x15283))+((r00*x15279*x15286))+(((-1.0)*r02*sj3*x15289)));
evalcond[5]=((((-1.0)*r20*x15284*x15288))+x15292+((r22*x15291))+((r20*x15282))+((r21*x15279*x15283))+((r21*x15286)));
evalcond[6]=(((r11*x15279*x15283))+x15287+((r12*x15291))+((r10*x15282))+(((-1.0)*r10*x15284*x15288))+((r11*x15286))+(((-1.0)*x15285)));
evalcond[7]=((((-1.0)*r12*sj3*x15289))+x15292+((r10*x15283))+((r10*x15279*x15286))+(((-1.0)*r11*x15282*x15288))+((r11*x15284)));
evalcond[8]=((((-1.0)*r22*sj3*x15289))+x15285+(((-1.0)*r21*x15282*x15288))+((r20*x15279*x15286))+((r20*x15283))+(((-1.0)*x15287))+((r21*x15284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15294 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15294)==0){
continue;
}
IkReal x15293=pow(x15294,-0.5);
CheckValue<IkReal> x15295 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15295.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15295.value))));
IkReal gconst64=((1.0)*r11*x15293);
IkReal gconst65=((-1.0)*r10*x15293);
CheckValue<IkReal> x15296 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15296.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15296.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15299 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15299.valid){
continue;
}
IkReal x15297=((1.0)*(x15299.value));
IkReal x15298=x15293;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15297)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15297)));
IkReal gconst64=((1.0)*r11*x15298);
IkReal gconst65=((-1.0)*r10*x15298);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15300=gconst64*gconst64;
IkReal x15301=gconst65*gconst65;
IkReal x15302=(gconst65*r01);
IkReal x15303=(cj3*r22);
IkReal x15304=(gconst64*r00);
IkReal x15305=(cj3*r21);
IkReal x15306=((1.0)*gconst64*sj3);
IkReal x15307=((1.0)*cj3*r20);
CheckValue<IkReal> x15308=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15301))+(((-1.0)*r20*x15302*x15306))+((r01*r21*sj3*x15300))+(((-1.0)*gconst65*r21*sj3*x15304))+((r02*r22*sj3)))),-1);
if(!x15308.valid){
continue;
}
CheckValue<IkReal> x15309 = IKatan2WithCheck(IkReal((((x15302*x15303))+((x15303*x15304)))),IkReal(((((-1.0)*r01*x15301*x15307))+((r00*x15300*x15305))+(((-1.0)*gconst65*x15304*x15307))+((gconst64*x15302*x15305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15308.value)))+(x15309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15310=IKsin(j4);
IkReal x15311=IKcos(j4);
IkReal x15312=(cj2*sj1);
IkReal x15313=(cj1*sj2);
IkReal x15314=(cj3*gconst64);
IkReal x15315=(gconst65*r21);
IkReal x15316=(sj1*sj2);
IkReal x15317=(gconst65*sj3);
IkReal x15318=(gconst64*sj3);
IkReal x15319=(cj3*gconst65);
IkReal x15320=(cj1*cj2);
IkReal x15321=((1.0)*x15311);
IkReal x15322=((1.0)*x15310);
IkReal x15323=(cj3*x15310);
IkReal x15324=(gconst64*x15310);
IkReal x15325=(x15313+x15312);
evalcond[0]=((((-1.0)*gconst65*r20*x15322))+((r21*x15324))+(((-1.0)*r22*x15321)));
evalcond[1]=(((r11*x15324))+(((-1.0)*gconst65*r10*x15322))+(((-1.0)*r12*x15321)));
evalcond[2]=((1.0)+((r01*x15324))+(((-1.0)*gconst65*r00*x15322))+(((-1.0)*r02*x15321)));
evalcond[3]=(((r01*x15317))+((r00*x15318))+((r01*x15311*x15314))+((r02*x15323))+(((-1.0)*r00*x15319*x15321)));
evalcond[4]=(((r01*x15319))+((r00*x15314))+(((-1.0)*r01*x15318*x15321))+(((-1.0)*r02*sj3*x15322))+((r00*x15311*x15317)));
evalcond[5]=(((sj3*x15315))+(((-1.0)*r20*x15319*x15321))+((r22*x15323))+x15325+((r21*x15311*x15314))+((r20*x15318)));
evalcond[6]=(((r11*x15317))+(((-1.0)*x15316))+((r12*x15323))+x15320+(((-1.0)*r10*x15319*x15321))+((r10*x15318))+((r11*x15311*x15314)));
evalcond[7]=(((r10*x15311*x15317))+((r11*x15319))+x15325+(((-1.0)*r12*sj3*x15322))+((r10*x15314))+(((-1.0)*r11*x15318*x15321)));
evalcond[8]=((((-1.0)*x15320))+((r20*x15311*x15317))+x15316+(((-1.0)*r21*x15318*x15321))+(((-1.0)*r22*sj3*x15322))+((r20*x15314))+((cj3*x15315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15326=((1.0)*gconst65);
CheckValue<IkReal> x15327 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15327.valid){
continue;
}
CheckValue<IkReal> x15328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15326))+(((-1.0)*gconst64*r20)))),-1);
if(!x15328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15327.value)+(((1.5707963267949)*(x15328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15329=IKsin(j4);
IkReal x15330=IKcos(j4);
IkReal x15331=(cj2*sj1);
IkReal x15332=(cj1*sj2);
IkReal x15333=(cj3*gconst64);
IkReal x15334=(gconst65*r21);
IkReal x15335=(sj1*sj2);
IkReal x15336=(gconst65*sj3);
IkReal x15337=(gconst64*sj3);
IkReal x15338=(cj3*gconst65);
IkReal x15339=(cj1*cj2);
IkReal x15340=((1.0)*x15330);
IkReal x15341=((1.0)*x15329);
IkReal x15342=(cj3*x15329);
IkReal x15343=(gconst64*x15329);
IkReal x15344=(x15332+x15331);
evalcond[0]=(((r21*x15343))+(((-1.0)*r22*x15340))+(((-1.0)*gconst65*r20*x15341)));
evalcond[1]=((((-1.0)*r12*x15340))+((r11*x15343))+(((-1.0)*gconst65*r10*x15341)));
evalcond[2]=((1.0)+((r01*x15343))+(((-1.0)*gconst65*r00*x15341))+(((-1.0)*r02*x15340)));
evalcond[3]=(((r01*x15336))+((r00*x15337))+((r02*x15342))+(((-1.0)*r00*x15338*x15340))+((r01*x15330*x15333)));
evalcond[4]=(((r01*x15338))+((r00*x15333))+((r00*x15330*x15336))+(((-1.0)*r01*x15337*x15340))+(((-1.0)*r02*sj3*x15341)));
evalcond[5]=(((r20*x15337))+((r22*x15342))+((sj3*x15334))+(((-1.0)*r20*x15338*x15340))+x15344+((r21*x15330*x15333)));
evalcond[6]=((((-1.0)*x15335))+(((-1.0)*r10*x15338*x15340))+((r11*x15336))+x15339+((r10*x15337))+((r12*x15342))+((r11*x15330*x15333)));
evalcond[7]=((((-1.0)*r12*sj3*x15341))+((r11*x15338))+x15344+((r10*x15333))+((r10*x15330*x15336))+(((-1.0)*r11*x15337*x15340)));
evalcond[8]=(((r20*x15333))+(((-1.0)*x15339))+((cj3*x15334))+(((-1.0)*r21*x15337*x15340))+(((-1.0)*r22*sj3*x15341))+x15335+((r20*x15330*x15336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15345=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15345);
rxp0_2=(py*r00);
rxp1_0=(r21*x15345);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15346=(r01*sj5);
IkReal x15347=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15347))+x15346);
j4eval[1]=(((cj3*x15346))+(((-1.0)*cj3*x15347)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15348=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15348);
rxp0_2=(py*r00);
rxp1_0=(r21*x15348);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15349=(cj5*r00);
IkReal x15350=(r01*sj5);
j4eval[0]=(x15350+(((-1.0)*x15349)));
j4eval[1]=((((-1.0)*sj3*x15350))+((sj3*x15349)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15351=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15351);
rxp0_2=(py*r00);
rxp1_0=(r21*x15351);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15352=((1.0)*r00);
CheckValue<IkReal> x15353=IKPowWithIntegerCheck(cj3,-1);
if(!x15353.valid){
continue;
}
CheckValue<IkReal> x15354=IKPowWithIntegerCheck(r12,-1);
if(!x15354.valid){
continue;
}
CheckValue<IkReal> x15355=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15352))),-1);
if(!x15355.valid){
continue;
}
if( IKabs(((x15353.value)*(x15354.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15355.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15352)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15353.value)*(x15354.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15355.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15352))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15353.value)*(x15354.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15355.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15352))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15356=IKsin(j4);
IkReal x15357=IKcos(j4);
IkReal x15358=(cj2*sj1);
IkReal x15359=(cj1*sj2);
IkReal x15360=(sj1*sj2);
IkReal x15361=(cj5*sj3);
IkReal x15362=(cj3*cj5);
IkReal x15363=(r21*sj5);
IkReal x15364=(cj1*cj2);
IkReal x15365=(r00*sj5);
IkReal x15366=(r01*sj5);
IkReal x15367=(r20*sj5);
IkReal x15368=((1.0)*x15356);
IkReal x15369=(r20*x15357);
IkReal x15370=(r00*x15357);
IkReal x15371=(cj3*x15357);
IkReal x15372=(x15359+x15358);
IkReal x15373=((1.0)*sj3*x15357);
evalcond[0]=((-1.0)*r12*x15357);
evalcond[1]=((((-1.0)*cj5*r20*x15368))+((x15356*x15363)));
evalcond[2]=(x15364+(((-1.0)*x15360))+((cj3*r12*x15356)));
evalcond[3]=((((-1.0)*r12*sj3*x15368))+x15372);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15368))+((x15356*x15366)));
evalcond[5]=((((-1.0)*x15362*x15370))+((x15366*x15371))+((sj3*x15365))+((r01*x15361)));
evalcond[6]=((((-1.0)*x15366*x15373))+((cj3*x15365))+((r01*x15362))+((x15361*x15370)));
evalcond[7]=((((-1.0)*x15362*x15369))+((x15363*x15371))+x15372+((sj3*x15367))+((r21*x15361)));
evalcond[8]=(((cj3*x15367))+((x15361*x15369))+x15360+(((-1.0)*x15364))+(((-1.0)*x15363*x15373))+((r21*x15362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15374=((1.0)*r01);
IkReal x15375=(cj5*r00);
CheckValue<IkReal> x15376=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15375))),-1);
if(!x15376.valid){
continue;
}
CheckValue<IkReal> x15377=IKPowWithIntegerCheck((((sj3*x15375))+(((-1.0)*sj3*sj5*x15374))),-1);
if(!x15377.valid){
continue;
}
if( IKabs(((-1.0)*(x15376.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15377.value)*(((((-1.0)*cj3*cj5*x15374))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15376.value)))+IKsqr(((x15377.value)*(((((-1.0)*cj3*cj5*x15374))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15376.value)), ((x15377.value)*(((((-1.0)*cj3*cj5*x15374))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15378=IKsin(j4);
IkReal x15379=IKcos(j4);
IkReal x15380=(cj2*sj1);
IkReal x15381=(cj1*sj2);
IkReal x15382=(sj1*sj2);
IkReal x15383=(cj5*sj3);
IkReal x15384=(cj3*cj5);
IkReal x15385=(r21*sj5);
IkReal x15386=(cj1*cj2);
IkReal x15387=(r00*sj5);
IkReal x15388=(r01*sj5);
IkReal x15389=(r20*sj5);
IkReal x15390=((1.0)*x15378);
IkReal x15391=(r20*x15379);
IkReal x15392=(r00*x15379);
IkReal x15393=(cj3*x15379);
IkReal x15394=(x15380+x15381);
IkReal x15395=((1.0)*sj3*x15379);
evalcond[0]=((-1.0)*r12*x15379);
evalcond[1]=((((-1.0)*cj5*r20*x15390))+((x15378*x15385)));
evalcond[2]=(((cj3*r12*x15378))+x15386+(((-1.0)*x15382)));
evalcond[3]=(x15394+(((-1.0)*r12*sj3*x15390)));
evalcond[4]=((1.0)+((x15378*x15388))+(((-1.0)*cj5*r00*x15390)));
evalcond[5]=(((r01*x15383))+((sj3*x15387))+((x15388*x15393))+(((-1.0)*x15384*x15392)));
evalcond[6]=(((r01*x15384))+((x15383*x15392))+(((-1.0)*x15388*x15395))+((cj3*x15387)));
evalcond[7]=(((r21*x15383))+((x15385*x15393))+x15394+((sj3*x15389))+(((-1.0)*x15384*x15391)));
evalcond[8]=(((r21*x15384))+((x15383*x15391))+((cj3*x15389))+x15382+(((-1.0)*x15385*x15395))+(((-1.0)*x15386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15396=((1.0)*r00);
IkReal x15397=(r01*sj5);
CheckValue<IkReal> x15398=IKPowWithIntegerCheck(((((-1.0)*cj5*x15396))+x15397),-1);
if(!x15398.valid){
continue;
}
CheckValue<IkReal> x15399=IKPowWithIntegerCheck((((cj3*x15397))+(((-1.0)*cj3*cj5*x15396))),-1);
if(!x15399.valid){
continue;
}
if( IKabs(((-1.0)*(x15398.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15399.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15396)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15398.value)))+IKsqr(((x15399.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15396))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15398.value)), ((x15399.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15396))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15400=IKsin(j4);
IkReal x15401=IKcos(j4);
IkReal x15402=(cj2*sj1);
IkReal x15403=(cj1*sj2);
IkReal x15404=(sj1*sj2);
IkReal x15405=(cj5*sj3);
IkReal x15406=(cj3*cj5);
IkReal x15407=(r21*sj5);
IkReal x15408=(cj1*cj2);
IkReal x15409=(r00*sj5);
IkReal x15410=(r01*sj5);
IkReal x15411=(r20*sj5);
IkReal x15412=((1.0)*x15400);
IkReal x15413=(r20*x15401);
IkReal x15414=(r00*x15401);
IkReal x15415=(cj3*x15401);
IkReal x15416=(x15403+x15402);
IkReal x15417=((1.0)*sj3*x15401);
evalcond[0]=((-1.0)*r12*x15401);
evalcond[1]=(((x15400*x15407))+(((-1.0)*cj5*r20*x15412)));
evalcond[2]=((((-1.0)*x15404))+x15408+((cj3*r12*x15400)));
evalcond[3]=(x15416+(((-1.0)*r12*sj3*x15412)));
evalcond[4]=((1.0)+((x15400*x15410))+(((-1.0)*cj5*r00*x15412)));
evalcond[5]=(((sj3*x15409))+((r01*x15405))+(((-1.0)*x15406*x15414))+((x15410*x15415)));
evalcond[6]=(((r01*x15406))+(((-1.0)*x15410*x15417))+((x15405*x15414))+((cj3*x15409)));
evalcond[7]=(((x15407*x15415))+((sj3*x15411))+(((-1.0)*x15406*x15413))+x15416+((r21*x15405)));
evalcond[8]=(((cj3*x15411))+(((-1.0)*x15407*x15417))+(((-1.0)*x15408))+x15404+((x15405*x15413))+((r21*x15406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15418=cj5*cj5;
IkReal x15419=(cj3*r20);
IkReal x15420=(r21*sj3);
IkReal x15421=((1.0)*cj3);
IkReal x15422=(r01*r21);
IkReal x15423=(r01*sj3);
IkReal x15424=(r00*sj5);
IkReal x15425=(cj5*r01*sj5);
IkReal x15426=((1.0)*x15418);
CheckValue<IkReal> x15427=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15421*x15422))+(((-1.0)*r02*r22*x15421))+((x15419*x15425))+(((-1.0)*r00*x15419*x15426))+((cj3*x15418*x15422))+((cj3*cj5*r21*x15424)))),-1);
if(!x15427.valid){
continue;
}
CheckValue<IkReal> x15428 = IKatan2WithCheck(IkReal((((cj5*r22*x15423))+((r22*sj3*x15424)))),IkReal((((x15420*x15425))+(((-1.0)*r20*x15423*x15426))+(((-1.0)*r00*x15420*x15426))+((r00*x15420))+(((-1.0)*cj5*r20*sj3*x15424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15427.value)))+(x15428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15429=IKsin(j4);
IkReal x15430=IKcos(j4);
IkReal x15431=(cj2*sj1);
IkReal x15432=(cj1*sj2);
IkReal x15433=(r11*sj5);
IkReal x15434=(cj5*r10);
IkReal x15435=(sj1*sj2);
IkReal x15436=(cj5*r01);
IkReal x15437=(cj5*r00);
IkReal x15438=(cj3*sj5);
IkReal x15439=(r21*sj5);
IkReal x15440=(cj1*cj2);
IkReal x15441=(cj5*sj3);
IkReal x15442=(sj3*sj5);
IkReal x15443=(r01*sj5);
IkReal x15444=(cj3*cj5);
IkReal x15445=(cj5*r20);
IkReal x15446=((1.0)*x15430);
IkReal x15447=((1.0)*x15429);
IkReal x15448=(cj3*x15430);
IkReal x15449=(sj3*x15430);
IkReal x15450=(cj3*x15429);
IkReal x15451=(x15431+x15432);
evalcond[0]=((((-1.0)*x15445*x15447))+(((-1.0)*r22*x15446))+((x15429*x15439)));
evalcond[1]=((((-1.0)*r12*x15446))+(((-1.0)*x15434*x15447))+((x15429*x15433)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15446))+((x15429*x15443))+(((-1.0)*x15437*x15447)));
evalcond[3]=(((r00*x15442))+((sj3*x15436))+((r02*x15450))+(((-1.0)*cj3*x15437*x15446))+((r01*x15430*x15438)));
evalcond[4]=((((-1.0)*r01*x15442*x15446))+((x15437*x15449))+(((-1.0)*r02*sj3*x15447))+((cj3*x15436))+((r00*x15438)));
evalcond[5]=(((r20*x15442))+((r21*x15430*x15438))+((r22*x15450))+x15451+((r21*x15441))+(((-1.0)*r20*x15444*x15446)));
evalcond[6]=(((x15433*x15448))+((r11*x15441))+((r10*x15442))+((r12*x15450))+(((-1.0)*x15435))+(((-1.0)*cj3*x15434*x15446))+x15440);
evalcond[7]=(((x15434*x15449))+((r10*x15438))+(((-1.0)*sj3*x15433*x15446))+((r11*x15444))+x15451+(((-1.0)*r12*sj3*x15447)));
evalcond[8]=((((-1.0)*r22*sj3*x15447))+(((-1.0)*sj3*x15439*x15446))+x15435+((r20*x15430*x15441))+(((-1.0)*x15440))+((r20*x15438))+((r21*x15444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15452=((1.0)*cj5);
CheckValue<IkReal> x15453=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15452))+(((-1.0)*r20*sj5)))),-1);
if(!x15453.valid){
continue;
}
CheckValue<IkReal> x15454 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15453.value)))+(x15454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15455=IKsin(j4);
IkReal x15456=IKcos(j4);
IkReal x15457=(cj2*sj1);
IkReal x15458=(cj1*sj2);
IkReal x15459=(r11*sj5);
IkReal x15460=(cj5*r10);
IkReal x15461=(sj1*sj2);
IkReal x15462=(cj5*r01);
IkReal x15463=(cj5*r00);
IkReal x15464=(cj3*sj5);
IkReal x15465=(r21*sj5);
IkReal x15466=(cj1*cj2);
IkReal x15467=(cj5*sj3);
IkReal x15468=(sj3*sj5);
IkReal x15469=(r01*sj5);
IkReal x15470=(cj3*cj5);
IkReal x15471=(cj5*r20);
IkReal x15472=((1.0)*x15456);
IkReal x15473=((1.0)*x15455);
IkReal x15474=(cj3*x15456);
IkReal x15475=(sj3*x15456);
IkReal x15476=(cj3*x15455);
IkReal x15477=(x15457+x15458);
evalcond[0]=(((x15455*x15465))+(((-1.0)*r22*x15472))+(((-1.0)*x15471*x15473)));
evalcond[1]=((((-1.0)*x15460*x15473))+((x15455*x15459))+(((-1.0)*r12*x15472)));
evalcond[2]=((1.0)+((x15455*x15469))+(((-1.0)*x15463*x15473))+(((-1.0)*r02*x15472)));
evalcond[3]=(((r02*x15476))+((r00*x15468))+((r01*x15456*x15464))+((sj3*x15462))+(((-1.0)*cj3*x15463*x15472)));
evalcond[4]=((((-1.0)*r01*x15468*x15472))+((x15463*x15475))+((r00*x15464))+((cj3*x15462))+(((-1.0)*r02*sj3*x15473)));
evalcond[5]=((((-1.0)*r20*x15470*x15472))+((r22*x15476))+((r21*x15467))+x15477+((r21*x15456*x15464))+((r20*x15468)));
evalcond[6]=(((x15459*x15474))+(((-1.0)*x15461))+((r12*x15476))+x15466+((r11*x15467))+(((-1.0)*cj3*x15460*x15472))+((r10*x15468)));
evalcond[7]=((((-1.0)*r12*sj3*x15473))+((x15460*x15475))+(((-1.0)*sj3*x15459*x15472))+x15477+((r10*x15464))+((r11*x15470)));
evalcond[8]=((((-1.0)*sj3*x15465*x15472))+((r20*x15456*x15467))+(((-1.0)*x15466))+((r21*x15470))+x15461+((r20*x15464))+(((-1.0)*r22*sj3*x15473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15478 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15478.valid){
continue;
}
CheckValue<IkReal> x15479=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15478.value)+(((1.5707963267949)*(x15479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15480=IKsin(j4);
IkReal x15481=IKcos(j4);
IkReal x15482=(cj2*sj1);
IkReal x15483=(cj1*sj2);
IkReal x15484=(r11*sj5);
IkReal x15485=(cj5*r10);
IkReal x15486=(sj1*sj2);
IkReal x15487=(cj5*r01);
IkReal x15488=(cj5*r00);
IkReal x15489=(cj3*sj5);
IkReal x15490=(r21*sj5);
IkReal x15491=(cj1*cj2);
IkReal x15492=(cj5*sj3);
IkReal x15493=(sj3*sj5);
IkReal x15494=(r01*sj5);
IkReal x15495=(cj3*cj5);
IkReal x15496=(cj5*r20);
IkReal x15497=((1.0)*x15481);
IkReal x15498=((1.0)*x15480);
IkReal x15499=(cj3*x15481);
IkReal x15500=(sj3*x15481);
IkReal x15501=(cj3*x15480);
IkReal x15502=(x15483+x15482);
evalcond[0]=((((-1.0)*x15496*x15498))+((x15480*x15490))+(((-1.0)*r22*x15497)));
evalcond[1]=((((-1.0)*x15485*x15498))+((x15480*x15484))+(((-1.0)*r12*x15497)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15497))+(((-1.0)*x15488*x15498))+((x15480*x15494)));
evalcond[3]=(((sj3*x15487))+((r00*x15493))+(((-1.0)*cj3*x15488*x15497))+((r01*x15481*x15489))+((r02*x15501)));
evalcond[4]=((((-1.0)*r01*x15493*x15497))+((x15488*x15500))+(((-1.0)*r02*sj3*x15498))+((cj3*x15487))+((r00*x15489)));
evalcond[5]=(((r22*x15501))+((r20*x15493))+x15502+((r21*x15492))+(((-1.0)*r20*x15495*x15497))+((r21*x15481*x15489)));
evalcond[6]=(((x15484*x15499))+((r10*x15493))+((r11*x15492))+((r12*x15501))+x15491+(((-1.0)*x15486))+(((-1.0)*cj3*x15485*x15497)));
evalcond[7]=(((r10*x15489))+((r11*x15495))+(((-1.0)*r12*sj3*x15498))+(((-1.0)*sj3*x15484*x15497))+((x15485*x15500))+x15502);
evalcond[8]=((((-1.0)*r22*sj3*x15498))+((r20*x15481*x15492))+x15486+(((-1.0)*sj3*x15490*x15497))+((r21*x15495))+((r20*x15489))+(((-1.0)*x15491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15503=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15503);
rxp1_1=(px*r21);
rxp1_2=(r11*x15503);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15504=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15504);
rxp1_1=(px*r21);
rxp1_2=(r11*x15504);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15505=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15505)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15505)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15506=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15506);
rxp1_1=(px*r21);
rxp1_2=(r11*x15506);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15507=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15507);
rxp1_1=(px*r21);
rxp1_2=(r11*x15507);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15508=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15508);
rxp1_1=(px*r21);
rxp1_2=(r11*x15508);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15509=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15509);
rxp1_1=(px*r21);
rxp1_2=(r11*x15509);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15512=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15512.valid){
continue;
}
IkReal x15510=x15512.value;
IkReal x15511=(sj0*x15510);
cj4array[0]=(((cj1*sj2*x15511))+((cj2*sj1*x15511)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15513=IKsin(j4);
IkReal x15514=IKcos(j4);
IkReal x15515=(cj5*r20);
IkReal x15516=(r21*sj5);
IkReal x15517=((1.0)*x15513);
IkReal x15518=((1.0)*x15514);
evalcond[0]=((-1.0)*r02*x15513);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15518)));
evalcond[2]=((((-1.0)*x15515*x15517))+((x15513*x15516)));
evalcond[3]=(((r11*sj5*x15513))+(((-1.0)*cj5*r10*x15517)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15516*x15518))+((x15514*x15515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15520=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15520.valid){
continue;
}
IkReal x15519=x15520.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15519))+((cj1*cj2*x15519)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15521=IKsin(j4);
IkReal x15522=IKcos(j4);
IkReal x15523=(r11*sj5);
IkReal x15524=((1.0)*sj0);
IkReal x15525=((1.0)*x15522);
IkReal x15526=((1.0)*cj5*x15521);
evalcond[0]=((-1.0)*r02*x15521);
evalcond[1]=((((-1.0)*x15524))+(((-1.0)*r02*x15525)));
evalcond[2]=((((-1.0)*r20*x15526))+((r21*sj5*x15521)));
evalcond[3]=(((x15521*x15523))+(((-1.0)*r10*x15526)));
evalcond[4]=((((-1.0)*cj2*sj1*x15524))+((cj5*r10*x15522))+(((-1.0)*cj1*sj2*x15524))+(((-1.0)*x15523*x15525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15527=IKPowWithIntegerCheck(r02,-1);
if(!x15527.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15527.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15528=IKsin(j4);
IkReal x15529=IKcos(j4);
IkReal x15530=((1.0)*sj0);
IkReal x15531=(cj5*x15529);
IkReal x15532=(sj5*x15528);
IkReal x15533=((1.0)*sj5*x15529);
IkReal x15534=((1.0)*cj5*x15528);
evalcond[0]=((-1.0)*r02*x15528);
evalcond[1]=(((r21*x15532))+(((-1.0)*r20*x15534)));
evalcond[2]=(((r11*x15532))+(((-1.0)*r10*x15534)));
evalcond[3]=((((-1.0)*r21*x15533))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15531)));
evalcond[4]=(((r10*x15531))+(((-1.0)*cj2*sj1*x15530))+(((-1.0)*r11*x15533))+(((-1.0)*cj1*sj2*x15530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15535=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15535);
rxp1_1=(px*r21);
rxp1_2=(r11*x15535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15536=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15536);
rxp1_1=(px*r21);
rxp1_2=(r11*x15536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15537=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15537);
rxp1_1=(px*r21);
rxp1_2=(r11*x15537);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15540=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15540.valid){
continue;
}
IkReal x15538=x15540.value;
IkReal x15539=(sj0*x15538);
cj4array[0]=(((cj1*sj2*x15539))+((cj2*sj1*x15539)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15541=IKsin(j4);
IkReal x15542=IKcos(j4);
IkReal x15543=(r21*sj5);
IkReal x15544=((1.0)*cj5*r20);
evalcond[0]=(r02*x15541);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15542)));
evalcond[2]=(((x15541*x15543))+(((-1.0)*x15541*x15544)));
evalcond[3]=(((r11*sj5*x15541))+(((-1.0)*cj5*r10*x15541)));
evalcond[4]=(((x15542*x15543))+(((-1.0)*x15542*x15544))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15546=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15546.valid){
continue;
}
IkReal x15545=x15546.value;
cj4array[0]=(((cj1*cj2*x15545))+(((-1.0)*sj1*sj2*x15545)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15547=IKsin(j4);
IkReal x15548=IKcos(j4);
IkReal x15549=((1.0)*sj0);
IkReal x15550=((1.0)*cj5);
IkReal x15551=(sj5*x15547);
evalcond[0]=(r02*x15547);
evalcond[1]=((((-1.0)*x15549))+(((-1.0)*r02*x15548)));
evalcond[2]=(((r21*x15551))+(((-1.0)*r20*x15547*x15550)));
evalcond[3]=(((r11*x15551))+(((-1.0)*r10*x15547*x15550)));
evalcond[4]=((((-1.0)*cj1*sj2*x15549))+(((-1.0)*cj2*sj1*x15549))+(((-1.0)*r10*x15548*x15550))+((r11*sj5*x15548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15552=IKPowWithIntegerCheck(r02,-1);
if(!x15552.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15552.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15553=IKsin(j4);
IkReal x15554=IKcos(j4);
IkReal x15555=((1.0)*cj1);
IkReal x15556=(r21*sj5);
IkReal x15557=((1.0)*cj5);
IkReal x15558=(r11*sj5);
evalcond[0]=(r02*x15553);
evalcond[1]=(((x15553*x15556))+(((-1.0)*r20*x15553*x15557)));
evalcond[2]=(((x15553*x15558))+(((-1.0)*r10*x15553*x15557)));
evalcond[3]=((((-1.0)*cj2*x15555))+((sj1*sj2))+((x15554*x15556))+(((-1.0)*r20*x15554*x15557)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15555))+((x15554*x15558))+(((-1.0)*r10*x15554*x15557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15559 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15559.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15559.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15560 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15560.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15560.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15561=((-1.0)*r10);
CheckValue<IkReal> x15563 = IKatan2WithCheck(IkReal(x15561),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15563.valid){
continue;
}
IkReal x15562=((-1.0)*(x15563.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15561);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15562;
IkReal gconst66=x15562;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15564=((-1.0)*r10);
CheckValue<IkReal> x15566 = IKatan2WithCheck(IkReal(x15564),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15566.valid){
continue;
}
IkReal x15565=((-1.0)*(x15566.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15564);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15565;
IkReal gconst66=x15565;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15567=((-1.0)*r10);
CheckValue<IkReal> x15569 = IKatan2WithCheck(IkReal(x15567),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15569.valid){
continue;
}
IkReal x15568=((-1.0)*(x15569.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15567);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15568;
IkReal gconst66=x15568;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15570=((1.0)*gconst67);
IkReal x15571=(cj1*cj2);
IkReal x15572=((1.0)*sj1*sj2);
CheckValue<IkReal> x15573=IKPowWithIntegerCheck(cj3,-1);
if(!x15573.valid){
continue;
}
CheckValue<IkReal> x15574=IKPowWithIntegerCheck(r02,-1);
if(!x15574.valid){
continue;
}
CheckValue<IkReal> x15575=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15570))),-1);
if(!x15575.valid){
continue;
}
if( IKabs(((x15573.value)*(x15574.value)*((((cj0*x15571))+(((-1.0)*cj0*x15572)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15575.value)*(((((-1.0)*cj3*r20*x15570))+x15571+(((-1.0)*x15572))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15573.value)*(x15574.value)*((((cj0*x15571))+(((-1.0)*cj0*x15572))))))+IKsqr(((x15575.value)*(((((-1.0)*cj3*r20*x15570))+x15571+(((-1.0)*x15572))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15573.value)*(x15574.value)*((((cj0*x15571))+(((-1.0)*cj0*x15572))))), ((x15575.value)*(((((-1.0)*cj3*r20*x15570))+x15571+(((-1.0)*x15572))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15576=IKsin(j4);
IkReal x15577=IKcos(j4);
IkReal x15578=(sj1*sj2);
IkReal x15579=(gconst68*sj3);
IkReal x15580=(gconst67*r11);
IkReal x15581=(gconst67*sj3);
IkReal x15582=((1.0)*gconst68);
IkReal x15583=(cj2*sj1);
IkReal x15584=((1.0)*cj0);
IkReal x15585=((1.0)*sj0);
IkReal x15586=(cj3*gconst67);
IkReal x15587=(cj3*gconst68);
IkReal x15588=(cj1*sj2);
IkReal x15589=(gconst67*r21);
IkReal x15590=((1.0)*cj1*cj2);
IkReal x15591=(cj3*x15577);
IkReal x15592=((1.0)*x15577);
IkReal x15593=(r02*x15576);
evalcond[0]=((((-1.0)*x15585))+(((-1.0)*r02*x15592)));
evalcond[1]=(((x15576*x15589))+(((-1.0)*r20*x15576*x15582)));
evalcond[2]=(cj0+(((-1.0)*r10*x15576*x15582))+((x15576*x15580)));
evalcond[3]=(((cj0*x15578))+(((-1.0)*cj1*cj2*x15584))+((cj3*x15593)));
evalcond[4]=((((-1.0)*x15583*x15584))+(((-1.0)*x15584*x15588))+(((-1.0)*sj3*x15593)));
evalcond[5]=(((r21*x15579))+(((-1.0)*r20*x15582*x15591))+((r21*x15577*x15586))+x15583+x15588+((r20*x15581)));
evalcond[6]=(((r20*x15577*x15579))+(((-1.0)*x15590))+x15578+((r20*x15586))+(((-1.0)*r21*x15581*x15592))+((r21*x15587)));
evalcond[7]=(((sj0*x15578))+(((-1.0)*r10*x15582*x15591))+(((-1.0)*cj1*cj2*x15585))+((r10*x15581))+((r11*x15579))+((x15580*x15591)));
evalcond[8]=((((-1.0)*sj3*x15580*x15592))+((r11*x15587))+((r10*x15577*x15579))+((r10*x15586))+(((-1.0)*x15585*x15588))+(((-1.0)*x15583*x15585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15596=IKPowWithIntegerCheck(r02,-1);
if(!x15596.valid){
continue;
}
IkReal x15594=x15596.value;
IkReal x15595=((1.0)*cj0);
CheckValue<IkReal> x15597=IKPowWithIntegerCheck(sj3,-1);
if(!x15597.valid){
continue;
}
if( IKabs((x15594*(x15597.value)*(((((-1.0)*cj1*sj2*x15595))+(((-1.0)*cj2*sj1*x15595)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15594)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15594*(x15597.value)*(((((-1.0)*cj1*sj2*x15595))+(((-1.0)*cj2*sj1*x15595))))))+IKsqr(((-1.0)*sj0*x15594))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15594*(x15597.value)*(((((-1.0)*cj1*sj2*x15595))+(((-1.0)*cj2*sj1*x15595))))), ((-1.0)*sj0*x15594));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15598=IKsin(j4);
IkReal x15599=IKcos(j4);
IkReal x15600=(sj1*sj2);
IkReal x15601=(gconst68*sj3);
IkReal x15602=(gconst67*r11);
IkReal x15603=(gconst67*sj3);
IkReal x15604=((1.0)*gconst68);
IkReal x15605=(cj2*sj1);
IkReal x15606=((1.0)*cj0);
IkReal x15607=((1.0)*sj0);
IkReal x15608=(cj3*gconst67);
IkReal x15609=(cj3*gconst68);
IkReal x15610=(cj1*sj2);
IkReal x15611=(gconst67*r21);
IkReal x15612=((1.0)*cj1*cj2);
IkReal x15613=(cj3*x15599);
IkReal x15614=((1.0)*x15599);
IkReal x15615=(r02*x15598);
evalcond[0]=((((-1.0)*x15607))+(((-1.0)*r02*x15614)));
evalcond[1]=((((-1.0)*r20*x15598*x15604))+((x15598*x15611)));
evalcond[2]=(cj0+(((-1.0)*r10*x15598*x15604))+((x15598*x15602)));
evalcond[3]=(((cj0*x15600))+((cj3*x15615))+(((-1.0)*cj1*cj2*x15606)));
evalcond[4]=((((-1.0)*x15606*x15610))+(((-1.0)*x15605*x15606))+(((-1.0)*sj3*x15615)));
evalcond[5]=((((-1.0)*r20*x15604*x15613))+((r21*x15599*x15608))+x15605+x15610+((r20*x15603))+((r21*x15601)));
evalcond[6]=((((-1.0)*x15612))+(((-1.0)*r21*x15603*x15614))+x15600+((r20*x15599*x15601))+((r20*x15608))+((r21*x15609)));
evalcond[7]=((((-1.0)*r10*x15604*x15613))+(((-1.0)*cj1*cj2*x15607))+((r10*x15603))+((x15602*x15613))+((r11*x15601))+((sj0*x15600)));
evalcond[8]=((((-1.0)*sj3*x15602*x15614))+(((-1.0)*x15607*x15610))+((r10*x15608))+(((-1.0)*x15605*x15607))+((r10*x15599*x15601))+((r11*x15609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15617=IKPowWithIntegerCheck(r02,-1);
if(!x15617.valid){
continue;
}
IkReal x15616=x15617.value;
CheckValue<IkReal> x15618=IKPowWithIntegerCheck(cj3,-1);
if(!x15618.valid){
continue;
}
if( IKabs((x15616*(x15618.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15616)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15616*(x15618.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15616))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15616*(x15618.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15616));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15619=IKsin(j4);
IkReal x15620=IKcos(j4);
IkReal x15621=(sj1*sj2);
IkReal x15622=(gconst68*sj3);
IkReal x15623=(gconst67*r11);
IkReal x15624=(gconst67*sj3);
IkReal x15625=((1.0)*gconst68);
IkReal x15626=(cj2*sj1);
IkReal x15627=((1.0)*cj0);
IkReal x15628=((1.0)*sj0);
IkReal x15629=(cj3*gconst67);
IkReal x15630=(cj3*gconst68);
IkReal x15631=(cj1*sj2);
IkReal x15632=(gconst67*r21);
IkReal x15633=((1.0)*cj1*cj2);
IkReal x15634=(cj3*x15620);
IkReal x15635=((1.0)*x15620);
IkReal x15636=(r02*x15619);
evalcond[0]=((((-1.0)*x15628))+(((-1.0)*r02*x15635)));
evalcond[1]=(((x15619*x15632))+(((-1.0)*r20*x15619*x15625)));
evalcond[2]=(cj0+((x15619*x15623))+(((-1.0)*r10*x15619*x15625)));
evalcond[3]=(((cj3*x15636))+((cj0*x15621))+(((-1.0)*cj1*cj2*x15627)));
evalcond[4]=((((-1.0)*sj3*x15636))+(((-1.0)*x15627*x15631))+(((-1.0)*x15626*x15627)));
evalcond[5]=(((r21*x15622))+((r21*x15620*x15629))+x15626+x15631+((r20*x15624))+(((-1.0)*r20*x15625*x15634)));
evalcond[6]=((((-1.0)*r21*x15624*x15635))+x15621+((r20*x15629))+((r21*x15630))+((r20*x15620*x15622))+(((-1.0)*x15633)));
evalcond[7]=(((sj0*x15621))+(((-1.0)*r10*x15625*x15634))+((x15623*x15634))+(((-1.0)*cj1*cj2*x15628))+((r11*x15622))+((r10*x15624)));
evalcond[8]=(((r10*x15620*x15622))+(((-1.0)*x15628*x15631))+((r11*x15630))+(((-1.0)*sj3*x15623*x15635))+(((-1.0)*x15626*x15628))+((r10*x15629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15637=((-1.0)*r10);
CheckValue<IkReal> x15638 = IKatan2WithCheck(IkReal(x15637),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15638.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15638.value))));
IkReal gconst70=x15637;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15639 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15639.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15639.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15640=((-1.0)*r10);
IkReal x15641=((-1.0)*r11);
CheckValue<IkReal> x15643 = IKatan2WithCheck(IkReal(x15640),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15643.valid){
continue;
}
IkReal x15642=((1.0)*(x15643.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15640);
rxp1_1=(px*r21);
rxp1_2=(px*x15641);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15642)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15642)));
IkReal gconst70=x15640;
IkReal gconst71=x15641;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15644=((-1.0)*r10);
IkReal x15645=((-1.0)*r11);
CheckValue<IkReal> x15647 = IKatan2WithCheck(IkReal(x15644),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15647.valid){
continue;
}
IkReal x15646=((1.0)*(x15647.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15644);
rxp1_1=(px*r21);
rxp1_2=(px*x15645);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15646)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15646)));
IkReal gconst70=x15644;
IkReal gconst71=x15645;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15648=((-1.0)*r10);
IkReal x15649=((-1.0)*r11);
CheckValue<IkReal> x15651 = IKatan2WithCheck(IkReal(x15648),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15651.valid){
continue;
}
IkReal x15650=((1.0)*(x15651.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15648);
rxp1_1=(px*r21);
rxp1_2=(px*x15649);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15650)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15650)));
IkReal gconst70=x15648;
IkReal gconst71=x15649;
IkReal x15652=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15652))+(((-1.0)*r11*r20*x15652)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15653=((1.0)*r21);
IkReal x15654=(cj1*cj2);
IkReal x15655=((1.0)*sj1*sj2);
CheckValue<IkReal> x15656=IKPowWithIntegerCheck(cj3,-1);
if(!x15656.valid){
continue;
}
CheckValue<IkReal> x15657=IKPowWithIntegerCheck(r02,-1);
if(!x15657.valid){
continue;
}
CheckValue<IkReal> x15658=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15653))+((gconst71*r20*sj3))),-1);
if(!x15658.valid){
continue;
}
if( IKabs(((x15656.value)*(x15657.value)*(((((-1.0)*cj0*x15655))+((cj0*x15654)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15658.value)*((x15654+(((-1.0)*x15655))+(((-1.0)*cj3*gconst71*x15653))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15656.value)*(x15657.value)*(((((-1.0)*cj0*x15655))+((cj0*x15654))))))+IKsqr(((x15658.value)*((x15654+(((-1.0)*x15655))+(((-1.0)*cj3*gconst71*x15653))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15656.value)*(x15657.value)*(((((-1.0)*cj0*x15655))+((cj0*x15654))))), ((x15658.value)*((x15654+(((-1.0)*x15655))+(((-1.0)*cj3*gconst71*x15653))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15659=IKsin(j4);
IkReal x15660=IKcos(j4);
IkReal x15661=(cj3*gconst70);
IkReal x15662=(sj1*sj2);
IkReal x15663=((1.0)*gconst71);
IkReal x15664=(gconst71*sj3);
IkReal x15665=(cj2*sj1);
IkReal x15666=((1.0)*sj0);
IkReal x15667=(gconst70*r11);
IkReal x15668=(gconst70*sj3);
IkReal x15669=((1.0)*cj0);
IkReal x15670=(cj3*gconst71);
IkReal x15671=(cj1*sj2);
IkReal x15672=((1.0)*cj1*cj2);
IkReal x15673=(r21*x15660);
IkReal x15674=(r10*x15660);
IkReal x15675=((1.0)*x15660);
IkReal x15676=(r02*x15659);
IkReal x15677=(r20*x15660);
evalcond[0]=((((-1.0)*x15666))+(((-1.0)*r02*x15675)));
evalcond[1]=(((gconst70*r21*x15659))+(((-1.0)*r20*x15659*x15663)));
evalcond[2]=((((-1.0)*r10*x15659*x15663))+cj0+((x15659*x15667)));
evalcond[3]=(((cj3*x15676))+(((-1.0)*cj1*cj2*x15669))+((cj0*x15662)));
evalcond[4]=((((-1.0)*x15665*x15669))+(((-1.0)*x15669*x15671))+(((-1.0)*sj3*x15676)));
evalcond[5]=(((r20*x15668))+x15665+x15671+((r21*x15664))+((x15661*x15673))+(((-1.0)*cj3*x15663*x15677)));
evalcond[6]=((((-1.0)*x15672))+((r20*x15661))+(((-1.0)*x15668*x15673))+x15662+((r21*x15670))+((x15664*x15677)));
evalcond[7]=(((r11*x15660*x15661))+((r10*x15668))+((r11*x15664))+((sj0*x15662))+(((-1.0)*cj1*cj2*x15666))+(((-1.0)*cj3*x15663*x15674)));
evalcond[8]=((((-1.0)*x15665*x15666))+((r10*x15661))+((r11*x15670))+(((-1.0)*x15666*x15671))+(((-1.0)*sj3*x15667*x15675))+((x15664*x15674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15680=IKPowWithIntegerCheck(r02,-1);
if(!x15680.valid){
continue;
}
IkReal x15678=x15680.value;
IkReal x15679=((1.0)*cj0);
CheckValue<IkReal> x15681=IKPowWithIntegerCheck(sj3,-1);
if(!x15681.valid){
continue;
}
if( IKabs((x15678*(x15681.value)*(((((-1.0)*cj1*sj2*x15679))+(((-1.0)*cj2*sj1*x15679)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15678)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15678*(x15681.value)*(((((-1.0)*cj1*sj2*x15679))+(((-1.0)*cj2*sj1*x15679))))))+IKsqr(((-1.0)*sj0*x15678))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15678*(x15681.value)*(((((-1.0)*cj1*sj2*x15679))+(((-1.0)*cj2*sj1*x15679))))), ((-1.0)*sj0*x15678));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15682=IKsin(j4);
IkReal x15683=IKcos(j4);
IkReal x15684=(cj3*gconst70);
IkReal x15685=(sj1*sj2);
IkReal x15686=((1.0)*gconst71);
IkReal x15687=(gconst71*sj3);
IkReal x15688=(cj2*sj1);
IkReal x15689=((1.0)*sj0);
IkReal x15690=(gconst70*r11);
IkReal x15691=(gconst70*sj3);
IkReal x15692=((1.0)*cj0);
IkReal x15693=(cj3*gconst71);
IkReal x15694=(cj1*sj2);
IkReal x15695=((1.0)*cj1*cj2);
IkReal x15696=(r21*x15683);
IkReal x15697=(r10*x15683);
IkReal x15698=((1.0)*x15683);
IkReal x15699=(r02*x15682);
IkReal x15700=(r20*x15683);
evalcond[0]=((((-1.0)*r02*x15698))+(((-1.0)*x15689)));
evalcond[1]=(((gconst70*r21*x15682))+(((-1.0)*r20*x15682*x15686)));
evalcond[2]=(cj0+(((-1.0)*r10*x15682*x15686))+((x15682*x15690)));
evalcond[3]=(((cj3*x15699))+((cj0*x15685))+(((-1.0)*cj1*cj2*x15692)));
evalcond[4]=((((-1.0)*x15688*x15692))+(((-1.0)*sj3*x15699))+(((-1.0)*x15692*x15694)));
evalcond[5]=(((r20*x15691))+x15688+x15694+((x15684*x15696))+(((-1.0)*cj3*x15686*x15700))+((r21*x15687)));
evalcond[6]=(((r20*x15684))+(((-1.0)*x15695))+(((-1.0)*x15691*x15696))+((r21*x15693))+x15685+((x15687*x15700)));
evalcond[7]=(((r11*x15683*x15684))+((r10*x15691))+(((-1.0)*cj3*x15686*x15697))+((r11*x15687))+((sj0*x15685))+(((-1.0)*cj1*cj2*x15689)));
evalcond[8]=(((r10*x15684))+(((-1.0)*x15688*x15689))+(((-1.0)*sj3*x15690*x15698))+((r11*x15693))+(((-1.0)*x15689*x15694))+((x15687*x15697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15702=IKPowWithIntegerCheck(r02,-1);
if(!x15702.valid){
continue;
}
IkReal x15701=x15702.value;
CheckValue<IkReal> x15703=IKPowWithIntegerCheck(cj3,-1);
if(!x15703.valid){
continue;
}
if( IKabs((x15701*(x15703.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15701)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15701*(x15703.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15701))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15701*(x15703.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15701));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15704=IKsin(j4);
IkReal x15705=IKcos(j4);
IkReal x15706=(cj3*gconst70);
IkReal x15707=(sj1*sj2);
IkReal x15708=((1.0)*gconst71);
IkReal x15709=(gconst71*sj3);
IkReal x15710=(cj2*sj1);
IkReal x15711=((1.0)*sj0);
IkReal x15712=(gconst70*r11);
IkReal x15713=(gconst70*sj3);
IkReal x15714=((1.0)*cj0);
IkReal x15715=(cj3*gconst71);
IkReal x15716=(cj1*sj2);
IkReal x15717=((1.0)*cj1*cj2);
IkReal x15718=(r21*x15705);
IkReal x15719=(r10*x15705);
IkReal x15720=((1.0)*x15705);
IkReal x15721=(r02*x15704);
IkReal x15722=(r20*x15705);
evalcond[0]=((((-1.0)*x15711))+(((-1.0)*r02*x15720)));
evalcond[1]=((((-1.0)*r20*x15704*x15708))+((gconst70*r21*x15704)));
evalcond[2]=(cj0+((x15704*x15712))+(((-1.0)*r10*x15704*x15708)));
evalcond[3]=(((cj0*x15707))+(((-1.0)*cj1*cj2*x15714))+((cj3*x15721)));
evalcond[4]=((((-1.0)*sj3*x15721))+(((-1.0)*x15710*x15714))+(((-1.0)*x15714*x15716)));
evalcond[5]=(((r20*x15713))+(((-1.0)*cj3*x15708*x15722))+x15716+x15710+((r21*x15709))+((x15706*x15718)));
evalcond[6]=((((-1.0)*x15717))+((r20*x15706))+((x15709*x15722))+(((-1.0)*x15713*x15718))+((r21*x15715))+x15707);
evalcond[7]=(((r11*x15709))+((sj0*x15707))+(((-1.0)*cj3*x15708*x15719))+(((-1.0)*cj1*cj2*x15711))+((r11*x15705*x15706))+((r10*x15713)));
evalcond[8]=((((-1.0)*x15710*x15711))+((x15709*x15719))+(((-1.0)*sj3*x15712*x15720))+((r10*x15706))+(((-1.0)*x15711*x15716))+((r11*x15715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15724=IKPowWithIntegerCheck(r02,-1);
if(!x15724.valid){
continue;
}
IkReal x15723=x15724.value;
CheckValue<IkReal> x15725=IKPowWithIntegerCheck(cj3,-1);
if(!x15725.valid){
continue;
}
if( IKabs((x15723*(x15725.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15723)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15723*(x15725.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15723))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15723*(x15725.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15723));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15726=IKsin(j4);
IkReal x15727=IKcos(j4);
IkReal x15728=(cj5*r10);
IkReal x15729=(sj1*sj2);
IkReal x15730=(cj5*sj3);
IkReal x15731=(r11*sj5);
IkReal x15732=(cj3*cj5);
IkReal x15733=(cj3*sj5);
IkReal x15734=(r21*sj5);
IkReal x15735=(cj2*sj1);
IkReal x15736=((1.0)*sj0);
IkReal x15737=((1.0)*cj0);
IkReal x15738=(sj3*sj5);
IkReal x15739=(cj1*sj2);
IkReal x15740=((1.0)*cj1*cj2);
IkReal x15741=((1.0)*x15726);
IkReal x15742=(r20*x15727);
IkReal x15743=(cj3*x15727);
IkReal x15744=(sj3*x15727);
evalcond[0]=((((-1.0)*r02*x15727))+(((-1.0)*x15736)));
evalcond[1]=(((x15726*x15734))+(((-1.0)*cj5*r20*x15741)));
evalcond[2]=(cj0+((x15726*x15731))+(((-1.0)*x15728*x15741)));
evalcond[3]=(((cj3*r02*x15726))+((cj0*x15729))+(((-1.0)*cj1*cj2*x15737)));
evalcond[4]=((((-1.0)*r02*sj3*x15741))+(((-1.0)*x15737*x15739))+(((-1.0)*x15735*x15737)));
evalcond[5]=(((r20*x15738))+((r21*x15730))+x15735+x15739+(((-1.0)*x15732*x15742))+((r21*x15727*x15733)));
evalcond[6]=((((-1.0)*x15734*x15744))+((r20*x15733))+(((-1.0)*x15740))+((r21*x15732))+x15729+((x15730*x15742)));
evalcond[7]=(((r11*x15730))+(((-1.0)*cj1*cj2*x15736))+((sj0*x15729))+((x15731*x15743))+(((-1.0)*x15728*x15743))+((r10*x15738)));
evalcond[8]=(((r11*x15732))+((x15728*x15744))+(((-1.0)*x15736*x15739))+(((-1.0)*x15735*x15736))+((r10*x15733))+(((-1.0)*x15731*x15744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15745=((1.0)*sj3);
IkReal x15746=((1.0)*cj5);
CheckValue<IkReal> x15747=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15746))),-1);
if(!x15747.valid){
continue;
}
CheckValue<IkReal> x15748=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15746))+((cj3*r21*sj5))),-1);
if(!x15748.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15747.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15748.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15745))+(((-1.0)*cj5*r21*x15745)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15747.value)))+IKsqr(((x15748.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15745))+(((-1.0)*cj5*r21*x15745))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15747.value)), ((x15748.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15745))+(((-1.0)*cj5*r21*x15745))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15749=IKsin(j4);
IkReal x15750=IKcos(j4);
IkReal x15751=(cj5*r10);
IkReal x15752=(sj1*sj2);
IkReal x15753=(cj5*sj3);
IkReal x15754=(r11*sj5);
IkReal x15755=(cj3*cj5);
IkReal x15756=(cj3*sj5);
IkReal x15757=(r21*sj5);
IkReal x15758=(cj2*sj1);
IkReal x15759=((1.0)*sj0);
IkReal x15760=((1.0)*cj0);
IkReal x15761=(sj3*sj5);
IkReal x15762=(cj1*sj2);
IkReal x15763=((1.0)*cj1*cj2);
IkReal x15764=((1.0)*x15749);
IkReal x15765=(r20*x15750);
IkReal x15766=(cj3*x15750);
IkReal x15767=(sj3*x15750);
evalcond[0]=((((-1.0)*r02*x15750))+(((-1.0)*x15759)));
evalcond[1]=(((x15749*x15757))+(((-1.0)*cj5*r20*x15764)));
evalcond[2]=(cj0+(((-1.0)*x15751*x15764))+((x15749*x15754)));
evalcond[3]=(((cj3*r02*x15749))+(((-1.0)*cj1*cj2*x15760))+((cj0*x15752)));
evalcond[4]=((((-1.0)*x15760*x15762))+(((-1.0)*r02*sj3*x15764))+(((-1.0)*x15758*x15760)));
evalcond[5]=(((r21*x15750*x15756))+((r21*x15753))+((r20*x15761))+x15762+x15758+(((-1.0)*x15755*x15765)));
evalcond[6]=(((x15753*x15765))+((r21*x15755))+(((-1.0)*x15763))+((r20*x15756))+x15752+(((-1.0)*x15757*x15767)));
evalcond[7]=(((r10*x15761))+(((-1.0)*x15751*x15766))+((x15754*x15766))+((sj0*x15752))+((r11*x15753))+(((-1.0)*cj1*cj2*x15759)));
evalcond[8]=(((x15751*x15767))+(((-1.0)*x15758*x15759))+(((-1.0)*x15759*x15762))+((r10*x15756))+(((-1.0)*x15754*x15767))+((r11*x15755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15768=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15768.valid){
continue;
}
CheckValue<IkReal> x15769=IKPowWithIntegerCheck(r02,-1);
if(!x15769.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15768.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15769.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15768.value)))+IKsqr(((-1.0)*sj0*(x15769.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15768.value)), ((-1.0)*sj0*(x15769.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15770=IKsin(j4);
IkReal x15771=IKcos(j4);
IkReal x15772=(cj5*r10);
IkReal x15773=(sj1*sj2);
IkReal x15774=(cj5*sj3);
IkReal x15775=(r11*sj5);
IkReal x15776=(cj3*cj5);
IkReal x15777=(cj3*sj5);
IkReal x15778=(r21*sj5);
IkReal x15779=(cj2*sj1);
IkReal x15780=((1.0)*sj0);
IkReal x15781=((1.0)*cj0);
IkReal x15782=(sj3*sj5);
IkReal x15783=(cj1*sj2);
IkReal x15784=((1.0)*cj1*cj2);
IkReal x15785=((1.0)*x15770);
IkReal x15786=(r20*x15771);
IkReal x15787=(cj3*x15771);
IkReal x15788=(sj3*x15771);
evalcond[0]=((((-1.0)*r02*x15771))+(((-1.0)*x15780)));
evalcond[1]=(((x15770*x15778))+(((-1.0)*cj5*r20*x15785)));
evalcond[2]=(cj0+(((-1.0)*x15772*x15785))+((x15770*x15775)));
evalcond[3]=((((-1.0)*cj1*cj2*x15781))+((cj0*x15773))+((cj3*r02*x15770)));
evalcond[4]=((((-1.0)*x15779*x15781))+(((-1.0)*r02*sj3*x15785))+(((-1.0)*x15781*x15783)));
evalcond[5]=(((r21*x15771*x15777))+((r21*x15774))+(((-1.0)*x15776*x15786))+x15783+x15779+((r20*x15782)));
evalcond[6]=(((r21*x15776))+((r20*x15777))+x15773+((x15774*x15786))+(((-1.0)*x15784))+(((-1.0)*x15778*x15788)));
evalcond[7]=((((-1.0)*cj1*cj2*x15780))+((r10*x15782))+((x15775*x15787))+(((-1.0)*x15772*x15787))+((sj0*x15773))+((r11*x15774)));
evalcond[8]=(((r10*x15777))+((x15772*x15788))+(((-1.0)*x15775*x15788))+(((-1.0)*x15779*x15780))+((r11*x15776))+(((-1.0)*x15780*x15783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15789=((1.0)*sj0);
IkReal x15790=((1.0)*cj0);
CheckValue<IkReal> x15791=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15791.valid){
continue;
}
CheckValue<IkReal> x15792 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15790))+(((-1.0)*r12*x15789)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x15790))+(((-1.0)*r11*sj5*x15789))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15791.value)))+(x15792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15793=IKsin(j4);
IkReal x15794=IKcos(j4);
IkReal x15795=(r11*sj5);
IkReal x15796=(cj5*r10);
IkReal x15797=(sj1*sj2);
IkReal x15798=(cj5*sj3);
IkReal x15799=((1.0)*sj0);
IkReal x15800=(cj3*cj5);
IkReal x15801=(cj3*sj5);
IkReal x15802=(r21*sj5);
IkReal x15803=(cj2*sj1);
IkReal x15804=(sj3*sj5);
IkReal x15805=(r01*sj5);
IkReal x15806=((1.0)*cj0);
IkReal x15807=(cj1*sj2);
IkReal x15808=((1.0)*x15794);
IkReal x15809=((1.0)*x15793);
IkReal x15810=(cj3*x15794);
IkReal x15811=((1.0)*cj1*cj2);
IkReal x15812=(cj3*x15793);
evalcond[0]=((((-1.0)*cj5*r20*x15809))+(((-1.0)*r22*x15808))+((x15793*x15802)));
evalcond[1]=(((x15793*x15795))+(((-1.0)*r12*x15808))+cj0+(((-1.0)*x15796*x15809)));
evalcond[2]=((((-1.0)*cj5*r00*x15809))+(((-1.0)*x15799))+(((-1.0)*r02*x15808))+((x15793*x15805)));
evalcond[3]=((((-1.0)*r20*x15800*x15808))+((r22*x15812))+((r21*x15798))+((r21*x15794*x15801))+x15807+x15803+((r20*x15804)));
evalcond[4]=((((-1.0)*x15811))+((r20*x15794*x15798))+((r21*x15800))+x15797+(((-1.0)*sj3*x15802*x15808))+(((-1.0)*r22*sj3*x15809))+((r20*x15801)));
evalcond[5]=(((cj0*x15797))+(((-1.0)*r00*x15800*x15808))+((r02*x15812))+((r01*x15798))+((r00*x15804))+(((-1.0)*cj1*cj2*x15806))+((r01*x15794*x15801)));
evalcond[6]=(((r10*x15804))+((r11*x15798))+((r12*x15812))+(((-1.0)*cj1*cj2*x15799))+(((-1.0)*cj3*x15796*x15808))+((sj0*x15797))+((x15795*x15810)));
evalcond[7]=(((r00*x15794*x15798))+(((-1.0)*r02*sj3*x15809))+((r01*x15800))+(((-1.0)*x15806*x15807))+(((-1.0)*x15803*x15806))+((r00*x15801))+(((-1.0)*r01*x15804*x15808)));
evalcond[8]=(((r10*x15801))+((sj3*x15794*x15796))+(((-1.0)*sj3*x15795*x15808))+((r11*x15800))+(((-1.0)*r12*sj3*x15809))+(((-1.0)*x15799*x15803))+(((-1.0)*x15799*x15807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15813=((1.0)*cj5);
CheckValue<IkReal> x15814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15813)))),-1);
if(!x15814.valid){
continue;
}
CheckValue<IkReal> x15815 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15813))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15814.value)))+(x15815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15816=IKsin(j4);
IkReal x15817=IKcos(j4);
IkReal x15818=(r11*sj5);
IkReal x15819=(cj5*r10);
IkReal x15820=(sj1*sj2);
IkReal x15821=(cj5*sj3);
IkReal x15822=((1.0)*sj0);
IkReal x15823=(cj3*cj5);
IkReal x15824=(cj3*sj5);
IkReal x15825=(r21*sj5);
IkReal x15826=(cj2*sj1);
IkReal x15827=(sj3*sj5);
IkReal x15828=(r01*sj5);
IkReal x15829=((1.0)*cj0);
IkReal x15830=(cj1*sj2);
IkReal x15831=((1.0)*x15817);
IkReal x15832=((1.0)*x15816);
IkReal x15833=(cj3*x15817);
IkReal x15834=((1.0)*cj1*cj2);
IkReal x15835=(cj3*x15816);
evalcond[0]=(((x15816*x15825))+(((-1.0)*r22*x15831))+(((-1.0)*cj5*r20*x15832)));
evalcond[1]=(cj0+(((-1.0)*x15819*x15832))+((x15816*x15818))+(((-1.0)*r12*x15831)));
evalcond[2]=((((-1.0)*r02*x15831))+(((-1.0)*x15822))+((x15816*x15828))+(((-1.0)*cj5*r00*x15832)));
evalcond[3]=(((r20*x15827))+((r22*x15835))+((r21*x15817*x15824))+(((-1.0)*r20*x15823*x15831))+((r21*x15821))+x15830+x15826);
evalcond[4]=(((r20*x15817*x15821))+((r20*x15824))+(((-1.0)*sj3*x15825*x15831))+(((-1.0)*r22*sj3*x15832))+((r21*x15823))+(((-1.0)*x15834))+x15820);
evalcond[5]=(((r02*x15835))+((r01*x15821))+((r00*x15827))+(((-1.0)*r00*x15823*x15831))+(((-1.0)*cj1*cj2*x15829))+((r01*x15817*x15824))+((cj0*x15820)));
evalcond[6]=(((x15818*x15833))+((r12*x15835))+(((-1.0)*cj1*cj2*x15822))+((r10*x15827))+(((-1.0)*cj3*x15819*x15831))+((r11*x15821))+((sj0*x15820)));
evalcond[7]=((((-1.0)*r02*sj3*x15832))+((r00*x15817*x15821))+((r01*x15823))+((r00*x15824))+(((-1.0)*x15826*x15829))+(((-1.0)*r01*x15827*x15831))+(((-1.0)*x15829*x15830)));
evalcond[8]=((((-1.0)*x15822*x15826))+((r10*x15824))+(((-1.0)*r12*sj3*x15832))+((sj3*x15817*x15819))+(((-1.0)*sj3*x15818*x15831))+((r11*x15823))+(((-1.0)*x15822*x15830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15836=((1.0)*cj5);
CheckValue<IkReal> x15837 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15837.valid){
continue;
}
CheckValue<IkReal> x15838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15836)))),-1);
if(!x15838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15837.value)+(((1.5707963267949)*(x15838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15839=IKsin(j4);
IkReal x15840=IKcos(j4);
IkReal x15841=(r11*sj5);
IkReal x15842=(cj5*r10);
IkReal x15843=(sj1*sj2);
IkReal x15844=(cj5*sj3);
IkReal x15845=((1.0)*sj0);
IkReal x15846=(cj3*cj5);
IkReal x15847=(cj3*sj5);
IkReal x15848=(r21*sj5);
IkReal x15849=(cj2*sj1);
IkReal x15850=(sj3*sj5);
IkReal x15851=(r01*sj5);
IkReal x15852=((1.0)*cj0);
IkReal x15853=(cj1*sj2);
IkReal x15854=((1.0)*x15840);
IkReal x15855=((1.0)*x15839);
IkReal x15856=(cj3*x15840);
IkReal x15857=((1.0)*cj1*cj2);
IkReal x15858=(cj3*x15839);
evalcond[0]=(((x15839*x15848))+(((-1.0)*cj5*r20*x15855))+(((-1.0)*r22*x15854)));
evalcond[1]=(cj0+(((-1.0)*x15842*x15855))+(((-1.0)*r12*x15854))+((x15839*x15841)));
evalcond[2]=((((-1.0)*r02*x15854))+((x15839*x15851))+(((-1.0)*x15845))+(((-1.0)*cj5*r00*x15855)));
evalcond[3]=(((r20*x15850))+((r21*x15840*x15847))+((r21*x15844))+((r22*x15858))+x15849+x15853+(((-1.0)*r20*x15846*x15854)));
evalcond[4]=(((r20*x15840*x15844))+((r20*x15847))+((r21*x15846))+(((-1.0)*x15857))+(((-1.0)*r22*sj3*x15855))+(((-1.0)*sj3*x15848*x15854))+x15843);
evalcond[5]=(((r01*x15844))+((r01*x15840*x15847))+((r00*x15850))+((r02*x15858))+(((-1.0)*cj1*cj2*x15852))+((cj0*x15843))+(((-1.0)*r00*x15846*x15854)));
evalcond[6]=(((r11*x15844))+((r12*x15858))+((x15841*x15856))+(((-1.0)*cj3*x15842*x15854))+(((-1.0)*cj1*cj2*x15845))+((r10*x15850))+((sj0*x15843)));
evalcond[7]=(((r01*x15846))+((r00*x15847))+(((-1.0)*r02*sj3*x15855))+(((-1.0)*r01*x15850*x15854))+((r00*x15840*x15844))+(((-1.0)*x15852*x15853))+(((-1.0)*x15849*x15852)));
evalcond[8]=(((r11*x15846))+(((-1.0)*x15845*x15849))+((r10*x15847))+(((-1.0)*r12*sj3*x15855))+(((-1.0)*sj3*x15841*x15854))+(((-1.0)*x15845*x15853))+((sj3*x15840*x15842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15859=cj5*cj5;
IkReal x15860=r21*r21;
IkReal x15861=r20*r20;
IkReal x15862=(r20*r21);
IkReal x15863=((1.0)*cj3);
IkReal x15864=((1.0)*cj5);
IkReal x15865=(cj1*sj2);
IkReal x15866=(cj5*sj5);
IkReal x15867=(sj3*sj5);
IkReal x15868=(cj2*sj1);
IkReal x15869=(r21*sj5);
CheckValue<IkReal> x15870 = IKatan2WithCheck(IkReal((((r22*x15868))+((r22*x15865))+((cj5*r21*r22*sj3))+((r20*r22*x15867)))),IkReal(((((-2.0)*sj3*x15859*x15862))+((sj3*x15862))+(((-1.0)*r20*x15864*x15865))+(((-1.0)*r20*x15864*x15868))+((x15865*x15869))+(((-1.0)*x15861*x15864*x15867))+((sj3*x15860*x15866))+((x15868*x15869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15870.valid){
continue;
}
CheckValue<IkReal> x15871=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x15862*x15866))+(((-1.0)*x15859*x15861*x15863))+((cj3*x15859*x15860))+(((-1.0)*x15863*(r22*r22)))+(((-1.0)*x15860*x15863)))),-1);
if(!x15871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15870.value)+(((1.5707963267949)*(x15871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15872=IKsin(j4);
IkReal x15873=IKcos(j4);
IkReal x15874=(cj3*r21);
IkReal x15875=(r21*sj5);
IkReal x15876=(r20*sj5);
IkReal x15877=(cj5*r20);
IkReal x15878=((1.0)*x15873);
IkReal x15879=((1.0)*x15872);
evalcond[0]=(((x15872*x15875))+(((-1.0)*x15877*x15879))+(((-1.0)*r22*x15878)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x15877*x15878))+((sj3*x15876))+((sj5*x15873*x15874))+((cj3*r22*x15872)));
evalcond[2]=(((cj3*x15876))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15879))+((cj5*x15874))+((sj3*x15873*x15877))+(((-1.0)*sj3*x15875*x15878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15880=(cj5*sj4);
IkReal x15881=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15881))+(((-1.0)*r00*x15880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15880))+(((-1.0)*r11*x15881))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15881))+(((-1.0)*r00*x15880))))+IKsqr((((r10*x15880))+(((-1.0)*r11*x15881))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15881))+(((-1.0)*r00*x15880))), (((r10*x15880))+(((-1.0)*r11*x15881))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15882=IKcos(j0);
IkReal x15883=IKsin(j0);
IkReal x15884=(r02*sj4);
IkReal x15885=((1.0)*sj3);
IkReal x15886=(r12*sj4);
IkReal x15887=((0.21325)*cj2);
IkReal x15888=((1.0)*cj3);
IkReal x15889=((1.0)*sj2);
IkReal x15890=(r11*sj5);
IkReal x15891=(cj5*r01);
IkReal x15892=(cj5*r11);
IkReal x15893=(r00*sj5);
IkReal x15894=((1.0)*cj2);
IkReal x15895=(r10*sj5);
IkReal x15896=((1.0)*cj4);
IkReal x15897=(cj1*x15883);
IkReal x15898=(cj4*cj5*r00);
IkReal x15899=(cj1*x15882);
IkReal x15900=(cj4*cj5*r10);
IkReal x15901=(cj4*r01*sj5);
IkReal x15902=((0.21325)*sj1*sj2);
IkReal x15903=(sj1*x15882);
IkReal x15904=((1.0)*cj5*sj4);
IkReal x15905=(sj1*x15883);
evalcond[0]=(((sj4*x15890))+(((-1.0)*r10*x15904))+(((-1.0)*r12*x15896))+x15882);
evalcond[1]=((((-1.0)*r00*x15904))+(((-1.0)*r02*x15896))+(((-1.0)*x15883))+((r01*sj4*sj5)));
evalcond[2]=((((-0.08535)*x15893))+(((-0.08535)*x15891))+(((-1.0)*x15882*x15902))+(((-1.0)*px))+(((-0.11235)*x15883))+((x15887*x15899))+(((0.24365)*x15899)));
evalcond[3]=((((-0.08535)*x15892))+(((-0.08535)*x15895))+(((0.11235)*x15882))+(((-1.0)*py))+((x15887*x15897))+(((0.24365)*x15897))+(((-1.0)*x15883*x15902)));
evalcond[4]=(((sj2*x15903))+(((-1.0)*x15894*x15899))+(((-1.0)*x15888*x15898))+((cj3*x15884))+((sj3*x15893))+((sj3*x15891))+((cj3*x15901)));
evalcond[5]=(((sj2*x15905))+(((-1.0)*x15894*x15897))+((cj3*x15886))+(((-1.0)*x15888*x15900))+((cj3*cj4*x15890))+((sj3*x15892))+((sj3*x15895)));
evalcond[6]=((((-1.0)*x15885*x15901))+(((-1.0)*x15894*x15903))+(((-1.0)*x15889*x15899))+((cj3*x15891))+((cj3*x15893))+(((-1.0)*x15884*x15885))+((sj3*x15898)));
evalcond[7]=((((-1.0)*cj4*x15885*x15890))+(((-1.0)*x15894*x15905))+(((-1.0)*x15885*x15886))+((sj3*x15900))+(((-1.0)*x15889*x15897))+((cj3*x15895))+((cj3*x15892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15906=cj5*cj5;
IkReal x15907=r21*r21;
IkReal x15908=r20*r20;
IkReal x15909=(r20*r21);
IkReal x15910=(sj1*sj2);
IkReal x15911=(r21*sj5);
IkReal x15912=(cj1*cj2);
IkReal x15913=(cj5*r20);
IkReal x15914=(cj5*sj5);
IkReal x15915=(cj3*r22);
IkReal x15916=(sj3*x15907);
CheckValue<IkReal> x15917=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15906*x15916))+((sj3*x15906*x15908))+(((-2.0)*sj3*x15909*x15914))+x15916)),-1);
if(!x15917.valid){
continue;
}
CheckValue<IkReal> x15918 = IKatan2WithCheck(IkReal((((r22*x15910))+(((-1.0)*r22*x15912))+((r20*sj5*x15915))+((cj5*r21*x15915)))),IkReal((((x15912*x15913))+(((-1.0)*x15911*x15912))+((x15910*x15911))+(((-1.0)*x15910*x15913))+(((-1.0)*cj3*x15908*x15914))+(((-2.0)*cj3*x15906*x15909))+((cj3*x15909))+((cj3*x15907*x15914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15917.value)))+(x15918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15919=IKsin(j4);
IkReal x15920=IKcos(j4);
IkReal x15921=(cj3*r21);
IkReal x15922=(r21*sj5);
IkReal x15923=(r20*sj5);
IkReal x15924=(cj5*r20);
IkReal x15925=((1.0)*x15920);
IkReal x15926=((1.0)*x15919);
evalcond[0]=((((-1.0)*x15924*x15926))+(((-1.0)*r22*x15925))+((x15919*x15922)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15924*x15925))+((cj5*r21*sj3))+((cj3*r22*x15919))+((cj1*sj2))+((sj3*x15923))+((sj5*x15920*x15921)));
evalcond[2]=((((-1.0)*cj1*cj2))+((cj3*x15923))+((sj1*sj2))+(((-1.0)*sj3*x15922*x15925))+(((-1.0)*r22*sj3*x15926))+((cj5*x15921))+((sj3*x15920*x15924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15927=(cj5*sj4);
IkReal x15928=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927))))+IKsqr((((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927))), (((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15929=IKcos(j0);
IkReal x15930=IKsin(j0);
IkReal x15931=(r02*sj4);
IkReal x15932=((1.0)*sj3);
IkReal x15933=(r12*sj4);
IkReal x15934=((0.21325)*cj2);
IkReal x15935=((1.0)*cj3);
IkReal x15936=((1.0)*sj2);
IkReal x15937=(r11*sj5);
IkReal x15938=(cj5*r01);
IkReal x15939=(cj5*r11);
IkReal x15940=(r00*sj5);
IkReal x15941=((1.0)*cj2);
IkReal x15942=(r10*sj5);
IkReal x15943=((1.0)*cj4);
IkReal x15944=(cj1*x15930);
IkReal x15945=(cj4*cj5*r00);
IkReal x15946=(cj1*x15929);
IkReal x15947=(cj4*cj5*r10);
IkReal x15948=(cj4*r01*sj5);
IkReal x15949=((0.21325)*sj1*sj2);
IkReal x15950=(sj1*x15929);
IkReal x15951=((1.0)*cj5*sj4);
IkReal x15952=(sj1*x15930);
evalcond[0]=((((-1.0)*r12*x15943))+((sj4*x15937))+(((-1.0)*r10*x15951))+x15929);
evalcond[1]=((((-1.0)*r02*x15943))+(((-1.0)*r00*x15951))+(((-1.0)*x15930))+((r01*sj4*sj5)));
evalcond[2]=(((x15934*x15946))+(((-1.0)*x15929*x15949))+(((0.24365)*x15946))+(((-0.08535)*x15940))+(((-1.0)*px))+(((-0.08535)*x15938))+(((-0.11235)*x15930)));
evalcond[3]=(((x15934*x15944))+(((0.24365)*x15944))+(((-0.08535)*x15942))+(((-1.0)*x15930*x15949))+(((0.11235)*x15929))+(((-1.0)*py))+(((-0.08535)*x15939)));
evalcond[4]=(((cj3*x15948))+(((-1.0)*x15935*x15945))+((cj3*x15931))+(((-1.0)*x15941*x15946))+((sj3*x15940))+((sj2*x15950))+((sj3*x15938)));
evalcond[5]=((((-1.0)*x15935*x15947))+((cj3*x15933))+(((-1.0)*x15941*x15944))+((sj3*x15942))+((sj2*x15952))+((cj3*cj4*x15937))+((sj3*x15939)));
evalcond[6]=(((cj3*x15940))+(((-1.0)*x15931*x15932))+(((-1.0)*x15932*x15948))+(((-1.0)*x15936*x15946))+((cj3*x15938))+(((-1.0)*x15941*x15950))+((sj3*x15945)));
evalcond[7]=(((cj3*x15942))+(((-1.0)*x15932*x15933))+(((-1.0)*x15936*x15944))+((cj3*x15939))+(((-1.0)*cj4*x15932*x15937))+(((-1.0)*x15941*x15952))+((sj3*x15947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur3 (a4e74b5ac9729e4e55da62188f40fd43)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
